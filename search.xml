<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库连接池到底应该设多大？颠覆你的认知</title>
      <link href="/2021/08/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E8%AE%BE%E5%A4%9A%E5%A4%A7%EF%BC%9F%E9%A2%A0%E8%A6%86%E4%BD%A0%E7%9A%84%E8%AE%A4%E7%9F%A5/"/>
      <url>/2021/08/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E8%AE%BE%E5%A4%9A%E5%A4%A7%EF%BC%9F%E9%A2%A0%E8%A6%86%E4%BD%A0%E7%9A%84%E8%AE%A4%E7%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>我在研究HikariCP（一个数据库连接池）时无意间在HikariCP的Github wiki上看到了一篇文章（即前面给出的链接），这篇文章有力地消除了我一直以来的疑虑，看完之后感觉神清气爽。故在此做译文分享。</p><p>数据库连接池的配置是开发者们常常搞出坑的地方，在配置数据库连接池时，有几个可以说是和直觉背道而驰的原则需要明确。</p><h2 id="1万并发用户访问"><a href="#1万并发用户访问" class="headerlink" title="1万并发用户访问"></a>1万并发用户访问</h2><p>想象你有一个网站，压力虽然还没到Facebook那个级别，但也有个1万上下的并发访问——也就是说差不多2万左右的TPS。那么这个网站的数据库连接池应该设置成多大呢？结果可能会让你惊讶，因为这个问题的正确问法是：</p><blockquote><p>“这个网站的数据库连接池应该设置成多小呢？”</p></blockquote><p>下面这个视频是Oracle Real World Performance Group发布的，请先看完：</p><blockquote><p><a href="http://www.dailymotion.com/video/x2s8uec" target="_blank" rel="noopener">http://www.dailymotion.com/video/x2s8uec</a></p></blockquote><p>（因为这视频是英文解说且没有字幕，我替大家做一下简单的概括：）<br><code>视频中对Oracle数据库进行压力测试，9600并发线程进行数据库操作，每两次访问数据库的操作之间sleep 550ms，一开始设置的中间件线程池大小为2048：</code></p><blockquote><p><code>初始的配置</code></p></blockquote><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTMwNjZkMjdhY2M4MTVjZGEucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMzc0L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p>压测跑起来之后是这个样子的：</p><blockquote><p><code>2048连接时的性能数据</code></p></blockquote><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTI5MWZmMTQzMGEwNGM1MGIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMzkzL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p><code>每个请求要在连接池队列里等待33ms，获得连接后执行SQL需要77ms</code></p><p>此时数据库的等待事件是这个熊样的：<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTRkODNlZjFhNTA1M2RkMmIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMzkzL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p>各种buffer busy waits，数据库CPU在95%左右（这张图里没截到CPU）</p><p><code>接下来，把中间件连接池减到1024（并发什么的都不变），性能数据变成了这样：</code><br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTRjZDczYzNjYzA1YTg2ZDcucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMzk2L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p><code>获取链接等待时长没怎么变，但是执行SQL的耗时减少了。</code><br>下面这张图，上半部分是wait，下半部分是吞吐量<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTNhY2EzMGIwODVlNGM1MjUucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTc1L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p>能看到，<code>中间件连接池从2048减半之后，吐吞量没变，但wait事件减少了一半。</code></p><p>接下来，<code>把数据库连接池减到96，并发线程数仍然是9600不变。</code></p><blockquote><p><code>96个连接时的性能数据</code><br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTM1MDUzYTVjODVjODVkZjQucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvNTIyL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p></blockquote><p>队列平均等待1ms，执行SQL平均耗时2ms。<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTAzOWJiNzZlYWY2NGNkMzIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMjE4L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p>`wait事件几乎没了，吞吐量上升。</p><p>没有调整任何其他东西，仅仅只是缩小了中间件层的数据库连接池，就把请求响应时间从100ms左右缩短到了3ms。`</p><h2 id="But-why"><a href="#But-why" class="headerlink" title="But why?"></a>But why?</h2><p>为什么nginx只用4个线程发挥出的性能就大大超越了100个进程的Apache HTTPD？回想一下计算机科学的基础知识，答案其实是很明显的。</p><blockquote><p>即使是单核CPU的计算机也能“同时”运行数百个线程。但我们都[应该]知道这只不过是操作系统用时间分片玩的一个小把戏。一颗CPU核心同一时刻只能执行一个线程，然后操作系统切换上下文，核心开始执行另一个线程的代码，以此类推。给定一颗CPU核心，其顺序执行A和B永远比通过时间分片“同时”执行A和B要快，这是一条计算机科学的基本法则。一旦线程的数量超过了CPU核心的数量，再增加线程数系统就只会更慢，而不是更快。</p></blockquote><p>这几乎就是真理了……</p><h2 id="有限的资源"><a href="#有限的资源" class="headerlink" title="有限的资源"></a>有限的资源</h2><p>上面的说法只能说是接近真理，但还并没有这么简单，有一些其他的因素需要加入。<code>当我们寻找数据库的性能瓶颈时，总是可以将其归为三类：CPU、磁盘、网络。</code>把内存加进来也没有错，但比起磁盘和网络，内存的带宽要高出好几个数量级，所以就先不加了。</p><blockquote><p>如果我们无视磁盘和网络，那么结论就非常简单。在一个8核的服务器上，设定连接/线程数为8能够提供最优的性能，再增加连接数就会因上下文切换的损耗导致性能下降。数据库通常把数据存储在磁盘上，磁盘又通常是由一些旋转着的金属碟片和一个装在步进马达上的读写头组成的。读/写头同一时刻只能出现在一个地方，然后它必须“寻址”到另外一个位置来执行另一次读写操作。所以就有了寻址的耗时，此外还有旋回耗时，读写头需要等待碟片上的目标数据“旋转到位”才能进行操作。使用缓存当然是能够提升性能的，但上述原理仍然成立。</p></blockquote><p>在这一时间段（即”I/O等待”）内，线程是在“阻塞”着等待磁盘，此时操作系统可以将那个空闲的CPU核心用于服务其他线程。所以，由于线程总是在I/O上阻塞，我们可以让线程/连接数比CPU核心多一些，这样能够在同样的时间内完成更多的工作。</p><blockquote><p><code>那么应该多多少呢？</code>这要取决于磁盘。较新型的SSD不需要寻址，也没有旋转的碟片。可别想当然地认为“SSD速度更快，所以我们应该增加线程数”，恰恰相反，<code>无需寻址和没有旋回耗时意味着更少的阻塞</code>，所以更少的线程[更接近于CPU核心数]会发挥出更高的性能。只有当阻塞创造了更多的执行机会时，更多的线程数才能发挥出更好的性能。</p></blockquote><p><code>网络和磁盘类似。通过以太网接口读写数据时也会形成阻塞，10G带宽会比1G带宽的阻塞少一些，1G带宽又会比100M带宽的阻塞少一些。</code>不过网络通常是放在第三位考虑的，有些人会在性能计算中忽略它们。<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTY5NDI5ZDNkOWE2ZDkyNjEucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvNjQzL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p>上图是PostgreSQL的benchmark数据，可以看到TPS增长率从50个连接数开始变缓。<code>在上面Oracle的视频中，他们把连接数从2048降到了96，实际上96都太高了，除非服务器有16或32颗核心。</code></p><h2 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h2><p>下面的公式是由PostgreSQL提供的，不过我们认为可以广泛地应用于大多数数据库产品。你应该模拟预期的访问量，并从这一公式开始测试你的应用，寻找最合适的连接数值。</p><blockquote><p><code>连接数 = ((核心数 * 2) + 有效磁盘数)</code></p></blockquote><br>>核心数不应包含超线程(hyper thread)，即使打开了hyperthreading也是。如果活跃数据全部被缓存了，那么有效磁盘数是0，随着缓存命中率的下降，有效磁盘数逐渐趋近于实际的磁盘数。这一公式作用于SSD时的效果如何尚未有分析。<p><code>按这个公式，你的4核i7数据库服务器的连接池大小应该为((4 * 2) + 1) = 9。</code>取个整就算是是10吧。是不是觉得太小了？跑个性能测试试一下，我们保证它能轻松搞定3000用户以6000TPS的速率并发执行简单查询的场景。如果连接池大小超过10，你会看到响应时长开始增加，TPS开始下降。</p><blockquote><p>笔者注：<br><code>这一公式其实不仅适用于数据库连接池的计算，大部分涉及计算和I/O的程序，线程数的设置都可以参考这一公式。我之前在对一个使用Netty编写的消息收发服务进行压力测试时，最终测出的最佳线程数就刚好是CPU核心数的一倍。</code></p></blockquote><p><strong>公理：</strong><code>你需要一个小连接池，和一个充满了等待连接的线程的队列</code><br>如果你有10000个并发用户，设置一个10000的连接池基本等于失了智。1000仍然很恐怖。即是100也太多了。你需要一个10来个连接的小连接池，然后让剩下的业务线程都在队列里等待。连接池中的连接数量应该等于你的数据库能够有效同时进行的查询任务数（通常不会高于2*CPU核心数）。</p><p>我们经常见到一些小规模的web应用，应付着大约十来个的并发用户，却使用着一个100连接数的连接池。这会对你的数据库造成极其不必要的负担。</p><p><strong>请注意</strong><br>连接池的大小最终与系统特性相关。</p><p>比如一个混合了长事务和短事务的系统，通常是任何连接池都难以进行调优的。<code>最好的办法是创建两个连接池，一个服务于长事务，一个服务于短事务。</code></p><p>再例如一个系统执行一个任务队列，只允许一定数量的任务同时执行，此时并发任务数应该去适应连接池连接数，而不是反过来。</p><blockquote><p>原文：<a href="https://www.jianshu.com/p/a8f653fc0c54" target="_blank" rel="noopener">https://www.jianshu.com/p/a8f653fc0c54</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何把Java的Jar包做成exe？超详细教程来了！</title>
      <link href="/2021/08/05/%E5%A6%82%E4%BD%95%E6%8A%8AJava%E7%9A%84Jar%E5%8C%85%E5%81%9A%E6%88%90exe/"/>
      <url>/2021/08/05/%E5%A6%82%E4%BD%95%E6%8A%8AJava%E7%9A%84Jar%E5%8C%85%E5%81%9A%E6%88%90exe/</url>
      
        <content type="html"><![CDATA[<p>近期做了一个前后端合并的spring boot项目，但是要求达成exe文件，提供给不懂电脑的小白安装使用，就去研究了半天，踩了很多坑，写这篇文章，是想看到这篇文章的人，按照我的步骤走，能少踩坑。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><ol><li>一个jar包，没有bug能正常启动的jar包</li><li>exe4j，一个将jar转换成exe的工具，百度链接：<a href="https://pan.baidu.com/s/1J30uUMJcYnqWCJSr6gkM5w，提取码：6esr，注册码：L-g782dn2d-1f1yqxx1rv1sqd" target="_blank" rel="noopener">https://pan.baidu.com/s/1J30uUMJcYnqWCJSr6gkM5w，提取码：6esr，注册码：L-g782dn2d-1f1yqxx1rv1sqd</a></li><li>inno setup，一个将依赖和exe一起打成一个安装程序的工具，链接：<a href="https://pan.baidu.com/s/1DgFo1ceM_8Bqx_b-veibbQ，提取码：g9jd" target="_blank" rel="noopener">https://pan.baidu.com/s/1DgFo1ceM_8Bqx_b-veibbQ，提取码：g9jd</a></li></ol></blockquote><h2 id="制作步骤"><a href="#制作步骤" class="headerlink" title="制作步骤"></a>制作步骤</h2><h3 id="exe4j"><a href="#exe4j" class="headerlink" title="exe4j"></a>exe4j</h3><ul><li>将jar包放在了桌面</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002244748.png" alt=""></p><ul><li>打开安装好的exe4j</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002452495.png" alt=""></p><ul><li>直接下一步进入界面，选择JAVA转EXE</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002540751.png" alt=""></p><ul><li>然后点下一步，输入名称和输出路径</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002646584.png" alt=""></p><ul><li>继续点击下一步，选择启动模式</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002904461.png" alt=""></p><ul><li>下方有个选项，需要设置打包后的程序兼容32和64位系统</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020020400300477.png" alt=""></p><ul><li>进来后勾选上</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003036476.png" alt=""></p><ul><li>然后一直下一步，一直出现如下界面，开始选择jar包以及配置在VM参数配置的地方加上：-Dfile.encoding=utf-8</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003457499.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003530510.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003646323.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003700634.png" alt=""></p><ul><li>点击下一步，配置JRE</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003848260.png" alt=""></p><ul><li>下拉框点击后进入如下界面</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003959383.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004026684.png" alt=""></p><ul><li>照着这个样子写的目的是，最终会把本地jre目录和exe一起打包，让exe文件自己去根据路径去查找一起打包的jre，可不用再安装jdk</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004122719.png" alt=""></p><ul><li>接着下一步，选择Client VM</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004404491.png" alt=""></p><ul><li>然后一直下一步，最终出现如下界面</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004451130.png" alt=""></p><h3 id="inno-setup"><a href="#inno-setup" class="headerlink" title="inno setup"></a>inno setup</h3><ul><li>这个时候你会发现桌面多了一个demo.exe文件，这个时候先别着急点开，接下来就是将jre和exe文件再打个包合并，达到在没有jdk电脑环境下也能运行打开inno setup，左上角File - New</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004721363.png" alt=""></p><ul><li>直接点下一步，填写配置，应用名称，版本等，随意</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004828569.png" alt=""></p><ul><li>然后点击下一步，这个地方默认就行，直接下一步</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020020400490086.png" alt=""></p><ul><li>接着选择生成好的exe文件</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005035248.png" alt=""></p><ul><li>然后下一步，进入这个界面保持默认，直接下一步</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005136140.png" alt=""></p><ul><li>依旧下一步，不用管</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005143994.png" alt=""></p><ul><li>继续下一步，这里是选择语言</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005211217.png" alt=""></p><ul><li>然后就是选择输出路径和填写安装程序的名字了</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005320116.png" alt=""></p><ul><li>然后下一步，直接点Next，然后结束，配置到最后一步了，脚本文件，到这里会弹出问你是否马上编译，选择否，先把脚本写好再自己编译</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005441574.png" alt=""></p><ul><li>然后到了最后一步了，把本地的JRE写进脚本</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005653781.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005804780.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005919893.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/08/05/oO3HIbjr6ESL2C1.png" alt=""></p><ul><li>然后直接编译就好了，会提示保存当前脚本，随便起个名字，下个还可以继续用</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010100205.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010143208.png" alt=""></p><ul><li>然后等待绿色滚动条结束</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010154655.png" alt=""></p><ul><li>当绿色滚动条结束后，桌面会多了一个setup.exe文件</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010504973.png" alt=""></p><ul><li>也同时会跳出一个安装的，因为程序帮你自动启动生成的安装程序了，安装就可以了，安装的时候记得勾选创建快捷方式</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010605563.png" alt=""></p><ul><li>这个就是最后的程序了，双击运行就可以看到结果了，把setup.exe文件给别人安装，就都可以看到自己的程序了</li></ul><blockquote><p>原文：<a href="https://blog.csdn.net/m0_37701381/article/details/104163877" target="_blank" rel="noopener">https://blog.csdn.net/m0_37701381/article/details/104163877</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jar </tag>
            
            <tag> exe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>compileflow 淘宝工作流引擎</title>
      <link href="/2021/07/22/compileflow%20%E6%B7%98%E5%AE%9D%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/"/>
      <url>/2021/07/22/compileflow%20%E6%B7%98%E5%AE%9D%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="compileflow是什么"><a href="#compileflow是什么" class="headerlink" title="compileflow是什么"></a>compileflow是什么</h2><p>compileflow是一个非常轻量、高性能、可集成、可扩展的流程引擎。</p><p>compileflow Process引擎是淘宝工作流TBBPM引擎之一，是专注于纯内存执行，无状态的流程引擎，通过将流程文件转换生成java代码编译执行，简洁高效。当前是阿里业务中台交易等多个核心系统的流程引擎。</p><p>compileflow能让开发人员通过流程编辑器设计自己的业务流程，将复杂的业务逻辑可视化，为业务设计人员与开发工程师架起了一座桥梁。</p><blockquote><p><a href="https://github.com/compileflow/compileflow-designer-upgrade" target="_blank" rel="noopener">最新插件安装包下载</a> </p></blockquote><h2 id="设计意图"><a href="#设计意图" class="headerlink" title="设计意图"></a>设计意图</h2><ol><li>希望为业务开发提供端至端，从设计至实现的业务流程解决方案。</li><li>提供多种流程引擎，实现从战略至商业能力，商业能力至业务流程，业务流程至系统，并最终实现业务的可视化全局架构。</li><li>设计高效的执行引擎，实现对服务的快速组合或扩展，提升idea(构思)至value(价值)的研发响应与交互速度。</li></ol><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><ol><li>高性能：通过将流程文件转换生成java代码编译执行<code>(爽啊，Activiti可没这功能)</code>，简洁高效。</li><li>丰富的应用场景：在阿里巴巴中台解决方案中广泛使用，支撑了导购、交易、履约、资金等多个业务场景。</li><li>可集成：轻量、简洁的设计使得可以极其方便地集成到各个解决方案和业务场景中。</li><li>完善的插件支持：流程设计目前有IntelliJ IDEA、Eclipse插件支持，可以在流程设计中实时动态生成java代码并预览，所见即所得。</li><li>支持流程设计图导出svg文件和单元测试代码。</li></ol><h2 id="IntelliJ-IDEA安装插件"><a href="#IntelliJ-IDEA安装插件" class="headerlink" title="IntelliJ IDEA安装插件"></a>IntelliJ IDEA安装插件</h2><blockquote><p><code>注意: compileflow仅支持JDK 1.8及以上版本。</code></p></blockquote><p>以IntelliJ IDEA 2019版本为例，下载最新包到本地</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/C1USc8xzsgHoyAT.png" alt="微信图片_20210722112025.png"></p><p>使用本地安装的方式安装，注意安装整个zip不用手动解压 </p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/WbBXhDQMPUfrwoK.png" alt="微信图片_20210722113354.png"></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/yAnptbmq6PrvUeQ.png" alt="微信图片_20210722113123.png"></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/o6Q8luLqvBGIeUc.png" alt="微信图片_20210722113159.png"></p><p>重启IntelliJ IDEA就会生效</p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><p>如果Maven项目，需引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.compileflow<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>compileflow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><h4 id="新建BPM文件"><a href="#新建BPM文件" class="headerlink" title="新建BPM文件"></a>新建BPM文件</h4><ul><li><p>可在resources目录下创建，选中resources目录右键点击【Create New Bpm<br>File】。例如我这边创建在resources的bpm目录下。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/M5rhKWqGlnoQsBj.png" alt=""></p></li><li><p>输入文件名，例如：我这里的hello<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/vzokpQNTjqbZlPd.png" alt=""></p></li><li><p>插件默认会生成了hello.bpm文件，是一个简单的开平方根demo流程，如下图<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/4S8xPMGQrznsu7W.png" alt=""></p></li></ul><h4 id="可视化编辑"><a href="#可视化编辑" class="headerlink" title="可视化编辑"></a>可视化编辑</h4><ul><li><p>你可以选择下方【process-flow】进行可视化编辑，从左侧拖入节点到画布，或者选中节点拖动。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/pNi38WaMHI5xon2.png" alt=""></p></li><li><p>双击空白处可编辑全局参数<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/oBctevwJzYUg4q5.png" alt=""></p></li></ul><ul><li>双击节点可以编辑节点参数（拖拽可调整节点位置）<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/Sey9Xr1TJcbdasz.png" alt=""></li></ul><h4 id="Java代码预览"><a href="#Java代码预览" class="headerlink" title="Java代码预览"></a>Java代码预览</h4><ul><li>可以选择下方【java code】进行Java代码预览。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/z1RWMcSvdkB4ugV.png" alt=""></li></ul><h4 id="创建测试代码"><a href="#创建测试代码" class="headerlink" title="创建测试代码"></a>创建测试代码</h4><ul><li><p>选中文件右键，点击【Create New Bpm JUnit Test】可自动生成测试类<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/yb2NYWcHoJzgVaT.png" alt=""></p></li><li><p>到指定路径查看生成的测试类（修改入参数运行整个demo就完成了）<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/nRAm1NB8DIZgk3S.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> compileflow </tag>
            
            <tag> Activiti </tag>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq 消息延迟推送--插件模式</title>
      <link href="/2021/07/13/rabbitmq%20%E6%B6%88%E6%81%AF%E5%BB%B6%E8%BF%9F%E6%8E%A8%E9%80%81--%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/07/13/rabbitmq%20%E6%B6%88%E6%81%AF%E5%BB%B6%E8%BF%9F%E6%8E%A8%E9%80%81--%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>目前常见的应用软件都有消息的延迟推送的影子，应用也极为广泛，例如：</p><ul><li>淘宝七天自动确认收货。在签收商品后，物流系统会在七天后延时发送一个消息给支付系统，通知支付系统将款打给商家，这个过程持续七天，就是使用了消息中间件的延迟推送功能。</li><li>12306 购票支付确认页面。在选好票点击确定跳转的页面中往往都会有倒计时，代表着 30分钟内订单不确认的话将会自动取消订单。其实在下订单那一刻开始购票业务系统就会发送一个延时消息给订单系统，延时30分钟，告诉订单系统订单未完成，如果我们在30分钟内完成了订单，则可以通过逻辑代码判断来忽略掉收到的消息。</li></ul><p>在上面两种场景中，如果使用下面两种传统解决方案无疑大大降低了系统的整体性能和吞吐量：</p><ul><li>使用 redis 给订单设置过期时间，最后通过判断 redis中是否还有该订单来决定订单是否已经完成。这种解决方案相较于消息的延迟推送性能较低，因为我们知道redis都是存储于内存中，我们遇到恶意下单或者刷单的将会给内存带来巨大压力。</li><li>使用传统的数据库轮询来判断数据库表中订单的状态，这无疑增加了IO次数，性能极低。</li><li>使用 jvm 原生的 DelayQueue，也是大量占用内存，而且没有持久化策略，系统宕机或者重启都会丢失订单信息。</li></ul><p><code>之前一般采用死信队列+TTL过期时间来实现延迟队列，现在RabbitMQ 官方提供了延迟队列的插件，这个插件是实验性的，但相当稳定，废话不多说开整</code></p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><ul><li><p>此插件需要 Erlang 23.2 或更高版本。<a href="https://www.erlang.org/downloads" target="_blank" rel="noopener">Erlang windows下载</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/ixcSFRsLmgYr6Ip.png" alt=""></p></li><li><p>最新版本针对 RabbitMQ3.8.x，较早的系列已不受支持。<a href="https://www.rabbitmq.com/install-windows.html" target="_blank" rel="noopener">RabbitMQ下载</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/rXgpzQeiwhuft19.png" alt=""></p></li><li><p>RabbitMQ 官方提供的延迟队列插件，下载放置到 RabbitMQ 根目录下的 plugins 内。<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases" target="_blank" rel="noopener">延迟队列插件下载</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/BLk7eUylAROVp9C.png" alt=""></p></li><li><p>进入RabbitMQ安装目录的sbin目录下，在cmd窗口使用命令启用延迟插件</p></li></ul><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/GqDQIAdZ45herik.png" alt=""></p><ul><li>禁用插件，使用如下命令，<code>但请注意，所有尚未交付的延迟消息都将丢失</code>。</li></ul><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins disable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/fLWb2iS6mF4wJMa.png" alt=""></p><p><code>注：本demo在windows环境下模拟，插件采用rabbitmq-delayed-message-exchange v3.8.x版本；插件启用或禁用时，若Rabbitmq服务一直是启用状态的话，需重启使其生效</code></p><h2 id="实现延迟推送信息"><a href="#实现延迟推送信息" class="headerlink" title="实现延迟推送信息"></a>实现延迟推送信息</h2><h3 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.goitman<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq-delayed-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Web 项目开发starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 消息队列依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- log4j日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- fastJson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>一般来说消息生产和消费是两个独立的项目，配置应该分开，这里为了方便就整合在一块啦</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="comment"># 连接超时，单位毫秒，0表示无穷大，不超时</span></span><br><span class="line">    <span class="attr">connection-timeout:</span> <span class="number">15000</span></span><br><span class="line">    <span class="comment"># 开启confirm确认机制</span></span><br><span class="line">    <span class="comment">#publisher-confirms: true</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">    <span class="comment"># 开启return确认机制</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 设置为true后，路由不到队列的消息不会被自动删除，从而被return消息模式监听到</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">mandatory:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">listener:</span></span><br><span class="line">    <span class="attr">simple:</span></span><br><span class="line">      <span class="comment"># 表示消息确认方式，其有三种配置方式，分别是none(不确认)、manual(手动确认)和auto(自动确认)；默认auto</span></span><br><span class="line">      <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line">      <span class="comment"># 最小消费者数量</span></span><br><span class="line">      <span class="attr">concurrency:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 最大消费者数量</span></span><br><span class="line">      <span class="attr">max-concurrency:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment"># 在单个请求中处理的消息个数，必须大于等于transaction(事务)数量.</span></span><br><span class="line">      <span class="attr">prefetch:</span> <span class="number">2</span></span><br><span class="line">      <span class="comment"># 当ack模式为auto时，一个事务（ack间）处理的消息数量</span></span><br><span class="line">      <span class="comment">#transaction-size:</span></span><br></pre></td></tr></table></figure><ol><li>在RabbitMQ中可以虚拟消息服务器VirtualHost，每个VirtualHost相当月一个相对独立的RabbitMQ服务器，每个VirtualHost之间是相互隔离的。exchange、queue、message不能互通。</li><li>在springboot2.2.0.RELEASE版本之前是amqp正式支持的属性，用来配置消息发送到交换器之后是否触发回调方法，在2.2.0及之后该属性过期使用spring.rabbitmq.publisher-confirm-type属性配置代替，用来配置更多的确认类型；<ul><li>NONE值是禁用发布确认模式，是默认值</li><li>CORRELATED值是发布消息成功到交换器后会触发回调方法</li><li>SIMPLE值经测试有两种效果，其一效果和CORRELATED值一样会触发回调方法，其二在发布消息成功后使用rabbitTemplate调用waitForConfirms或waitForConfirmsOrDie方法等待broker节点返回发送结果，根据返回结果来判定下一步的逻辑，要注意的点是waitForConfirmsOrDie方法如果返回false则会关闭channel，则接下来无法发送消息到broker;</li></ul></li></ol><h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RabbitmqApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 引导类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 17:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RabbitmqApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>模拟一个订单对象，发送、接收对象信息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Order</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 订单对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 15:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订单ID</span></span><br><span class="line">    <span class="keyword">public</span> String orderId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订单状态，0：投递中、1：消费中、2：消费成功</span></span><br><span class="line">    <span class="keyword">public</span> String orderStatus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(String orderId, String orderStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.orderStatus = orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(String orderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderStatus</span><span class="params">(String orderStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderStatus = orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.RabbitListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RabbitmqConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 配置类，创建交换机、路由键、队列和之间的关联绑定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 17:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(RabbitmqConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAYED_EXCHANGE = <span class="string">"delayedExchange"</span>;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAYED_QUEUE = <span class="string">"delayedQueue"</span>;</span><br><span class="line">    <span class="comment">// 路由键，#匹配一个或多个词</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAYED_KEY = <span class="string">"delayed.#"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建主题模式交换机，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">delayedExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数一：交换机名称；参数二：数据是否持久化；参数三：数据是否自动删除</span></span><br><span class="line">        TopicExchange exchange = <span class="keyword">new</span> TopicExchange(DELAYED_EXCHANGE, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 开启延迟队列</span></span><br><span class="line">        exchange.setDelayed(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> exchange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建队列</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">delayedQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数一：队列名称；参数二：数据是否持久化</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(DELAYED_QUEUE, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定交换机和队列之间的联系，并配置路由键字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">delayedBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue()).to(delayedExchange()).with(DELAYED_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * 消费者JSON数据反序列化</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory)&#123;</span><br><span class="line">        SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">        factory.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">/* 不设置手动确认，将会报错：</span></span><br><span class="line"><span class="comment">         * Channel shutdown: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=406, reply-text=PRECONDITION_FAILED - unknown delivery tag 1, class-id=60, method-id=80)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">        factory.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.config.RabbitmqConfig;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.AmqpException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageDeliveryMode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ProducerSender</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 消息生产者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 16:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ProducerSender<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息发送确认回调方法，确保消息是否发送到交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> RabbitTemplate.ConfirmCallback confirmCallback = <span class="keyword">new</span> RabbitTemplate.ConfirmCallback() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * correlationData：SpringBoot提供的业务标识对象，封装业务ID信息，需要在发送消息时传入此参数，这里才能接收到，否则是null</span></span><br><span class="line"><span class="comment">         * ack：消息发送的结果状态，成功是true，失败是false</span></span><br><span class="line"><span class="comment">         * cause：发送失败的描述信息，如果发送成功是null。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">            logger.info(<span class="string">"correlationData:&#123;&#125;,ack:&#123;&#125;,cause:&#123;&#125;"</span>,correlationData.toString(), ack, cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息发送失败回调方法，可能是队列或路由键不存在等等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> RabbitTemplate.ReturnCallback returnCallback = <span class="keyword">new</span> RabbitTemplate.ReturnCallback() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * message：发送的信息内容</span></span><br><span class="line"><span class="comment">         * replyCode：状态码，200为成功</span></span><br><span class="line"><span class="comment">         * replyText：失败信息</span></span><br><span class="line"><span class="comment">         * exchange：交换机名称</span></span><br><span class="line"><span class="comment">         * routingKey：路由键</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode, String replyText, String exchange, String routingKey)</span> </span>&#123;</span><br><span class="line">            logger.info(<span class="string">"returnedMessage:&#123;&#125;,replyCode:&#123;&#125;,replyText:&#123;&#125;,exchange:&#123;&#125;,routingKey:&#123;&#125;"</span>,</span><br><span class="line">                    <span class="keyword">new</span> String(message.getBody()), replyCode, replyText, exchange, routingKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 消息发送，一般定时任务配合</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 消息发送确认，处理消息到交换机之间的逻辑</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(confirmCallback);</span><br><span class="line">        <span class="comment">// 设为true，消息不会自动删除，而被return消息模式监听</span></span><br><span class="line">        rabbitTemplate.setMandatory(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 消息失败监听，处理交换机到队列之间的逻辑</span></span><br><span class="line">        rabbitTemplate.setReturnCallback(returnCallback);</span><br><span class="line">        <span class="comment">// 生产者JSON数据序列化</span></span><br><span class="line">        rabbitTemplate.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消息发送，标准发送信息和延时发送差异在于MessagePostProcessor</span></span><br><span class="line">        <span class="comment">// rabbitTemplate.convertAndSend(RabbitmqConfig.DELAYED_EXCHANGE,"delayed.boot",message,new CorrelationData(UUID.randomUUID().toString().replace("-","")));</span></span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConfig.DELAYED_EXCHANGE, <span class="string">"delayed.boot"</span>, message, <span class="keyword">new</span> MessagePostProcessor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line">                <span class="comment">// 设置消息持久化</span></span><br><span class="line">                message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);</span><br><span class="line">                <span class="comment">// 设置消息延迟发送时间，单位毫秒ms</span></span><br><span class="line">                message.getMessageProperties().setDelay(<span class="number">6000</span>);</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 消息唯一ID</span></span><br><span class="line">        &#125;, <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ConsumerReceiver</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 消息消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 16:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ConsumerReceiver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ·<span class="doctag">@RabbitListener</span>可以标注在类上，当在类上时需<span class="doctag">@RabbitHandler</span>配合使用，</span></span><br><span class="line"><span class="comment">     * 如有多个<span class="doctag">@RabbitHandler</span>，根据MessageConverter转换后的对象来匹配哪个方法处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ·<span class="doctag">@RabbitListener</span>(queues = "delayedQueue",containerFactory = "")</span></span><br><span class="line"><span class="comment">     * ·containerFactory：可指定一个RabbitListenerContainerFactory的bean，默认为rabbitListenerContainerFactory的实例</span></span><br><span class="line"><span class="comment">     *  也可在rabbitListenerContainerFactory实例上的<span class="doctag">@Bean</span>注解中标记名称如：<span class="doctag">@Bean</span>("rabbitListenerContainerFactory2")</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"delayedQueue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverMessage</span><span class="params">(Message msg , Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 应避免脏数据的接收，若数据一直消费失败而退回队列，队列又一直发送数据给消费者，将造成无限循环，导致内存溢出系统崩溃</span></span><br><span class="line">        Order order = JSONObject.parseObject(<span class="keyword">new</span> String(msg.getBody(),<span class="string">"UTF-8"</span>), Order<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        logger.info(<span class="string">"order:&#123;&#125;"</span>,order.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取消息数量，可和批量确认一起使用</span></span><br><span class="line">        <span class="comment">// channel.basicQos(10);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// boolean flag = ****(); 在此做逻辑，返回boolean类型决定消息是走确认机制，还是退回机制</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 确认机制，参数一：消息唯一标识；参数二：是否批量确认，false为不开启</span></span><br><span class="line"><span class="comment">            * 若开启批量确认，最后一条确认的ID，会把之前未确认的消息一并确认</span></span><br><span class="line"><span class="comment">            * 开启批量后需做好幂等性处理，若消息在未确认之前，连接中断会造成重复消费</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            channel.basicAck(msg.getMessageProperties().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">            logger.info(<span class="string">"消费成功，ID:&#123;&#125;"</span>,msg.getMessageProperties().getDeliveryTag());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 退回机制，参数一：唯一标识符；参数二：是否批量退回，false为单条退回；参数三：是否把消息退回队列中，false为废弃消息</span></span><br><span class="line"><span class="comment">            * 若有多个消费者需做好幂等性处理，避免消息重复消费</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            channel.basicNack(msg.getMessageProperties().getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">            logger.info(<span class="string">"消费失败，ID:&#123;&#125;"</span>,msg.getMessageProperties().getDeliveryTag());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>当然也可以写个测试方法，这里就这样啦</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.component.ProducerSender;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> MessageSendTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 17:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSendTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProducerSender producerSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/delayedSend"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delayedSend</span><span class="params">(@RequestBody Order order)</span></span>&#123;</span><br><span class="line">        producerSender.sendMessage(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/13/zrKMZP7a25FkVpI.png" alt=""></p><h3 id="绑定交换机和队列之间的联系，并配置路由键字符"><a href="#绑定交换机和队列之间的联系，并配置路由键字符" class="headerlink" title="绑定交换机和队列之间的联系，并配置路由键字符"></a>绑定交换机和队列之间的联系，并配置路由键字符</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/13/dhOLK3kyl8SB5Dn.png" alt=""></p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/13/B8p5dejZLf9Miyt.png" alt=""></p><h3 id="6秒后交换机将数据发送到队列，队列即时发送给消费端消费数据"><a href="#6秒后交换机将数据发送到队列，队列即时发送给消费端消费数据" class="headerlink" title="6秒后交换机将数据发送到队列，队列即时发送给消费端消费数据"></a>6秒后交换机将数据发送到队列，队列即时发送给消费端消费数据</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/13/c3jmVPazAlunKrW.png" alt=""></p><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/rabbitmq-delayed-demo" target="_blank" rel="noopener">https://github.com/wangdaicong/spring-boot-project/tree/master/rabbitmq-delayed-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sirongboot </tag>
            
            <tag> rabbitmq </tag>
            
            <tag> 延迟推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>60岁开发者的建议，尝试改变一下吧！</title>
      <link href="/2021/07/01/60%E5%B2%81%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E5%BB%BA%E8%AE%AE%EF%BC%8C%E5%B0%9D%E8%AF%95%E6%94%B9%E5%8F%98%E4%B8%80%E4%B8%8B%E5%90%A7/"/>
      <url>/2021/07/01/60%E5%B2%81%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E5%BB%BA%E8%AE%AE%EF%BC%8C%E5%B0%9D%E8%AF%95%E6%94%B9%E5%8F%98%E4%B8%80%E4%B8%8B%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/e2cf29614c116b67ec89e99f352c232e.png" alt=""></p><p><code>35岁焦虑</code>是程序员间讨论最多的话题之一。</p><p>是不是一直以为这个话题只有我们国内开发者会讨论？</p><p>最近，在国外的reddit上出现了这样一个热门贴：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/77da0dc1a199c8808b29fbc3741e59d2.png" alt=""></p><p>当程序员老了会怎么样？对于45-50岁之间的程序员，你有什么故事和建议吗？对于职业规划方面有什么好的建议吗？</p><p>这些问题相信也是很多开发者想了解的。从这个帖子中，我们发现了很多高年龄程序员的建议，下面跟着小编一起看看有哪些高赞回复吧！</p><h3 id="60多岁的开发者-dhjdhj"><a href="#60多岁的开发者-dhjdhj" class="headerlink" title="60多岁的开发者 @dhjdhj"></a>60多岁的开发者 @dhjdhj</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/0361b348fb1dd6e121dac4a4a997b0a0.png" alt=""></p><p>他给出的建议是：<code>“不惧怕改变，才能长期保持自己的价值”</code>。</p><p>他还分享了自己的职业经历：</p><p>30多岁的时候，他任职于一家大型研究机构，与很多世界著名科学家共事。在一次具有很大挑战的事情上，为了快速解决问题，很多人都被要求参与进去。这里面就有很多人无法适应这样的变化，最终离开了。</p><p>因为这件事的发生，给了他很大的触动，他认为这样的根源是由于那些人无法应对变化的环境导致的（也就是我们常说的）。因此，自从这件事之后，他就开始坚持这两件事：</p><ol><li><code>经常换工具</code>，包括编辑器等各种基础工具。因为如果一直坚守自己已经会的东西，会让自己僵化，甚至对它们产生宗教版的迷恋</li><li><code>关注最新的开发趋势</code>，评估新技术的重要性，选择你认为有价值的东西学习起来</li></ol><h3 id="50多岁的开发者-gilbertron"><a href="#50多岁的开发者-gilbertron" class="headerlink" title="50多岁的开发者 @gilbertron"></a>50多岁的开发者 @gilbertron</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/701d83fb301d5b07fd05a19928f8678e.png" alt=""></p><p> @gilbertron 在 @dhjdhj 回复下的评论也表达了一个值得大家思考的观点，他表示：现在很多人抱怨一些新技术只是在重复发明老技术，人们不会利用那些优秀的老技术。但是，不要去固执的判断某个技术的好坏，好不好应该由行业来判断。开发者要做的就是<code>不断学习，不一定要做第一个使用新技术的人，但绝不要做因为拒绝使用新技术而被淘汰的人！</code></p><h3 id="62岁的开发者-kintotal"><a href="#62岁的开发者-kintotal" class="headerlink" title="62岁的开发者 @kintotal"></a>62岁的开发者 @kintotal</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/2680eb0b714c424926df39fd50418088.png" alt=""></p><p>@kintotal 表示：他一直都在为自己投资教育，先后获得了3个学位，平时还通过各种平台学习课程。他的职业计划是66岁退休，70岁以后还计划以某种身份参与编程或从事咨询的工作。对于45-50岁这个阶段，他认为这依然还是程序员生涯的黄金时期，只要自己能够保持不断学习的状态，那么你就会慢慢好起来！</p><p>对于这些高龄开发者的故事与建议。我们可以发现一个共同点，那就是：<code>持续学习，投资自己，拥抱变化！</code>说白了，就是要紧跟技术的发展，保持个人的技术价值！那么，你觉得这些建议是不是现在焦虑的原因呢？你觉得自己的程序员生涯可以做到多少岁呢？留言说说你的观点吧！</p><blockquote><p>原文：<a href="https://www.reddit.com/r/programming/comments/nytzaz/what_happens_to_a_programmers_career_as_he_gets/" target="_blank" rel="noopener">https://www.reddit.com/r/programming/comments/nytzaz/what_happens_to_a_programmers_career_as_he_gets/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举，你了解它吗？</title>
      <link href="/2021/04/30/%E6%9E%9A%E4%B8%BE%EF%BC%8C%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%AE%83%E5%90%97/"/>
      <url>/2021/04/30/%E6%9E%9A%E4%B8%BE%EF%BC%8C%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%AE%83%E5%90%97/</url>
      
        <content type="html"><![CDATA[<p>枚举是 JDK 1.5 新增的数据类型，使用枚举我们可以很好的描述一些特定的业务场景，比如一年中的春、夏、秋、冬，还有每周的周一到周天，还有各种颜色，以及可以用它来描述一些状态信息，比如错误码等。</p><p>枚举类型不止存在在 Java 语言中，在其它语言中也都能找到它的身影，例如 C# 和 Python 等，但我发现在实际的项目中使用枚举的人很少，所以本文就来聊一聊枚举的相关内容，好让朋友们对枚举有一个大概的印象，这样在编程时起码还能想到有“枚举”这样一个类型。</p><p>本文的结构目录如下：<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/04/30/hILQroPBSkVuM7q.jpg" alt=""></p><h1 id="枚举的-7-种使用方法"><a href="#枚举的-7-种使用方法" class="headerlink" title="枚举的 7 种使用方法"></a>枚举的 7 种使用方法</h1><p>很多人不使用枚举的一个重要的原因是对枚举不够熟悉，那么我们就先从枚举的 7 种使用方法说起。</p><h2 id="用法一：常量"><a href="#用法一：常量" class="headerlink" title="用法一：常量"></a>用法一：常量</h2><p>在 JDK 1.5 之前，我们定义常量都是 public static final… ，但有了枚举，我们就可以把这些常量定义成一个枚举类了，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ColorEnum &#123;  </span><br><span class="line">  RED, GREEN, BLANK, YELLOW  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用法二：switch"><a href="#用法二：switch" class="headerlink" title="用法二：switch"></a>用法二：switch</h2><p>将枚举用在 switch 判断中，使得代码可读性更高了，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ColorEnum &#123;</span><br><span class="line">    GREEN, YELLOW, RED</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorTest</span> </span>&#123;</span><br><span class="line">    ColorEnum color = ColorEnum.RED;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">            <span class="keyword">case</span> RED:</span><br><span class="line">                color = ColorEnum.GREEN;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> YELLOW:</span><br><span class="line">                color = ColorEnum.RED;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> GREEN:</span><br><span class="line">                color = ColorEnum.YELLOW;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用法三：枚举中增加方法"><a href="#用法三：枚举中增加方法" class="headerlink" title="用法三：枚举中增加方法"></a>用法三：枚举中增加方法</h2><p>我们可以在枚举中增加一些方法，让枚举具备更多的特性，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ErrorCodeEnum &#123;</span><br><span class="line">    SUCCESS(<span class="number">1000</span>, <span class="string">"success"</span>),</span><br><span class="line">    PARAM_ERROR(<span class="number">1001</span>, <span class="string">"parameter error"</span>),</span><br><span class="line">    SYS_ERROR(<span class="number">1003</span>, <span class="string">"system error"</span>),</span><br><span class="line">    NAMESPACE_NOT_FOUND(<span class="number">2001</span>, <span class="string">"namespace not found"</span>),</span><br><span class="line">    NODE_NOT_EXIST(<span class="number">3002</span>, <span class="string">"node not exist"</span>),</span><br><span class="line">    NODE_ALREADY_EXIST(<span class="number">3003</span>, <span class="string">"node already exist"</span>),</span><br><span class="line">    UNKNOWN_ERROR(<span class="number">9999</span>, <span class="string">"unknown error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    ErrorCodeEnum(<span class="keyword">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">msg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ErrorCodeEnum <span class="title">getErrorCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ErrorCodeEnum it : ErrorCodeEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it.code() == code) &#123;</span><br><span class="line">                <span class="keyword">return</span> it;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ErrorCodeEnum errorCode = ErrorCodeEnum.SUCCESS;</span><br><span class="line">        System.out.println(<span class="string">"状态码："</span> + errorCode.code() + </span><br><span class="line">                           <span class="string">" 状态信息："</span> + errorCode.msg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>状态码：1000 状态信息：success</p></blockquote><h2 id="用法四：覆盖枚举方法"><a href="#用法四：覆盖枚举方法" class="headerlink" title="用法四：覆盖枚举方法"></a>用法四：覆盖枚举方法</h2><p>我们可以覆盖一些枚举中的方法用于实现自己的业务，比如我们可以覆盖 toString() 方法，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ColorEnum &#123;</span><br><span class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLOW(<span class="string">"黄色"</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="comment">//  成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ColorEnum</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//覆盖方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.index + <span class="string">"："</span> + <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ColorEnum colorEnum = ColorEnum.RED;</span><br><span class="line">        System.out.println(colorEnum.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1：红色</p></blockquote><h2 id="用法五：实现接口"><a href="#用法五：实现接口" class="headerlink" title="用法五：实现接口"></a>用法五：实现接口</h2><p>枚举类可以用来实现接口，但不能用于继承类，因为枚举默认继承了 java.lang.Enum 类，在 Java 语言中允许实现多接口，但不能继承多个父类，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Behaviour</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ColorEnum implements Behaviour &#123;</span><br><span class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLOW(<span class="string">"黄色"</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ColorEnum</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.index + <span class="string">"："</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ColorEnum colorEnum = ColorEnum.RED;</span><br><span class="line">        colorEnum.print();</span><br><span class="line">        System.out.println(<span class="string">"颜色："</span> + colorEnum.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1：红色<br>颜色：红色</p></blockquote><h2 id="用法六：在接口中组织枚举类"><a href="#用法六：在接口中组织枚举类" class="headerlink" title="用法六：在接口中组织枚举类"></a>用法六：在接口中组织枚举类</h2><p>我们可以在一个接口中创建多个枚举类，用它可以很好的实现“多态”，也就是说我们可以将拥有相同特性，但又有细微实现差别的枚举类聚集在一个接口中，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ColorInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> ColorEnum implements ColorInterface &#123;</span><br><span class="line">        GREEN, YELLOW, RED</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">enum</span> NewColorEnum implements ColorInterface &#123;</span><br><span class="line">        NEW_GREEN, NEW_YELLOW, NEW_RED</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 赋值第一个枚举类</span></span><br><span class="line">        ColorInterface colorEnum = ColorInterface.ColorEnum.RED;</span><br><span class="line">        System.out.println(colorEnum);</span><br><span class="line">        <span class="comment">// 赋值第二个枚举类</span></span><br><span class="line">        colorEnum = ColorInterface.NewColorEnum.NEW_RED;</span><br><span class="line">        System.out.println(colorEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>RED<br>NEW_RED</p></blockquote><h2 id="用法七：使用枚举集合"><a href="#用法七：使用枚举集合" class="headerlink" title="用法七：使用枚举集合"></a>用法七：使用枚举集合</h2><p>在 Java 语言中和枚举类相关的，还有两个枚举集合类 java.util.EnumSet 和 java.util.EnumMap，使用它们可以实现更多的功能。</p><p>使用 EnumSet 可以保证元素不重复，并且能获取指定范围内的元素，示例代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ColorEnum &#123;</span><br><span class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLOW(<span class="string">"黄色"</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ColorEnum</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ErrorCodeEnum &#123;</span><br><span class="line">    SUCCESS(<span class="number">1000</span>, <span class="string">"success"</span>),</span><br><span class="line">    ERROR(<span class="number">2001</span>, <span class="string">"parameter error"</span>),</span><br><span class="line">    SYS_ERROR(<span class="number">2002</span>, <span class="string">"system error"</span>),</span><br><span class="line">    NAMESPACE_NOT_FOUND(<span class="number">2003</span>, <span class="string">"namespace not found"</span>),</span><br><span class="line">    NODE_NOT_EXIST(<span class="number">3002</span>, <span class="string">"node not exist"</span>),</span><br><span class="line">    NODE_ALREADY_EXIST(<span class="number">3003</span>, <span class="string">"node already exist"</span>),</span><br><span class="line">    UNKNOWN_ERROR(<span class="number">9999</span>, <span class="string">"unknown error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ErrorCodeEnum</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">msg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;ColorEnum&gt; list = <span class="keyword">new</span> ArrayList&lt;ColorEnum&gt;();</span><br><span class="line">        list.add(ColorEnum.RED);</span><br><span class="line">        list.add(ColorEnum.RED);  <span class="comment">// 重复元素</span></span><br><span class="line">        list.add(ColorEnum.YELLOW);</span><br><span class="line">        list.add(ColorEnum.GREEN);</span><br><span class="line">        <span class="comment">// 去掉重复数据</span></span><br><span class="line">        EnumSet&lt;ColorEnum&gt; enumSet = EnumSet.copyOf(list);</span><br><span class="line">        System.out.println(<span class="string">"去重："</span> + enumSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定范围的枚举（获取所有的失败状态）</span></span><br><span class="line">        <span class="comment">// range():创建一个枚举集，并在给定的st(开始位置)和en(结束位置)范围内获取元素。</span></span><br><span class="line">        EnumSet&lt;ErrorCodeEnum&gt; errorCodeEnums = EnumSet.range(ErrorCodeEnum.ERROR, ErrorCodeEnum.UNKNOWN_ERROR);</span><br><span class="line">        System.out.println(<span class="string">"所有失败状态："</span> + errorCodeEnums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>去重：[RED, GREEN, YELLOW]<br>所有失败状态：[ERROR, SYS_ERROR, NAMESPACE_NOT_FOUND, NODE_NOT_EXIST, NODE_ALREADY_EXIST, UNKNOWN_ERROR]</p></blockquote><p><code>EnumMap 与 HashMap 类似，不过它是一个专门为枚举设计的 Map 集合，相比 HashMap 来说它的性能更高，因为它内部放弃使用链表和红黑树的结构，采用数组作为数据存储的结构。</code></p><p>EnumMap 基本使用示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ColorEnum &#123;</span><br><span class="line">    RED, GREEN, BLANK, YELLOW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.EnumMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnumMap&lt;ColorEnum, String&gt; enumMap = <span class="keyword">new</span> EnumMap&lt;&gt;(ColorEnum<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        enumMap.put(ColorEnum.RED, <span class="string">"红色"</span>);</span><br><span class="line">        enumMap.put(ColorEnum.GREEN, <span class="string">"绿色"</span>);</span><br><span class="line">        enumMap.put(ColorEnum.BLANK, <span class="string">"白色"</span>);</span><br><span class="line">        enumMap.put(ColorEnum.YELLOW, <span class="string">"黄色"</span>);</span><br><span class="line">        System.out.println(ColorEnum.RED + <span class="string">":"</span> + enumMap.get(ColorEnum.RED));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>RED:红色</p></blockquote><h1 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h1><p>阿里《Java开发手册》对枚举的相关规定如下，我们在使用时需要稍微注意一下。</p><blockquote><p>【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。<br>【参考】枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br>说明：枚举其实就是特殊的常量类，<code>且构造方法被默认强制是私有</code>。<br>正例：枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS / UNKNOWN_REASON。</p></blockquote><h1 id="假如不使用枚举"><a href="#假如不使用枚举" class="headerlink" title="假如不使用枚举"></a>假如不使用枚举</h1><p>在枚举没有诞生之前，也就是 JDK 1.5 版本之前，我们通常会使用 int 常量来表示枚举，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COLOR_RED = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COLOR_BLUE = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COLOR_GREEN = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>但是使用 int 类型可能存在两个问题：</p><blockquote><ol><li>int 类型本身并不具备安全性，假如某个程序员在定义 int 时少些了一个 final关键字，那么就会存在被其他人修改的风险，而反观枚举类，它“天然”就是一个常量类，不存在被修改的风险（原因详见下半部分）；</li><li>使用 int 类型的语义不够明确，比如我们在控制台打印时如果只输出 1…2…3这样的数字，我们肯定不知道它代表的是什么含义。</li></ol></blockquote><p>那有人就说了，那就使用常量字符呗，这总不会还不知道语义吧？实现示例代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLOR_RED = <span class="string">"RED"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLOR_BLUE = <span class="string">"BLUE"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLOR_GREEN = <span class="string">"GREEN"</span>;</span><br></pre></td></tr></table></figure><p>但是这样同样存在一个问题，有些初级程序员会不按套路出牌，他们可能会直接使用字符串的值进行比较，而不是直接使用枚举的字段，实现示例代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLOR_RED = <span class="string">"RED"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLOR_BLUE = <span class="string">"BLUE"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLOR_GREEN = <span class="string">"GREEN"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String color = <span class="string">"BLUE"</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"BLUE"</span>.equals(color)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"蓝色"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样当我们修改了枚举中的值，那程序就凉凉了。</p><h1 id="枚举使用场景"><a href="#枚举使用场景" class="headerlink" title="枚举使用场景"></a>枚举使用场景</h1><p>枚举的常见使用场景是<code>单例</code>，它的完整实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 枚举类型是线程安全的，并且只会装载一次</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> SingletonEnum &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 声明单例对象</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Singleton instance;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 实例化</span></span><br><span class="line">        SingletonEnum() &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取实例（单例对象）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonEnum.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hi,Java."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton singleton = Singleton.getInstance();</span><br><span class="line">        singleton.sayHi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为枚举只会在类加载时装载一次，所以它是线程安全的，这也是《Effective Java》作者极力推荐使用枚举来实现单例的主要原因。</p><h1 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h1><h2 id="枚举为什么是线程安全的？"><a href="#枚举为什么是线程安全的？" class="headerlink" title="枚举为什么是线程安全的？"></a>枚举为什么是线程安全的？</h2><p>这一点要从枚举最终生成的字节码说起，首先我们先来定义一个简单的枚举类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ColorEnumTest &#123;</span><br><span class="line">    RED, GREEN, BLANK, YELLOW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们再将上面的那段代码编译为字节码，具体内容如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorEnumTest</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Enum</span>&lt;<span class="title">ColorEnumTest</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ColorEnumTest RED;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ColorEnumTest GREEN;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ColorEnumTest BLANK;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ColorEnumTest YELLOW;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ColorEnumTest[] values();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ColorEnumTest <span class="title">valueOf</span><span class="params">(java.lang.String)</span></span>;</span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述结果可以看出<code>枚举类最终会被编译为被 final 修饰的普通类，它的所有属性也都会被 static 和 final 关键字修饰，所以枚举类在项目启动时就会被 JVM 加载并初始化，而这个执行过程是线程安全的，所以枚举类也是线程安全的类。</code></p><blockquote><p>小贴士：代码反编译的过程是先用 javac 命令将 java 代码编译字节码（.class），再使用 javap 命令查看编译的字节码。</p></blockquote><h2 id="枚举比较小技巧"><a href="#枚举比较小技巧" class="headerlink" title="枚举比较小技巧"></a>枚举比较小技巧</h2><p>我们在枚举比较时使用 == 就够了，因为枚举类是在程序加载时就创建了（它并不是 new 出来的），并且枚举类不允许在外部直接使用 new 关键字来创建枚举实例，所以我们在使用枚举类时本质上只有一个对象，因此在枚举比较时使用 == 就够了。</p><p>并且我们在查看枚举的 equlas() 源码会发现，它的内部其实还是直接调用了 == 方法，源码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>==other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文我们介绍了枚举类的 7 种使用方法：常量、switch、枚举中添加方法、覆盖枚举方法、实现接口、在接口中组织枚举类和使用枚举集合等，然后讲了如果不使用枚举类使用 int 类型和 String 类型存在的一些弊端：语义不够清晰、容易被修改、存在被误用的风险，所以我们在适合的环境下应该尽量使用枚举类。并且我们还讲了枚举类的使用场景–单例，以及枚举类为什么是安全的，最后我们讲了枚举比较的小技巧，希望本文对你有帮助。</p><blockquote><p>原文：<a href="https://mp.weixin.qq.com/s/HDotguLpNgtwK-Jz2UsODQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/HDotguLpNgtwK-Jz2UsODQ</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非对称加密RSA与对称加密AES项目应用</title>
      <link href="/2021/04/13/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86RSA%E4%B8%8E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86AES%E9%A1%B9%E7%9B%AE%E5%BA%94%E7%94%A8/"/>
      <url>/2021/04/13/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86RSA%E4%B8%8E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86AES%E9%A1%B9%E7%9B%AE%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在项目中，为了保证数据的安全，我们常常会对传递的数据进行加密。常用的加密算法有对称加密（AES）和非对称加密（RSA）。</p><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><h3 id="AES加密算法"><a href="#AES加密算法" class="headerlink" title="AES加密算法"></a>AES加密算法</h3><p>对称加密就是指，加密和解密使用同一个密钥的加密方式；加密计算量小、速度块，适合对大量数据进行加密的场景。AES取代DES成为加密标准<code>(微信小程序加密传输就是用这个加密算法的)</code>。</p><h3 id="AES加密的五个关键词"><a href="#AES加密的五个关键词" class="headerlink" title="AES加密的五个关键词"></a>AES加密的五个关键词</h3><ul><li><p>分组密码体制</p><blockquote><p>AES采用分组密码体制，即AES加密会首先把明文切成一段一段的，而且每段数据的长度要求必须是128位16个字节，如果最后一段不够16个字节了，就需要用Padding来把这段数据填满16个字节，然后分别对每段数据进行加密，最后再把每段加密数据拼起来形成最终的密文。</p></blockquote></li><li><p>Padding</p><blockquote><p>Padding就是用来把不满16个字节的分组数据填满16个字节用的，它有三种模式PKCS5、PKCS7和NOPADDING。解密端需要使用和加密端同样的Padding模式，才能准确的识别有效数据和填充数据。开发通常采用PKCS7 Padding模式。</p></blockquote></li><li><p>初始向量IV</p><blockquote><p>初始向量IV的作用是使加密更加安全可靠，我们使用AES加密时需要主动提供初始向量，而且只需要提供一个初始向量就够了，后面每段数据的加密向量都是前面一段的密文。初始向量IV的长度规定为128位16个字节，初始向量的来源为随机生成。</p></blockquote></li><li><p>密钥</p><blockquote><p>开发通常采用128位16个字节的密钥，我们使用AES加密时需要主动提供密钥，而且只需要提供一个密钥就够了，每段数据加密使用的都是这一个密钥，密钥来源为随机生成。</p></blockquote></li><li><p>四种加密模式</p><blockquote><p>AES一共有四种加密模式，分别是ECB（电子密码本模式）、CBC（密码分组链接模式）、CFB、OFB，一般使用的是ECB、CBC模式</p></blockquote></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>服务端和我们客户端必须使用一样的密钥和初始向量IV。</li><li>服务端和我们客户端必须使用一样的加密模式。</li><li>服务端和我们客户端必须使用一样的Padding模式。<br><code>以上三条有一个不满足，双方就无法完成互相加解密。</code></li></ol><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><h3 id="RSA加密算法"><a href="#RSA加密算法" class="headerlink" title="RSA加密算法"></a>RSA加密算法</h3><p>RSA加密是一种非对称加密。可以在不直接传递密钥的情况下，完成解密。这能够确保信息的安全性，避免了直接传递密钥所造成的被破解的风险。<br>RSA是由一对密钥来进行加解密的过程，分别称为公钥和私钥。两者之间有数学相关，该加密算法的原理就是对一极大整数做因数分解的困难性来保证安全性。通常个人保存私钥，公钥是公开的（可能同时多人持有）。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20201108110852897.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmtleXRv,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="RSA签名"><a href="#RSA签名" class="headerlink" title="RSA签名"></a>RSA签名</h3><p>加密和签名都是为了安全性考虑，但略有不同。常有人问加密和签名是用私钥还是公钥？其实都是对加密和签名的作用有所混淆。简单的说，<code>加密是为了防止信息被泄露，而签名是为了防止信息被篡改</code>。这里举2个例子说明。</p><h4 id="第一个场景"><a href="#第一个场景" class="headerlink" title="第一个场景"></a>第一个场景</h4><p>B<code>(客户端)</code>要给A<code>(服务器)</code>传递一条重要消息。</p><p>RSA的加密过程如下：</p><blockquote><ol><li>A生成一对密钥（公钥和私钥），私钥不公开，A自己保留。公钥为公开的，任何人可以获取。</li><li>A传递自己的公钥给B，B用A的公钥对消息进行加密。</li><li>A接收到B加密的消息，利用A自己的私钥对消息进行解密。</li></ol></blockquote><p>在整个过程中，只有2次传递过程，第一次是A传递公钥给B，第二次是B用公钥加密消息传递给A，即使都被敌方截获，也没有危险性，因为<code>只有A的私钥才能对消息进行解密</code>，防止了消息内容的泄露。</p><h4 id="第二个场景"><a href="#第二个场景" class="headerlink" title="第二个场景"></a>第二个场景</h4><p>A<code>(服务器)</code>收到B<code>(客户端)</code>发的消息后，需要进行<code>回复“收到”</code>。</p><p>RSA签名的过程如下：</p><blockquote><ol><li>A生成一对密钥（公钥和私钥），私钥不公开，A自己保留。公钥为公开的，任何人可以获取。</li><li>A用自己的私钥对消息加签，形成签名，并将加签的消息和消息<code>(加密后的信息)</code>本身一起传递给B。</li><li>B收到消息后，在获取A的公钥进行验签，如果验签出来的内容与消息本身一致，证明消息是A回复的。</li></ol></blockquote><p>在整个过程中，只有2次传递过程，第一次是A传递加签的消息和消息<code>(加密后的信息)</code>本身给B，第二次是B获取A的公钥，即使都被敌方截获，也没有危险性，因为只有A的私钥才能对消息进行签名；即使知道了消息内容<code>(加密后的信息)</code>，也无法伪造带签名的回复给B，防止了消息内容的篡改。</p><h3 id="存在的缺陷"><a href="#存在的缺陷" class="headerlink" title="存在的缺陷"></a>存在的缺陷</h3><p>综合两个场景你会发现：</p><blockquote><ol><li>第一个场景虽然被截获的消息没有泄露，但是黑客可以利用截获的公钥，将假信息进行加密，然后传递给A。</li><li>第二个场景虽然截获的消息不能被篡改，但是消息的内容可以利用公钥解密来获得，并不能防止泄露。</li></ol></blockquote><p>所以在实际应用中，要根据情况灵活使用，可以同时使用加密和签名，也可以A和B都有一套自己的公钥和私钥(<code>这里的A、B指服务端，前端的话不安全</code>)，当A要给B发送消息时，先用B的公钥对消息加密，再对加密的消息使用A的私钥来加签名，达到既不泄露也不被篡改，更能保证消息的安全性。</p><h2 id="项目详情"><a href="#项目详情" class="headerlink" title="项目详情"></a>项目详情</h2><h3 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.goitman<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rsa-encrypt-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Web 项目开发starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--RSA加解密依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.shuibo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rsa-encrypt-body-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok 简化插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rsa:</span></span><br><span class="line">  <span class="attr">encrypt:</span></span><br><span class="line">    <span class="attr">open:</span> <span class="literal">true</span> <span class="comment"># 是否开启加密 true  or  false</span></span><br><span class="line">    <span class="attr">showLog:</span> <span class="literal">true</span> <span class="comment"># 是否打印加解密log true  or  false</span></span><br><span class="line">    <span class="comment"># RSA公钥 java生成</span></span><br><span class="line">    <span class="attr">publicKey:</span> </span><br><span class="line">    <span class="comment"># RSA私钥 java生成</span></span><br><span class="line">    <span class="attr">privateKey:</span></span><br></pre></td></tr></table></figure><p><code>RSA公私钥生成工具在后续工具类中</code></p><h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.shuibo.annotation.EnableSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RsaEncryptApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 启动引导类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/2 16:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableSecurity</span> <span class="comment">// 启用加解密注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaEncryptApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RsaEncryptApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Consumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/2 16:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><p><code>由于RSA的特性，一个1024位的密钥只能加密117位字节数据和解密128位字节数据，当数据量超过117位字节或128位字节的时候，程序就会抛出异常</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> CreateRsaSecrteKeyUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 生成RSA公钥私钥，RSA与AES加解密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/2 15:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateRsaSecrteKeyUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PUBLIC_KEY = <span class="string">"RSAPublicKey"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRIVATE_KEY = <span class="string">"RSAPrivateKey"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA算法名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RSA_ALGORITHM = <span class="string">"RSA"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA填充算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RSA_PADDING_ALGORITHM = <span class="string">"RSA/ECB/PKCS1Padding"</span>;</span><br><span class="line"><span class="comment">//    public static final String RSA_PADDING_ALGORITHM = "RSA/CBC/PKCS1Padding";</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA加签算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SIGNATURE_ALGORITHM = <span class="string">"MD5withRSA"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA最大加密明文大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ENCRYPT_BLOCK = <span class="number">117</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA最大解密密文大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_DECRYPT_BLOCK = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编码方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String UTF_8 = <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AES算法名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AES_ALGORITHM = <span class="string">"AES"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AES填充算法</span></span><br><span class="line"><span class="comment">//    public static final String AES_PADDING_ALGORITHM = "AES/ECB/PKCS5Padding";</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AES_PADDING_ALGORITHM = <span class="string">"AES/CBC/PKCS5Padding"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     只有在填充算法模式为CBC时才使用</span></span><br><span class="line"><span class="comment">     初始向量，不可以为32位，只能为数字或字母</span></span><br><span class="line"><span class="comment">     否则异常java.security.InvalidAlgorithmParameterException: Wrong IV length: must be 16 bytes long</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String iv = <span class="string">"初始向量"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * map对象中存放公私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">initKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获得对象 KeyPairGenerator 参数 RSA</span></span><br><span class="line">        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(RSA_ALGORITHM);</span><br><span class="line">        <span class="comment">// keysize：表示的是生成key的长度，单位字节(bits，64的整数倍,最小512位)</span></span><br><span class="line">        <span class="comment">// 如果采用2048，上面最大加密和最大解密则为:245、256</span></span><br><span class="line">        keyPairGen.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//通过对象 KeyPairGenerator 获取对象KeyPair</span></span><br><span class="line">        KeyPair keyPair = keyPairGen.generateKeyPair();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过对象 KeyPair 获取RSA公私钥对象RSAPublicKey RSAPrivateKey</span></span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line">        <span class="comment">//公私钥对象存入map中</span></span><br><span class="line">        Map&lt;String, Object&gt; keyMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">2</span>);</span><br><span class="line">        keyMap.put(PUBLIC_KEY, publicKey);</span><br><span class="line">        keyMap.put(PRIVATE_KEY, privateKey);</span><br><span class="line">        <span class="keyword">return</span> keyMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPublicKey</span><span class="params">(Map&lt;String, Object&gt; keyMap)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获得map中的公钥对象 转为key对象</span></span><br><span class="line">        Key key = (Key) keyMap.get(PUBLIC_KEY);</span><br><span class="line">        <span class="keyword">return</span> encryptBASE64(key.getEncoded());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPrivateKey</span><span class="params">(Map&lt;String, Object&gt; keyMap)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获得map中的私钥对象 转为key对象</span></span><br><span class="line">        Key key = (Key) keyMap.get(PRIVATE_KEY);</span><br><span class="line">        <span class="keyword">return</span> encryptBASE64(key.getEncoded());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [key 字符串]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> decryptBASE64</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> BASE64字符串解码为二进制数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decryptBASE64(String key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> BASE64Decoder()).decodeBuffer(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [key 字节数组]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> encryptBASE64</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 二进制数据编码为BASE64字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptBASE64</span><span class="params">(<span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> BASE64Encoder()).encodeBuffer(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [data 需加密数据, publicKey 公钥]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> encryptRSADatePub</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 分段公钥加密数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptRSADate</span><span class="params">(String data, String publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] dataByte = data.getBytes();</span><br><span class="line">            <span class="keyword">byte</span>[] keyBytes = decryptBASE64(publicKey);</span><br><span class="line">            X509EncodedKeySpec x509KeySpec = <span class="keyword">new</span> X509EncodedKeySpec(keyBytes);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(RSA_ALGORITHM);</span><br><span class="line">            Key publicK = keyFactory.generatePublic(x509KeySpec);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(RSA_PADDING_ALGORITHM);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, publicK);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            IvParameterSpec ivp = new IvParameterSpec(iv.getBytes());</span></span><br><span class="line"><span class="comment">//            cipher.init(Cipher.ENCRYPT_MODE, publicK, ivp);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分段加密</span></span><br><span class="line">            <span class="keyword">int</span> inputLen = dataByte.length;</span><br><span class="line">            ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> offSet = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] cache;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段加密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) &#123;</span><br><span class="line">                    cache = cipher.doFinal(dataByte, offSet, MAX_ENCRYPT_BLOCK);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cache = cipher.doFinal(dataByte, offSet, inputLen - offSet);</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_ENCRYPT_BLOCK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span>[] encryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="keyword">return</span> encryptBASE64(encryptedData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [data 需解密数据, privateKey 私钥]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> decryptRSADate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 分段解密数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptRSADate</span><span class="params">(String data, String privateKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] dataByte = decryptBASE64(data);</span><br><span class="line">            <span class="keyword">byte</span>[] keyBytes = decryptBASE64(privateKey);</span><br><span class="line">            PKCS8EncodedKeySpec pkcs8KeySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(keyBytes);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(RSA_ALGORITHM);</span><br><span class="line">            Key privateK = keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(RSA_PADDING_ALGORITHM);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, privateK);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            IvParameterSpec ivp = new IvParameterSpec(iv.getBytes());</span></span><br><span class="line"><span class="comment">//            cipher.init(Cipher.DECRYPT_MODE, privateK, ivp);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分段解密</span></span><br><span class="line">            <span class="keyword">int</span> inputLen = dataByte.length;</span><br><span class="line">            ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> offSet = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] cache;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段解密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) &#123;</span><br><span class="line">                    cache = cipher</span><br><span class="line">                            .doFinal(dataByte, offSet, MAX_DECRYPT_BLOCK);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cache = cipher</span><br><span class="line">                            .doFinal(dataByte, offSet, inputLen - offSet);</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_DECRYPT_BLOCK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span>[] decryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(decryptedData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [data 签名数据, privateKey 私钥]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> sign</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String data, String privateKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// String转私钥对象</span></span><br><span class="line">            <span class="keyword">byte</span>[] keyBytes = decryptBASE64(privateKey);</span><br><span class="line">            PKCS8EncodedKeySpec keySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(keyBytes);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(RSA_ALGORITHM);</span><br><span class="line">            PrivateKey privateK = keyFactory.generatePrivate(keySpec);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取加签对象</span></span><br><span class="line">            Signature sig = Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class="line">            sig.initSign(privateK);</span><br><span class="line">            sig.update(data.getBytes(UTF_8));</span><br><span class="line">            <span class="keyword">return</span> encryptBASE64(sig.sign());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [data 验签数据, sign 签名, publicKey 公钥]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> verify</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 验签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String data, String sign, String publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// String转公钥对象</span></span><br><span class="line">            <span class="keyword">byte</span>[] keyBytes = decryptBASE64(publicKey);</span><br><span class="line">            X509EncodedKeySpec keySpec = <span class="keyword">new</span> X509EncodedKeySpec(keyBytes);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(RSA_ALGORITHM);</span><br><span class="line">            PublicKey publicK = keyFactory.generatePublic(keySpec);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取加签对象</span></span><br><span class="line">            Signature sig = Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class="line">            sig.initVerify(publicK);</span><br><span class="line">            sig.update(data.getBytes(UTF_8));</span><br><span class="line">            <span class="keyword">return</span> sig.verify(decryptBASE64(sign));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span>  encryptAES</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>  AES 加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [context 明文, key 密钥8位的倍数，建议16位]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptAES</span><span class="params">(String context, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] decode = context.getBytes(UTF_8);</span><br><span class="line">            Key secretKeySpec = <span class="keyword">new</span> SecretKeySpec(key.getBytes(UTF_8), AES_ALGORITHM);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(AES_PADDING_ALGORITHM);</span><br><span class="line"><span class="comment">//            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);</span></span><br><span class="line"></span><br><span class="line">            IvParameterSpec ivp = <span class="keyword">new</span> IvParameterSpec(iv.getBytes());</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivp);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Base64.encodeBase64String(cipher.doFinal(decode));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span>  decryptAES</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>  AES 解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [context 密文, key 密钥8位的倍数，建议16位]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptAES</span><span class="params">(String context, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] decode = Base64.decodeBase64(context);</span><br><span class="line">            Key secretKeySpec = <span class="keyword">new</span> SecretKeySpec(key.getBytes(UTF_8), AES_ALGORITHM);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(AES_PADDING_ALGORITHM);</span><br><span class="line"><span class="comment">//            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);</span></span><br><span class="line"></span><br><span class="line">            IvParameterSpec ivp = <span class="keyword">new</span> IvParameterSpec(iv.getBytes());</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivp);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(cipher.doFinal(decode), UTF_8);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> randomKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 创建字符串密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">randomKey</span><span class="params">(<span class="keyword">int</span> lenght)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">char</span>[] c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="string">'0'</span>; i &lt;= <span class="string">'9'</span>; i++) &#123;</span><br><span class="line">            str += (<span class="keyword">char</span>) i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="string">'A'</span>; i &lt;= <span class="string">'Z'</span>; i++) &#123;</span><br><span class="line">            str += (<span class="keyword">char</span>) i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="string">'a'</span>; i &lt;= <span class="string">'z'</span>; i++) &#123;</span><br><span class="line">            str += (<span class="keyword">char</span>) i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c = <span class="keyword">new</span> <span class="keyword">char</span>[lenght];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = (<span class="keyword">int</span>) (Math.random() * str.length());</span><br><span class="line">            c[i] = str.charAt(index);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"密钥："</span> + <span class="keyword">new</span> String(c) + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; keyMap;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keyMap = initKey();</span><br><span class="line">            String publicKey = getPublicKey(keyMap);</span><br><span class="line">            System.out.println(<span class="string">"公钥："</span> + publicKey + <span class="string">"\n"</span>);</span><br><span class="line">            String privateKey = getPrivateKey(keyMap);</span><br><span class="line">            System.out.println(<span class="string">"私钥："</span> + privateKey + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"===================先加密再加签==================="</span>);</span><br><span class="line">            String str = <span class="string">"签名内容！"</span>;</span><br><span class="line">            <span class="comment">// 公钥加密</span></span><br><span class="line">            String encryptData = encryptRSADate(str, publicKey);</span><br><span class="line">            System.out.println(<span class="string">"公钥加密："</span> + encryptData + <span class="string">"\n"</span>);</span><br><span class="line">            <span class="comment">// 私钥对密文加签</span></span><br><span class="line">            String sign = sign(encryptData, privateKey);</span><br><span class="line">            System.out.println(<span class="string">"加签后："</span> + sign + <span class="string">"\n"</span>);</span><br><span class="line">            <span class="comment">// 公钥对密文验签</span></span><br><span class="line">            <span class="keyword">boolean</span> verify = verify(encryptData, sign, publicKey);</span><br><span class="line">            System.out.println(<span class="string">"验签情况："</span> + verify + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 私钥解密</span></span><br><span class="line">            String decryptData = decryptRSADate(<span class="string">"WXpNTk5yTU90NHJiQWwyZlBzNnJKdC9ZWk80YUJyWiswS1orUjR1clYxa2JuVVJRNnN0eUh4ekNVQlM0cFUxK3R6dU1PYVlsZkZQM2ZHaHB4VXNPbFRRbXZwWithUjVVZWtLVWRic2hqV0FweUpkNDZaLy9XTnVLMk9uYmhTMGdWMkZIK1NHUlc4L0dnR2ZPdmpOVjJrYmkzS25aQWdkUFRKT3NwTlowQ0owPQ=="</span>, privateKey);</span><br><span class="line">            System.out.println(<span class="string">"私钥解密："</span> + decryptData);</span><br><span class="line"></span><br><span class="line">            System.out.println(randomKey(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层类"><a href="#控制层类" class="headerlink" title="控制层类"></a>控制层类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Consumer;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.util.CreateRsaSecrteKeyUtil;</span><br><span class="line"><span class="keyword">import</span> cn.shuibo.annotation.Decrypt;</span><br><span class="line"><span class="keyword">import</span> cn.shuibo.annotation.Encrypt;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RsaCotroller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/2 16:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaCotroller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;rsa.encrypt.privateKey&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;rsa.encrypt.publicKey&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Encrypt</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/encrypt"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(<span class="string">"注解加密用户"</span>, <span class="string">"注解加密密码"</span>);</span><br><span class="line">        <span class="keyword">return</span> consumer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Decrypt</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/decrypt"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decrypt</span><span class="params">(@RequestBody Consumer consumer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> consumer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手工加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/encryption"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encryption</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(<span class="string">"手工加密用户"</span>, <span class="string">"手工加密密码"</span>);</span><br><span class="line">        <span class="comment">// 因前端传送的是JSON数据，所以需先将对象转为JSON后，再加密</span></span><br><span class="line">        <span class="keyword">return</span> CreateRsaSecrteKeyUtil.encryptRSADate(JSON.toJSONString(consumer), publicKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/decryption"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decryption</span><span class="params">(@RequestBody String str)</span> </span>&#123;</span><br><span class="line">        Consumer consumer = JSON.parseObject(CreateRsaSecrteKeyUtil.decryptRSADate(str, privateKey), Consumer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> consumer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手工加密加签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/signature"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">signature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(<span class="string">"手工加密加签"</span>, <span class="string">"手工加密加签"</span>);</span><br><span class="line">        <span class="comment">// 因前端传送的是JSON数据，所以需先将对象转为JSON后，再加密</span></span><br><span class="line">        String encryptDate = CreateRsaSecrteKeyUtil.encryptRSADate(JSON.toJSONString(consumer), publicKey);</span><br><span class="line">        String sign = CreateRsaSecrteKeyUtil.sign(encryptDate, privateKey);</span><br><span class="line">        System.out.println(<span class="string">"密文："</span> + encryptDate + <span class="string">"\n"</span>);</span><br><span class="line">        System.out.println(<span class="string">"加签："</span> + sign);</span><br><span class="line">        <span class="keyword">return</span> sign + <span class="string">"&amp;"</span> + encryptDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动解签解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/verify"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">verify</span><span class="params">(@RequestBody String str)</span> </span>&#123;</span><br><span class="line">        String[] data = str.split(<span class="string">"&amp;"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> verify = CreateRsaSecrteKeyUtil.verify(data[<span class="number">1</span>], data[<span class="number">0</span>], publicKey);</span><br><span class="line">        <span class="keyword">if</span> (verify) &#123;</span><br><span class="line">            Consumer consumer = JSON.parseObject(CreateRsaSecrteKeyUtil.decryptRSADate(data[<span class="number">1</span>], privateKey), Consumer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"验签成功："</span> + consumer.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"验签失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES加密，前端解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/encodeAES"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encodeAES</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(<span class="string">"手工加密用户"</span>, <span class="string">"手工加密密码"</span>);</span><br><span class="line">        String key = CreateRsaSecrteKeyUtil.randomKey(<span class="number">16</span>);</span><br><span class="line">        String data = CreateRsaSecrteKeyUtil.encryptAES(consumer.toString(), key);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data + <span class="string">"&amp;"</span> + key;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"加密失败！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES解密，前端加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/decodeAES"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decodeAES</span><span class="params">(@RequestBody String str, HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 密钥用rsa加密过</span></span><br><span class="line">        String encodeKey = req.getHeader(<span class="string">"encodeKey"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String key = CreateRsaSecrteKeyUtil.decryptRSADate(encodeKey, privateKey).replace(<span class="string">"\""</span>, <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">return</span> CreateRsaSecrteKeyUtil.decryptAES(str, key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"解密失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注解加解密不能和手工加解密签一起使用，会有冲突，后面测试章节会介绍</code></p><h3 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>非对称加解密加验签与对称加解密<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--非对称、对称加解密--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jsencrypt.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--非对称加验签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jsrsasign-all-min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对称加解密--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/crypto-js/3.1.9-1/crypto-js.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;script src="js/crypto-js.js"&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami"</span> <span class="attr">onclick</span>=<span class="string">"zhujie1()"</span>&gt;</span>前端解密，后端 注解 加密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami1"</span> <span class="attr">onclick</span>=<span class="string">"zhujie2()"</span>&gt;</span>前端加密，后端 注解 解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami3"</span> <span class="attr">onclick</span>=<span class="string">"shoudong1()"</span>&gt;</span>前端解密，后端 手动 加密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami4"</span> <span class="attr">onclick</span>=<span class="string">"shoudong2()"</span>&gt;</span>前端加密，后端 手动 解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami5"</span> <span class="attr">onclick</span>=<span class="string">"jiaqian1()"</span>&gt;</span>前端验签解密，后端 手动 加密加签<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami6"</span> <span class="attr">onclick</span>=<span class="string">"jiaqian2()"</span>&gt;</span>前端加密加签，后端 手动 验签解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami7"</span> <span class="attr">onclick</span>=<span class="string">"aesDecode()"</span>&gt;</span>AES后端加密，前端解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami8"</span> <span class="attr">onclick</span>=<span class="string">"aesEncode()"</span>&gt;</span>AES前端加密，后端解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> PUBLIC_KEY = <span class="string">''</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> PRIVATE_KEY = <span class="string">''</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ALGORITHM = <span class="string">'MD5withRSA'</span>;</span></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加密方法</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">RSA_encryption</span><span class="params">(jsonData)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> encrypt = <span class="keyword">new</span> JSEncrypt();</span></span><br><span class="line">        encrypt.setPublicKey(PUBLIC_KEY);</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> encrypted = encrypt.encryptLong(<span class="built_in">JSON</span>.stringify(jsonData));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'加密前数据:%o'</span>, jsonData);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'加密后数据:%o'</span>, encrypted);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'加密前数据:%o'</span>, jsonData.length + <span class="string">" "</span>+encrypted.length);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> encrypted;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 私钥解密方法</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">RSA_decryption</span><span class="params">(jsonData)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> decrypt = <span class="keyword">new</span> JSEncrypt();</span></span><br><span class="line">        decrypt.setPrivateKey(PRIVATE_KEY);</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> decrypted = decrypt.decryptLong(jsonData);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'解密前数据:%o'</span>, jsonData);<span class="number">0</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'解密后数据:%o'</span>, decrypted);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> decrypted;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 私钥加签</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">RSA_sign</span><span class="params">(encryptDate)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// prvkeypem：传入pem标准格式的秘钥字符串, 解析生成秘钥实例: RSAKey. 标准的pem格式秘钥含有开始标记和结束标记, 如本文使用的秘钥: -----BEGIN xxx-----, -----END xxx-----. 至于xxx的具体内容不是太重要, 代码里自动通过正则清洗掉头和尾标记</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> signature = <span class="keyword">new</span> KJUR.crypto.Signature(&#123;alg: ALGORITHM, prvkeypem: <span class="string">'-----BEGIN PRIVATE KEY-----'</span> + PRIVATE_KEY + <span class="string">'-----END PRIVATE KEY-----'</span>&#125;);</span></span><br><span class="line"><span class="actionscript">        signature.updateString(encryptDate); <span class="comment">// 传入待签明文</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> sign = hextob64(signature.sign()); <span class="comment">// 签名, hextob64得到16进制字符结果</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'私钥加签数据:%o'</span>, sign);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> sign + <span class="string">"&amp;"</span> + encryptDate;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 公钥验签</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">RSA_verify</span><span class="params">(encryptDate, sign)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> signature = <span class="keyword">new</span> KJUR.crypto.Signature(&#123;alg: ALGORITHM, prvkeypem: <span class="string">'-----BEGIN PUBLIC KEY-----'</span> + PUBLIC_KEY + <span class="string">'-----END PUBLIC KEY-----'</span>&#125;);</span></span><br><span class="line"><span class="actionscript">        signature.updateString(encryptDate); <span class="comment">// 传入签密文</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> result = signature.verify(b64tohex(sign));<span class="comment">// 解签, b64tohex得到字符结果</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'加签:%o'</span>, sign);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'验签结果:%o'</span>, result);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> result;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// ====================================================================================================</span></span></span><br><span class="line">    /**</span><br><span class="line">     * 前端解密，后端 注解 加密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">zhujie1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/encrypt"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"GET"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(reslut)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> res = RSA_decryption(reslut)</span></span><br><span class="line">                alert(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 前端加密，后端 注解 解密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">zhujie2</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> str = &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"name"</span>: <span class="string">"前端加密用户"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"passWord"</span>: <span class="string">"前端加密密码"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/decrypt"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line">            data: RSA_encryption(str),</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// ====================================================================================================</span></span></span><br><span class="line">    /**</span><br><span class="line">     * 前端解密，后端 手动 加密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">shoudong1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/encryption"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"GET"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(reslut)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> res = RSA_decryption(reslut)</span></span><br><span class="line">                alert(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 前端加密，后端 手动 解密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">shoudong2</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> str = &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"name"</span>: <span class="string">"加密用户1"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"passWord"</span>: <span class="string">"加密密码1"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/decryption"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line">            data: RSA_encryption(str),</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// ====================================================================================================</span></span></span><br><span class="line">    /**</span><br><span class="line">     * 前端验签解密，后端 手动 加密加签</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">jiaqian1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/signature"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"GET"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(reslut)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> res = reslut.split(<span class="string">"&amp;"</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> re = RSA_verify(res[<span class="number">1</span>], res[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> encryptDate = <span class="built_in">JSON</span>.stringify(RSA_decryption(res[<span class="number">1</span>]));</span></span><br><span class="line"><span class="actionscript">                alert(re + <span class="string">": "</span> + encryptDate);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 前端加密加签，后端 手动 验签解密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">jiaqian2</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> str = &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"name"</span>: <span class="string">"手动解签解密1"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"passWord"</span>: <span class="string">"手动解签解密1"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> encryptDate = RSA_encryption(str);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> sign = RSA_sign(encryptDate)</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/verify"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line">            data: sign,</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// ====================================================================================================</span></span></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成随机密钥</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">randomString</span><span class="params">(length)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> str = <span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> result = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = length; i &gt; <span class="number">0</span>; --i)</span></span><br><span class="line"><span class="javascript">            result += str[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * str.length)];</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> result.toString();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//aes加密</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">encryptAES</span><span class="params">(context, key)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> encrypted = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> (context) == <span class="string">'string'</span>) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> (context) == <span class="string">'object'</span>) &#123;</span></span><br><span class="line"><span class="javascript">            context = <span class="built_in">JSON</span>.stringify(context);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> srcs = CryptoJS.enc.Utf8.parse(context);</span></span><br><span class="line">        encrypted = CryptoJS.AES.encrypt(srcs, CryptoJS.enc.Utf8.parse(key), &#123;</span><br><span class="line"><span class="actionscript">            iv: CryptoJS.enc.Utf8.parse(<span class="string">"初始向量"</span>),</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// mode: CryptoJS.mode.ECB,</span></span></span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> encrypted.toString();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// aes解密</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">decryptAES</span><span class="params">(context, key)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> decrypt = CryptoJS.AES.decrypt(context, CryptoJS.enc.Utf8.parse(key), &#123;</span></span><br><span class="line"><span class="actionscript">            iv:CryptoJS.enc.Utf8.parse(<span class="string">"初始向量"</span>),</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// mode: CryptoJS.mode.ECB,</span></span></span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> decryptedStr.toString();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * AES后端加密，前端解密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">aesDecode</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/encodeAES"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"GET"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(reslut)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> res = reslut.split(<span class="string">"&amp;"</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> key = res[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> encryptDate = decryptAES(res[<span class="number">0</span>], key);</span></span><br><span class="line"><span class="actionscript">                alert(encryptDate + <span class="string">" : "</span> + key);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * AES前端加密，后端解密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">aesEncode</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> k = randomString(<span class="number">16</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> str = &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"name"</span>: <span class="string">"AES加解密"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"passWord"</span>: <span class="string">"AES加解密"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> encryptDate = encryptAES(str,k)</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/decodeAES"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line">            headers: &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"encodeKey"</span>: RSA_encryption(k)</span></span><br><span class="line">            &#125;,</span><br><span class="line">            data: encryptDate,</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意事项：</code></p><blockquote><ol><li>第36行加验签算法需跟工具类中的加验签算法一致，否则解签失败</li><li>第68、80行加签验签方法中参数prvkeypem，必须传入pem标准格式的秘钥字符串，否则加验签失败；标准的pem格式含有开始标记和结束标记，如本文使用的秘钥：—–BEGIN xxx—–，—–END xxx—–。至于xxx的具体内容不是太重要，代码里自动通过正则清洗掉头和尾标记</li><li>第220、231行的iv初始向量必须与CreateRsaSecrteKeyUtil工具类中第64行中定义的iv初始向量一致，否则加解密失败</li></ol></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>注解加解密和手工加解密签一起使用产生冲突问题</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/SakerMxWQ8Buq6R.png" alt=""></p><blockquote><p>按照1、2、3的步骤来测试验证下效果，首先请求后端注解解密接口</p></blockquote><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/22/DdWpEmnCUIAOxFr.png" alt=""></p><p>毫无疑问，参数解密成功，直接返回前端，并弹框显示</p><blockquote><p>第2步，请求后端手动解密接口；咦！接收参数怎么就已经解密啦？来debug</p></blockquote><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/LA2hKU9aHVfpDkB.png" alt=""></p><p>原来第1步调起的解密注解，既然还在工作，喝，好家伙把第2步的请求参数也顺带解密啦，导致工具类解密时报出JSON数据异常</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/5MVmeGvoIljptdW.png" alt=""></p><blockquote><p>好吧，接着第3步，请求后端手动解签解密接口；我去，数据呢？怎么空字符串啦？</p></blockquote><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/EqgtPHvyhmf6S5G.png" alt=""></p><p>前端明明正常发送请求数据了啊，上debug</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/22/6tksobwyJpNDgmT.png" alt=""></p><p>还是解密注解造的孽，它无法解密加签的数据(加签算法和加密算法不一样，看工具类详情可知)，所以直接报解密失败，并返回个空字符串</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/REoPntqfTr8HCcN.png" alt=""></p><blockquote><p><code>结论：只要开启了解密注解，它就会一直保持开启解密状态，从而影响手动解密方法的正常使用</code></p></blockquote><h2 id="小程序非对称加密"><a href="#小程序非对称加密" class="headerlink" title="小程序非对称加密"></a>小程序非对称加密</h2><p>在上请求页面中RSA加解密使用了jsencrypt.js，其中有如下一段代码：<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/04/12/IO8sKr9yzBT5iJZ.png" alt=""></p><p>因为微信小程序的js中不能使用window对象，会导致报undefined错误（难道window对象真的在小程序中不存在吗？事实并非如此，有兴趣的可以去研究下，在这不作扩展），所以需换个思路来解决问题，使用wx_rsa.js（源码中已附文件）来实现非对称加密，使用方法如下</p><h3 id="JS引用"><a href="#JS引用" class="headerlink" title="JS引用"></a>JS引用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> RSA = <span class="built_in">require</span>(<span class="string">'../wx_rsa.js'</span>)</span><br></pre></td></tr></table></figure><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wx_RSA_encrypto</span>(<span class="params">jsonData</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> encrypt_rsa = RSA.KEYUTIL.getKey(<span class="string">"-----BEGIN PUBLIC KEY-----公钥-----END PUBLIC KEY-----"</span>);</span><br><span class="line">    <span class="keyword">var</span> encStr = encrypt_rsa.encrypt(jsonData);</span><br><span class="line">    <span class="keyword">return</span> RSA.hex2b64(encStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>客户端一般不推荐保存私钥，此为示例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wx_RSA_decrypto</span>(<span class="params">encStr</span>) </span>&#123;</span><br><span class="line">    decrypt_rsa = RSA.KEYUTIL.getKey(<span class="string">"-----BEGIN PRIVATE KEY-----私钥-----END PRIVATE KEY-----"</span>);</span><br><span class="line">    encStr = RSA.b64tohex(encStr);</span><br><span class="line">    <span class="keyword">var</span> decStr = decrypt_rsa.decrypt(encStr);</span><br><span class="line">    <span class="keyword">return</span> decStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于加签验签可用回上节请求页面中的方法，当然也可用wx_rsa.js中的方法，在此不做扩展，自行研究调用</p><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/rsa-encrypt-demo" target="_blank" rel="noopener">https://github.com/wangdaicong/spring-boot-project/tree/master/rsa-encrypt-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sirongboot </tag>
            
            <tag> 接口加解密 </tag>
            
            <tag> 微信小程序 </tag>
            
            <tag> 防抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thumbnailator 图片处理类库</title>
      <link href="/2021/03/16/Thumbnailator%20%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E7%B1%BB%E5%BA%93/"/>
      <url>/2021/03/16/Thumbnailator%20%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E7%B1%BB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Thumbnailator 是一个优秀的图片处理的Google开源Java类库。处理效果远比Java API的好。从API提供现有的图像文件和图像对象的类中简化了处理过程，两三行代码就能够从现有图片生成处理后的图片，且允许微调图片的生成方式，同时保持了需要写入的最低限度的代码量。<code>还支持对一个目录的所有图片进行批量处理操作。</code></p><p>支持的处理操作：图片缩放、裁剪、水印添加、旋转、保持比例、格式转换等等。Thumbnailator至今仍在不断更新……</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Thumbnailator图片处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.coobird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thumbnailator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="上传页面"><a href="#上传页面" class="headerlink" title="上传页面"></a>上传页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/html"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图上上传处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"upload"</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/jpeg,image/jpg,image/png,image/gif"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"but"</span> <span class="attr">value</span>=<span class="string">"上传图片"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:500px"</span> <span class="attr">name</span>=<span class="string">"tbg"</span> <span class="attr">id</span>=<span class="string">"tbg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"tbgShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:500px"</span> <span class="attr">name</span>=<span class="string">"ntbg"</span> <span class="attr">id</span>=<span class="string">"ntbg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"ntbgShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"ppt"</span> <span class="attr">id</span>=<span class="string">"ppt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"pptShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"rt"</span> <span class="attr">id</span>=<span class="string">"rt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"rtShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"cp"</span> <span class="attr">id</span>=<span class="string">"cp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"cpShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"wm"</span> <span class="attr">id</span>=<span class="string">"wm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"wmShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"ti"</span> <span class="attr">id</span>=<span class="string">"ti"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"tiShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"ci"</span> <span class="attr">id</span>=<span class="string">"ci"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"ciShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"os"</span> <span class="attr">id</span>=<span class="string">"os"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"osShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"bi"</span> <span class="attr">id</span>=<span class="string">"bi"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"biShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;"</span> <span class="attr">name</span>=<span class="string">"avatar"</span> <span class="attr">id</span>=<span class="string">"avatar"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"avatarShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#but"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data = <span class="keyword">new</span> FormData($(<span class="string">"#upload"</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> ($(<span class="string">"#file"</span>).val() != <span class="string">""</span> &amp;&amp; $(<span class="string">"#file"</span>)[<span class="number">0</span>].files[<span class="number">0</span>].size / <span class="number">1000</span> &lt; <span class="number">1024</span> * <span class="number">5</span>) &#123; <span class="comment">// 限制图片大小</span></span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">async</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                    type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">                    url: <span class="string">"/process"</span>,</span></span><br><span class="line"><span class="actionscript">                    dataType: <span class="string">"json"</span>,</span></span><br><span class="line">                    data: data,</span><br><span class="line"><span class="actionscript">                    fileElementId: <span class="string">"file"</span>,</span></span><br><span class="line"><span class="actionscript">                    cache: <span class="literal">false</span>,   <span class="comment">// 上传文件不需要缓存</span></span></span><br><span class="line"><span class="actionscript">                    contentType: <span class="literal">false</span>, <span class="comment">// 不设置contentType值，已经声明属性enctype="multipart/form-data"，所以这里设置为false。</span></span></span><br><span class="line"><span class="actionscript">                    processData: <span class="literal">false</span>, <span class="comment">// data值是FormData对象，不需要对数据做处理</span></span></span><br><span class="line"><span class="actionscript">                    success: <span class="function"><span class="keyword">function</span> <span class="params">(d)</span> </span>&#123;</span></span><br><span class="line">                        if (</span><br><span class="line"><span class="actionscript">                            d.hasOwnProperty(<span class="string">"srcPath"</span>) || d.hasOwnProperty(<span class="string">"tbgPath"</span>) ||</span></span><br><span class="line"><span class="actionscript">                            d.hasOwnProperty(<span class="string">"pptPath"</span>) || d.hasOwnProperty(<span class="string">"ntbgPath"</span>) ||</span></span><br><span class="line"><span class="actionscript">                            d.hasOwnProperty(<span class="string">"rtPath"</span>) || d.hasOwnProperty(<span class="string">"cpPath"</span>) ||</span></span><br><span class="line"><span class="actionscript">                            d.hasOwnProperty(<span class="string">"wmPath"</span>) || d.hasOwnProperty(<span class="string">"tiPath"</span>) ||</span></span><br><span class="line"><span class="actionscript">                            d.hasOwnProperty(<span class="string">"ciPath"</span>) || d.hasOwnProperty(<span class="string">"osPath"</span>) ||</span></span><br><span class="line"><span class="actionscript">                            d.hasOwnProperty(<span class="string">"biPath"</span>)</span></span><br><span class="line">                        ) &#123;</span><br><span class="line"><span class="actionscript">                            <span class="comment">//图片显示</span></span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#avatar"</span>).attr(<span class="string">"value"</span>, d.srcMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#avatarShow"</span>).attr(<span class="string">"src"</span>, d.srcPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#tbg"</span>).attr(<span class="string">"value"</span>, d.tbgMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#tbgShow"</span>).attr(<span class="string">"src"</span>, d.tbgPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#ntbg"</span>).attr(<span class="string">"value"</span>, d.ntbgMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#ntbgShow"</span>).attr(<span class="string">"src"</span>, d.ntbgPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#ppt"</span>).attr(<span class="string">"value"</span>, d.pptMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#pptShow"</span>).attr(<span class="string">"src"</span>, d.pptPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#rt"</span>).attr(<span class="string">"value"</span>, d.rtMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#rtShow"</span>).attr(<span class="string">"src"</span>, d.rtPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#cp"</span>).attr(<span class="string">"value"</span>, d.cpMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#cpShow"</span>).attr(<span class="string">"src"</span>, d.cpPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#wm"</span>).attr(<span class="string">"value"</span>, d.wmMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#wmShow"</span>).attr(<span class="string">"src"</span>, d.wmPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#ti"</span>).attr(<span class="string">"value"</span>, d.tiMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#tiShow"</span>).attr(<span class="string">"src"</span>, d.tiPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#ci"</span>).attr(<span class="string">"value"</span>, d.ciMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#ciShow"</span>).attr(<span class="string">"src"</span>, d.ciPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#os"</span>).attr(<span class="string">"value"</span>, d.osMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#osShow"</span>).attr(<span class="string">"src"</span>, d.osPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#bi"</span>).attr(<span class="string">"value"</span>, d.biMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#biShow"</span>).attr(<span class="string">"src"</span>, d.biPath);</span></span><br><span class="line"><span class="actionscript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                            alert(<span class="string">"上传失败"</span>);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line"><span class="actionscript">                    error: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                        alert(<span class="string">"上传异常"</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文件上传工具类"><a href="#文件上传工具类" class="headerlink" title="文件上传工具类"></a>文件上传工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> FileUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 文件上传工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/10 15:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file     文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path     文件存放路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 保存的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">upload</span><span class="params">(MultipartFile file, String path, String fileName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//确定上传的文件名</span></span><br><span class="line">        String realPath = path + <span class="string">"\\"</span> + fileName;</span><br><span class="line"></span><br><span class="line">        File dest = <span class="keyword">new</span> File(realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断文件父目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!dest.getParentFile().exists()) &#123;</span><br><span class="line">            dest.getParentFile().mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//保存文件</span></span><br><span class="line">            file.transferTo(dest);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求接口"><a href="#请求接口" class="headerlink" title="请求接口"></a>请求接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/process"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">imagePro</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    String filename = <span class="keyword">null</span>;</span><br><span class="line">    String url = <span class="string">"http://127.0.0.1:8080/img/"</span>;</span><br><span class="line">    String localPath = <span class="keyword">null</span>;</span><br><span class="line">    String srcPath = <span class="keyword">null</span>;</span><br><span class="line">    String suffixName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    String type = file.getContentType();</span><br><span class="line">    <span class="keyword">if</span> (type.equals(<span class="string">"image/jpeg"</span>) || type.equals(<span class="string">"image/jpg"</span>) || type.equals(<span class="string">"image/png"</span>) || type.equals(<span class="string">"image/gif"</span>)) &#123;</span><br><span class="line">        filename = file.getOriginalFilename();</span><br><span class="line">        suffixName = filename.substring(filename.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">        localPath = <span class="keyword">this</span>.getClass().getResource(<span class="string">"/"</span>).getPath() + <span class="string">"static/img/"</span>;</span><br><span class="line">        srcPath = localPath + uuidName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (FileUtils.upload(file, localPath, uuidName)) &#123;</span><br><span class="line">            map.put(<span class="string">"srcPath"</span>, url + uuidName);</span><br><span class="line">            map.put(<span class="string">"srcMsg"</span>, <span class="string">"原图大小为："</span> + String.format(<span class="string">"%.0f"</span>, file.getSize() / <span class="number">1024f</span>) + <span class="string">" KB"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    thumbnailImg(map, <span class="number">200</span>, <span class="number">300</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    thumbnailImg2(map, <span class="number">200</span>, <span class="number">300</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    proportionImg(map, <span class="number">0.5</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    rotatingImg(map, <span class="number">200</span>, <span class="number">300</span>, <span class="number">90</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    compressionImg(map, <span class="number">1</span>, <span class="number">0.5</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    watermarkImg(map, <span class="number">500</span>, <span class="number">500</span>,<span class="string">"1.jpg"</span>,<span class="number">0.5f</span>,<span class="number">0.8</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    tailoringImg(map, <span class="number">300</span>, <span class="number">300</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    conversionImg(map, <span class="string">"gif"</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    outputStream(map, <span class="string">"gif"</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    bufferedImg(map, <span class="string">"bmp"</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原图"><a href="#原图" class="headerlink" title="原图"></a>原图</h3><p><code>文件大小：468 KB分辨率：2560*1440像素</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/G25tluRWXhD98rw.jpg" alt="2022617.jpg"></p><h2 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h2><h3 id="按指定大小缩放图片（遵循原图高宽比例）"><a href="#按指定大小缩放图片（遵循原图高宽比例）" class="headerlink" title="按指定大小缩放图片（遵循原图高宽比例）"></a>按指定大小缩放图片（遵循原图高宽比例）</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/dQoSMpUyRtZDhWC.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> thumbnailImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 按指定大小缩放图片（遵循原图高宽比例）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [map, wdith 宽度, heigth 高度, url 请求地址, localPath 本地项目地址, srcPath 原图片地址, suffixName 文件后缀名]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">thumbnailImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">int</span> wdith, <span class="keyword">int</span> heigth, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">        <span class="comment">// of()可设置为图片目录地址，toFile()可设为图片转换后的目录地址，图片批量处理</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .size(wdith, heigth)</span><br><span class="line">                .toFile(localPath + uuidName);</span><br><span class="line">        File file = <span class="keyword">new</span> File(localPath + uuidName);</span><br><span class="line">        BufferedImage bin = ImageIO.read(file);</span><br><span class="line">        map.put(<span class="string">"tbgPath"</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">"tbgMsg"</span>, <span class="string">"遵循原图缩略大小为："</span> + String.format(<span class="string">"%.0f"</span>, file.length() / <span class="number">1024f</span>) + <span class="string">" KB; "</span> + <span class="string">"比例大小为："</span> + bin.getWidth() + <span class="string">"*"</span> + bin.getHeight());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按指定大小缩放图片（不遵循原图比例）"><a href="#按指定大小缩放图片（不遵循原图比例）" class="headerlink" title="按指定大小缩放图片（不遵循原图比例）"></a>按指定大小缩放图片（不遵循原图比例）</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/gfFUW2Ne7xSQvRd.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> thumbnailImg2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 按指定大小缩放图片（不遵循原图比例）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [map, wdith, heigth, url, localPath, srcPath , suffixName]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">thumbnailImg2</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">int</span> wdith, <span class="keyword">int</span> heigth, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">            <span class="comment">// keepAspectRatio值为false，默认为true</span></span><br><span class="line">            Thumbnails.of(srcPath)</span><br><span class="line">                    .size(wdith, heigth)</span><br><span class="line">                    .keepAspectRatio(<span class="keyword">false</span>)</span><br><span class="line">                    .toFile(localPath + uuidName);</span><br><span class="line">            File file = <span class="keyword">new</span> File(localPath + uuidName);</span><br><span class="line">            <span class="comment">// 图像缓存区类</span></span><br><span class="line">            BufferedImage bin = ImageIO.read(file);</span><br><span class="line">            map.put(<span class="string">"ntbgPath"</span>, url + uuidName);</span><br><span class="line">            map.put(<span class="string">"ntbgMsg"</span>, <span class="string">"不遵循原图缩略大小为："</span> + String.format(<span class="string">"%.0f"</span>, file.length() / <span class="number">1024f</span>) + <span class="string">" KB; "</span> + <span class="string">"比例大小为："</span> + bin.getWidth() + <span class="string">"*"</span> + bin.getHeight());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="按比例率缩放图片"><a href="#按比例率缩放图片" class="headerlink" title="按比例率缩放图片"></a>按比例率缩放图片</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/DrVOy7Y9cn6ijd8.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span>  proportionImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>  按比例率缩放图片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  [map, percentag 比例值, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">proportionImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">double</span> percentag, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">        <span class="comment">// scale 取值范围：大于1：放大，反之缩小；等于1：比例不变，压缩图片大小；等同于百分比)</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .scale(percentag)</span><br><span class="line">                .toFile(localPath + uuidName);</span><br><span class="line">        map.put(<span class="string">"pptPath"</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">"pptMsg"</span>, <span class="string">"比例图大小为："</span> + String.format(<span class="string">"%.0f"</span>, <span class="keyword">new</span> File(localPath + uuidName).length() / <span class="number">1024f</span>) + <span class="string">" KB; "</span> + <span class="string">"比例值为："</span> + percentag);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="旋转图片"><a href="#旋转图片" class="headerlink" title="旋转图片"></a>旋转图片</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/MT34DbQgXryJRoN.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> rotatingImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 旋转图片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [map, wdith, heigth, angle 角度, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotatingImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">int</span> wdith, <span class="keyword">int</span> heigth, <span class="keyword">int</span> angle, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">        <span class="comment">// rotate角度：正数顺时针旋转，反之亦然</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .size(wdith, heigth)</span><br><span class="line">                .rotate(angle)</span><br><span class="line">                .toFile(localPath + uuidName);</span><br><span class="line">        map.put(<span class="string">"rtPath"</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">"rtMsg"</span>, <span class="string">"旋转角度为："</span> + angle);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="压缩图片文件大小"><a href="#压缩图片文件大小" class="headerlink" title="压缩图片文件大小"></a>压缩图片文件大小</h3><p><code>比例图大小为：72 KB; 比例值为：0.5 (压缩图与原图分辨率一致，此代码未做比例缩放处理)</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> compressionImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 压缩图片文件大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [map, percentag 比例值, compressValue 压缩值, url, localPath, srcPath , suffixName]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">compressionImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">double</span> percentag, <span class="keyword">double</span> compressValue, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">        <span class="comment">// outputQuality 取值范围：0.0-1.0之间，等于1质量最高，等同于百分比，文件大小变大</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .scale(percentag)</span><br><span class="line">                .outputQuality(compressValue)</span><br><span class="line">                .toFile(localPath + uuidName);</span><br><span class="line">        map.put(<span class="string">"cpPath"</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">"cpMsg"</span>, <span class="string">"压缩图大小为："</span> + String.format(<span class="string">"%.0f"</span>, <span class="keyword">new</span> File(localPath + uuidName).length() / <span class="number">1024f</span>) + <span class="string">" KB; "</span> + <span class="string">"压缩值为："</span> + compressValue);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加水印"><a href="#添加水印" class="headerlink" title="添加水印"></a>添加水印</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/WRFPymzuo5wZhMg.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span>  watermarkImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>  添加水印</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  [map, wdith, heigth, fileName 图片名称, transparency 透明度, compressValue 压缩值, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">watermarkImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">int</span> wdith, <span class="keyword">int</span> heigth, String fileName, <span class="keyword">float</span> transparency, <span class="keyword">double</span> compressValue, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">        <span class="comment">// 读取水印图片</span></span><br><span class="line">        BufferedImage read = ImageIO.read(<span class="keyword">new</span> File(localPath + fileName));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * watermark(位置，水印图，透明度)：Positions.BOTTOM_RIGHT表示在右下角，有9个位置枚举可选</span></span><br><span class="line"><span class="comment">         * transparency 取值范围：0.0-1.0之间，1为不透明</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .size(wdith, heigth)</span><br><span class="line">                .watermark(Positions.BOTTOM_RIGHT, read, transparency)</span><br><span class="line">                .outputQuality(compressValue).toFile(localPath + uuidName);</span><br><span class="line">        map.put(<span class="string">"wmPath"</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">"wmMsg"</span>, <span class="string">"添加水印成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片裁剪"><a href="#图片裁剪" class="headerlink" title="图片裁剪"></a>图片裁剪</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/UYlkmG7IrT3pdyv.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span>  tailoringImg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>  图片裁剪</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [map, wdith, heigth, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tailoringImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">int</span> wdith, <span class="keyword">int</span> heigth, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * sourceRegion(位置，裁剪宽度，裁剪高度)</span></span><br><span class="line"><span class="comment">             * 位置：Positions.CENTER 表示在中间，有9个位置枚举可选，也可用两个像素值定位</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Thumbnails.of(srcPath)</span><br><span class="line"><span class="comment">//                    .sourceRegion(Positions.CENTER, wdith, heigth)</span></span><br><span class="line">                    .sourceRegion(<span class="number">0</span>,<span class="number">0</span>, wdith, heigth)</span><br><span class="line">                    .size(wdith, heigth)</span><br><span class="line">                    .toFile(localPath + uuidName);</span><br><span class="line">            map.put(<span class="string">"tiPath"</span>, url + uuidName);</span><br><span class="line">            map.put(<span class="string">"tiMsg"</span>, <span class="string">"图片裁剪成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="图片格式转换"><a href="#图片格式转换" class="headerlink" title="图片格式转换"></a>图片格式转换</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/zy6r4qZKuhna9xs.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  conversionImg</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 图片格式转换</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  [map, format 图片格式, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">conversionImg</span><span class="params">(Map&lt;String, Object&gt; map, String format, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String formatPath = srcPath.substring(<span class="number">0</span>, srcPath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">"."</span> + format;</span><br><span class="line">        String fileName = srcPath.substring(srcPath.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>, srcPath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">"."</span> + format;</span><br><span class="line">        <span class="comment">// outputFormat： 支持bmp,jpg,png,gif,jpeg格式</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .scale(<span class="number">0.5f</span>)</span><br><span class="line">                .outputFormat(format)</span><br><span class="line">                .toFile(formatPath);</span><br><span class="line">        map.put(<span class="string">"ciPath"</span>, url + fileName);</span><br><span class="line">        map.put(<span class="string">"ciMsg"</span>, <span class="string">"格式为："</span> + format + <span class="string">"    图片大小为："</span> + String.format(<span class="string">"%.0f"</span>, <span class="keyword">new</span> File(formatPath).length() / <span class="number">1024f</span>) + <span class="string">" KB; "</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把图片输出至输出流"><a href="#把图片输出至输出流" class="headerlink" title="把图片输出至输出流"></a>把图片输出至输出流</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/JfEA5XCnkVFNazs.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  outputStream</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 把图片输出至输出流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  [map, format, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outputStream</span><span class="params">(Map&lt;String, Object&gt; map, String format, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String formatPath = srcPath.substring(<span class="number">0</span>, srcPath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">"."</span> + format;</span><br><span class="line">        String fileName = srcPath.substring(srcPath.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>, srcPath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">"."</span> + format;</span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(formatPath);</span><br><span class="line"></span><br><span class="line">        Thumbnails.of(srcPath).size(<span class="number">300</span>, <span class="number">400</span>).outputFormat(format).toOutputStream(os);</span><br><span class="line">        map.put(<span class="string">"osPath"</span>, url + fileName);</span><br><span class="line">        map.put(<span class="string">"osMsg"</span>, <span class="string">"输出文件流成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出图片缓冲流"><a href="#输出图片缓冲流" class="headerlink" title="输出图片缓冲流"></a>输出图片缓冲流</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/sNR4IqQJDyZW5UY.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  bufferedImg</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span>  输出图片缓冲流</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  [map, format, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bufferedImg</span><span class="params">(Map&lt;String, Object&gt; map, String format,String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String formatPath = srcPath.substring(<span class="number">0</span>, srcPath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">"."</span> + format;</span><br><span class="line">        String fileName = srcPath.substring(srcPath.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>, srcPath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">"."</span> + format;</span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(formatPath);</span><br><span class="line"></span><br><span class="line">        BufferedImage bi = Thumbnails.of(srcPath).size(<span class="number">300</span>, <span class="number">400</span>).asBufferedImage();</span><br><span class="line">        ImageIO.write(bi, format, os);</span><br><span class="line">        map.put(<span class="string">"biPath"</span>, url + fileName);</span><br><span class="line">        map.put(<span class="string">"biMsg"</span>, <span class="string">"输出图片缓冲流成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：若png、gif格式图片中含有透明背景，使用该工具压缩处理后背景会变成黑色，这是Thumbnailator的一个bug</code></p><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/imageProcessing-demo" target="_blank" rel="noopener">https://github.com/wangdaicong/spring-boot-project/tree/master/imageProcessing-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thumbnailator </tag>
            
            <tag> 图片处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java生成有规则的编号</title>
      <link href="/2020/11/02/Java%E7%94%9F%E6%88%90%E6%9C%89%E8%A7%84%E5%88%99%E7%9A%84%E7%BC%96%E5%8F%B7/"/>
      <url>/2020/11/02/Java%E7%94%9F%E6%88%90%E6%9C%89%E8%A7%84%E5%88%99%E7%9A%84%E7%BC%96%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>做订单、出入库单等等数据时，往往需要自动生成有一定规则的编号。</p><p>编号格式为：两个字母+日期（8位）+编号（3位）。</p><h2 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a>第一种方法：</h2><p>其中，日期为系统当前的日期。首先获取系统当前日期，然后根据日期格式将date类型转换成String类型即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat f = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);<span class="comment">//设置日期格式</span></span><br><span class="line">String date = f.format(<span class="keyword">new</span> Date);</span><br></pre></td></tr></table></figure><p>后三位编号根据数据库中当天已存在编号进行自增。首先需要查询出数据库中当天的编号并且以降序排序。sql语句如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"select * from 数据库表名 where 字段 like '字母"</span>+date+<span class="string">"%' order by 字段 desc"</span>;</span><br></pre></td></tr></table></figure><p>查询的数据放在集合内，判断集合内是否有数据。有数据就获取集合中第一条数据中的编号（最大号），再截取编号的后三位，转换为int类型，自增后再转换为String类型，通过三目运算符循环三次在前面加0直至为三位数的字符串，最后拼接得到编号。若集合内没有数据就直接拼接001。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;实体类&gt; 集合名 = service.方法名(); <span class="comment">// 调用Service中的方法获取SQL中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(集合名.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">String n = 集合名.get(<span class="number">0</span>).get字段名();</span><br><span class="line"><span class="keyword">int</span> intNumber = Integer.parseInt(n.substring(<span class="number">10</span>));</span><br><span class="line">intNumber++;</span><br><span class="line">String Number = String.valueOf(intNumber);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">String Number = Number.length() &lt; <span class="number">3</span> ? <span class="string">"0"</span> + Number : Number;</span><br><span class="line">&#125;</span><br><span class="line">    String Number = <span class="string">"字母"</span> + date + Number;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    String Number = <span class="string">"字母"</span> + date + <span class="string">"001"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="第二种方法：思路"><a href="#第二种方法：思路" class="headerlink" title="第二种方法：思路"></a>第二种方法：思路</h2><p>设计一张临时数据库表存放编号(只需存一行数据和两列字段(如：id,value)即可，value供修改)，每次需要用时查询此表，获取当前value，同时加1，供后续使用，不够三位数时也可采用第一种方法中的补零策略(方法很多)</p><h2 id="第三种方法：redis推荐"><a href="#第三种方法：redis推荐" class="headerlink" title="第三种方法：redis推荐"></a>第三种方法：redis推荐</h2><p>配置redis(单机)，下图为在springBOOT架构中application.yml的配置，传统架构的配置方式都一样</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818125153151.png" alt=""></p><p>生成编号代码：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818130515200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmtleXRv,size_16,color_FFFFFF,t_70" alt=""></p><p>TimeUnit部分源码：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818130705952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmtleXRv,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="三种方法比较："><a href="#三种方法比较：" class="headerlink" title="三种方法比较："></a>三种方法比较：</h2><p>第一、二种方法都会有个致命的BUG，就是在多并发的情况下，拿到同一个编号的几率很大，有人说加同步代码块synchronized啊，确实可行，但在访问量大的情况下，一直让用户等待，页面一直在loading，那就尴尬啦，让人怀疑我们的技术能力啊</p><p><code>注意：synchronized与负载均衡(分布式)没关系，synchronized只跟进程有关联</code></p><p>第三种方法，就避免了这个问题，因为Redis是单进程单线程模式，采用队列模式将并发访问变成串行访问<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818132312935.png" alt=""></p><p>如数据源无此Key，那初始值为1，每次获取后，自动加1供后续使用</p><p><code>注意：increment方法中value还可以为double类型</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818134033441.png" alt=""></p><p>如数据源无此Key，那初始值为2.3，每次获取后，自动加2.3</p>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编号生成 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于TaskScheduler和CronTask实现动态增删启停定时任务功能</title>
      <link href="/2020/11/01/%E5%9F%BA%E4%BA%8ETaskScheduler%E5%92%8CCronTask%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%A2%9E%E5%88%A0%E5%90%AF%E5%81%9C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/11/01/%E5%9F%BA%E4%BA%8ETaskScheduler%E5%92%8CCronTask%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%A2%9E%E5%88%A0%E5%90%AF%E5%81%9C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>在spring boot项目中定时任务的开发方式：<br>一、可通过@EnableScheduling注解和@Scheduled注解实现<br>二、可通过SchedulingConfigurer接口来实现<br>三、集成Quartz框架实现<br><code>注意：第一和第二方式不能动态添加、删除、启动、停止任务。</code>在满足项目需求的情况下，尽量少的依赖其它框架，避免项目过于臃肿和复杂是最基本的开发原则。<br>查看 spring-context 这个 jar 包中 org.springframework.scheduling.ScheduledTaskRegistrar 这个类的源代码，发现可以通过改造这个类（主要是基于TaskScheduler和CronTask两个类来实现）就能实现动态增删启停定时任务功能。</p><h2 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scheduledTaskRegistrar-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Web 项目开发starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--校验--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok 简化插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--通用mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mysql数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">数据库连接地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">数据库名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">数据库密码</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># xml文件地址</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment"># 打印mybatis的执行sql语句</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment"># 开启驼峰自动转换</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="启动引导类"><a href="#启动引导类" class="headerlink" title="启动引导类"></a>启动引导类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> scheduledTaskApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 启动引导类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/26 17:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.scheduledTask.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTaskApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ScheduledTaskApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@MapperScan：指定扫描的Mapper类的包的路径，简化直接在每个Mapper类上添加注解@Mapper</p><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><h3 id="配置线程池"><a href="#配置线程池" class="headerlink" title="配置线程池"></a>配置线程池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ScheduledConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 配置线程池</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 14:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulingConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskScheduler <span class="title">taskScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建任务调度线程池</span></span><br><span class="line">        ThreadPoolTaskScheduler taskScheduler = <span class="keyword">new</span> ThreadPoolTaskScheduler();</span><br><span class="line">        <span class="comment">// 初始化线程池数量</span></span><br><span class="line">        taskScheduler.setPoolSize(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 是否将取消后的任务，从队列中删除</span></span><br><span class="line">        taskScheduler.setRemoveOnCancelPolicy(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置线程名前缀</span></span><br><span class="line">        taskScheduler.setThreadNamePrefix(<span class="string">"ThreadPool-"</span>);</span><br><span class="line">        <span class="keyword">return</span> taskScheduler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行类"><a href="#执行类" class="headerlink" title="执行类"></a>执行类</h2><h3 id="同步处理定时任务类"><a href="#同步处理定时任务类" class="headerlink" title="同步处理定时任务类"></a>同步处理定时任务类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledFuture;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ScheduledTask</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 同步处理任务类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 15:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTask</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用volatile同步机制，处理定时任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> ScheduledFuture future;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> cancel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 取消定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ScheduledFuture future = <span class="keyword">this</span>.future;</span><br><span class="line">        <span class="keyword">if</span> (future != <span class="keyword">null</span>) &#123;</span><br><span class="line">            future.cancel(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时任务注册类"><a href="#定时任务注册类" class="headerlink" title="定时任务注册类"></a>定时任务注册类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.config.CronTask;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> CronTaskRegistrar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 定时任务注册类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 17:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CronTaskRegistrar</span> <span class="keyword">implements</span> <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在多线程下，使用并发集合做为缓存，初始化容量16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Runnable, ScheduledTask&gt; scheduledTasks = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入定时任务接口</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskScheduler taskScheduler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [task 定时任务, cronExpression cron表达式]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> addCronTask</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 添加定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCronTask</span><span class="params">(Runnable task, String cronExpression)</span> </span>&#123;</span><br><span class="line">        addCronTask(<span class="keyword">new</span> CronTask(task, cronExpression));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  addCronTask</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  注册定时任务，并将任务加入到缓存中</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  [cronTask] 定时任务对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCronTask</span><span class="params">(CronTask cronTask)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cronTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Runnable task = cronTask.getRunnable();</span><br><span class="line">            <span class="keyword">if</span> (scheduledTasks.containsKey(task)) &#123;</span><br><span class="line">                removeCronTask(task);</span><br><span class="line">            &#125;</span><br><span class="line">            scheduledTasks.put(task, scheduleCronTask(cronTask));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  removeCronTask</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  取消定时任务，并将缓存中的任务记录删除</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  [task] 线程对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCronTask</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        ScheduledTask scheduledTask = scheduledTasks.remove(task);</span><br><span class="line">        <span class="keyword">if</span> (scheduledTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">            scheduledTask.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  scheduleCronTask</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  调用线程池</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  [cronTask] 定时任务对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  com.scheduledtask.task.ScheduledTask</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScheduledTask <span class="title">scheduleCronTask</span><span class="params">(CronTask cronTask)</span> </span>&#123;</span><br><span class="line">        ScheduledTask scheduledTask = <span class="keyword">new</span> ScheduledTask();</span><br><span class="line">        <span class="comment">// 指定一个触发器执行定时任务，并返回执行结果</span></span><br><span class="line">        scheduledTask.future = taskScheduler.schedule(cronTask.getRunnable(), cronTask.getTrigger());</span><br><span class="line">        <span class="keyword">return</span> scheduledTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  destroy</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  销毁所有定时任务，并将缓存清除</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ScheduledTask task : scheduledTasks.values()) &#123;</span><br><span class="line">            task.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">        scheduledTasks.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处用Map来模拟缓存，当然可以换教专业的缓存组件，如redis等等</p><h3 id="初始化定时任务类"><a href="#初始化定时任务类" class="headerlink" title="初始化定时任务类"></a>初始化定时任务类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskRunner</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 初始化定时任务类</span></span><br><span class="line"><span class="comment"> *              如有多个组件实现了CommandLineRunner接口来实现启动加载功能，Order注解可实现先后加载顺序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 14:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// @Order(value = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CronTaskRegistrar cronTaskRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 重新开启线程，避免影响主程序的启动</span></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 查找任务状态为正常的任务数据</span></span><br><span class="line">                List&lt;Task&gt; taskList = taskService.getTaskListByStatus(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!CollectionUtils.isEmpty(taskList)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">                        <span class="comment">// 执行定时任务</span></span><br><span class="line">                        SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">                        <span class="comment">// 注册任务数据</span></span><br><span class="line">                        cronTaskRegistrar.addCronTask(runnable, task.getCronExpression());</span><br><span class="line">                    &#125;</span><br><span class="line">                    log.info(<span class="string">"定时任务加载完毕......"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Spring Boot中提供了CommandLineRunner(实现启动初始化功能)和ApplicationRunner(引导类)两个接口来实现容器启动<br><code>CommandLineRunner的执行是整个应用启动的一部分，避免CommandLineRunner启动中抛出异常（java.lang.IllegalStateException: Failed to execute CommandLineRunner），直接影响主程序的启动，从而此处重新开启一个线程，让CommandLineRunner和主线程相互独立</code>，此时抛出异常并不会影响到主线程，防止踩坑</p><h3 id="定时任务执行类"><a href="#定时任务执行类" class="headerlink" title="定时任务执行类"></a>定时任务执行类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.util.SpringContextUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ReflectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> SchedulingRunnable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 反射机制执行定时任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 16:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulingRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="keyword">private</span> String params;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"定时任务开始执行 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;"</span>, beanName, methodName, params);</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object target = SpringContextUtils.getBean(beanName);</span><br><span class="line"></span><br><span class="line">            Method method = StringUtils.isEmpty(params) ?</span><br><span class="line">                    target.getClass().getDeclaredMethod(methodName) :</span><br><span class="line">                    target.getClass().getDeclaredMethod(methodName, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            ReflectionUtils.makeAccessible(method);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(params)) &#123;</span><br><span class="line">                method.invoke(target);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                method.invoke(target, params);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">"定时任务异常 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;"</span>, beanName, methodName, params);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis() - startTime;</span><br><span class="line">        log.info(<span class="string">"定时任务执行结束 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;，耗时：&#123;&#125;"</span>, beanName, methodName, params, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SchedulingRunnable that = (SchedulingRunnable) o;</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> beanName.equals(that.beanName) &amp;&amp;</span><br><span class="line">                    methodName.equals(that.methodName) &amp;&amp;</span><br><span class="line">                    that.params == <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanName.equals(that.beanName) &amp;&amp;</span><br><span class="line">                methodName.equals(that.methodName) &amp;&amp;</span><br><span class="line">                params.equals(that.params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(beanName, methodName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(beanName, methodName, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="获取实例对象"><a href="#获取实例对象" class="headerlink" title="获取实例对象"></a>获取实例对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> SpringContextUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 获取当前上下文对象工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 16:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtils</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 应用上下文对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        SpringContextUtils.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span>  getBean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>  获取当前上下文对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [name]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  java.lang.Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是获取定时任务业务逻辑类注解@Component上配置的实例名(对应数据库中的beanName)</p><h2 id="实体对象与sql脚本"><a href="#实体对象与sql脚本" class="headerlink" title="实体对象与sql脚本"></a>实体对象与sql脚本</h2><h3 id="任务实体类"><a href="#任务实体类" class="headerlink" title="任务实体类"></a>任务实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.pojo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Task</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 定时任务实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 10:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//全参构造</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">// 无参构造</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"task"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"beanName"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"对象名不能为空！"</span>)</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"methodName"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"方法名不能为空！"</span>)</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"methodParams"</span>)</span><br><span class="line">    <span class="keyword">private</span> String methodParams;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cronExpression"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"cron表达式不能为空！"</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(message = <span class="string">"cron表达式错误！"</span>, regexp = <span class="string">"^\\s*($|#|\\w+\\s*=|(\\?|\\*|(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?(?:,(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?)*)\\s+(\\?|\\*|(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?(?:,(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?)*)\\s+(\\?|\\*|(?:[01]?\\d|2[0-3])(?:(?:-|\\/|\\,)(?:[01]?\\d|2[0-3]))?(?:,(?:[01]?\\d|2[0-3])(?:(?:-|\\/|\\,)(?:[01]?\\d|2[0-3]))?)*)\\s+(\\?|\\*|(?:0?[1-9]|[12]\\d|3[01])(?:(?:-|\\/|\\,)(?:0?[1-9]|[12]\\d|3[01]))?(?:,(?:0?[1-9]|[12]\\d|3[01])(?:(?:-|\\/|\\,)(?:0?[1-9]|[12]\\d|3[01]))?)*)\\s+(\\?|\\*|(?:[1-9]|1[012])(?:(?:-|\\/|\\,)(?:[1-9]|1[012]))?(?:L|W)?(?:,(?:[1-9]|1[012])(?:(?:-|\\/|\\,)(?:[1-9]|1[012]))?(?:L|W)?)*|\\?|\\*|(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(?:(?:-)(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))?(?:,(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(?:(?:-)(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))?)*)\\s+(\\?|\\*|(?:[0-6])(?:(?:-|\\/|\\,|#)(?:[0-6]))?(?:L)?(?:,(?:[0-6])(?:(?:-|\\/|\\,|#)(?:[0-6]))?(?:L)?)*|\\?|\\*|(?:MON|TUE|WED|THU|FRI|SAT|SUN)(?:(?:-)(?:MON|TUE|WED|THU|FRI|SAT|SUN))?(?:,(?:MON|TUE|WED|THU|FRI|SAT|SUN)(?:(?:-)(?:MON|TUE|WED|THU|FRI|SAT|SUN))?)*)(|\\s)+(\\?|\\*|(?:|\\d&#123;4&#125;)(?:(?:-|\\/|\\,)(?:|\\d&#123;4&#125;))?(?:,(?:|\\d&#123;4&#125;)(?:(?:-|\\/|\\,)(?:|\\d&#123;4&#125;))?)*))$"</span>)</span><br><span class="line">    <span class="keyword">private</span> String cronExpression;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"jobStatus"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer jobStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"createTime"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updateTime"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创表语句"><a href="#创表语句" class="headerlink" title="创表语句"></a>创表语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`task`</span> (</span><br><span class="line">      <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">      <span class="string">`beanName`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'任务名称'</span>,</span><br><span class="line">      <span class="string">`methodName`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'方法名称'</span>,</span><br><span class="line">      <span class="string">`methodParams`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'方法参数'</span>,</span><br><span class="line">      <span class="string">`cronExpression`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'cron表达式'</span>,</span><br><span class="line">      <span class="string">`jobStatus`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'任务状态 0暂停 1正常'</span>,</span><br><span class="line">      <span class="string">`remark`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">      <span class="string">`createTime`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">      <span class="string">`updateTime`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">      PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">      <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`beanName`</span> (<span class="string">`beanName`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci <span class="keyword">COMMENT</span>=<span class="string">'定时任务表'</span>;</span><br></pre></td></tr></table></figure><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.mapper.TaskMapper;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 业务逻辑层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 15:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TaskService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskMapper taskMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertTask</span><span class="params">(Task task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.insertSelective(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Task&gt; <span class="title">getTaskListByStatus</span><span class="params">(Integer jobStatus)</span> </span>&#123;</span><br><span class="line">        Example example = <span class="keyword">new</span> Example(Task<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Example.Criteria criteria = example.createCriteria();</span><br><span class="line">        criteria.andEqualTo(<span class="string">"jobStatus"</span>, jobStatus);</span><br><span class="line">        <span class="keyword">return</span> taskMapper.selectByExample(example);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">findTaskByJobId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteTaskByJobId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.deleteByPrimaryKey(id) &gt; <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateTask</span><span class="params">(Task task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.updateByPrimaryKeySelective(task) &gt; <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据连接"><a href="#数据连接" class="headerlink" title="数据连接"></a>数据连接</h2><h3 id="数据层类"><a href="#数据层类" class="headerlink" title="数据层类"></a>数据层类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 数据连接层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 11:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TaskMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Task</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：因为继承Mapper类，使用通用mapper插件做数据层处理，基本的CRUD单表操作方法都已有</code></p><h3 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.scheduledtask.mapper.TaskMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskStatus</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 任务状态枚举</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 11:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">// 全参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TaskStatus &#123;</span><br><span class="line">    SUSPEND(<span class="string">"暂停"</span>, <span class="number">0</span>),</span><br><span class="line">    NORMAL(<span class="string">"正常"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">desc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时任务业务逻辑类"><a href="#定时任务业务逻辑类" class="headerlink" title="定时任务业务逻辑类"></a>定时任务业务逻辑类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskOne</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 定时任务业务逻辑类</span></span><br><span class="line"><span class="comment"> *              Component中的value对应数据库的beanName字段</span></span><br><span class="line"><span class="comment"> *              方法名对应数据库的methodName字段</span></span><br><span class="line"><span class="comment"> *              参数对应数据库的methodParams字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/30 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"TaskOne"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskOne</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">taskWithParams</span><span class="params">(String params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   此处写有参定时任务的业务逻辑</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">taskNoParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *   此处写无参定时任务的业务逻辑</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层类"><a href="#控制层类" class="headerlink" title="控制层类"></a>控制层类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.enums.TaskStatus;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.task.CronTaskRegistrar;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.task.SchedulingRunnable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 控制层类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 16:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CronTaskRegistrar cronTaskRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/addTask"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addTask</span><span class="params">(@Valid Task task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (taskService.insertTask(task) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"新增失败！"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (task.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.addCronTask(runnable, task.getCronExpression());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"新增成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/deleteTask/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteTask</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">        Task task = taskService.findTaskByJobId(id);</span><br><span class="line">        <span class="keyword">if</span> (!taskService.deleteTaskByJobId(id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"删除失败！"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (task.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.removeCronTask(runnable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"删除成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/updateTask"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateTask</span><span class="params">(Task taskNew)</span> </span>&#123;</span><br><span class="line">        Task taskOld = taskService.findTaskByJobId(taskNew.getId());</span><br><span class="line">        <span class="keyword">if</span> (taskService.updateTask(taskNew)) &#123;</span><br><span class="line">            <span class="comment">// 先取消原有的定时任务，并删除缓存</span></span><br><span class="line">            <span class="keyword">if</span> (taskOld.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                <span class="comment">// 链式编程，使用了lombok的注解@Accessors</span></span><br><span class="line">                SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable()</span><br><span class="line">                        .setBeanName(taskOld.getBeanName())</span><br><span class="line">                        .setMethodName(taskOld.getMethodName())</span><br><span class="line">                        .setParams(taskOld.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.removeCronTask(runnable);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 新增定时任务，并添加到缓存</span></span><br><span class="line">            <span class="keyword">if</span> (taskNew.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(taskNew.getBeanName(), taskNew.getMethodName(), taskNew.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.addCronTask(runnable, taskNew.getCronExpression());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"更新失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"更新成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改任务状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/updateTaskStatus/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateTaskStatus</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">        Task task = taskService.findTaskByJobId(id);</span><br><span class="line">        <span class="comment">// 如原先是启动状态，便设置为停止，并从缓存中删除，反之亦然</span></span><br><span class="line">        <span class="keyword">if</span> (task.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">            SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">            cronTaskRegistrar.removeCronTask(runnable);</span><br><span class="line">            task.setJobStatus(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> taskService.updateTask(task) ? <span class="string">"修改成功！"</span> : <span class="string">"修改失败！"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">            cronTaskRegistrar.addCronTask(runnable, task.getCronExpression());</span><br><span class="line">            task.setJobStatus(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> taskService.updateTask(task) ? <span class="string">"修改成功！"</span> : <span class="string">"修改失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：此处用到的校验注解是在org.springframework.validation包下的，如只在方法参数上加@Validated校验注解无效的话，则在类上加@Validated注解，并在方法参数上加@Valid注解</code></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="启动加载"><a href="#启动加载" class="headerlink" title="启动加载"></a>启动加载</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/01/zVoHO4Wfu2y69AJ.png" alt="项目启动"></p><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.controller.TaskController;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ScheduledTaskTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= ScheduledTaskApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ScheduledTaskTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskController taskController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTaskController</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/*      Task task = new Task();</span></span><br><span class="line"><span class="comment">        task.setBeanName("TaskOne");</span></span><br><span class="line"><span class="comment">        task.setMethodName("taskWithParams");</span></span><br><span class="line"><span class="comment">        task.setMethodParams("111");</span></span><br><span class="line"><span class="comment">        task.setCronExpression("0/5 * * * * ?");</span></span><br><span class="line"><span class="comment">        task.setJobStatus(1);</span></span><br><span class="line"><span class="comment">        task.setRemark("111");</span></span><br><span class="line"><span class="comment">        task.setCreateTime(new Date());</span></span><br><span class="line"><span class="comment">        task.setUpdateTime(new Date());</span></span><br><span class="line"><span class="comment">        String msg = taskController.addTask(task);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String msg = taskController.deleteTask(2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*      Task task = new Task();</span></span><br><span class="line"><span class="comment">        task.setId(50);</span></span><br><span class="line"><span class="comment">        task.setBeanName("TaskOne");</span></span><br><span class="line"><span class="comment">        task.setMethodName("taskNoParams");</span></span><br><span class="line"><span class="comment">        task.setMethodParams("");</span></span><br><span class="line"><span class="comment">        task.setCronExpression("0/5 * * * * ?");</span></span><br><span class="line"><span class="comment">        task.setJobStatus(1);</span></span><br><span class="line"><span class="comment">        task.setRemark("111");</span></span><br><span class="line"><span class="comment">        task.setCreateTime(new Date());</span></span><br><span class="line"><span class="comment">        task.setUpdateTime(new Date());</span></span><br><span class="line"><span class="comment">        String msg = taskController.updateTask(task);*/</span></span><br><span class="line"></span><br><span class="line">        String msg = taskController.updateTaskStatus(<span class="number">50</span>);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/scheduledTaskRegistrar-demo" target="_blank" rel="noopener">https://github.com/wangdaicong/spring-boot-project/tree/master/scheduledTaskRegistrar-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 任务调度 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 定时任务 </tag>
            
            <tag> 通用mapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>screw (螺丝钉) 数据库表结构文档生成工具</title>
      <link href="/2020/07/15/screw%20(%E8%9E%BA%E4%B8%9D%E9%92%89)%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/07/15/screw%20(%E8%9E%BA%E4%B8%9D%E9%92%89)%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>　　数据库文档也是交付的重要内容，本文的工具可以帮助大家快速生成相应文档，并支持多种数据库<br>      　　在企业级开发中、我们经常会有编写数据库表结构文档的时间付出，关于数据库表结构文档状态：要么没有、要么有、但都是手写、后期运维开发，需要手动进行维护到文档中，很是繁琐、如果忘记一次维护、就会给以后工作造成很多困扰、无形中制造了很多坑留给自己和后人。</p><h2 id="screw-特点"><a href="#screw-特点" class="headerlink" title="screw 特点"></a>screw 特点</h2><ul><li>简洁、轻量、设计良好。不需要 powerdesigner 这种重量的建模工具 多数据库支持 。</li><li>支持市面常见的数据库类型MySQL、Oracle、SqlServer</li><li>多种格式文档。支持 MD、HTML、WORD 格式</li><li>灵活扩展。支持用户自定义模板和展示样式</li></ul><h2 id="数据库支持"><a href="#数据库支持" class="headerlink" title="数据库支持"></a>数据库支持</h2><ul><li>MySQL</li><li>MariaDB</li><li>TIDB</li><li>Oracle</li><li>SqlServer</li><li>PostgreSQL</li><li>Cache DB</li></ul><h2 id="文档生成支持"><a href="#文档生成支持" class="headerlink" title="文档生成支持"></a>文档生成支持</h2><ul><li>html</li><li>word</li><li>markdwon</li></ul><h2 id="文档截图"><a href="#文档截图" class="headerlink" title="文档截图"></a>文档截图</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyMi8xNjE0MTRfNzRjZDBiNjhfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyMi8xNjE3MjNfNmRhNThjNDFfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><h3 id="word"><a href="#word" class="headerlink" title="word"></a>word</h3><p> <img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyNS8yMDA5NDZfMWRjMDcxN2ZfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><h3 id="markdwon"><a href="#markdwon" class="headerlink" title="markdwon"></a>markdwon</h3><p> <img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyNS8yMTQ3NDlfN2IxNWQ4YmRfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"><br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyNS8yMTUwMDZfMzYwMWUxMzVfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><h2 id="SpringBoot整合screw生成数据库文档"><a href="#SpringBoot整合screw生成数据库文档" class="headerlink" title="SpringBoot整合screw生成数据库文档"></a>SpringBoot整合screw生成数据库文档</h2><h3 id="代码生成（推荐）"><a href="#代码生成（推荐）" class="headerlink" title="代码生成（推荐）"></a>代码生成（推荐）</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--freemarker模版--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--screw依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试类代码"><a href="#测试类代码" class="headerlink" title="测试类代码"></a>测试类代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrewApplicationTests</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数据源：HikariCP 线程池, SpringBoot 2.0开始内置了HikariCP，2.0之前的版本需要引入依赖</span></span><br><span class="line">        HikariConfig hikariConfig = <span class="keyword">new</span> HikariConfig();</span><br><span class="line">        <span class="comment">// com.mysql.jdbc.Driver MySQL5驱动；com.mysql.cj.jdbc.Driver MySQL6之后的驱动</span></span><br><span class="line">        hikariConfig.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        hikariConfig.setJdbcUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/数据库名"</span>);</span><br><span class="line">        hikariConfig.setUsername(<span class="string">"数据库帐号"</span>);</span><br><span class="line">        hikariConfig.setPassword(<span class="string">"数据可密码"</span>);</span><br><span class="line">        <span class="comment">//设置可以获取tables remarks信息</span></span><br><span class="line">        hikariConfig.addDataSourceProperty(<span class="string">"useInformationSchema"</span>, <span class="string">"true"</span>);</span><br><span class="line">        hikariConfig.setMinimumIdle(<span class="number">2</span>);</span><br><span class="line">        hikariConfig.setMaximumPoolSize(<span class="number">5</span>);</span><br><span class="line">        DataSource dataSource = <span class="keyword">new</span> HikariDataSource(hikariConfig);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 1、生成文件配置</span></span><br><span class="line">        EngineConfig engineConfig = EngineConfig.builder()</span><br><span class="line">                <span class="comment">//生成文件路径(改成自己的生成路径)</span></span><br><span class="line">                .fileOutputDir(<span class="string">"/Users/用户/Desktop"</span>)</span><br><span class="line">                <span class="comment">//生成后是否立即打开目录</span></span><br><span class="line">                .openOutputDir(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">//文件类型 有HTML、WORD、MD三种枚举选择</span></span><br><span class="line">                .fileType(EngineFileType.WORD)</span><br><span class="line">                <span class="comment">//生成模板实现</span></span><br><span class="line">                .produceType(EngineTemplateType.freemarker).build();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 忽略表名（可选）</span></span><br><span class="line">        List&lt;String&gt; ignoreTableName = Arrays.asList(<span class="string">"aa"</span>, <span class="string">"test_group"</span>);</span><br><span class="line">        <span class="comment">// 忽略表前缀（可选）</span></span><br><span class="line">        List&lt;String&gt; ignorePrefix = Collections.singletonList(<span class="string">"czb_"</span>);</span><br><span class="line">        <span class="comment">// 忽略表后缀（可选）</span></span><br><span class="line">        List&lt;String&gt; ignoreSuffix = Arrays.asList(<span class="string">"_test"</span>, <span class="string">"_test1"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 2、配置想要忽略的表（可选）</span></span><br><span class="line">        ProcessConfig processConfig = ProcessConfig.builder()</span><br><span class="line">                .ignoreTableName(ignoreTableName)</span><br><span class="line">                .ignoreTablePrefix(ignorePrefix)</span><br><span class="line">                .ignoreTableSuffix(ignoreSuffix)</span><br><span class="line">                .build();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 3、生成文档配置（包含以下自定义版本号、标题、描述（数据库名 + 描述 = 文件名）等配置连接）</span></span><br><span class="line">        Configuration config = Configuration.builder()</span><br><span class="line">                .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">                .title(<span class="string">"数据库文档"</span>)</span><br><span class="line">                .description(<span class="string">"数据库设计文档生成"</span>)</span><br><span class="line">                .dataSource(dataSource)</span><br><span class="line">                .engineConfig(engineConfig)</span><br><span class="line">                .produceConfig(processConfig).build();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 4、执行生成</span></span><br><span class="line">        <span class="keyword">new</span> DocumentationExecute(config).execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动run，运行测试类或contextLoads方法即可</p><img  src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200715131215704.png" align='left'/><h3 id="Maven-插件生成"><a href="#Maven-插件生成" class="headerlink" title="Maven 插件生成"></a>Maven 插件生成</h3><p>在pom.xml文件中加入如下配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- HikariCP --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mysql driver--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.48<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--username--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">username</span>&gt;</span>数据库帐号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--password--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">password</span>&gt;</span>数据库密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver  com.mysql.jdbc.Driver MySQL5驱动；com.mysql.cj.jdbc.Driver MySQL6之后的驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--jdbc url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdbcUrl</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/数据库名<span class="tag">&lt;/<span class="name">jdbcUrl</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成文件类型 HTML、WORD、MD三种选择--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileType</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">fileType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--文件输出目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileOutputDir</span>&gt;</span>E:<span class="tag">&lt;/<span class="name">fileOutputDir</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--打开文件输出目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">openOutputDir</span>&gt;</span>true<span class="tag">&lt;/<span class="name">openOutputDir</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成模板--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">produceType</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">produceType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--描述--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>数据库文档生成<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--版本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据库文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后运行maven插件生成即可</p><img  src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200715130912560.png" align='left'/><blockquote><p>screw 码云地址：<a href="https://gitee.com/leshalv/screw" target="_blank" rel="noopener">https://gitee.com/leshalv/screw</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 文档生成 </tag>
            
            <tag> screw </tag>
            
            <tag> mysql </tag>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析 VO、DTO、DO、PO 的概念、区别和用处！</title>
      <link href="/2020/07/13/%E6%B5%85%E6%9E%90%20VO%E3%80%81DTO%E3%80%81DO%E3%80%81PO%20%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E5%A4%84%EF%BC%81/"/>
      <url>/2020/07/13/%E6%B5%85%E6%9E%90%20VO%E3%80%81DTO%E3%80%81DO%E3%80%81PO%20%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E5%A4%84%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>本篇文章主要讨论一下我们经常会用到的一些对象：VO、DTO、DO和PO。<br>由于不同的项目和开发人员有不同的命名习惯，这里我首先对上述的概念进行一个简单描述，名字只是个标识，我们重点关注其概念：</p><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p><strong>VO（View Object）：</strong>视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p><p><strong>DTO（Data Transfer Object）</strong>：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p><p><strong>DO（Domain Object）</strong>：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。</p><p><strong>PO（Persistent Object）</strong>：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</p><h2 id="模型："><a href="#模型：" class="headerlink" title="模型："></a>模型：</h2><p>下面以一个时序图建立简单模型来描述上述对象在三层架构应用中的位置 </p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/13/82WpYBrICDsPc4M.png" alt="avatar"></p><ul><li>用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。</li><li>展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。</li><li>服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。</li><li>服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。</li><li>对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。</li></ul><h2 id="VO与DTO的区别"><a href="#VO与DTO的区别" class="headerlink" title="VO与DTO的区别"></a>VO与DTO的区别</h2><p>　　大家可能会有个疑问（在笔者参与的项目中，很多程序员也有相同的疑惑）：既然DTO是展示层与服务层之间传递数据的对象，为什么还需要一个VO呢？对！对于绝大部分的应用场景来说，DTO和VO的属性值基本是一致的，而且他们通常都是POJO，因此没必要多此一举，但不要忘记这是实现层面的思维，对于设计层面来说，概念上还是应该存在VO和DTO，因为两者有着本质的区别，DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。</p><p>　　用一个例子来说明可能会比较容易理解：例如服务层有一个getUser的方法返回一个系统用户，其中有一个属性是gender(性别)，对于服务层来说，它只从语义上定义：1-男性，2-女性，0-未指定，而对于展示层来说，它可能需要用“帅哥”代表男性，用“美女”代表女性，用“秘密”代表未指定。说到这里，可能你还会反驳，在服务层直接就返回“帅哥美女”不就行了吗？对于大部分应用来说，这不是问题，但设想一下，如果需求允许客户可以定制风格，而不同风格对于“性别”的表现方式不一样，又或者这个服务同时供多个客户端使用（不同门户），而不同的客户端对于表现层的要求有所不同，那么，问题就来了。再者，回到设计层面上分析，从职责单一原则来看，服务层只负责业务，与具体的表现形式无关，因此，它返回的DTO，不应该出现与表现形式的耦合。</p><p>　　理论归理论，这到底还是分析设计层面的思维，是否在实现层面必须这样做呢？一刀切的做法往往会得不偿失，下面我马上会分析应用中如何做出正确的选择。</p><h2 id="VO与DTO的应用"><a href="#VO与DTO的应用" class="headerlink" title="VO与DTO的应用"></a>VO与DTO的应用</h2><p>　　上面只是用了一个简单的例子来说明VO与DTO在概念上的区别，本节将会告诉你如何在应用中做出正确的选择。</p><p>　　在以下才场景中，我们可以考虑把VO与DTO二合为一（注意：是实现层面）：</p><ul><li>当需求非常清晰稳定，而且客户端很明确只有一个的时候，没有必要把VO和DTO区分开来，这时候VO可以退隐，用一个DTO即可，为什么是VO退隐而不是DTO？回到设计层面，服务层的职责依然不应该与展示层耦合，所以，对于前面的例子，你很容易理解，DTO对于“性别”来说，依然不能用“帅哥美女”，这个转换应该依赖于页面的脚本（如JavaScript）或其他机制（JSTL、EL、CSS）</li><li>即使客户端可以进行定制，或者存在多个不同的客户端，如果客户端能够用某种技术（脚本或其他机制）实现转换，同样可以让VO退隐</li></ul><br>　　以下场景需要优先考虑VO、DTO并存：<ul><li>上述场景的反面场景</li><li>因为某种技术原因，比如某个框架（如Flex）提供自动把POJO转换为UI中某些Field时，可以考虑在实现层面定义出VO，这个权衡完全取决于使用框架的自动转换能力带来的开发和维护效率提升与设计多一个VO所多做的事情带来的开发和维护效率的下降之间的比对。</li><li>如果页面出现一个“大视图”，而组成这个大视图的所有数据需要调用多个服务，返回多个DTO来组装（当然，这同样可以通过服务层提供一次性返回一个大视图的DTO来取代，但在服务层提供一个这样的方法是否合适，需要在设计层面进行权衡）。</li></ul><h2 id="DTO与DO的区别"><a href="#DTO与DO的区别" class="headerlink" title="DTO与DO的区别"></a>DTO与DO的区别</h2><p>　　首先是概念上的区别，DTO是展示层和服务层之间的数据传输对象（可以认为是两者之间的协议），而DO是对现实世界各种业务角色的抽象，这就引出了两者在数据上的区别，例如UserInfo和User（对于DTO和DO的命名规则，请参见笔者前面的一篇博文），对于一个getUser方法来说，本质上它永远不应该返回用户的密码，因此UserInfo至少比User少一个password的数据。而在领域驱动设计中，正如第一篇系列文章所说，DO不是简单的POJO，它具有领域业务逻辑。</p><h2 id="DTO与DO的应用"><a href="#DTO与DO的应用" class="headerlink" title="DTO与DO的应用"></a>DTO与DO的应用</h2><p>　　从上一节的例子中，细心的读者可能会发现问题：既然getUser方法返回的UserInfo不应该包含password，那么就不应该存在password这个属性定义，但如果同时有一个createUser的方法，传入的UserInfo需要包含用户的password，怎么办？在设计层面，展示层向服务层传递的DTO与服务层返回给展示层的DTO在概念上是不同的，但在实现层面，我们通常很少会这样做（定义两个UserInfo，甚至更多），因为这样做并不见得很明智，我们完全可以设计一个完全兼容的DTO，在服务层接收数据的时候，不该由展示层设置的属性（如订单的总价应该由其单价、数量、折扣等决定），无论展示层是否设置，服务层都一概忽略，而在服务层返回数据时，不该返回的数据（如用户密码），就不设置对应的属性。</p><p>　　对于DO来说，还有一点需要说明：为什么不在服务层中直接返回DO呢？这样可以省去DTO的编码和转换工作，原因如下：</p><ul><li>两者在本质上的区别可能导致彼此并不一一对应，一个DTO可能对应多个DO，反之亦然，甚至两者存在多对多的关系。</li><li>DO具有一些不应该让展示层知道的数据</li><li>DO具有业务方法，如果直接把DO传递给展示层，展示层的代码就可以绕过服务层直接调用它不应该访问的操作，对于基于AOP拦截服务层来进行访问控制的机制来说，这问题尤为突出，而在展示层调用DO的业务方法也会因为事务的问题，让事务难以控制。</li><li>对于某些ORM框架（如Hibernate）来说，通常会使用“延迟加载”技术，如果直接把DO暴露给展示层，对于大部分情况，展示层不在事务范围之内（Open session in view在大部分情况下不是一种值得推崇的设计），如果其尝试在Session关闭的情况下获取一个未加载的关联对象，会出现运行时异常（对于Hibernate来说，就是LazyInitiliaztionException）。</li><li>从设计层面来说，展示层依赖于服务层，服务层依赖于领域层，如果把DO暴露出去，就会导致展示层直接依赖于领域层，这虽然依然是单向依赖，但这种跨层依赖会导致不必要的耦合。</li></ul><br>　　对于DTO来说，也有一点必须进行说明，就是DTO应该是一个“扁平的二维对象”，举个例子来说明：如果User会关联若干个其他实体（例如Address、Account、Region等），那么getUser()返回的UserInfo，是否就需要把其关联的对象的DTO都一并返回呢？如果这样的话，必然导致数据传输量的大增，对于分布式应用来说，由于涉及数据在网络上的传输、序列化和反序列化，这种设计更不可接受。如果getUser除了要返回User的基本信息外，还需要返回一个AccountId、AccountName、RegionId、RegionName，那么，请把这些属性定义到UserInfo中，把一个“立体”的对象树“压扁”成一个“扁平的二维对象”，笔者目前参与的项目是一个分布式系统，该系统不管三七二十一，把一个对象的所有关联对象都转换为相同结构的DTO对象树并返回，导致性能非常的慢。<h2 id="DO与PO的区别"><a href="#DO与PO的区别" class="headerlink" title="DO与PO的区别"></a>DO与PO的区别</h2><p>　　DO和PO在绝大部分情况下是一一对应的，PO是只含有get/set方法的POJO，但某些场景还是能反映出两者在概念上存在本质的区别：</p><ul><li>DO在某些场景下不需要进行显式的持久化，例如利用策略模式设计的商品折扣策略，会衍生出折扣策略的接口和不同折扣策略实现类，这些折扣策略实现类可以算是DO，但它们只驻留在静态内存，不需要持久化到持久层，因此，这类DO是不存在对应的PO的。</li><li>同样的道理，某些场景下，PO也没有对应的DO，例如老师Teacher和学生Student存在多对多的关系，在关系数据库中，这种关系需要表现为一个中间表，也就对应有一个TeacherAndStudentPO的PO，但这个PO在业务领域没有任何现实的意义，它完全不能与任何DO对应上。这里要特别声明，并不是所有多对多关系都没有业务含义，这跟具体业务场景有关，例如：两个PO之间的关系会影响具体业务，并且这种关系存在多种类型，那么这种多对多关系也应该表现为一个DO，又如：“角色”与“资源”之间存在多对多关系，而这种关系很明显会表现为一个DO——“权限”。</li><li>某些情况下，为了某种持久化策略或者性能的考虑，一个PO可能对应多个DO，反之亦然。例如客户Customer有其联系信息Contacts，这里是两个一对一关系的DO，但可能出于性能的考虑（极端情况，权作举例），为了减少数据库的连接查询操作，把Customer和Contacts两个DO数据合并到一张数据表中。反过来，如果一本图书Book，有一个属性是封面cover，但该属性是一副图片的二进制数据，而某些查询操作不希望把cover一并加载，从而减轻磁盘IO开销，同时假设ORM框架不支持属性级别的延迟加载，那么就需要考虑把cover独立到一张数据表中去，这样就形成一个DO对应对个PO的情况。</li><li>PO的某些属性值对于DO没有任何意义，这些属性值可能是为了解决某些持久化策略而存在的数据，例如为了实现“乐观锁”，PO存在一个version的属性，这个version对于DO来说是没有任何业务意义的，它不应该在DO中存在。同理，DO中也可能存在不需要持久化的属性。</li></ul><h2 id="DO与PO的应用"><a href="#DO与PO的应用" class="headerlink" title="DO与PO的应用"></a>DO与PO的应用</h2><p>　　由于ORM框架的功能非常强大而大行其道，而且JavaEE也推出了JPA规范，现在的业务应用开发，基本上不需要区分DO与PO，PO完全可以通过JPA，Hibernate Annotations/hbm隐藏在DO之中。虽然如此，但有些问题我们还必须注意：</p><ul><li>对于DO中不需要持久化的属性，需要通过ORM显式的声明，如：在JPA中，可以利用@Transient声明。</li><li>对于PO中为了某种持久化策略而存在的属性，例如version，由于DO、PO合并了，必须在DO中声明，但由于这个属性对DO是没有任何业务意义的，需要让该属性对外隐藏起来，最常见的做法是把该属性的get/set方法私有化，甚至不提供get/set方法，但对于Hibernate来说，这需要特别注意，由于Hibernate从数据库读取数据转换为DO时，是利用反射机制先调用DO的空参数构造函数构造DO实例，然后再利用JavaBean的规范反射出set方法来为每个属性设值，如果不显式声明set方法，或把set方法设置为private，都会导致Hibernate无法初始化DO，从而出现运行时异常，可行的做法是把属性的set方法设置为protected。</li><li>对于一个DO对应多个PO，或者一个PO对应多个DO的场景，以及属性级别的延迟加载，Hibernate都提供了很好的支持，请参考Hibnate的相关资料。</li></ul><br>　　到目前为止，相信大家都已经比较清晰的了解VO、DTO、DO、PO的概念、区别和实际应用了。通过上面的详细分析，我们还可以总结出一个原则：分析设计层面和实现层面完全是两个独立的层面，即使实现层面通过某种技术手段可以把两个完全独立的概念合二为一，在分析设计层面，我们仍然（至少在头脑中）需要把概念上独立的东西清晰的区分开来，这个原则对于做好分析设计非常重要（工具越先进，往往会让我们越麻木）。<br>　　<blockquote><p>作者：Johnny.Liang<br>来源：blogjava.net/johnnylzb/archive/2010/05/27/321968.html</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VO </tag>
            
            <tag> DTO </tag>
            
            <tag> DO </tag>
            
            <tag> PO </tag>
            
            <tag> 领域驱动 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
