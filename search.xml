<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>别再说不会解决 &quot;跨域&quot; 问题啦</title>
      <link href="/2022/01/10/%E5%88%AB%E5%86%8D%E8%AF%B4%E4%B8%8D%E4%BC%9A%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%95%A6/"/>
      <url>/2022/01/10/%E5%88%AB%E5%86%8D%E8%AF%B4%E4%B8%8D%E4%BC%9A%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%95%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是“跨源”"><a href="#什么是“跨源”" class="headerlink" title="什么是“跨源”"></a>什么是“跨源”</h1><p>其实我们平常说的跨域是一种狭义的请求场景，简单来说就是“跨“过<code>浏览器</code>的<code>同源策略</code>去请求资“源”，所以我们叫它“跨源”也没啥问题。那么“跨源”，<code>源是什么？</code> <code>浏览器的同源策略什么是同源？</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const url &#x3D; &#39;https:&#x2F;&#x2F;www.google.com:3000&#39;</span><br></pre></td></tr></table></figure><p>比如上面的这个 URL，协议是：<code>https</code>，域名是 <code>www.google.com</code>，端口是 <code>3000</code>。不同源了会怎么样？<code>会有很多限制</code>，比如：</p><blockquote><ul><li>Cookie，LocalStorage，IndexDB 等存储性内容无法读取</li><li>DOM 节点无法访问</li><li>Ajax 请求发出去了，但是响应被浏览器拦截了</li></ul></blockquote><p>为什么要搞个这么个东西来限制？<code>基于安全考虑</code>，没有它，可能会遇到：</p><blockquote><ul><li>Cookie劫持，被恶意网站窃取数据</li><li>更容易受到 XSS，CSRF 攻击</li><li>无法隔离潜在恶意文件</li><li>… …</li></ul></blockquote><p>所以得有。正是因为<code>浏览器同源策略</code>的存在，<code>Ajax请求有可能在发出去后就被拦截了</code>，它还会给你报个错：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">✘ Access to XMLHttpRequest at &#39;xxx&#39; from origin &#39;xxx&#39; has been block by CORS,  </span><br><span class="line">  policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>这种发出去拿不到响应的感受，非常难受</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/01/07/QvdmEIHSaJxT63p.jpg" alt=""></p><p>接下来就来看看怎么用科学的方法解决跨域的问题。</p><h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h1><p>就是<code>前端利用了 &lt;script&gt; 标签的 src 属性没有跨域限制的漏洞</code>，可以得到从其他来源动态产生的 JSON 数据。<code>为什么叫 JSONP ？JSONP 是 JSON with Padding 的缩写</code>，具体实现思路大致分为以下步骤：</p><blockquote><ul><li>本站的脚本创建一个 元素，src 地址指向跨域请求数据的服务器</li><li>提供一个回调函数来接受数据，函数名可以通过地址参数传递进行约定</li><li>服务器收到请求后，返回一个包装了JSON数据的响应字符串，类似这样：callback({…})</li></ul></blockquote><p><code>浏览器接受响应后就会去执行回调函数 callback</code>，传递解析后的 JSON 对象作为参数，这样我们就可以在 callback 里处理数据了。实际开发中，会遇到回调函数名相同的情况，可以简单封装一个 JSONP 函数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">&#123; url, params, callback &#125;</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line">    <span class="comment">// 创建一个临时的 script 标签用于发起请求  </span></span><br><span class="line">    <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);  </span><br><span class="line">    <span class="comment">// 将回调函数临时绑定到 window 对象，回调函数执行完成后，移除 script 标签  </span></span><br><span class="line">    <span class="built_in">window</span>[callback] = <span class="function"><span class="params">data</span> =&gt;</span> &#123;  </span><br><span class="line">      resolve(data);  </span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script);  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="comment">// 构造 GET 请求参数，key=value&amp;callback=callback  </span></span><br><span class="line">    <span class="keyword">const</span> formatParams = &#123; ...params, callback &#125;;  </span><br><span class="line">    <span class="keyword">const</span> requestParams = <span class="built_in">Object</span>.keys(formatParams)  </span><br><span class="line">      .reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> acc.concat([<span class="string">`<span class="subst">$&#123;cur&#125;</span>=<span class="subst">$&#123;formatParams[cur]&#125;</span>`</span>]);  </span><br><span class="line">      &#125;, [])  </span><br><span class="line">   .join(<span class="string">'&amp;'</span>);  </span><br><span class="line"> <span class="comment">// 构造 GET 请求的 url 地址  </span></span><br><span class="line">    <span class="keyword">const</span> src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;requestParams&#125;</span>`</span>;  </span><br><span class="line">    script.setAttribute(<span class="string">'src'</span>, src);  </span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);  </span><br><span class="line">  &#125;);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 调用时  </span></span><br><span class="line">jsonp(&#123;  </span><br><span class="line">  url: <span class="string">'https://xxx.xxx'</span>,  </span><br><span class="line">  params: &#123;...&#125;,  </span><br><span class="line">  callback: <span class="string">'func'</span>,  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise 封装了请求，使异步回调更加优雅，其实本质上就是：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'https://xxx.xxx.xx?key=value&amp;callback=xxx'</span>&gt;</span><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p>JSONP 的<code>优点是简单而且兼容性很好</code>，但是<code>缺点也很明显，需要服务器支持而且只支持 GET 请求</code>，下面我们来看第二种方案，也是目前主流的跨域解决方案，划重点！</p><h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p><code>CORS（Cross-Origin Resource Sharing）的全称叫 跨域资源共享</code>，其实就是一种机制。浏览器不是有同源策略嘛，对于开发人员来说就不怎么友好了，因为可能经常需要发起一个跨域 HTTP 请求。之前说过，跨域的请求其实是发出去了的，只不过被浏览器给拦截了，因为不安全，说直白点儿就是，你想要从服务器哪儿拿个东西，但是没有经过人家允许啊。所以怎么样才安全 ？<code>服务器允许了不就安全了</code>，这就是 CORS 实现的<code>原理：使用额外的 HTTP 头来告诉浏览器，让运行在某一个起初上的 Web 应用允许访问来自不同源服务器上的指定的资源</code>。</p><ul><li>兼容性</li></ul><p>目前，所有的主流浏览器都支持 CORS，其中，<code>IE 浏览器的版本不能低于 10，IE 8 和 9 需要通过 XDomainRequest 来实现</code></p><ul><li>实现原理</li></ul><p><code>CORS 需要浏览器和服务器同时支持，整个 CORS 的通信过程，都是浏览器自动完成</code>。</p><blockquote><ul><li>怎么个自动法 ？</li></ul><p><code>浏览器</code>一旦发现请求是一个跨域请求，首先会判断请求的类型，如果是<code>简单请求</code>，会在<code>请求头中增加一个 Origin 字段</code>，表示这次请求是来自哪一个源。</p><p><code>服务器</code>接受到请求后，会返回一个响应，<code>响应头</code>中会包含一个叫 <code>Access-Control-Allow-Origin</code>的字段，它的值要么包含由 Origin 首部字段所指明的域名，要么是一个”*”，<code>表示接受任意域名的请求</code>。如果响应头中没有这个字段，就说明当前源不在服务器的许可范围内，浏览器就会报错.</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;cors HTTP&#x2F;1.1  </span><br><span class="line">Origin: https:&#x2F;&#x2F;xxx.xx  </span><br><span class="line">Accept-Language: en-US  </span><br><span class="line">Connection: keep-alive  </span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><p>如果是<code>非简单请求</code>，会在正式通信之前，发送一个<code>预检请求（preflight）</code>，<code>目的在于询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段，只有得到肯定答复，浏览器才会发出正式的请求，否则就报错。</code>在日常的开发中，会看到很多使用<code>OPTION</code> 方法发起的请求，它其实就是一个预检请求：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPTIONS &#x2F;cors HTTP&#x2F;1.1  </span><br><span class="line">Origin: http:&#x2F;&#x2F;xxx.xx  </span><br><span class="line">Access-Control-Request-Method: PUT  </span><br><span class="line">Accept-Language: en-US  </span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><blockquote><ul><li>到底哪些是简单请求，哪些是非简单请求 ？</li></ul><p><code>不会触发 CORS 预检的，就是简单请求</code>。哪些请求不会触发预检 ？使用以下方法之一：<code>GET, HEAD, POST</code>，并且<code>Content-Type</code> 的值仅限于下列三者之一：</p><ol><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ol><p>相反，<code>不符合上述条件的就是非简单请求啦</code>。所以<code>实现 CORS 的关键是服务器，只要服务器实现了 CORS 的相关接口，就可以实现跨域</code>。CORS 与 JSONP相比，<code>优势</code>是支持所有的请求方法，<code>缺点</code>是兼容性上较 JSONP 差。</p></blockquote><p>除了 JSONP 和 CORS外，还有一种常用的跨域解决方案：PostMessage，它更多地用于窗口间的消息传递。</p><h1 id="PostMessage"><a href="#PostMessage" class="headerlink" title="PostMessage"></a>PostMessage</h1><p><code>PostMessage 是 Html5 XMLHttpRequest Level 2 中的 API，它可以实现跨文档通信（Cross-document messaging）</code>。<code>兼容性上，IE8+，Chrome，Firfox 等主流浏览器都支持</code>，</p><blockquote><ul><li>如何理解跨文档通信？</li></ul><p>可以<code>类比设计模式中的发布-订阅模式</code>，在这里，一个窗口发送消息，另一个窗口接受消息，之所以说类似发布-订阅模式，而不是观察者模式，是因为这里<code>两个窗口间没有直接通信，而是通过浏览器这个第三方平台</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.postMessage(message, origin, [transfer])</span><br></pre></td></tr></table></figure><p>postMessage 方法接收三个参数，要<code>发送的消息</code>、<code>接收消息的源</code>和一个<code>可选的 Transferable 对象</code>，如何接收消息 ？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params">event</span>) </span>&#123;&#125;, <span class="literal">false</span>); <span class="comment">// 推荐，兼容性更好  </span></span><br><span class="line"><span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params">event</span>) </span>&#123;&#125; <span class="comment">// 不推荐，这是一个实验性的功能，兼容性不如上面的方法</span></span><br></pre></td></tr></table></figure><p>接收到消息后，消息对象 event 中包含了三个属性：<code>source</code>、<code>origin</code>、<code>data</code>，其中 data 就是发送的 message。此外，<code>除了实现窗口通信，postMessage 还可以同 Web Worker 和 Service Work 进行通信</code>。</p><h1 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h1><p><code>Websocket 是 HTML5 的一个持久化的协议</code>，<code>实现了浏览器与服务器的全双工通信</code>，同时也是跨域的一种解决方案。</p><blockquote><ul><li>什么是全双工通信 ？</li></ul><p>就是<code>在建立连接之后，server 与 client 都能主动向对方发送或接收数据</code>。原生的 WebSocket API 使用起来不太方便，一般会选择自己封装一个 Websocket或者使用已有的第三方库。</p></blockquote><p>这里以第三方库 ws 为例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://www.host.com/path'</span>);  </span><br><span class="line">  </span><br><span class="line">ws.on(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span> <span class="title">open</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  ws.send(<span class="string">'something'</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line">ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="title">incoming</span>(<span class="params">data</span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(data);  </span><br><span class="line">&#125;);  </span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><blockquote><p><code>注：Websocket 属于长连接，在一个页面建立多个 Websocket 连接可能会导致性能问题。</code></p></blockquote><h1 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h1><p>同源策略限制的是：浏览器向服务器发送跨域请求需要遵循的标准。</p><blockquote><ul><li>如果是服务器向服务器发送跨域请求呢？</li></ul><p>当然是<code>不受浏览器的同源策略限制</code>。利用这个思路，就可以<code>搭建一个代理服务器，接受客户端请求，然后将请求转发给服务器，代理服务器拿到响应后，再将响应转发给客户端</code>。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/01/10/YCpniExglJF2vuR.png" alt="Nginx 反向代理原理"></p><p>Nginx 反向代理只需要简单配置就可以实现跨域：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.config  </span></span><br><span class="line"><span class="comment"># ...  </span></span><br><span class="line">server &#123;  </span><br><span class="line">  listen       80;  </span><br><span class="line">  server_name  www.domain1.com;  </span><br><span class="line">  location / &#123;  </span><br><span class="line">    proxy_pass   http://www.domain2.com:8080;  <span class="comment">#反向代理  </span></span><br><span class="line">    proxy_cookie_domain www.domain2.com www.domain1.com; <span class="comment">#修改cookie里域名  </span></span><br><span class="line">    index  index.html index.htm;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 当用 webpack-dev-server 等中间件代理接口访问 nignx 时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用  </span></span><br><span class="line">    add_header Access-Control-Allow-Origin *;  </span><br><span class="line">    add_header Access-Control-Allow-Credentials <span class="literal">true</span>;  </span><br><span class="line">    <span class="comment"># ...  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Node-中间件代理"><a href="#Node-中间件代理" class="headerlink" title="Node 中间件代理"></a>Node 中间件代理</h1><p>实现的原理和前文提到的代理服务器原理如出一辙，只不过这里使用 Node 中间件做为代理。</p><blockquote><p>注：<code>浏览器向代理服务器请求时仍然遵循同源策略</code>，别忘了在 Node 层通过 CORS 做跨域处理。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>)  </span><br><span class="line"><span class="comment">// 接受客户端请求  </span></span><br><span class="line"><span class="keyword">const</span> sever = https.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  </span><br><span class="line">  ...  </span><br><span class="line">  <span class="keyword">const</span> &#123; method, headers &#125; = req  </span><br><span class="line">  <span class="comment">// 设置 CORS 允许跨域  </span></span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;  </span><br><span class="line">    <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,  </span><br><span class="line">    <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'*'</span>,  </span><br><span class="line">    <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'Content-Type'</span>,  </span><br><span class="line">    ...  </span><br><span class="line">  &#125;)  </span><br><span class="line">  <span class="comment">// 请求服务器  </span></span><br><span class="line">  <span class="keyword">const</span> proxy = https.request(&#123; <span class="attr">host</span>: <span class="string">'xxx'</span>, method, headers, ...&#125;, response =&gt; &#123;  </span><br><span class="line">    <span class="keyword">let</span> body = <span class="string">''</span>  </span><br><span class="line">    response.on(<span class="string">'data'</span>, chunk =&gt; &#123; body = body + chunk &#125;)  </span><br><span class="line">    response.on(<span class="string">'end'</span>, () =&gt; &#123;  </span><br><span class="line">      <span class="comment">// 响应结果转发给客户端  </span></span><br><span class="line">      res.end(body)  </span><br><span class="line">    &#125;)  </span><br><span class="line">  &#125;)  </span><br><span class="line">  <span class="comment">// 结束请求  </span></span><br><span class="line">  proxy.end()  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h1><p>二级域名相同的情况下，设置 document.domain 就可以实现跨域。</p><blockquote><ul><li>什么是二级域名 ？</li></ul><p>a.test.com 和 b.test.com 就属于二级域名，它们都是 test.com 的子域。</p></blockquote><p>如何实现跨域 ？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.domain = <span class="string">'test.com'</span> <span class="comment">// 设置 domain 相同  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 通过 iframe 嵌入跨域的页面  </span></span><br><span class="line"><span class="keyword">const</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>)  </span><br><span class="line">iframe.setAttribute(<span class="string">'src'</span>, <span class="string">'b.test.com/xxx.html'</span>)  </span><br><span class="line">iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// 拿到 iframe 实例后就可以直接访问 iframe 中的数据  </span></span><br><span class="line">  <span class="built_in">console</span>.log(iframe.contentWindow.xxx)  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">document</span>.appendChild(iframe)</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当然，除了上述的方案外，比较 Hack(侵入) 的还有：<code>window.name</code>、 <code>location.hash</code>，但是这些跨域的方式现在<code>已经不推荐</code>，为什么 ？因为相比之下有<code>更加安全和强大的 PostMessage 作为替代</code>。跨域的方案其实有很多，总结下来：</p><blockquote><ul><li>CORS 支持所有的 HTTP 请求，是<code>跨域最主流的方案</code></li><li>JSONP 只支持 GET 请求，但是可以<code>兼容老式浏览器</code></li><li>Node中间件和 Nginx反向代理都是利用了<code>服务器对服务器</code>没有同源策略限制</li><li>Websocket 也是一种跨域的解决方案</li><li>PostMessage 可以实现跨文档通信，更多地<code>用于窗口通信</code></li><li>document.domain、window.name、location.hash逐渐淡出历史舞台，作为替代 PostMessage是一种不错的方案</li></ul></blockquote><blockquote><p>原文：<a href="https://mp.weixin.qq.com/s/S8d2RRb4gj581ElS9hVr5g" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/S8d2RRb4gj581ElS9hVr5g</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
            <tag> JSONP </tag>
            
            <tag> CORS </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 定时备份数据库</title>
      <link href="/2021/12/10/MySQL%20%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2021/12/10/MySQL%20%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>在操作数据过程中，可能会导致数据错误，甚至数据库奔溃，而有效的定时备份能很好地保护数据库。</p><h1 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h1><p>mysqldump 是 MySQL 自带的逻辑备份工具。</p><p>它的备份原理是通过协议连接到MySQL数据库，将需要备份的数据查询出来，将查询出的数据转换成对应的insert语句，当我们需要还原这些数据时，只要执行这些 insert语句，即可将对应的数据还原。首先简单了解一下mysqldump命令格式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump [选项] 数据库名 [表名] &gt; 脚本名</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump [选项] --数据库名 [选项 表名] &gt; 脚本名</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump [选项] --all-databases [选项]  &gt; 脚本名</span><br></pre></td></tr></table></figure><p>可选项属性如下：</p><table><thead><tr><th>可选项</th><th align="center">缩写</th><th>含义</th></tr></thead><tbody><tr><td>–host</td><td align="center">-h</td><td>服务器IP地址</td></tr><tr><td>–port</td><td align="center">-P</td><td>服务器端口号</td></tr><tr><td>–user</td><td align="center">-u</td><td>MySQL 用户名</td></tr><tr><td>–pasword</td><td align="center">-p</td><td>MySQL 密码</td></tr><tr><td>–databases</td><td align="center"></td><td>指定要备份的数据库</td></tr><tr><td>–all-databases</td><td align="center"></td><td>备份mysql服务器上的所有数据库</td></tr><tr><td>–compact</td><td align="center"></td><td>压缩模式，产生更少的输出</td></tr><tr><td>–comments</td><td align="center"></td><td>添加注释信息</td></tr><tr><td>–complete-insert</td><td align="center"></td><td>输出完成的插入语句</td></tr><tr><td>–lock-tables</td><td align="center"></td><td>备份前，锁定所有数据库表</td></tr><tr><td>–no-create-db/–no-create-info</td><td align="center"></td><td>禁止生成创建数据库语句</td></tr><tr><td>–force</td><td align="center"></td><td>当出现错误时仍然继续备份操作</td></tr><tr><td>–default-character-set</td><td align="center"></td><td>指定默认字符集</td></tr><tr><td>–add-locks</td><td align="center"></td><td>备份数据库表时锁定数据库表</td></tr></tbody></table><blockquote><p>注：mysqldump 是在操作系统(如：Windows cmd命令窗口)指令行下运行的。不是在mysql命令行下运行的(否则报<code>1064 语法错误</code>)，进入MySQL目录下的bin文件夹</p></blockquote><h1 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h1><ul><li>备份<code>全部</code>数据库的<code>数据和结构</code></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 -A &gt; &#x2F;data&#x2F;mysqlDump&#x2F;mydb.sql</span><br></pre></td></tr></table></figure><ul><li>备份<code>全部</code>数据库的<code>结构</code>（加 -d 参数）</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 -A -d &gt; &#x2F;data&#x2F;mysqlDump&#x2F;mydb.sql</span><br></pre></td></tr></table></figure><ul><li>备份<code>全部</code>数据库的<code>数据</code>(加 -t 参数)</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 -A -t &gt; &#x2F;data&#x2F;mysqlDump&#x2F;mydb.sql</span><br></pre></td></tr></table></figure><ul><li>备份<code>单个</code>数据库的<code>数据和结构</code>(数据库名mydb)</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot-p123456 mydb &gt; &#x2F;data&#x2F;mysqlDump&#x2F;mydb.sql</span><br></pre></td></tr></table></figure><ul><li>备份<code>单个</code>数据库的<code>结构</code></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 mydb -d &gt; &#x2F;data&#x2F;mysqlDump&#x2F;mydb.sql</span><br></pre></td></tr></table></figure><ul><li>备份<code>单个</code>数据库的<code>数据</code></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 mydb -t &gt; &#x2F;data&#x2F;mysqlDump&#x2F;mydb.sql</span><br></pre></td></tr></table></figure><ul><li>备份<code>多个表</code>的<code>数据和结构</code>（数据，结构的单独备份方法与上同）</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 mydb t1 t2 &gt; &#x2F;data&#x2F;mysqlDump&#x2F;mydb.sql</span><br></pre></td></tr></table></figure><ul><li>一次备份<code>多个数据库</code></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 --databases db1 db2 &gt; &#x2F;data&#x2F;mysqlDump&#x2F;mydb.sql</span><br></pre></td></tr></table></figure><h1 id="还原备份"><a href="#还原备份" class="headerlink" title="还原备份"></a>还原备份</h1><p>有两种方式还原，第一种是在MySQL命令行中，第二种是使用soure完成还原</p><ul><li>在系统命令行中，输入如下实现还原：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456 &lt; &#x2F;data&#x2F;mysqlDump&#x2F;mydb.sql</span><br></pre></td></tr></table></figure><ul><li>在登录进入mysql系统中，通过source指令找到对应系统中的文件进行还原：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; source &#x2F;data&#x2F;mysqlDump&#x2F;mydb.sql</span><br></pre></td></tr></table></figure><h1 id="Linux系统备份"><a href="#Linux系统备份" class="headerlink" title="Linux系统备份"></a>Linux系统备份</h1><p>在 Linux中，通常使用<code>BASH脚本</code>对需要执行的内容进行编写，加上<code>定时执行命令crontab</code>实现日志自动化生成。</p><h2 id="BASH脚本"><a href="#BASH脚本" class="headerlink" title="BASH脚本"></a>BASH脚本</h2><p>编写BASH维护固定数量备份文件，在Linux中，使用vi或者vim编写脚本内容并命名为：<code>mysql_dump_script.sh</code></p><p>以下代码功能就是针对mysql进行备份，配合crontab，实现备份的内容为近一个月（31天）内的每天的mysql数据库记录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置各项参数</span></span><br><span class="line"><span class="comment">#保存备份个数，备份31天数据</span></span><br><span class="line">number=31</span><br><span class="line"><span class="comment">#备份保存路径</span></span><br><span class="line">backup_dir=/root/mysqlbackup</span><br><span class="line"><span class="comment">#日期</span></span><br><span class="line">dd=`date +%Y-%m-%d-%H-%M-%S`</span><br><span class="line"><span class="comment">#备份工具</span></span><br><span class="line">tool=mysqldump</span><br><span class="line"><span class="comment">#用户名</span></span><br><span class="line">username=root</span><br><span class="line"><span class="comment">#密码</span></span><br><span class="line">password=TankB214</span><br><span class="line"><span class="comment">#将要备份的数据库</span></span><br><span class="line">database_name=edoctor</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果文件夹不存在则创建</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$backup_dir</span> ];</span><br><span class="line"><span class="keyword">then</span>     </span><br><span class="line">    mkdir -p <span class="variable">$backup_dir</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#简单写法 mysqldump -u root -p123456 users &gt; /root/mysqlbackup/users-$filename.sql</span></span><br><span class="line"><span class="variable">$tool</span> -u <span class="variable">$username</span> -p<span class="variable">$password</span> <span class="variable">$database_name</span> &gt; <span class="variable">$backup_dir</span>/<span class="variable">$database_name</span>-<span class="variable">$dd</span>.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建备份日志，将操作日志打印至同目录下的log.txt中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"create <span class="variable">$backup_dir</span>/<span class="variable">$database_name</span>-<span class="variable">$dd</span>.dupm"</span> &gt;&gt; <span class="variable">$backup_dir</span>/log.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#找出需要删除的备份，通过ls命令获取第九列，即文件名列，再通过实现定义操作时间最晚的那个需要删除的文件</span></span><br><span class="line">delfile=`ls -l -crt <span class="variable">$backup_dir</span>/*.sql | awk <span class="string">'&#123;print $9 &#125;'</span> | head -1`</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断现在的备份数量是否大于$number，通过ls命令加上，统计以sql结尾的文件的行数</span></span><br><span class="line">count=`ls -l -crt <span class="variable">$backup_dir</span>/*.sql | awk <span class="string">'&#123;print $9 &#125;'</span> | wc -l`</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果文件超出限制大小，就删除最早创建的sql文件</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$count</span> -gt <span class="variable">$number</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="comment">#删除最早生成的备份，只保留number数量的备份</span></span><br><span class="line">  rm <span class="variable">$delfile</span></span><br><span class="line">  <span class="comment">#写删除文件日志</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"delete <span class="variable">$delfile</span>"</span> &gt;&gt; <span class="variable">$backup_dir</span>/log.txt</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="crontab脚本"><a href="#crontab脚本" class="headerlink" title="crontab脚本"></a>crontab脚本</h2><p>在 Linux 中，周期执行的任务一般由cron这个守护进程来处理[ps -ef|grep cron]。cron读取一个或多个配置文件，这些配置文件中包含了命令行及其调用时间。cron的配置文件称为“crontab”，是“cron table”的简写。</p><h3 id="cron服务"><a href="#cron服务" class="headerlink" title="cron服务"></a>cron服务</h3><p>cron是一个 Liunx 下的定时执行工具，可以在无需人工干预的情况下运行作业。</p><table><thead><tr><th align="center">命令</th><th>描述</th></tr></thead><tbody><tr><td align="center">service crond start</td><td>启动服务</td></tr><tr><td align="center">service crond stop</td><td>关闭服务</td></tr><tr><td align="center">service crond restart</td><td>重启服务</td></tr><tr><td align="center">service crond reload</td><td>重新载入配置</td></tr><tr><td align="center">service crond status</td><td>查看服务状态</td></tr></tbody></table><h3 id="crontab语法"><a href="#crontab语法" class="headerlink" title="crontab语法"></a>crontab语法</h3><p><code>crontab命令用于安装、删除或者列出用于驱动cron后台进程的表格</code>。用户把需要执行的命令序列放到crontab文件中以获得执行。<code>每个用户都可以有自己的crontab文件</code>。/var/spool/cron下的crontab文件不可以直接创建或者直接修改。该<code>crontab文件是通过crontab命令创建的。</code></p><p>在crontab文件中如何输入需要执行的命令和时间。该<code>文件中每行都包括六个域，其中前五个域是指定命令被执行的时间，最后一个域是要被执行的命令</code>。每个<code>域之间使用空格或者制表符分隔</code>。</p><p>格式如下： </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">minute hour day-of-month month-of-year day-of-week commands </span><br><span class="line"># 合法值 00-59 00-23 01-31 01-12 0-6 (0 is sunday)</span><br></pre></td></tr></table></figure><p>除了数字还有几个个特殊的符号就是<code>&quot;*&quot;、&quot;/&quot;和&quot;-&quot;、&quot;,&quot;</code>，</p><blockquote><ul><li>“*”  代表所有的取值范围内的数字</li><li>“/“  代表每的意思，”/5”表示每5个单位</li><li>“-“  代表从某个数字到某个数字</li><li>“,”  分开几个离散的数字</li></ul></blockquote><p>crontab常用指令：</p><table><thead><tr><th align="center">指令</th><th>描述</th></tr></thead><tbody><tr><td align="center">-l</td><td>在标准输出上<code>显示</code>当前的crontab。</td></tr><tr><td align="center">-r</td><td><code>删除</code>当前的crontab文件。</td></tr><tr><td align="center">-e</td><td>使用VISUAL或者EDITOR环境变量所指的<code>编辑</code>器编辑当前的crontab文件。当结束编辑离开时，编辑后的文件将自动安装。</td></tr></tbody></table><h3 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h3><ul><li>写cron脚本文件，命名为<code>mysqlRollBack.cron</code>。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 2 * * * &#x2F;root&#x2F;mysql_backup_script.sh</span><br></pre></td></tr></table></figure><ul><li>添加定时任务。执行命令</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crontab mysqlRollback.cron</span><br></pre></td></tr></table></figure><ul><li><code>&quot;crontab -l&quot;</code> 查看定时任务是否成功或者检测<code>/var/spool/cron</code>下是否生成对应cron脚本</li></ul><blockquote><p> <code>注：这操作是直接替换该用户下的crontab，而不是新增</code></p></blockquote><p>以下是我的测试每分钟的截图效果，其对应代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* * * * * &#x2F;root&#x2F;mysql_backup_script.sh</span><br></pre></td></tr></table></figure><p>效果截图：<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2021/12/10/Ck1TtQpem5UqE7i.png" alt=""></p><p>其中的log.txt记录备份的操作详细日志：<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2021/12/10/ljRg5ObGPhBo2vF.png" alt=""></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><ul><li>每天早上6点 </li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了</span><br><span class="line">0 6 * * * echo &quot;Good morning.&quot; &gt;&gt; &#x2F;tmp&#x2F;test.txt</span><br></pre></td></tr></table></figure><ul><li>每两个小时 </li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 *&#x2F;2 * * * echo &quot;Have a break now.&quot; &gt;&gt; &#x2F;tmp&#x2F;test.txt</span><br></pre></td></tr></table></figure><ul><li>晚上11点到早上8点之间每两个小时和早上八点 </li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 23-7&#x2F;2，8 * * * echo &quot;Have a good dream&quot; &gt;&gt; &#x2F;tmp&#x2F;test.txt</span><br></pre></td></tr></table></figure><ul><li>每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 </li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 11 4 * 1-3 command line</span><br></pre></td></tr></table></figure><ul><li>1 月 1 日早上 4 点 </li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME&#x3D;&#x2F;</span><br><span class="line">0 4 1 1 * command line SHELL&#x3D;&#x2F;bin&#x2F;bash PATH&#x3D;&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin MAILTO&#x3D;root</span><br></pre></td></tr></table></figure><ul><li>每小时执行/etc/cron.hourly内的脚本</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01 * * * * root run-parts &#x2F;etc&#x2F;cron.hourly</span><br></pre></td></tr></table></figure><ul><li>每天执行/etc/cron.daily内的脚本</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">02 4 * * * root run-parts &#x2F;etc&#x2F;cron.daily</span><br></pre></td></tr></table></figure><ul><li>每星期执行/etc/cron.weekly内的脚本</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">22 4 * * 0 root run-parts &#x2F;etc&#x2F;cron.weekly</span><br></pre></td></tr></table></figure><ul><li>每月去执行/etc/cron.monthly内的脚本 </li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注： &quot;run-parts&quot;如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。</span><br><span class="line">42 4 1 * * root run-parts &#x2F;etc&#x2F;cron.monthly</span><br></pre></td></tr></table></figure><ul><li>每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。 </li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5，15，25，35，45，55 16，17，18 * * * command</span><br></pre></td></tr></table></figure><ul><li>每周一，三，五的下午3：00系统进入维护状态，重新启动系统。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00 15 * * 1，3，5 shutdown -r +5</span><br></pre></td></tr></table></figure><ul><li>每小时的10分，40分执行用户目录下的innd/bbslin这个指令： </li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10，40 * * * * innd&#x2F;bbslink</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 定时备份 </tag>
            
            <tag> crontab脚本 </tag>
            
            <tag> bash脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux CPU使用率与负载过高解决思路</title>
      <link href="/2021/12/08/Linux%20CPU%E4%BD%BF%E7%94%A8%E7%8E%87%E4%B8%8E%E8%B4%9F%E8%BD%BD%E8%BF%87%E9%AB%98%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/"/>
      <url>/2021/12/08/Linux%20CPU%E4%BD%BF%E7%94%A8%E7%8E%87%E4%B8%8E%E8%B4%9F%E8%BD%BD%E8%BF%87%E9%AB%98%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="查看系统CPU负载及使用率"><a href="#查看系统CPU负载及使用率" class="headerlink" title="查看系统CPU负载及使用率"></a>查看系统CPU负载及使用率</h1><p>命令分别有：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看进程级别的cpu使用情况</span></span><br><span class="line">top</span><br><span class="line"><span class="comment"># 查看系统级别的cpu使用情况</span></span><br><span class="line">vmstat</span><br></pre></td></tr></table></figure><h2 id="top-命令"><a href="#top-命令" class="headerlink" title="top 命令"></a>top 命令</h2><p>可以查看进程的CPU、内存等资源的使用情况</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2021/12/08/V4Jdeh2cWsak83I.png" alt=""></p><p>在top命令运行过程中可以<code>通过top的内部命令做显示方式的控制</code>：  </p><table><thead><tr><th align="center">命  令</th><th>描  述</th></tr></thead><tbody><tr><td align="center">1</td><td>开启或关闭显示所有cpu使用详细情况</td></tr><tr><td align="center">l</td><td>关闭或开启第一部分<code>第一行</code> top 信息的表示</td></tr><tr><td align="center">t</td><td>关闭或开启第一部分<code>第二行</code> Tasks 和<code>第三行</code> Cpus 信息的表示</td></tr><tr><td align="center">m</td><td>关闭或开启第一部分<code>第四行</code> Mem 和 <code>第五行</code> Swap 信息的表示</td></tr><tr><td align="center">N</td><td>以 <code>PID 的大小</code>的顺序排列表示进程列表（第三部分后述）</td></tr><tr><td align="center">P</td><td>以 <code>CPU 占用率大小</code>的顺序排列进程列表 （第三部分后述）</td></tr><tr><td align="center">M</td><td>以<code>内存占用率大小</code>的顺序排列进程列表 （第三部分后述）</td></tr><tr><td align="center">h</td><td>显示帮助</td></tr><tr><td align="center">n</td><td>设置在进程列表所显示进程的数量</td></tr><tr><td align="center">q</td><td>退出 top</td></tr><tr><td align="center">s</td><td>改变画面更新频率（输入数字）</td></tr></tbody></table><h2 id="vmstat命令"><a href="#vmstat命令" class="headerlink" title="vmstat命令"></a>vmstat命令</h2><p>可以查看系统整体的cpu，内存的使用情况</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2021/12/08/2SxVKWCYdgsIJuG.png" alt=""></p><table><thead><tr><th align="center">属  性</th><th>描  述</th></tr></thead><tbody><tr><td align="center">r</td><td>表示<code>系统中 CPU 等待处理的线程</code>。由于 <code>CPU 每次只能处理一个线程，所以，该数值越大，通常表示系统运行越慢</code>。</td></tr><tr><td align="center">us</td><td><code>用户模式</code>消耗的 CPU 时间百分比。<code>该值较高时，说明用户进程消耗的 CPU 时间比较多</code>，比如，如果<code>该值长期超过 50%，则需要对程序算法或代码等进行优化</code>。</td></tr><tr><td align="center">sy</td><td><code>内核模式</code>消耗的 CPU 时间百分比。</td></tr><tr><td align="center">wa</td><td><code>IO 等待消耗</code>的 CPU 时间百分比。<code>该值较高时，说明 IO 等待比较严重，这可能磁盘大量作随机访问造成的，也可能是磁盘性能出现了瓶颈</code>。</td></tr><tr><td align="center">id</td><td><code>处于空闲状态</code>的 CPU 时间百分比。如果<code>该值持续为 0，同时 sy 是 us 的两倍，则通常说明系统则面临着 CPU 资源的短缺</code>。</td></tr></tbody></table><h1 id="操作进程CPU占用和负载较高"><a href="#操作进程CPU占用和负载较高" class="headerlink" title="操作进程CPU占用和负载较高"></a>操作进程CPU占用和负载较高</h1><h2 id="使用top直接终止cpu消耗大的进程"><a href="#使用top直接终止cpu消耗大的进程" class="headerlink" title="使用top直接终止cpu消耗大的进程"></a>使用top直接终止cpu消耗大的进程</h2><p>top命令查看对cpu消耗大的进程，直接输入<code>&quot;k&quot;</code>，然后<code>输入相应进程的PID号</code>即可终止该进程。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2021/12/08/KbDx3hSd8Rfzpri.png" alt=""></p><h2 id="通过top观察cpu很空闲，但是负载比较高的情况"><a href="#通过top观察cpu很空闲，但是负载比较高的情况" class="headerlink" title="通过top观察cpu很空闲，但是负载比较高的情况"></a>通过top观察cpu很空闲，但是负载比较高的情况</h2><p>load average 是对CPU负载的评估，<code>其值越高，说明其任务队列越长，处于等待执行的任务越多</code>。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2021/12/08/V4Jdeh2cWsak83I.png" alt=""></p><p>出现此种情况时，可能是由于僵死进程导致的。可以通过指令<code>ps -axjf</code> 查看<code>是否存在 D 状态进程</code>。</p><blockquote><p>D 状态：是指<code>不可中断的睡眠状态</code>。该状态的进程<code>无法被kill，也无法自行退出</code>。只能通过<code>恢复其依赖的资源</code>或者<code>重启系统</code>来解决。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 使用率 </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apifox自动化测试一体化协作平台</title>
      <link href="/2021/11/03/Apifox%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B8%80%E4%BD%93%E5%8C%96%E5%8D%8F%E4%BD%9C%E5%B9%B3%E5%8F%B0/"/>
      <url>/2021/11/03/Apifox%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B8%80%E4%BD%93%E5%8C%96%E5%8D%8F%E4%BD%9C%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Apifox介绍"><a href="#Apifox介绍" class="header-anchor"></a> Apifox 介绍</h2><p>Apifox 是 API 文档、API 调试、API Mock、API 自动化测试一体化协作平台，定位 Postman + Swagger + Mock + JMeter。通过一套系统、一份数据，解决多个系统之间的数据同步问题。只要定义好 API 文档，API 调试、API 数据 Mock、API 自动化测试就可以直接使用，无需再次定义；API 文档和 API 开发调试使用同一个工具，API 调试完成后即可保证和 API 文档定义完全一致。高效、及时、准确！</p><h2 id="接口管理现状"><a href="#接口管理现状" class="header-anchor"></a> 接口管理现状</h2> <h3 id="常用解决方案"><a href="#常用解决方案" class="header-anchor"></a> 常用解决方案</h3> <ol><li>使用 Swagger 管理 API 文档</li> <li>使用 Postman 调试 API</li> <li>使用 RAP 等工具 Mock API 数据</li> <li>使用 JMeter 做 API 自动化测试</li></ol> <h3 id="存在的问题"><a href="#存在的问题" class="header-anchor"></a> 存在的问题</h3> <p>维护不同工具之间数据一致性非常困难、低效。并且这里不仅仅是工作量的问题，更大的问题是多个系统之间数据不一致，导致协作低效、频繁出问题，开发测试人员痛苦不堪。</p> <ol><li>开发人员在 Swagger 定义好文档后，接口调试的时候还需要去 Postman 再定义一遍。</li> <li>前端开发 Mock 数据的时候又要去 RAP 定义一遍，还需要手动设置 Mock 规则。</li> <li>测试人员需要去 JMeter 再定义一遍。</li> <li>前端根据 RAP Mock 出来的数据开发完，后端根据 Swagger 定义的接口文档开发完，各自都试测试通过了，本以为可以马上上线，结果一对接发现各种问题：<ul><li>开发过程中接口变更了，只修改了 Swagger，但是没有及时同步修改 RAP。</li> <li>后端开发的接口数据类型和文档不一致，肉眼难以发现问题。</li></ul></li> <li>同样，测试在 JMeter 写好的测试用例，真正运行的时候也会发现各种不一致。</li> <li>时间久了，各种不一致会越来越严重。</li></ol> <h2 id="apifox-解决方案"><a href="#apifox-解决方案" class="header-anchor"></a> Apifox 解决方案</h2> <h3 id="如何解决这些问题"><a href="#如何解决这些问题" class="header-anchor"></a> 如何解决这些问题</h3> <h4 id="_1、apifox-定位"><a href="#_1、apifox-定位" class="header-anchor"></a> 1、Apifox 定位</h4> <p><code>Apifox = Postman + Swagger + Mock + JMeter</code></p> <p>Apifox 是 API 文档、API 调试、API Mock、API 自动化测试一体化协作平台。</p> <p>通过一套系统、一份数据，解决多个系统之间的数据同步问题。只要定义好接口文档，接口调试、数据 Mock、接口测试就可以直接使用，无需再次定义；接口文档和接口开发调试使用同一个工具，接口调试完成后即可保证和接口文档定义完全一致。高效、及时、准确！</p> <h4 id="_2、apifox-功能"><a href="#_2、apifox-功能" class="header-anchor"></a> 2、Apifox 功能</h4> <ol><li><strong>接口设计</strong>：Apifox 接口文档遵循 <a href="https://www.openapis.org/" target="_blank" rel="noopener noreferrer">OpenApi</a> 3.0 (原 Swagger)、<a href="https://json-schema.org/" target="_blank" rel="noopener noreferrer">JSON Schema</a> 规范的同时，提供了非常好用的<code>可视化</code>文档管理功能，零学习成本，非常高效。并且支持在线分享接口文档。</li> <li><strong>数据模型</strong>：可复用的数据结构，定义接口<code>返回数据结构</code>及<code>请求参数数据结构</code>（仅 JSON 和 XML 模式）时可直接引用。支持模型直接嵌套引用，直接 JSON/XML 智能导入，支持 oneOf、allOf 等高级组合模式。</li> <li><strong>接口调试</strong>：Postman 有的功能，比如环境变量、前置/后置脚本、Cookie/Session 全局共享 等功能，Apifox 都有，并且比 Postman 更高效好用。接口运行完之后点击<code>保存为用例</code>按钮，即可生成<code>接口用例</code>，后续可直接运行接口用例，无需再输入参数，非常方便。自定义脚本 100% 兼容 Postman 语法，并且支持运行 javascript、java、python、php、js、BeanShell、go、shell、ruby、lua 等各种语言代码。</li> <li><strong>接口用例</strong>：通常一个接口会有多种情况用例，比如<code>参数正确</code>用例、<code>参数错误</code>用例、<code>数据为空</code>用例、<code>不同数据状态</code>用例等等。运行接口用例时会自动校验数据正确性，用接口用例来调试接口非常高效。</li> <li><strong>接口数据 Mock</strong>：内置 <a href="http://mockjs.com/" target="_blank" rel="noopener noreferrer">Mock.js</a> 规则引擎，非常方便 mock 出各种数据，并且可以在定义数据结构的同时写好 mock 规则。支持添加“期望”，根据请求参数返回不同 mock 数据。最重要的是 Apifox <code>零配置</code> 即可 Mock 出非常人性化的数据，具体在本文后面介绍。</li> <li><strong>数据库操作</strong>：支持读取数据库数据，作为接口请求参数使用。支持读取数据库数据，用来校验(断言)接口请求是否成功。</li> <li><strong>接口自动化测试</strong>：提供接口集合测试，可以通过选择接口（或接口用例）快速创建测试集。目前接口自动化测试更多功能还在开发中，敬请期待！目标是： JMeter 有的功能基本都会有，并且要更好用。</li> <li><strong>快捷调试</strong>：类似 Postman 的接口调试方式，主要用途为临时调试一些<code>无需文档化</code>的接口，无需提前定义接口即可快速调试。</li> <li><strong>代码生成</strong>：根据接口及数据数据模型定义，系统自动生成<code>接口请求代码</code>、<code>前端业务代码</code>及<code>后端业务代码</code>。</li> <li><strong>团队协作</strong>：Apifox 天生就是为团队协作而生的，接口云端实时同步更新，成熟的<code>团队/项目/成员权限</code>管理，满足各类企业的需求。</li></ol> <h3 id="apifox-做的不仅仅是数据打通"><a href="#apifox-做的不仅仅是数据打通" class="header-anchor"></a> Apifox 做的不仅仅是数据打通</h3> <p>如果你认为 <a href="https://www.apifox.cn/" target="_blank" rel="noopener noreferrer">Apifox</a> 只做了数据打通，来提升研发团队的效率，那就错了。Apifox 还做了非常多的创新，来提升开发人员的效率。</p> <h4 id="_1、接口支持-用例管理"><a href="#_1、接口支持-用例管理" class="header-anchor"></a> 1、接口支持“用例管理”</h4> <p>通常一个接口会有多种情况用例，比如 <code>正确用例</code> <code>参数错误用例</code> <code>数据为空用例</code> <code>不同数据状态用例</code>。定义接口的时候定义好这些不同状态的用例，接口调试的时候直接运行，非常高效。</p> <h4 id="_2、-数据模型-定义、引用"><a href="#_2、-数据模型-定义、引用" class="header-anchor"></a> 2、“数据模型”定义、引用</h4> <p>可以独立定义数据模型，接口定义时可以直接引用数据模型，数据模型之间也可以相互引用。同样的数据结构，只需要定义一次即可多处使用；修改的时候只需要修改一处，多处实时更新，避免不一致。</p> <h4 id="_3、调试时-自动校验-数据结构"><a href="#_3、调试时-自动校验-数据结构" class="header-anchor"></a> 3、调试时“自动校验”数据结构</h4> <p>使用 Apifox 调试接口的时候，系统会根据接口文档里的定义，自动校验返回的数据结构是否正确，无需通过肉眼识别，也无需手动写断言脚本检测，非常高效！</p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/auto-validation-response-schema.jpg" alt="Apifox 自动校验数据结构"></p> <h4 id="_4、-可视化-设置断言"><a href="#_4、-可视化-设置断言" class="header-anchor"></a> 4、“可视化”设置断言</h4> <p>设置断言：</p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/assertion-1.png" alt="Apifox 设置断言"></p> <p>运行后，查看断言结果：</p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/assertion-2.png" alt=""></p> <h4 id="_5、-可视化-设置提取变量"><a href="#_5、-可视化-设置提取变量" class="header-anchor"></a> 5、“可视化”设置提取变量</h4> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/extractor-1.png" alt=""></p> <h4 id="_6、支持数据库操作"><a href="#_6、支持数据库操作" class="header-anchor"></a> 6、支持数据库操作</h4> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/database-1.jpg" alt=""></p> <h4 id="_7、-零配置-mock-出非常人性化的数据"><a href="#_7、-零配置-mock-出非常人性化的数据" class="header-anchor"></a> 7、“零配置”Mock 出非常人性化的数据</h4> <p>先放一张图对比下 <a href="https://www.apifox.cn/" target="_blank" rel="noopener noreferrer">Apifox</a> 和其他同类工具 <code>零配置</code> mock 出来的数据效果：</p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/mock-result-compare.jpg" alt="Apifox Mock 数据结果对比同类工具"></p> <p>可以看出 Apifox <code>零配置</code> Mock 出来的数据和真实情况是非常接近的，前端开发可以直接使用，而无需再手动写 mock 规则。</p> <p><strong>Apifox 如何做到<code>高效率</code>、<code>零配置</code>生成非常人性化的 mock 数据</strong></p> <ol><li>Apifox 根据接口定义里的数据结构、数据类型，自动生成 mock 规则。</li> <li>Apifox 内置智能 mock 规则库，根据字段名、字段数据类型，智能优化自动生成的 mock 规则。如：名称包含字符串<code>image</code>的<code>string</code>类型字段，自动 mock 出一个图片地址 URL；包含字符串<code>time</code>的<code>string</code>类型字段，自动 mock 出一个时间字符串；包含字符串<code>city</code>的<code>string</code>类型字段，自动 mock 出一个城市名。</li> <li>Apifox 根据内置规则，可自动识别出图片、头像、用户名、手机号、网址、日期、时间、时间戳、邮箱、省份、城市、地址、IP 等字段，从而 Mock 出非常人性化的数据。</li> <li>除了内置 mock 规则，用户还可以自定义规则库，满足各种个性化需求。支持使用 <code>正则表达式</code>、<code>通配符</code> 来匹配字段名自定义 mock 规则。</li></ol> <h4 id="_8、生成在线接口文档"><a href="#_8、生成在线接口文档" class="header-anchor"></a> 8、生成在线接口文档</h4> <p>Apifox 项目可“在线分享” API 文档，分享出去的 API 文档可设置为公开或需要密码访问，非常方便与外部团队协作。</p> <p>体验地址：<a href="https://www.apipark.cn/s/ce387612-cfdb-478a-b604-b96d1dbc511b/http/5041285" target="_blank" rel="noopener noreferrer">https://www.apipark.cn/s/ce387612-cfdb-478a-b604-b96d1dbc511b/http/5041285</a></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/shared-doc-1.png" alt=""></p> <h4 id="_9、代码自动生成"><a href="#_9、代码自动生成" class="header-anchor"></a> 9、代码自动生成</h4> <p>根据接口模型定义，自动生成各种语言/框架（如 TypeScript、Java、Go、Swift、ObjectiveC、Kotlin、Dart、C++、C#、Rust 等）的业务代码（如 Model、Controller、单元测试代码等）和接口请求代码。目前 Apifox 支持 130 种语言及框架的代码自动生成。</p> <p>更重要的是：你可以通过<code>自定义代码模板</code>来生成符合自己团队的架构规范的代码，满足各种个性化的需求。</p> <h4 id="_10、导入、导出"><a href="#_10、导入、导出" class="header-anchor"></a> 10、导入、导出</h4> <ol><li>支持导出 <code>OpenApi (Swagger)</code>、<code>Markdown</code>、<code>Html</code> 等数据格式，因为可以导出<code>OpenApi</code>格式数据，所以你可以利用 OpenApi (Swagger) 丰富的生态工具完成各种接口相关的事情。</li> <li>支持导入 <code>OpenApi (Swagger)</code>、<code>Postman</code>、<code>HAR</code>、<code>RAML</code>、<code>RAP2</code>、<code>YApi</code>、<code>Eolinker</code>、<code>NEI</code>、<code>DOClever</code>、<code>ApiPost</code> 、<code>Apizza</code> 、<code>ShowDoc</code>、<code>API Blueprint</code>、<code>I/O Docs</code>、<code>WADL</code>、<code>Google Discovery</code>等数据格式，方便旧项目迁移。</li></ol> <h3 id="后续功能规划"><a href="#后续功能规划" class="header-anchor"></a> 后续功能规划</h3> <ol><li>接口性能测试支持（类似 JMeter）。</li> <li>支持插件市场，可以自己开发插件。</li> <li>支持更多接口协议，如<code>GraphQL</code>、<code>websocket</code>等。</li> <li>支持离线使用，项目可选择在线同步（团队协作）还是仅本地存储（单机离线使用）。</li></ol> <h3 id="更多-apifox-功能截图"><a href="#更多-apifox-功能截图" class="header-anchor"></a> 更多 Apifox 功能截图</h3> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-api-case-1.png" alt="接口调试"></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-api-case-2.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-api-definition-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-schema-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-api-definition-2.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-test-case-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-test-case-2.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-test-case-3.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-test-case-4.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-mock-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-mock-2.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-mock-3.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-codegen-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-codegen-2.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-setting-import-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-setting-export-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/light-apifox-theme-1.png" alt="Apifox 多种主题色可选"></p> <h3 id="-apifox-下载地址"><a href="#-apifox-下载地址" class="header-anchor"></a>  Apifox 下载地址</h3> <p>请访问 Apifox 官网下载：<a href="https://www.apifox.cn/" target="_blank" rel="noopener noreferrer">https://www.apifox.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 敏捷开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apifox </tag>
            
            <tag> Mock </tag>
            
            <tag> JMeter </tag>
            
            <tag> Swagger </tag>
            
            <tag> Postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经纬度的Geohash算法与两点距离算法</title>
      <link href="/2021/11/02/%E7%BB%8F%E7%BA%AC%E5%BA%A6%E7%9A%84Geohash%E7%AE%97%E6%B3%95%E4%B8%8E%E4%B8%A4%E7%82%B9%E8%B7%9D%E7%A6%BB%E7%AE%97%E6%B3%95/"/>
      <url>/2021/11/02/%E7%BB%8F%E7%BA%AC%E5%BA%A6%E7%9A%84Geohash%E7%AE%97%E6%B3%95%E4%B8%8E%E4%B8%A4%E7%82%B9%E8%B7%9D%E7%A6%BB%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="获取经纬度"><a href="#获取经纬度" class="headerlink" title="获取经纬度"></a>获取经纬度</h1><p>百度地图提供了web开发、Android开发、IOS开发和服务端接口方面的对接方案，在此讲述服务端接口中的Web服务API。</p><blockquote><p>Web服务API为开发者提供http/https接口，即开发者通过http/https形式发起检索请求，获取返回json或xml格式的检索数据。可以基于JavaScript、C#、C++、Java等语言的地图应用开发。</p></blockquote><h2 id="获取密钥"><a href="#获取密钥" class="headerlink" title="获取密钥"></a>获取密钥</h2><blockquote><p>传送门：<a href="https://lbsyun.baidu.com/index.php?title=webapi" target="_blank" rel="noopener">百度地图开放平台</a></p></blockquote><ul><li>登录百度地图开放平台在左侧导航栏中，点击”获取密钥”</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/YfeU6cbwFAJNsPv.png" alt=""></p><ul><li>登录并获得激活邮件后，点击邮件中的跳转链接，来到如下界面，点击<code>&quot;申请密钥&quot;</code></li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/uvSD5fkbP9Tqozh.png" alt=""></p><ul><li>来到”创建应用”界面，如下所述做配置后，按”提交”</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/KUob6ayND8VXinR.png" alt=""><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/tWU1FCXcViKaIH7.png" alt=""></p><p>点击复制密钥，供程序代码使用<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/NXUE1xojIWfpOlB.png" alt=""></p><blockquote><p>注：<code>百度地图api个人认证AK（免费），日配额限制6000个。使用达到上限需要第二天再用，或者更换AK（即密钥）。</code></p></blockquote><h2 id="示例代码一：地址获取"><a href="#示例代码一：地址获取" class="headerlink" title="示例代码一：地址获取"></a>示例代码一：地址获取</h2><p>用户可通过将结构化地址（<code>省/市/区/街道/门牌号</code>）解析为对应的位置坐标。<code>地址结构越完整，地址内容越准确，解析的坐标精度越高</code>。如：北京市海淀区上地十街十号。</p><blockquote><p>传送门：<a href="https://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding" target="_blank" rel="noopener">接口参数文档</a>、<a href="https://lbsyun.baidu.com/index.php?title=androidsdk/guide/addition-func/errorcode" target="_blank" rel="noopener">错误码对照表</a></p></blockquote><ul><li>调用链接，新用户使用3.0版本接口<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/m3dv2wN5bZAQFJ7.png" alt=""></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Geolocation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 地理位置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/28 10:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Geolocation</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 百度地图密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String AK = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 百度地图API</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"https://api.map.baidu.com/geocoding/v3/?output=json&amp;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="keyword">static</span> Map&lt;String, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String address = <span class="string">"广州天河城"</span>;</span><br><span class="line">        Map&lt;String, String&gt; msgMap = getCoordinate(address);</span><br><span class="line">        System.out.println(<span class="string">"msgMap 数据："</span> + msgMap);</span><br><span class="line">        System.out.println(<span class="string">"'"</span> + address + <span class="string">"'的经纬度为："</span> + msgMap.get(<span class="string">"lng"</span>) + <span class="string">"，"</span> + msgMap.get(<span class="string">"lat"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据地址，获取相关信息</span></span><br><span class="line"><span class="comment">     * json数据格式</span></span><br><span class="line"><span class="comment">     * &#123;"status":0,"result":&#123;"location":&#123;"lng":113.009109696642,"lat":28.192963234242119&#125;,"precise":0,"confidence":50,"comprehension":0,"level":"NoClass"&#125;&#125;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * status：成功返回0</span></span><br><span class="line"><span class="comment">     * lng：经度</span></span><br><span class="line"><span class="comment">     * lat：纬度</span></span><br><span class="line"><span class="comment">     * precise：1为精确查找、0为模糊打点</span></span><br><span class="line"><span class="comment">     * confidence：误差范围</span></span><br><span class="line"><span class="comment">     * comprehension：地址精确程度，分值范围0-100，分值越大，服务对地址精确程度越高</span></span><br><span class="line"><span class="comment">     * level：地址类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">getCoordinate</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; fieldMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (address != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(address)) &#123;</span><br><span class="line">            <span class="comment">// \s*为空字符串，如' '</span></span><br><span class="line">            address = address.replaceAll(<span class="string">"\\s*"</span>, <span class="string">""</span>).replace(<span class="string">"#"</span>, <span class="string">"栋"</span>);</span><br><span class="line">            String param = <span class="string">"address="</span> + address + <span class="string">"&amp;ak="</span> + AK;</span><br><span class="line">            String json = loadJSON(URL + param);</span><br><span class="line">            <span class="keyword">if</span> (json != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(json)) &#123;</span><br><span class="line">                map = JSON.parseObject(json, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                fieldMap = analyticalField(map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fieldMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json数据转化成Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">analyticalField</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Object&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : entrySet) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"result"</span>.equals(entry.getKey()) || <span class="string">"location"</span>.equals(entry.getKey())) &#123;</span><br><span class="line">                analyticalField(JSON.parseObject(entry.getValue().toString(), Map<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"lng"</span>.equals(entry.getKey()) || <span class="string">"lat"</span>.equals(entry.getKey())) &#123;</span><br><span class="line">                    DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">"#.######"</span>);</span><br><span class="line">                    hashMap.put(entry.getKey(), df.format(entry.getValue()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    hashMap.put(entry.getKey(), entry.getValue().toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求百度地图链接，获取相关信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">loadJSON</span><span class="params">(String urlStr)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        String inputLine = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(urlStr);</span><br><span class="line">            URLConnection urlConnection = url.openConnection();</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(urlConnection.getInputStream(), StandardCharsets.UTF_8));</span><br><span class="line">            <span class="keyword">while</span> ((inputLine = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                builder.append(inputLine);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">msgMap 数据：&#123;lng=<span class="number">113</span>.<span class="number">330431</span>, level=商圈, confidence=<span class="number">50</span>, precise=<span class="number">0</span>, comprehension=<span class="number">100</span>, lat=<span class="number">23</span>.<span class="number">138092</span>, status=<span class="number">0</span>&#125;</span><br><span class="line">'广州天河城'的经纬度为：<span class="number">113</span>.<span class="number">330431</span>，<span class="number">23</span>.<span class="number">138092</span></span><br></pre></td></tr></table></figure><p>在广州的一定知道，天河区、越秀区、番禺区都有”天河城”，那这个经纬度是哪个区的呢？</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">'广州天河城'的经纬度为：   <span class="number">113</span>.<span class="number">330431</span>，<span class="number">23</span>.<span class="number">138092</span></span><br><span class="line">'广州天河天河城'的经纬度为：<span class="number">113</span>.<span class="number">330431</span>，<span class="number">23</span>.<span class="number">138092</span></span><br><span class="line">'广州越秀天河城'的经纬度为：<span class="number">113</span>.<span class="number">27646</span>，<span class="number">23</span>.<span class="number">125892</span></span><br><span class="line">'广州番禺天河城'的经纬度为：<span class="number">113</span>.<span class="number">354771</span>，<span class="number">23</span>.<span class="number">00962</span></span><br></pre></td></tr></table></figure><p>据上述结果可知<code>不指定区域</code>的话，定位到的经纬度是<code>天河区的天河城</code>，两种可能性：</p><blockquote><ol><li>用权重值来判断，毕竟天河区的天河城是最繁华的地段嘛！</li><li>关键字分词解析求交集，与elasticsearch搜索引擎同理<code>(倾向于此点）</code></li></ol></blockquote><h2 id="示例代码二：IP获取"><a href="#示例代码二：IP获取" class="headerlink" title="示例代码二：IP获取"></a>示例代码二：IP获取</h2><p>利用IP获取大致位置，调用API接口，返回请求参数中指定上网IP的大致位置信息（一般为城市级别），位置信息包括：经纬度、省、市等地址信息。<br><code>目前该服务同时支持IPv4和IPv6来获取位置信息。普通IP定位服务目前不支持海外场景</code>。<br>如果请求参数中未指定上网IP，则默认返回当前服务请求来源的IP所对应的大致位置信息。<br><code>注意：该服务所返回的经纬度信息只是一个大概的位置，一般为城市中心点。</code></p><blockquote><p>传送门：<a href="https://lbsyun.baidu.com/index.php?title=webapi/ip-api" target="_blank" rel="noopener">接口参数文档</a></p></blockquote><p>拿示例代码一修改下<code>URL调用地址</code>和<code>analyticalField方法</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区域API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"http://api.map.baidu.com/location/ip?&amp;coor=bd09ll&amp;"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * json数据转化成Map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">analyticalField</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">Set&lt;Map.Entry&lt;String, Object&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : entrySet) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"content"</span>.equals(entry.getKey()) || <span class="string">"address_detail"</span>.equals(entry.getKey())</span><br><span class="line">|| <span class="string">"point"</span>.equals(entry.getKey())) &#123;</span><br><span class="line">analyticalField(JSON.parseObject(entry.getValue().toString(), Map<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">hashMap.put(entry.getKey(), entry.getValue().toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hashMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String addr = <span class="string">"203.168.30.174"</span>;</span><br><span class="line">Map&lt;String, String&gt; msgMap = getCoordinate(addr);</span><br><span class="line">System.out.println(<span class="string">"msgMap 数据："</span> + msgMap);</span><br><span class="line">System.out.println(String.format(<span class="string">"IP地址区域为：%s；经纬度为：%s"</span>, StringUtils.isEmpty(msgMap.get(<span class="string">"city"</span>))?msgMap.get(<span class="string">"address"</span>):msgMap.get(<span class="string">"city"</span>),msgMap.get(<span class="string">"x"</span>)+<span class="string">"，"</span>+msgMap.get(<span class="string">"y"</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">msgMap 数据：&#123;address=广东省, province=广东省, adcode=<span class="number">440000</span>, city=, street=, district=, street_number=, x=<span class="number">113</span>.<span class="number">27143134</span>, city_code=, y=<span class="number">23</span>.<span class="number">13533631</span>, status=<span class="number">0</span>&#125;</span><br><span class="line">IP地址区域为：广东省；经纬度为：<span class="number">113</span>.<span class="number">27143134</span>，<span class="number">23</span>.<span class="number">13533631</span></span><br></pre></td></tr></table></figure><p><code>注意：返回结果中有两个address键值对，因用HashMap封装数据可知，后者键值覆盖了前者键值</code></p><h2 id="后述"><a href="#后述" class="headerlink" title="后述"></a>后述</h2><p>在实际项目开发应用中，可批量处理多个地址信息获取到对应的经纬度，从而保存到数据库中。如果项目需要批量获取经纬度，下面代码需修改</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/URLtC6GD7WlK4AT.png" alt=""></p><p>loadJSON()方法每次都会新建URL对象，并开启一个openConnection()到远程目标的连接，数据量大的话肯定会造成内存溢出。</p><blockquote><p><code>解决方案：改用线程池，使用同一URL对象，每个线程预建一个openConnection()；线程启动都使用openConnection()得到同一URLConnection对象。</code></p></blockquote><h1 id="Geohash算法"><a href="#Geohash算法" class="headerlink" title="Geohash算法"></a>Geohash算法</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><blockquote><p><code>Geohashes是一种将经纬度坐标编码成一个字符串的方式</code></p></blockquote><p>经度范围是东经180到西经180，纬度范围是南纬90到北纬90，设定西经与南纬为负，所以地球上的经度范围就是[-180，180]，纬度范围就是[-90，90]。</p><p>如果以本初子午线(0经线)、赤道为界，纬度范围<code>(-90,0)用二进制0代表</code>，<code>（0,90)用二进制1代表</code>，<code>经度范围(-180,0)用二进制0代表</code>，<code>（0,180)用二进制1代表</code>，那么地球可以分成如下4个部分<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/pzW7r9m1IvX2j4q.png" alt=""></p><p>继续将<code>(-90,0)分成(-90,-45)、(-45,0)</code>；<code>(0,90)分成(0,45)、(45,90)</code>；<code>(-180,0)分成(-180,-90)、(-90,0)</code>；<code>(0,180)分成(0,90)、(90,180)</code>依次小块范围内递归对半划分<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/2mR1VLobkJy7GIS.png" alt=""></p><blockquote><p><code>Geohash算法通过将经纬度编码，地理位置分区，划分的次数越多，区域越多，区域面积越小了，精确度越高。</code></p></blockquote><h2 id="延伸问题"><a href="#延伸问题" class="headerlink" title="延伸问题"></a>延伸问题</h2><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/02/B5Ffl3ZhRCPULtk.jpg" alt=""></p><p>如图，如红点位置，区域内还有一个黄点。相邻区域内的绿点明显离红点更近。但因为黄点的编码和红点一样，最终找到的将是黄点。<br>问题来了，编码相近的两个点，真实距离并不一定很近，这需要实际计算出两个点的距离。要解决这个问题，首先要查找出<code>红点周边8个区域</code>，再根据Geohash筛选出附近点的经纬度，相互<code>计算得出哪个点离红点更近(示例代码三)</code>即可。</p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><h3 id="将经纬度变成二进制"><a href="#将经纬度变成二进制" class="headerlink" title="将经纬度变成二进制"></a>将经纬度变成二进制</h3><p>如（116.390705，39.923201）纬度的范围是（-90，90），其中间值为0。对于纬度39.923201，在区间（0，90）中，因此得到一个1；（0，90）区间的中间值为45度，纬度39.923201小于45，因此得到一个0，依次递归拆分20次计算，得到纬度的二进制表示，如下表：<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/A7tgX5JdTlf32k1.jpg" alt=""></p><p>得到纬度的二进制为：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">10111</span> <span class="number">00011</span> <span class="number">00011</span> <span class="number">11001</span></span><br></pre></td></tr></table></figure><p>同理得到经度116.390705的二进制为：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">11010</span> <span class="number">01011</span> <span class="number">00010</span> <span class="number">00100</span></span><br></pre></td></tr></table></figure><h3 id="将经纬度合并"><a href="#将经纬度合并" class="headerlink" title="将经纬度合并"></a>将经纬度合并</h3><p>经度占偶数位，纬度占奇数位，0也是偶数位。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">11100</span> <span class="number">11101</span> <span class="number">00100</span> <span class="number">01111</span> <span class="number">00000</span> <span class="number">01101</span> <span class="number">01011</span> <span class="number">00001</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/NWgMVdpYrRfXlaP.png" alt="">  </p><h3 id="Base32进行编码"><a href="#Base32进行编码" class="headerlink" title="Base32进行编码"></a>Base32进行编码</h3><p>Geohashes把整个世界分为32个单元的格子(4行8列)，每一个格子都用一个字母或者数字标识。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/qijFkzvLyamItel.jpg" alt=""></p><p>Base32编码用上述32个格子值(<code>0-9、b-z</code>（去掉a,i,l,o）)进行编码。先将上一步合并后得到的<code>二进制转换为十进制</code>数据，然后对应生成Base32码。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/qToEJYRy3f9I8vA.png" alt=""></p><p>将<code>5个二进制位转换成一个base32码</code>。上例最终得到的值为</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">wx4g0ec1</span><br></pre></td></tr></table></figure><h3 id="示例代码三"><a href="#示例代码三" class="headerlink" title="示例代码三"></a>示例代码三</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> GeoHashUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> GeoHash编码类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/28 10:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeoHashUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大经度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> Max_Lng = <span class="number">180</span>;</span><br><span class="line">    <span class="comment">// 最小经度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> Min_Lng = -<span class="number">180</span>;</span><br><span class="line">    <span class="comment">// 最大纬度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> Max_Lat = <span class="number">90</span>;</span><br><span class="line">    <span class="comment">// 最小纬度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> Min_Lat = -<span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 经度或纬度二进制长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> length = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> lngUnit = (Max_Lng - Min_Lng) / (<span class="number">1</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> latUnit = (Max_Lat - Min_Lat) / (<span class="number">1</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用0-9、b-z（去掉a, i, l, o，分别代表十进制数10 ~ 31）这32个字母进行编码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] base32Lookup =</span><br><span class="line">            &#123;<span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>,</span><br><span class="line">                    <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>,</span><br><span class="line">                    <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>,</span><br><span class="line">                    <span class="string">"s"</span>, <span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将经度或纬度转换为二进制编码，递归二分区间法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(<span class="keyword">double</span> min, <span class="keyword">double</span> max, <span class="keyword">double</span> value, List&lt;Character&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt; (length - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> mid = (max + min) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (value &lt; mid) &#123;</span><br><span class="line">            <span class="comment">// 左区间</span></span><br><span class="line">            list.add(<span class="string">'0'</span>);</span><br><span class="line">            convert(min, mid, value, list);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 右区间</span></span><br><span class="line">            list.add(<span class="string">'1'</span>);</span><br><span class="line">            convert(mid, max, value, list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base32编码长度为：经度和纬度二进制长度相加 lng + late = num，再除于5(5个二进制位转换成一个base32码)，如(20 + 20) / 5 = 8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">base32Encode</span><span class="params">(<span class="keyword">final</span> String str)</span> </span>&#123;</span><br><span class="line">        String unit = <span class="string">""</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">0</span>; start &lt; str.length(); start = start + <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="comment">// 截取5个二进制位</span></span><br><span class="line">            unit = str.substring(start, start + <span class="number">5</span>);</span><br><span class="line">            <span class="comment">// 根据十进制数，获取Base32编码表中对应值</span></span><br><span class="line">            sb.append(base32Lookup[convertToIndex(unit)]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将5个二进制位转化成十进制数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">convertToIndex</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = str.length();</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; length; index++) &#123;</span><br><span class="line">            result += str.charAt(index) == <span class="string">'0'</span> ? <span class="number">0</span> : <span class="number">1</span> &lt;&lt; (length - <span class="number">1</span> - index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先合并经纬度的二进制编码（经度占偶数位，纬度占奇数位，0也是偶数位），后Base32编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(<span class="keyword">double</span> lng, <span class="keyword">double</span> lat)</span> </span>&#123;</span><br><span class="line">        List&lt;Character&gt; lngList = <span class="keyword">new</span> ArrayList&lt;Character&gt;();</span><br><span class="line">        List&lt;Character&gt; latList = <span class="keyword">new</span> ArrayList&lt;Character&gt;();</span><br><span class="line">        convert(Min_Lng, Max_Lng, lng, lngList);</span><br><span class="line">        convert(Min_Lat, Max_Lat, lat, latList);</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; latList.size(); index++) &#123;</span><br><span class="line">            sb.append(lngList.get(index)).append(latList.get(index));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> base32Encode(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 边界问题，根据经纬度计算出原点及周围8个区域的Geohash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">around</span><span class="params">(<span class="keyword">double</span> lng, <span class="keyword">double</span> lat)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(encode(lng, lat + latUnit));</span><br><span class="line">        list.add(encode(lng, lat - latUnit));</span><br><span class="line">        list.add(encode(lng + lngUnit, lat));</span><br><span class="line">        list.add(encode(lng - lngUnit, lat));</span><br><span class="line">        <span class="comment">// 原点</span></span><br><span class="line">        list.add(encode(lng, lat));</span><br><span class="line">        list.add(encode(lng + lngUnit, lat + latUnit));</span><br><span class="line">        list.add(encode(lng - lngUnit, lat + latUnit));</span><br><span class="line">        list.add(encode(lng + lngUnit, lat - latUnit));</span><br><span class="line">        list.add(encode(lng - lngUnit, lat - latUnit));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> GeoHashUtil().encode(<span class="number">116.3967</span>, <span class="number">44.9999</span>));</span><br><span class="line">        System.out.println(<span class="keyword">new</span> GeoHashUtil().around(<span class="number">116.3967</span>, <span class="number">44.9999</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">wxfzbxvr</span><br><span class="line">[y84b08j2, wxfzbxvq, wxfzbxvx, wxfzbxvp, wxfzbxvr, y84b08j8, y84b08j0, wxfzbxvw, wxfzbxvn]</span><br></pre></td></tr></table></figure><blockquote><p>可到 <a href="http://geohash.co/" target="_blank" rel="noopener">Geohash转换器</a> 校验代码生成的geohash编码是否有错</p></blockquote><h2 id="精确范围"><a href="#精确范围" class="headerlink" title="精确范围"></a>精确范围</h2><p>Geohash比直接用经纬度的高效很多，而且使用者可以发布地址编码，既能表明自己的位置，又不至于暴露自己的精确坐标，有助于隐私保护和如下特点：</p><blockquote><ol><li>GeoHash用一个字符串表示经度和纬度两个坐标。在<code>数据库中可以实现在一列上应用索引</code>（某些情况下无法在两列上同时应用索引）</li><li>GeoHash表示的并<code>不是一个点</code>，而<code>是一个矩形区域</code></li><li>GeoHash编码的<code>前缀可以表示更大的区域</code>。如wx4g0ec1，它的前缀wx4g0e表示包含编码wx4g0ec1在内的更大范围。这个特性可以用于附近地点搜索</li></ol></blockquote><p>编码越长，表示的范围越小，位置也越精确。因此我们就可以通过比较GeoHash<code>匹配的位数</code>来判断两个点之间的大概距离。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/cWAzMNTaSuLlbho.jpg" alt=""></p><p>看上图可知编码长度长度为8时，精度在19米左右，而当编码长度为12时，精度在0.0186米左右；</p><blockquote><p>例：<code>需要获取和(116.390705，39.923201)相距2km内的地址，只需要查找地址坐标对应的GeoHash编码前五位(如：wx4g0)即可</code>，可根据数据情况进行选择</p></blockquote><h1 id="两点距离算法"><a href="#两点距离算法" class="headerlink" title="两点距离算法"></a>两点距离算法</h1><p>现在还多APP都有一个距离排序功能，表明该家店距离当前的位置，这个距离是怎么计算出呢？这完全是一个数学问题</p><h2 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul><li>将两点经纬度转换为三维直角坐标</li></ul><p>假设地球<code>球心</code>为三维直角坐标系的<code>原点</code>，<code>球心</code>与赤道上<code>0经度</code>点的连线为<code>X轴</code>，<code>球心</code>与赤道上<code>东经90度</code>点的连线为<code>Y轴</code>，<code>球心</code>与<code>北极点</code>的连线为<code>Z轴</code>，则地面上点的<code>直角坐标</code>与其<code>经纬度</code>的<code>关系</code>为：<code>α为纬度，β为经度</code></p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">X = cos α × cos β</span><br><span class="line">Y = cos α × sin β</span><br><span class="line">Z = sinα</span><br></pre></td></tr></table></figure><ul><li>根据三维直角坐标求两点间的直线(弦长)距离</li></ul><p>如果两点的直角坐标分别为(x1,y1,z1)和(x2,y2,z2)，则它们之间的直线距离为：<code>L为直线距离</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/02/mlMVOtjBHfK3oDR.png" alt="勾股定理"></p><ul><li>根据弦长求两点间的弧长距离(实际距离)</li></ul><p>弧长与弦长的关系为：<code>上式中角的单位为度，1度＝π/180弧度，S为弧长， R为地球半径约6378.137KM</code></p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">S = R × π × <span class="number">2</span> × arcsin(<span class="number">0</span>.<span class="number">5</span> × L) / <span class="number">180</span></span><br></pre></td></tr></table></figure><h2 id="示例代码四"><a href="#示例代码四" class="headerlink" title="示例代码四"></a>示例代码四</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> GeoHashUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 两点距离类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/28 10:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistanceUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 地球半径，单位：KM</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> Earth_Radius = <span class="number">6378.137</span>d;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">distance</span><span class="params">(<span class="keyword">double</span> lat1, <span class="keyword">double</span> lng1, <span class="keyword">double</span> lat2, <span class="keyword">double</span> lng2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 两点经纬度转换为三维直角坐标</span></span><br><span class="line">        <span class="keyword">double</span> x1 = Math.cos(lat1) * Math.cos(lng1);</span><br><span class="line">        <span class="keyword">double</span> y1 = Math.cos(lat1) * Math.sin(lng1);</span><br><span class="line">        <span class="keyword">double</span> z1 = Math.sin(lat1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> x2 = Math.cos(lat2) * Math.cos(lng2);</span><br><span class="line">        <span class="keyword">double</span> y2 = Math.cos(lat2) * Math.sin(lng2);</span><br><span class="line">        <span class="keyword">double</span> z2 = Math.sin(lat2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求两点间的弦长距离</span></span><br><span class="line">        <span class="keyword">double</span> chordLength = Math.sqrt(Math.pow((x1 - x2), <span class="number">2</span>) + Math.pow((y1 - y2), <span class="number">2</span>) + Math.pow((z1 - z2), <span class="number">2</span>));</span><br><span class="line">        <span class="comment">// 由弦长求两点间的弧长距离</span></span><br><span class="line">        <span class="keyword">double</span> arcLength = Earth_Radius * Math.PI * <span class="number">2</span> * Math.asin(<span class="number">0.5</span> * chordLength) / <span class="number">180</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arcLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">double</span> distance = DistanceUtil.distance(<span class="number">44.9999</span>, <span class="number">116.3967</span>, <span class="number">45.0001</span>, <span class="number">116.3967</span>);</span><br><span class="line"></span><br><span class="line">        str = String.format(<span class="string">"两点距离为 %f KM"</span>, distance);</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        str = String.format(<span class="string">"两点距离为 %s M"</span>, Math.round(distance * <span class="number">1000</span>));</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">两点距离为 <span class="number">0.022264</span> KM</span><br><span class="line">两点距离为 <span class="number">22</span> M</span><br></pre></td></tr></table></figure><p><code>用到的数学函数如下：</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Math.pow(x,y)   <span class="comment">// 求x的y次方</span></span><br><span class="line">Math.sin        <span class="comment">// 正弦函数</span></span><br><span class="line">Math.cos        <span class="comment">// 余弦函数</span></span><br><span class="line">Math.sqrt       <span class="comment">// 求平方根函数</span></span><br><span class="line">Math.asin       <span class="comment">// 反正弦函数</span></span><br><span class="line">Math.round      <span class="comment">// 四舍五入</span></span><br></pre></td></tr></table></figure><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/latitudeAndLongitude-demo" target="_blank" rel="noopener">https://github.com/wangdaicong/spring-boot-project/tree/master/latitudeAndLongitude-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Geohash </tag>
            
            <tag> 勾股定理 </tag>
            
            <tag> 经纬度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是进制？</title>
      <link href="/2021/10/27/%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%9B%E5%88%B6/"/>
      <url>/2021/10/27/%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%9B%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>进制也就是进位计数制，是人为定义的带进位的计数方法。对于任何一种进制如：X进制，就表示每一位上的数运算时都是逢X进一位。十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x进制就是逢x进位。</p><p>对于任何一个数，我们可以用不同的进位制来表示。比如：十进数57(10)，可以用二进制表示为111001(2)，也可以用五进制表示为212（5)，也可以用八进制表示为71(8)、用十六进制表示为39(16)，它们所代表的数值都是一样的。</p><h1 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h1><p>十进制编码几乎就是数值本身。数值本身是一个数学上的抽象概念。经过长期的演化、融合、选择、淘汰，系统简便、功能全面的十进制计数法成为人类文化中主流的计数方法。<br>十进制数的书写可以不加标注，或加<code>后缀D</code>，其中D是英文十进制Decimal的首字母D。</p><ul><li><code>十进制的基数为10，数码由0-9组成，计数规律逢十进一。</code></li></ul><h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><ul><li><code>二进制由两个数码0，1组成，运算规律是逢二进一。</code></li></ul><p>二进制数的书写通常在数的<code>右下方注上基数2</code>，或在<code>后缀加B</code>表示，其中B是英文二进制Binary的首字母。如：二进制数10110011可以写成（10110011）2，或写成10110011B。</p><p>计算机领域我们之所以采用二进制进行计数，是因为二进制具有以下优点：</p><ol><li>二进制数中只有两个数码0和1，可用具有两个不同稳定状态的元器件来表示一位数码。例如，电路中某一通路的电流的有无，某一节点电压的高低，晶体管的导通和截止等。</li><li>二进制数运算简单，大大简化了计算中运算部件的结构。二进制数的加法和乘法基本运算法则各有四条，如下：<blockquote><p>0+0=0，0+1=1，1+0=1，1+1=10<br>0×0=0，0×1=0，1×0=0，1×1=1</p></blockquote></li><li>二进制天然兼容逻辑运算。二进制计数在日常使用上有个不便之处，就是位数往往很长，读写不便，如：把十进制的100000D写成二进制就是11000011010100000B，所以<code>计算机领域我们实际采用的是十六进制</code>。二进制数转换为十六进制数时，长度缩减为原先的约四分之一，把十进制的100000写成八进制就是303240。<code>十六进制的一个数位可代表二进制的四个数位</code>。这样，十进制的100000写成十六进制就是186A0。</li></ol><h1 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h1><p>由于二进制数据的基数R较小，所以二进制数据的书写和阅读不方便，为此，在<code>小型机中引入了八进制</code>。八进制的基数R=8=2^3，有数码0、1、2、3、4、5、6、7组成，并且<code>每个数码正好对应三位二进制数</code>，所以八进制能很好地反映二进制。<br><code>八进制用下标8或数据后面加O表示</code>，如：二进制数据 (11 101 010 . 010 110 100)2 对应八进制数据 (352.264)8或352.264O。</p><h1 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h1><p>十六进制数由十六个数码：<code>数字0～9加上字母A-F组成（A-F分别表示十进制数10～15）</code>，十六进制数运算规律是逢十六进一，即基数R=16=2^4。<br>通常在表示时用<code>尾部标志H或下标16</code>以示区别，在c语言中用添加前缀0x以表示十六进制数。如：十六进制数4AC8可写成(4AC8)16，或写成4AC8H。</p><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><h2 id="二进制转换"><a href="#二进制转换" class="headerlink" title="二进制转换"></a>二进制转换</h2><h3 id="二进制转换八进制"><a href="#二进制转换八进制" class="headerlink" title="二进制转换八进制"></a>二进制转换八进制</h3><p><code>不足三位，用&#39;0&#39;补齐，正数部分往左补齐，小数部分往右补齐</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/Hg5Z3ql67YvInDM.jpg" alt="二进制转换八进制"></p><h3 id="二进制转换十进制"><a href="#二进制转换十进制" class="headerlink" title="二进制转换十进制"></a>二进制转换十进制</h3><p>幂取值以小数点为界<code>往左为正0 ~ n</code>，<code>往右为负-1 ~ -n</code>(如下图1/2、0/4、1/8….)<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/RNU3pASjCEbThwI.jpg" alt="二进制转换十进制"></p><h3 id="二进制转换十六进制"><a href="#二进制转换十六进制" class="headerlink" title="二进制转换十六进制"></a>二进制转换十六进制</h3><p><code>不足四位，用&#39;0&#39;补齐，正数部分往左补齐，小数部分往右补齐</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/wuKYp2XFGdHVtob.jpg" alt="二进制转换十六进制"></p><h2 id="八进制转换"><a href="#八进制转换" class="headerlink" title="八进制转换"></a>八进制转换</h2><h3 id="八进制转换二进制"><a href="#八进制转换二进制" class="headerlink" title="八进制转换二进制"></a>八进制转换二进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/TuHa3gQrLKOAcVI.jpg" alt="八进制转换二进制"></p><h3 id="八进制转换十进制"><a href="#八进制转换十进制" class="headerlink" title="八进制转换十进制"></a>八进制转换十进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/2NjXRJiaWnELxbw.jpg" alt="八进制转换十进制"></p><h3 id="八进制转换十六进制"><a href="#八进制转换十六进制" class="headerlink" title="八进制转换十六进制"></a>八进制转换十六进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/TuHa3gQrLKOAcVI.jpg" alt="八进制转换二进制"></p><p><code>不足四位，用&#39;0&#39;补齐，正数部分往左补齐，小数部分往右补齐</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/4vgYShL6HQJNaUB.jpg" alt="八进制转换十六进制"></p><h2 id="十进制转换"><a href="#十进制转换" class="headerlink" title="十进制转换"></a>十进制转换</h2><p><code>正数除以X进制，商至&#39;0&#39;为止；小数乘以X进制为正数为止</code></p><h3 id="十进制转换二进制"><a href="#十进制转换二进制" class="headerlink" title="十进制转换二进制"></a>十进制转换二进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/4I8PQoKldaCX1E7.jpg" alt="十进制转换二进制"></p><h3 id="十进制转换八进制"><a href="#十进制转换八进制" class="headerlink" title="十进制转换八进制"></a>十进制转换八进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/DlKxuaq2jWcLyAg.jpg" alt="十进制转换八进制"></p><h3 id="十进制转换十六进制"><a href="#十进制转换十六进制" class="headerlink" title="十进制转换十六进制"></a>十进制转换十六进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/fLgAUWeBFZGqrzh.jpg" alt="十进制转换十六进制"></p><h2 id="十六进制转换"><a href="#十六进制转换" class="headerlink" title="十六进制转换"></a>十六进制转换</h2><h3 id="十六进制转换二进制"><a href="#十六进制转换二进制" class="headerlink" title="十六进制转换二进制"></a>十六进制转换二进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/hUQ2XvTuJ3AWCRK.png" alt="十六进制转换二进制"></p><h3 id="十六进制转换八进制"><a href="#十六进制转换八进制" class="headerlink" title="十六进制转换八进制"></a>十六进制转换八进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/7Cs2KgqRADy6J5T.jpg" alt="十六进制转换八进制"></p><h3 id="十六进制转换十进制"><a href="#十六进制转换十进制" class="headerlink" title="十六进制转换十进制"></a>十六进制转换十进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/io3wjV5lOg98nuc.jpg" alt="十六进制转换十进制"></p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul><li><code>十进制转八进制或者十六进制有两种方法</code></li></ul><blockquote><ol><li>间接法<br>把十进制转成二进制，然后再由二进制转成八进制或者十六进制。这里不再做图片用法解释。</li><li>直接法(本文使用方法)<br>把十进制转八进制或者十六进制按照除8或者16取余，直到商为0为止。</li></ol></blockquote><ul><li><code>八进制与十六进制之间的转换有两种方法</code></li></ul><blockquote><ol><li>以先转成二进制然后再相互转换(本文使用方法)。</li><li>先转成十进制然后再相互转换。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 十进制 </tag>
            
            <tag> 二进制 </tag>
            
            <tag> 进制转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel导入导出注解通用版</title>
      <link href="/2021/10/18/Excel%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%B3%A8%E8%A7%A3%E9%80%9A%E7%94%A8%E7%89%88/"/>
      <url>/2021/10/18/Excel%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%B3%A8%E8%A7%A3%E9%80%9A%E7%94%A8%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>日常开发中常会遇到Excel导入导出的需求，得空写个前后端通用版的Excel导入导出demo，供之后开发效率事半功倍</p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><p>初始数据<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/28/pc9UjdIrlZVmCyh.png" alt="student表初始数据"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`sno`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sname`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sage`</span> <span class="built_in">varchar</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`ssex`</span> <span class="built_in">varchar</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`sno`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p><code>注：字段全为字符类型，避免解析数据保存到数据库表时需过多的数据类型转换逻辑</code></p><h3 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.goitman<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-importAndExport-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Web 项目开发starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--进行数据解析Fastjson会自动处理对象中的泛型，将其解析成原来定义好的对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 引入poi，解析workbook视图 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--通用mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mysql数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///数据库?characterEncoding=utf8&amp;amp;useUnicode=true</span></span><br><span class="line">    <span class="attr">username:</span> </span><br><span class="line">    <span class="attr">password:</span> </span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># xml文件地址</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment"># 打印mybatis的执行sql语句</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment"># 开启驼峰自动转换</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件保存地址</span></span><br><span class="line"><span class="attr">file:</span></span><br><span class="line">  <span class="attr">filePath:</span> <span class="string">E:/</span></span><br></pre></td></tr></table></figure><h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> PoiApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 启动类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 10:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"cn.goitman.mapper"</span>) <span class="comment">// 指定扫描的Mapper类的包的路径，在每个Mapper类上添加注解@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ExcelApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四个自定义注解"><a href="#四个自定义注解" class="headerlink" title="四个自定义注解"></a>四个自定义注解</h3><h4 id="EnableExport-允许导出类注解"><a href="#EnableExport-允许导出类注解" class="headerlink" title="EnableExport(允许导出类注解)"></a>EnableExport(允许导出类注解)</h4><p>实体类上必须定义此注解，因工具类会判断当前类是否为允许导出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.enums.ColorEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> EnableExport</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 允许导出类注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 10:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE) <span class="comment">// 用于类</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">// 运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableExport &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标题/文件名</span></span><br><span class="line">    <span class="function">String <span class="title">fileName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 背景颜色，默认蓝色</span></span><br><span class="line">    <span class="function">ColorEnum <span class="title">cellColor</span><span class="params">()</span> <span class="keyword">default</span> ColorEnum.BLUE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EnableExportField-允许导出字段注解"><a href="#EnableExportField-允许导出字段注解" class="headerlink" title="EnableExportField(允许导出字段注解)"></a>EnableExportField(允许导出字段注解)</h4><p>在实体类上，需导出数据的字段上定义此注解，可选</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.enums.ColorEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> EnableExportField</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 允许导出字段注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 11:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)  <span class="comment">// 用于字段上</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">// 运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableExportField &#123;</span><br><span class="line">    <span class="comment">// 设置宽度，默认100像素</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">colWidth</span><span class="params">()</span> <span class="keyword">default</span> 100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列名称</span></span><br><span class="line">    <span class="function">String <span class="title">colName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导出设置get方法</span></span><br><span class="line">    <span class="function">String <span class="title">useGetMethod</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 背景颜色，默认蓝色</span></span><br><span class="line">    <span class="function">ColorEnum <span class="title">cellColor</span><span class="params">()</span> <span class="keyword">default</span> ColorEnum.BLUE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ImportIndex-导入字段注解"><a href="#ImportIndex-导入字段注解" class="headerlink" title="ImportIndex(导入字段注解)"></a>ImportIndex(导入字段注解)</h4><p>必须在实体类上需导入数据的字段上定义此注解；定义字段索引属性时，必须与数据库相应字段的索引一致；实体类字段名必须与数据库字段名称一致，在本实例中未做转换逻辑</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ImportIndex</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 导入字段注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 15:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD) <span class="comment">// 用于字段</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">// 运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ImportIndex &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 索引，从0开始</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">index</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导入设置set方法</span></span><br><span class="line">    <span class="function">String <span class="title">useSetMethodName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EnableSelectList-下拉列表注解"><a href="#EnableSelectList-下拉列表注解" class="headerlink" title="EnableSelectList(下拉列表注解)"></a>EnableSelectList(下拉列表注解)</h4><p>在有下拉列表数据的字段定义此注解，可选</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> EnableSelectList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 下拉列表注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 14:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD) <span class="comment">// 用于字段</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">// 运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableSelectList &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.util.HSSFColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ColorEnum</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 设置颜色枚举</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 16:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ColorEnum &#123;</span><br><span class="line"></span><br><span class="line">    RED(<span class="string">"红色"</span>, HSSFColor.RED.index),</span><br><span class="line">    GREEN(<span class="string">"绿色"</span>, HSSFColor.GREEN.index),</span><br><span class="line">    BLANK(<span class="string">"白色"</span>, HSSFColor.BLACK.index),</span><br><span class="line">    YELLOW(<span class="string">"黄色"</span>, HSSFColor.YELLOW.index),</span><br><span class="line">    BLUE(<span class="string">"蓝色"</span>, HSSFColor.BLUE.index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Short index;</span><br><span class="line"></span><br><span class="line">    ColorEnum(String name, Short index) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Short <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(Short index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.MySqlMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> PoiMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 数据层，继承MySqlMapper，获取批量插入方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 11:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExcelMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Student</span>&gt;, <span class="title">MySqlMapper</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件工具类"><a href="#文件工具类" class="headerlink" title="文件工具类"></a>文件工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ExcelService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 文件工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 16:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 注入容器，获取配置文件数据</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;file.filePath&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilePath</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        FileUtil.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存文件到本地， 保存后的文件路径（绝对路径）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">saveFileToLocal</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String str = <span class="string">"yyyMM"</span>;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按年月分文件夹</span></span><br><span class="line">        File file1 = <span class="keyword">new</span> File(filePath + sdf.format(date) + File.separator);</span><br><span class="line">        <span class="keyword">if</span> (!file1.exists()) &#123;</span><br><span class="line">            file1.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 获取文件后缀名</span></span><br><span class="line">        String suffixFileName = fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">        String path = file1.getPath() + File.separator + uuid + suffixFileName;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> File(path));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例测试"><a href="#实例测试" class="headerlink" title="实例测试"></a>实例测试</h2><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/nemgYS6whsDPqTI.png" alt=""></p><h3 id="常规导入"><a href="#常规导入" class="headerlink" title="常规导入"></a>常规导入</h3><ul><li><p>前端请求<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/rO3XCuzB75W9FEb.png" alt=""></p></li><li><p>实体类</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableExport</span>(fileName = <span class="string">"学生表"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ImportIndex</span>(index = <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">private</span> String sno;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnableExportField</span>(colName = <span class="string">"姓名"</span>, colWidth = <span class="number">90</span>)</span><br><span class="line">    <span class="meta">@ImportIndex</span>(index = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnableExportField</span>(colName = <span class="string">"年龄"</span>, colWidth = <span class="number">90</span>, cellColor = ColorEnum.YELLOW)</span><br><span class="line">    <span class="meta">@ImportIndex</span>(index = <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">private</span> String sage;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnableExportField</span>(colName = <span class="string">"性别"</span>, colWidth = <span class="number">90</span>)</span><br><span class="line">    <span class="meta">@ImportIndex</span>(index = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> String ssex;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>接口调用：<code>入参名称必须与前端传参名称一致</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  uploadFile</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 常规导入</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  [file]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  boolean</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/uploadFile"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">uploadFile</span><span class="params">(@RequestParam(<span class="string">"fileName"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> excelService.uploadFile(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>逻辑层：parseExcelToList方法，没有校验@EnableSelectList注解和ImportIndex注解中的useSetMethodName属性</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">uploadFile</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        String path = FileUtil.saveFileToLocal(file);</span><br><span class="line">        File fileDirPath = <span class="keyword">new</span> File(path);</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students = (List&lt;Student&gt;) ExcelUtils.parseExcelToList(fileDirPath, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> excelMapper.insertList(students) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>ExcelUtils工具类方法<br>此时实体类没有定义ImportIndex注解的useSetMethodName属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [excel 文件, clazz pojo类型]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;?&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> parseExcelToList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 导入，将Excel数据转换为集合对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;?&gt; parseExcelToList(File excel, Class clazz) &#123;</span><br><span class="line">    List&lt;Object&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 创建输入流</span></span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 创建工作表</span></span><br><span class="line">    Sheet sheet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        is = <span class="keyword">new</span> FileInputStream(excel.getAbsolutePath());</span><br><span class="line">        <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建工作簿</span></span><br><span class="line">            Workbook workbook = WorkbookFactory.create(is);</span><br><span class="line">            <span class="comment">// 获取第一个工作表</span></span><br><span class="line">            sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (sheet != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">                String values[];</span><br><span class="line">                <span class="comment">// 获取第二行数据，第一行为标题</span></span><br><span class="line">                Row row = sheet.getRow(i);</span><br><span class="line">                <span class="keyword">while</span> (row != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 获取总列数</span></span><br><span class="line">                    <span class="keyword">int</span> cellNum = row.getPhysicalNumberOfCells();</span><br><span class="line">                    values = <span class="keyword">new</span> String[cellNum];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= cellNum; j++) &#123;</span><br><span class="line">                        <span class="comment">// 获取单元格数据</span></span><br><span class="line">                        Cell cell = row.getCell(j);</span><br><span class="line">                        String value = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span> (cell != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// 将单元格数据类型设置为字符串</span></span><br><span class="line">                            cell.setCellType(Cell.CELL_TYPE_STRING);</span><br><span class="line">                            value = cell.getStringCellValue() == <span class="keyword">null</span> ? <span class="keyword">null</span> : cell.getStringCellValue();</span><br><span class="line">                            values[j] = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 反射获取类中所有声明字段</span></span><br><span class="line">                    Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">                    Object obj = clazz.newInstance();</span><br><span class="line">                    <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">                        <span class="comment">// 判断ImportIndex注解是否在此字段上，true为存在</span></span><br><span class="line">                        <span class="keyword">if</span> (f.isAnnotationPresent(ImportIndex<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                            ImportIndex annotation = f.getAnnotation(ImportIndex<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                            <span class="comment">// 获取索引值</span></span><br><span class="line">                            <span class="keyword">int</span> index = annotation.index();</span><br><span class="line">                            <span class="comment">// 获取方法名</span></span><br><span class="line">                            String useSetMethodName = annotation.useSetMethodName();</span><br><span class="line">                            <span class="keyword">if</span> (!<span class="string">""</span>.equals(useSetMethodName)) &#123;</span><br><span class="line">                                <span class="comment">// fastjson TypeUtils工具类，实现常用数据类型和对象间的相互转换</span></span><br><span class="line">                                Object val = TypeUtils.cast(values[index], f.getType(), <span class="keyword">null</span>);</span><br><span class="line">                                <span class="comment">// 取消Java语言访问检查</span></span><br><span class="line">                                f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                                <span class="comment">// 参数一：方法名，参数二：方法参数数组</span></span><br><span class="line">                                Method method = clazz.getMethod(useSetMethodName, <span class="keyword">new</span> Class[]&#123;f.getType()&#125;);</span><br><span class="line">                                <span class="comment">// 暴力访问</span></span><br><span class="line">                                method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                                <span class="comment">// 返回值是Object接收，参数一：对象是谁，参数二：调用该方法的实际参数</span></span><br><span class="line">                                method.invoke(obj, <span class="keyword">new</span> Object[]&#123;val&#125;);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                                Object val = TypeUtils.cast(values[index], f.getType(), <span class="keyword">null</span>);</span><br><span class="line">                                <span class="comment">// 将指定对象上此 Field字段设置为新值。参数一：指定对象，参数二：新值</span></span><br><span class="line">                                f.set(obj, val);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将对象数据保存至集合</span></span><br><span class="line">                    res.add(obj);</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="comment">// 遍历下一行数据</span></span><br><span class="line">                    row = sheet.getRow(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行结果</p></li></ul><p>控制台信息<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/yxuYN5X9lWCPIvU.png" alt=""></p><p>数据库数据<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/8hYNSOAI3xG2KCb.png" alt=""></p><h4 id="下拉列表注解的数据转化"><a href="#下拉列表注解的数据转化" class="headerlink" title="下拉列表注解的数据转化"></a>下拉列表注解的数据转化</h4><ul><li><p>前端请求<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/mdOCZ5yze7paBIg.png" alt=""></p></li><li><p>以实体类中性别字段为例</p></li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/hgOtNE5u4PjHWrz.png" alt=""></p><ul><li><p>接口调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  uploadFileSelectList</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 演示EnableSelectList注解、ImportIndex注解useSetMethodName属性的使用</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  [file]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  boolean</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/uploadFileSelectList"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">uploadFileSelectList</span><span class="params">(@RequestParam(<span class="string">"fileName"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> excelService.uploadFileSelectList(file);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>逻辑层：此处的ALL_SELECT_LIST_MAP预存数据硬编码不灵活，改善的方式很多，在此不衍生讨论啦</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> cn.goitman.utils.ExcelUtils.ALL_SELECT_LIST_MAP;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">uploadFileSelectList</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 预存数据，配合EnableSelectList注解使用</span></span><br><span class="line">        Map&lt;String, String&gt; selsctList = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        selsctList.put(<span class="string">"1"</span>,<span class="string">"男"</span>);</span><br><span class="line">        selsctList.put(<span class="string">"2"</span>,<span class="string">"女"</span>);</span><br><span class="line">        ALL_SELECT_LIST_MAP.put(<span class="number">3</span>,selsctList);</span><br><span class="line"></span><br><span class="line">        String path = FileUtil.saveFileToLocal(file);</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students = (List&lt;Student&gt;) ExcelUtils.parseExcelToList(inputStream, Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> excelMapper.insertList(students) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>ExcelUtils工具类方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [excel 文件输入流, clazz pojo类型]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;?&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> parseExcelToList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 导入，将Excel数据转换为集合对象，另校验EnableSelectList注解或ImportIndex注解useSetMethodName属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;?&gt; parseExcelToList(InputStream excel, Class clazz) &#123;</span><br><span class="line">    List&lt;Object&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    Sheet sheet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        is = excel;</span><br><span class="line">        <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Workbook workbook = WorkbookFactory.create(is);</span><br><span class="line">            sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (sheet != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">                String values[];</span><br><span class="line">                Row row = sheet.getRow(i);</span><br><span class="line">                <span class="keyword">while</span> (row != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> cellNum = row.getPhysicalNumberOfCells();</span><br><span class="line">                    values = <span class="keyword">new</span> String[cellNum];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cellNum; j++) &#123;</span><br><span class="line">                        Cell cell = row.getCell(j);</span><br><span class="line">                        <span class="keyword">if</span> (cell != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            cell.setCellType(Cell.CELL_TYPE_STRING);</span><br><span class="line">                            String value = cell.getStringCellValue() == <span class="keyword">null</span> ? <span class="keyword">null</span> : cell.getStringCellValue();</span><br><span class="line">                            values[j] = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">                    Object obj = clazz.newInstance();</span><br><span class="line">                    <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (f.isAnnotationPresent((ImportIndex<span class="class">.<span class="keyword">class</span>))) </span>&#123;</span><br><span class="line">                            ImportIndex annotation = f.getAnnotation(ImportIndex<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                            <span class="keyword">int</span> index = annotation.index();</span><br><span class="line">                            Object value = values[index];</span><br><span class="line">                            <span class="comment">// 判断EnableSelectList注解是否在此字段上，true为存在</span></span><br><span class="line">                            <span class="keyword">if</span> (f.isAnnotationPresent(EnableSelectList<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                                <span class="comment">// 根据索引获取下拉列表值</span></span><br><span class="line">                                value = getKeyByValue(ALL_SELECT_LIST_MAP.get(index), String.valueOf(value));</span><br><span class="line">                            &#125;</span><br><span class="line">                            String useSetMethodName = annotation.useSetMethodName();</span><br><span class="line">                            <span class="keyword">if</span> (!<span class="string">""</span>.equals(useSetMethodName)) &#123;</span><br><span class="line">                                Object val = TypeUtils.cast(value, f.getType(), <span class="keyword">null</span>);</span><br><span class="line">                                f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                                Method method = clazz.getMethod(useSetMethodName, <span class="keyword">new</span> Class[]&#123;f.getType()&#125;);</span><br><span class="line">                                method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                                method.invoke(obj, <span class="keyword">new</span> Object[]&#123;val&#125;);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                                Object val = TypeUtils.cast(value, f.getType(), <span class="keyword">null</span>);</span><br><span class="line">                                f.set(obj, val);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    res.add(obj);</span><br><span class="line">                    i++;</span><br><span class="line">                    row = sheet.getRow(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行结果</p></li></ul><p>数据表还原回初始数据，此代码段将性别字段数据做了转化处理<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/tmeLzYBn4gcaACv.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/vicVuQBUbLhAM4Z.png" alt=""></p><p>控制台信息<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/6LC78Og4mH5VIKq.png" alt=""></p><p>数据库数据<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/cwdzGmyupHLixEf.png" alt=""></p><h4 id="useSetMethodName属性的数据转化"><a href="#useSetMethodName属性的数据转化" class="headerlink" title="useSetMethodName属性的数据转化"></a>useSetMethodName属性的数据转化</h4><p><code>前端请求、接口调用和ExcelUtils工具类方法与上述下拉列表注解的数据转化相同</code></p><ul><li><p>还是以实体类中性别字段为例，注销EnableSelectList注解，setSex方法将性别数据做了转化<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/1GOlaXWKvmARpwQ.png" alt=""></p></li><li><p>逻辑层：注销预存数据ALL_SELECT_LIST_MAP代码块<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/4Lnky2opKWs1ER3.png" alt=""></p></li><li><p>执行结果</p></li></ul><p>还原回初始数据，此反射代码解析useSetMethodName属性<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/Cd2O6w3JMyPZTL5.png" alt=""></p><p>控制台信息<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/H47Y5ufBRliwqjs.png" alt=""></p><p>数据库数据<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/sNgv3WUSFyJqIAn.png" alt=""></p><h3 id="常规导出"><a href="#常规导出" class="headerlink" title="常规导出"></a>常规导出</h3><ul><li><p>前端请求：此链接为本地测试链接<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/fEmvjPKFb93RQqp.png" alt=""></p></li><li><p>实体类：以导出姓名、年龄、性别三个字段数据为例<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/GkCEJAYoX7nHeum.png" alt=""> </p></li><li><p>接口调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  downloadFile</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 常规导出</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  [response]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/downloadFile"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadFile</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    excelService.downloadFile(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>逻辑层</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadFile</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    List&lt;Student&gt; students = excelMapper.selectAll();</span><br><span class="line">    ExcelUtils.exportExcel(response, students, Student<span class="class">.<span class="keyword">class</span>, <span class="title">null</span>, <span class="title">null</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>ExcelUtils工具类方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [outputStream 输出流, dataList 导出的数据, clazz 导出数据的pojo类型, selectMap 下拉列表的列, exportTitle 标题]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> exportExcel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 导出Excel</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exportExcel</span><span class="params">(HttpServletResponse response, List dataList, Class clazz, Map&lt;Integer, Map&lt;String, String&gt;&gt; selectMap, String exportTitle)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建工作簿</span></span><br><span class="line">    HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">    <span class="comment">// 创建工作表</span></span><br><span class="line">    HSSFSheet sheet = workbook.createSheet();</span><br><span class="line">    <span class="comment">// 设置工作表行的默认高度</span></span><br><span class="line">    sheet.setDefaultRowHeight((<span class="keyword">short</span>) (<span class="number">20</span> * <span class="number">20</span>));</span><br><span class="line">    <span class="comment">// 判断当前类是否允许导出</span></span><br><span class="line">    <span class="keyword">if</span> (clazz.isAnnotationPresent(EnableExport<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">        EnableExport export = (EnableExport) clazz.getAnnotation(EnableExport<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 所有列标题名称</span></span><br><span class="line">        List&lt;String&gt; colNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 所有列标题背景颜色</span></span><br><span class="line">        List&lt;ColorEnum&gt; colors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 允许导出的字段</span></span><br><span class="line">        List&lt;Field&gt; fieldList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Field field : clazz.getDeclaredFields()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(EnableExportField<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                EnableExportField enableExportField = field.getAnnotation(EnableExportField<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                colNames.add(enableExportField.colName());</span><br><span class="line">                colors.add(enableExportField.cellColor());</span><br><span class="line">                fieldList.add(field);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置每列的宽度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fieldList.size(); i++) &#123;</span><br><span class="line">            Field field = fieldList.get(i);</span><br><span class="line">            sheet.setColumnWidth(i, field.getAnnotation(EnableExportField<span class="class">.<span class="keyword">class</span>).<span class="title">colWidth</span>() * 20)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HSSFRow hssfRow = <span class="keyword">null</span>; <span class="comment">// 表行</span></span><br><span class="line">        HSSFCell hssfCell = <span class="keyword">null</span>; <span class="comment">// 单元格</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置列标题</span></span><br><span class="line">        String fileName = export.fileName();</span><br><span class="line">        <span class="keyword">if</span> (exportTitle != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fileName = exportTitle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 绘制标题，可选</span></span><br><span class="line">        createTitle(workbook, hssfRow, hssfCell, sheet, colNames.size() - <span class="number">1</span>, fileName, export.cellColor());</span><br><span class="line">        <span class="comment">// 创建表头列名</span></span><br><span class="line">        createHeadRow(workbook, hssfRow, hssfCell, sheet, colNames, colors);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 绘制单元格样式</span></span><br><span class="line">            HSSFCellStyle cellStyle = getBasicCellStyle(workbook);</span><br><span class="line">            <span class="comment">// 插入数据</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Object obj : dataList) &#123;</span><br><span class="line">                <span class="comment">// 表头标题和列名已创建，所以从第三行开始</span></span><br><span class="line">                hssfRow = sheet.createRow(i + <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; fieldList.size(); j++) &#123;</span><br><span class="line">                    Field field = fieldList.get(j);</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    Object value = field.get(obj);</span><br><span class="line">                    EnableExportField enableExportField = field.getAnnotation(EnableExportField<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                    String getMethodName = enableExportField.useGetMethod();</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="string">""</span>.equals(getMethodName)) &#123;</span><br><span class="line">                        Method method = clazz.getMethod(getMethodName, <span class="keyword">new</span> Class[]&#123;field.getType()&#125;);</span><br><span class="line">                        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        method.invoke(obj, <span class="keyword">new</span> Object[]&#123;value&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (field.isAnnotationPresent(EnableSelectList<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (selectMap != <span class="keyword">null</span> &amp;&amp; selectMap.get(j) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            value = selectMap.get(j).get(value);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    setCellValue(value, hssfCell, hssfRow, cellStyle, j);</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 提供下载框，并设置文件名</span></span><br><span class="line">            response.setContentType(<span class="string">"octets/stream"</span>);</span><br><span class="line">            <span class="comment">// 防止中文文件名称乱码，需encode，并设置字符集</span></span><br><span class="line">            response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> +  java.net.URLEncoder.encode(fileName, <span class="string">"UTF-8"</span>) + <span class="string">".xls"</span>);</span><br><span class="line">            OutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 获取响应流</span></span><br><span class="line">            outputStream = response.getOutputStream();</span><br><span class="line">            workbook.write(outputStream);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>执行结果</p></li></ul><p>控制台信息<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/tUwoGhIQ3DFdBnM.png" alt=""></p><p>导出的excel数据<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/YFk6hNbJMnQU3XD.png" alt=""></p><p>如果不需要标题，即可<code>注释createTitle方法</code>，同时需在插入数据时修改行数值为<code>i+1</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/R6ioFs8djewrl42.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>下拉列表注解和useSetMethodName属性的玩法，当然不止数据转化这一种，在此不延伸啦，<code>在评论区写下你的构思一起学习吧！</code></p><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/poi-importAndExport-demo" target="_blank" rel="noopener">https://github.com/wangdaicong/spring-boot-project/tree/master/poi-importAndExport-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 导入导出 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poi </tag>
            
            <tag> 注解 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keycloak认证授权框架</title>
      <link href="/2021/09/29/Keycloak%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E6%A1%86%E6%9E%B6/"/>
      <url>/2021/09/29/Keycloak%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在学习Oauth2的时候，需要通过写代码来实现认证授权服务。最近发现一款可视化的安全框架Keycloak，只需几个命令就可以快速搭建认证授权服务，无需自行开发。原生支持SpringBoot，使用起来非常简单！</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Keycloak是一款开源的认证授权平台，在Github上已有9.4k+Star。Keycloak功能众多，可实现用户注册、社会化登录、单点登录、双重认证、LDAP集成等功能。</p><blockquote><p>Keycloak官方文档：<a href="https://www.keycloak.org/documentation" target="_blank" rel="noopener">https://www.keycloak.org/documentation</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>使用Docker搭建Keycloak服务非常简单，两个命令就完事了，我们将采用此种方式。</p></blockquote><ul><li>首先下载Keycloak的Docker镜像，注意使用<code>jboss</code>的镜像，官方镜像不在DockerHub中；<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull jboss/keycloak:14.0.0</span><br></pre></td></tr></table></figure></li><li>使用如下命令运行Keycloak服务：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8080:8080 --name keycloak \</span><br><span class="line">-e KEYCLOAK_USER=admin \</span><br><span class="line">-e KEYCLOAK_PASSWORD=admin \</span><br><span class="line">-d jboss/keycloak:14.0.0</span><br></pre></td></tr></table></figure></li><li>运行成功后可以通过如下地址访问Keycloak服务，点击圈出来的地方可以访问管理控制台，访问地址：<a href="http://192.168.7.142:8080" target="_blank" rel="noopener">http://192.168.7.142:8080</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/ln1Zok8KCvBhfJI.png" alt=""></li></ul><h2 id="控制台使用"><a href="#控制台使用" class="headerlink" title="控制台使用"></a>控制台使用</h2><blockquote><p>接下来我们来体验下Keycloak的管理控制台，看看这个可视化安全框架有什么神奇的地方。</p></blockquote><ul><li><p>首先输入我们的账号密码<code>admin:admin</code>进行登录；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/WclRqj8V2APpytU.png" alt=""></p></li><li><p>登录成功后进入管理控制台，我们可以发现Keycloak是英文界面，良心的是它还支持多国语言（包括中文），只要将<code>Themes-&gt;Default Locale</code>改为<code>zh-CN</code>即可切换为中文；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/Gh2wlbRxK13C9Sr.png" alt=""></p></li><li><p>修改完成后保存并刷新页面，Keycloak控制台就变成中文界面了；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/3jTqBIpyshZ6aNQ.png" alt=""></p></li><li><p>Keycloak非常良心的给很多属性都添加了解释，而且还是中文的，基本看下解释就可以知道如何使用了；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/KDgJX59Iq6YiZ3N.png" alt=""></p></li><li><p>在我们开始使用Keycloak保护应用安全之前，我们得先创建一个领域（realm），领域相当于租户的概念，不同租户之间数据相互隔离，这里我们创建一个<code>macrozheng</code>的领域；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/tGQcuJUyRneP53g.png" alt=""></p></li><li><p>接下来我们可以在<code>macrozheng</code>领域中去创建用户，创建一个<code>macro</code>用户；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/HkDtPNgxUTw17nE.png" alt=""></p></li></ul><ul><li><p>之后我们编辑用户的信息，在<code>凭据</code>下设置<code>密码</code>；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/nLOQbVfjgkUIZdq.png" alt=""></p></li><li><p>创建完用户之后，就可以登录了，用户和管理员的登录地址并不相同，我们可以在<code>客户端</code>页面中查看到地址；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/eC42zhEiwRWqKra.png" alt=""></p></li><li><p>访问该地址后即可登录，访问地址：<a href="http://192.168.7.142:8080/auth/realms/macrozheng/account" target="_blank" rel="noopener">http://192.168.7.142:8080/auth/realms/macrozheng/account</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/NEMhOklPcjubRKw.png" alt=""> </p></li><li><p>用户登录成功后即可查看并修改个人信息。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/aLOZEA9odH2wPqx.png" alt=""> </p></li></ul><h2 id="结合Oauth2使用"><a href="#结合Oauth2使用" class="headerlink" title="结合Oauth2使用"></a>结合Oauth2使用</h2><p>OAuth 2.0是用于授权的行业标准协议，当然Keycloak也是支持的，下面我们通过调用接口的方式来体验下<code>密码模式</code>。先回顾下两种常用的Oauth2授权模式。</p><h3 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/yol3j5t7UQuSWKd.png" alt=""></p><ol><li>客户端将用户导向认证服务器；</li><li>用户在认证服务器进行登录并授权；</li><li>认证服务器返回授权码给客户端；</li><li>客户端通过授权码和跳转地址向认证服务器获取访问令牌；</li><li>认证服务器发放访问令牌（有需要带上刷新令牌）。</li></ol><h3 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/N4JEVzwKgfXY38h.png" alt=""></p><ol><li>客户端从用户获取用户名和密码；</li><li>客户端通过用户的用户名和密码访问认证服务器；</li><li>认证服务器返回访问令牌（有需要带上刷新令牌）。</li></ol><h3 id="密码模式体验"><a href="#密码模式体验" class="headerlink" title="密码模式体验"></a>密码模式体验</h3><ul><li><p>首先需要在Keycloak中创建客户端<code>mall-tiny-keycloak</code>；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/xVyegzD84p26CFj.png" alt=""></p></li><li><p>然后创建一个角色<code>mall-tiny</code>；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/RiDT56HbNBqase2.png" alt=""></p></li><li><p>然后将角色分配给macro用户；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/V47zlZaqEWL6YnS.png" alt=""></p></li><li><p>一切准备就绪，在Postman中使用Oauth2的方式调用接口就可以获取到Token了，获取token的地址：<a href="http://192.168.7.142:8080/auth/realms/macrozheng/protocol/openid-connect/token" target="_blank" rel="noopener">http://192.168.7.142:8080/auth/realms/macrozheng/protocol/openid-connect/token</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/BeIso12xuUYEKGm.png" alt=""></p></li></ul><h2 id="结合SpringBoot使用"><a href="#结合SpringBoot使用" class="headerlink" title="结合SpringBoot使用"></a>结合SpringBoot使用</h2><blockquote><p>接下来我们体验下使用Keycloak保护SpringBoot应用的安全。由于Keycloak原生支持SpringBoot，所以使用起来还是很简单的。</p></blockquote><ul><li>由于我们的SpringBoot应用将运行在<code>localhost:8088</code>上面，我们需要对Keycloak的客户端的<code>有效的重定向URI</code>进行配置；</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/wEBWOosYQ3aR8Dm.png" alt=""></p><ul><li>接下来我们需要修改应用的<code>pom.xml</code>，集成Keycloak；<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--集成Keycloak--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.keycloak<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>keycloak-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>14.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>再修改应用的配置文件<code>application.yml</code>，具体属性参考注释即可，需要注意的是给路径绑定好可以访问的角色；<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Keycloak相关配置</span></span><br><span class="line"><span class="attr">keycloak:</span></span><br><span class="line">  <span class="comment"># 设置客户端所在领域</span></span><br><span class="line">  <span class="attr">realm:</span> <span class="string">macrozheng</span></span><br><span class="line">  <span class="comment"># 设置Keycloak认证服务访问路径</span></span><br><span class="line">  <span class="attr">auth-server-url:</span> <span class="string">http://192.168.7.142:8080/auth</span></span><br><span class="line">  <span class="comment"># 设置客户端ID</span></span><br><span class="line">  <span class="attr">resource:</span> <span class="string">mall-tiny-keycloak</span></span><br><span class="line">  <span class="comment"># 设置为公开客户端，不需要秘钥即可访问</span></span><br><span class="line">  <span class="attr">public-client:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 配置角色与可访问路径的对应关系</span></span><br><span class="line">  <span class="attr">security-constraints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">auth-roles:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">mall-tiny</span></span><br><span class="line">      <span class="attr">security-collections:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">patterns:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'/brand/*'</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'/swagger-ui/*'</span></span><br></pre></td></tr></table></figure></li><li>接下来访问下应用的Swagger页面，访问的时候会跳转到Keycloak的控制台去登录，访问地址：<a href="http://localhost:8088/swagger-ui/" target="_blank" rel="noopener">http://localhost:8088/swagger-ui/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/WgUmMXnzoCBskaf.png" alt=""></p><ul><li>登录成功后，即可访问被保护的Swagger页面和API接口，一个很标准的Oauth2的授权码模式，流程参考授权码模式的说明即可。</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/ptCuYeLWBackqPM.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Keycloak是一款非常不错的可视化安全框架，让我们无需搭建认证服务即可完成认证和授权功能。原生支持SpringBoot，基本无需修改代码即可集成，不愧为现代化的安全框架！</p><blockquote><p>原文：<a href="https://mp.weixin.qq.com/s/yXSVbgkYIcJWPe4n2hSeUA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/yXSVbgkYIcJWPe4n2hSeUA</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 敏捷开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oauth2 </tag>
            
            <tag> 认证授权 </tag>
            
            <tag> 单点登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库存IP地址，用什么数据类型？</title>
      <link href="/2021/09/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98IP%E5%9C%B0%E5%9D%80%EF%BC%8C%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/09/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98IP%E5%9C%B0%E5%9D%80%EF%BC%8C%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><p>在看高性能MySQL第3版（4.1.7节）时，作者建议<code>当存储IPv4地址时，应该使用32位的无符号整数（UNSIGNED INT）来存储IP地址，而不是使用字符串</code>。 </p><p>相对字符串存储，使用无符号整数来存储有如下的<code>好处</code>：</p><blockquote><ol><li>节省空间，不管是数据存储空间，还是索引存储空间</li><li>便于使用范围查询（BETWEEN…AND），且效率更高</li></ol></blockquote><ul><li>通常，在保存IPv4地址时，一个IPv4最小需要7个字符，最大需要15个字符，所以，使用<code>VARCHAR(15)</code>即可。</li><li>MySQL在保存<code>变长的字符串</code>时，还需要<code>额外的一个字节来保存</code>此字符串的长度。而如果使用<code>无符号整数</code>来存储，只需要<code>4个字节</code>即可。</li><li>另外还可以使用4个字段分别存储IPv4中的各部分，但是通常这不管是存储空间和查询效率应该都不是很高（可能有的场景适合使用这种方式存储）。</li></ul><p>使用无符号整数来存储也有<code>缺点</code>：</p><blockquote><ol><li>不便于阅读</li><li>需要手动转换</li></ol></blockquote><p>对于转换来说，MySQL提供了相应的函数来把<code>字符串格式的IP转换成整数</code>的<code>INET_ATON</code>，以及把<code>整数格式的IP转换成字符串</code>的<code>INET_NTOA</code>。<br>如下所示：</p><h3 id="INET-ATON"><a href="#INET-ATON" class="headerlink" title="INET_ATON"></a>INET_ATON</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select inet_aton('192.168.0.1');</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line">| inet_aton('192.168.0.1') |</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line">|               3232235521 |</span><br><span class="line">+<span class="comment">--------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="INET-NTOA"><a href="#INET-NTOA" class="headerlink" title="INET_NTOA"></a>INET_NTOA</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select inet_ntoa(3232235521);</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">| inet_ntoa(3232235521) |</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">| 192.168.0.1           |</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对于<code>IPv6</code>来说，使用VARBINARY同样可获得相同的好处，同时MySQL也提供了相应的转换函数，即<code>INET6_ATON</code>和<code>INET6_NTOA</code>。</p><h2 id="ORACLE数据库"><a href="#ORACLE数据库" class="headerlink" title="ORACLE数据库"></a>ORACLE数据库</h2><p>ORACLE模拟MySQL中inet_aton函数、inet_ntoa函数</p><h3 id="INET-ATON-1"><a href="#INET-ATON-1" class="headerlink" title="INET_ATON"></a>INET_ATON</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> <span class="keyword">inet_aton</span>( f_address <span class="keyword">IN</span> <span class="built_in">varchar2</span> ) <span class="keyword">RETURN</span> <span class="built_in">number</span> </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line">    o_address_number <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">      to_number(regexp_replace(f_address, <span class="string">'([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)'</span>, <span class="string">'\1'</span>)) * <span class="number">16777216</span> +</span><br><span class="line">      to_number(regexp_replace(f_address, <span class="string">'([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)'</span>, <span class="string">'\2'</span>)) * <span class="number">65536</span> +</span><br><span class="line">      to_number(regexp_replace(f_address, <span class="string">'([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)'</span>, <span class="string">'\3'</span>)) * <span class="number">256</span> +</span><br><span class="line">      to_number(regexp_replace(f_address, <span class="string">'([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)'</span>, <span class="string">'\4'</span>)) <span class="keyword">INTO</span> o_address_number;</span><br><span class="line"></span><br><span class="line">RETURN o_address_number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">inet_aton</span>;</span><br></pre></td></tr></table></figure><h3 id="INET-NTOA-1"><a href="#INET-NTOA-1" class="headerlink" title="INET_NTOA"></a>INET_NTOA</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> <span class="keyword">inet_ntoa</span>( f_address_number <span class="keyword">IN</span> <span class="built_in">number</span> ) <span class="keyword">RETURN</span> <span class="built_in">varchar2</span> </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line">    o_address <span class="built_in">varchar2</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> trunc ( f_address_number / <span class="number">16777216</span> ) || <span class="string">'.'</span> || trunc ( <span class="keyword">MOD</span> ( f_address_number, <span class="number">16777216</span> ) / <span class="number">65536</span> ) || <span class="string">'.'</span> || trunc ( <span class="keyword">MOD</span> ( f_address_number, <span class="number">65536</span> ) / <span class="number">256</span> ) || <span class="string">'.'</span> || trunc ( <span class="keyword">MOD</span> ( f_address_number, <span class="number">256</span> ) ) <span class="keyword">INTO</span> o_address;</span><br><span class="line"></span><br><span class="line">RETURN o_address;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">inet_ntoa</span>;</span><br></pre></td></tr></table></figure><h2 id="代码转换"><a href="#代码转换" class="headerlink" title="代码转换"></a>代码转换</h2><p>对于转换字符串IPv4和数值类型，可以放在应用层，下面是使用java代码来对二者转换：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mikan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mikan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpLongUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把字符串IP转换成long</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ipStr 字符串IP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IP对应的long值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">ip2Long</span><span class="params">(String ipStr)</span> </span>&#123;</span><br><span class="line">        String[] ip = ipStr.split(<span class="string">"\\."</span>);</span><br><span class="line">        <span class="keyword">return</span> (Long.valueOf(ip[<span class="number">0</span>]) &lt;&lt; <span class="number">24</span>) + (Long.valueOf(ip[<span class="number">1</span>]) &lt;&lt; <span class="number">16</span>)</span><br><span class="line">                + (Long.valueOf(ip[<span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) + Long.valueOf(ip[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把IP的long值转换成字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ipLong IP的long值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long值对应的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">long2Ip</span><span class="params">(<span class="keyword">long</span> ipLong)</span> </span>&#123;</span><br><span class="line">        StringBuilder ip = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        ip.append(ipLong &gt;&gt;&gt; <span class="number">24</span>).append(<span class="string">"."</span>);</span><br><span class="line">        ip.append((ipLong &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>).append(<span class="string">"."</span>);</span><br><span class="line">        ip.append((ipLong &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>).append(<span class="string">"."</span>);</span><br><span class="line">        ip.append(ipLong &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="keyword">return</span> ip.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(ip2Long(<span class="string">"192.168.0.1"</span>));</span><br><span class="line">        System.out.println(long2Ip(<span class="number">3232235521L</span>));</span><br><span class="line">        System.out.println(ip2Long(<span class="string">"10.0.0.1"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3232235521</span><br><span class="line">192.168.0.1</span><br><span class="line">167772161</span><br></pre></td></tr></table></figure><blockquote><p>原文：<br><a href="https://blog.csdn.net/mhmyqn/article/details/48653157" target="_blank" rel="noopener">https://blog.csdn.net/mhmyqn/article/details/48653157</a><br><a href="https://blog.csdn.net/weixin_44158741/article/details/110469648" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44158741/article/details/110469648</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> oracle </tag>
            
            <tag> ip地址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Erupt全栈类框架</title>
      <link href="/2021/09/18/Erupt%E5%85%A8%E6%A0%88%E7%B1%BB%E6%A1%86%E6%9E%B6/"/>
      <url>/2021/09/18/Erupt%E5%85%A8%E6%A0%88%E7%B1%BB%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>一个管理系统，往往需要后端+前端一起实现。单表CRUD操作往往都差不多，我们可以使用代码生成器来实现。有时候我们的管理系统只需要一些简单的CRUD页面，有没有什么框架能做到不写前端代码，纯Java撸个管理系统呢？这里推荐一个全栈类框架Erupt，希望对大家有所帮助！</p><h2 id="Erupt简介"><a href="#Erupt简介" class="headerlink" title="Erupt简介"></a>Erupt简介</h2><p>Erupt是一个低代码全栈类框架，它使用Java注解动态生成页面以及增、删、改、查、权限控制等后台功能。零前端代码、零CURD、自动建表，仅需一个类文件 + 简洁的注解配置，快速开发企业级后台管理系统。</p><blockquote><p>官方文档：<a href="https://www.yuque.com/erupts/erupt" target="_blank" rel="noopener">传送门</a></p></blockquote><h2 id="SpringBoot整合Erupt"><a href="#SpringBoot整合Erupt" class="headerlink" title="SpringBoot整合Erupt"></a>SpringBoot整合Erupt</h2><p>我们首先来波实战，以商品品牌管理为例，来熟悉下Erupt结合SpringBoot的基本使用！</p><blockquote><p>由于Erupt原生支持SpringBoot，所以整合还是很方便的！</p></blockquote><ul><li>为了方便管理Erupt版本，我们先在pom.xml中添加Erupt的版本属性；</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">erupt.version</span>&gt;</span>1.6.13<span class="tag">&lt;/<span class="name">erupt.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>之后在<code>pom.xml</code>中添加<code>Erupt</code>的<code>权限管理</code>、<code>数据安全</code>、<code>后台WEB界面</code>及<code>MySQL驱动依赖</code>；</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户权限管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-upms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--接口数据安全--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后台WEB界面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Mysql数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改项目的<code>application.yml</code>文件，添加<code>数据源</code>和<code>JPA配置</code>；</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/erupt?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">generate-ddl:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><p>注：<code>serverTimezone=Asia/Shanghai</code>服务器时区不能改动</p><ul><li>在项目的<code>resources</code>目录下创建如下配置文件</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/oHd3Lyt1vZp5JPg.png" alt=""></p><p>app.css</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例：调整顶栏颜色 */</span></span><br><span class="line"><span class="selector-class">.alain-default__header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#607D8B</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例：修改登录页样式 */</span></span><br><span class="line"><span class="selector-tag">layout-passport</span> &gt; <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: center <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: cover <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(https://www.erupt.xyz/demo/login-bg.svg) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">layout-passport</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Courier New, Menlo, Monaco, Consolas, monospace <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">layout-passport</span> <span class="selector-tag">form</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">26px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">8px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">190</span>, <span class="number">184</span>, <span class="number">184</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.eruptSiteConfig = &#123;</span><br><span class="line">    <span class="comment">//erupt接口地址，在前后端分离时指定</span></span><br><span class="line">    domain: <span class="string">""</span>,</span><br><span class="line">    <span class="comment">//附件地址，一般情况下不需要指定，如果自定义对象存储空间，则需在此指定附件资源访问地址</span></span><br><span class="line">    fileDomain: <span class="string">""</span>,</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    title: <span class="string">"Erupt Framework"</span>,</span><br><span class="line">    <span class="comment">//描述</span></span><br><span class="line">    desc: <span class="string">"通用数据管理框架"</span>,</span><br><span class="line">    <span class="comment">//高德地图api key,使用地图组件须指定此属性，amapKey获取地址：https://lbs.amap.com (服务平台为：Web端(JS API))</span></span><br><span class="line">    amapKey: <span class="string">"6ba79a8d"</span>,</span><br><span class="line">    <span class="comment">//logo路径</span></span><br><span class="line">    logoPath: <span class="string">"erupt.svg"</span>,</span><br><span class="line">    <span class="comment">//logo文字</span></span><br><span class="line">    logoText: <span class="string">"erupt"</span>,</span><br><span class="line">    <span class="comment">//是否展示版权信息（1.6.10及以后版本支持）</span></span><br><span class="line">    copyright: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//自定义导航栏按钮，配置后将会出现在页面右上角</span></span><br><span class="line">    r_tools: [&#123;</span><br><span class="line">        text: <span class="string">"自定义功能按钮"</span>,</span><br><span class="line">        icon: <span class="string">"fa-eercast"</span>,</span><br><span class="line">        mobileHidden: <span class="literal">true</span>,</span><br><span class="line">        click: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"Function button"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由回调函数</span></span><br><span class="line"><span class="built_in">window</span>.eruptRouterEvent = &#123;</span><br><span class="line">    <span class="comment">//key表示要监听的路由切换地址，为url hash地址最后一段</span></span><br><span class="line">    <span class="comment">//例如：http://www.erupt.xyz:9999/#/build/table/demo中demo为回调key</span></span><br><span class="line">    demo: &#123;</span><br><span class="line">        <span class="comment">//路由载入事件</span></span><br><span class="line">        load: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//路由退出事件</span></span><br><span class="line">        unload: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//$ 为全路径通配符，在任何路由切换时都会执行load与unload事件</span></span><br><span class="line">    $: &#123;</span><br><span class="line">        load: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        unload: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//erupt生命周期函数</span></span><br><span class="line"><span class="built_in">window</span>.eruptEvent = &#123;</span><br><span class="line">    <span class="comment">//页面加载完成后回调</span></span><br><span class="line">    startup: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>home.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span> <span class="attr">name</span>=<span class="string">"viewport"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加Erupt的Java配置类<code>EruptConfig</code>，<code>以启动类的包为准</code>，配置包扫码路径；</li></ul><p><code>注：&quot;需扫描的包路径&quot;配置同一路径即可</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(&#123;<span class="string">"xyz.erupt"</span>,<span class="string">"需扫描的包路径"</span>&#125;)</span><br><span class="line"><span class="meta">@EntityScan</span>(&#123;<span class="string">"xyz.erupt"</span>,<span class="string">"需扫描的包路径"</span>&#125;)</span><br><span class="line"><span class="meta">@EruptScan</span>(&#123;<span class="string">"xyz.erupt"</span>,<span class="string">"需扫描的包路径"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EruptConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在<code>MySQL</code>中创建<code>erupt数据库</code>，之后使用启动类运行该项目，在erupt数据库中会<code>自动创建</code>如下表；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/ZyvtXDLbQFie1Wp.png" alt=""></p></li><li><p>项目启动成功后，可以直接访登录页，默认账号密码都是<code>erupt</code>，项目访问地址：<code>http://localhost:8080/</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/TuFnZ3O92pk1hJ6.png" alt=""></p></li><li><p>登录成功后会跳转到项目主页，我们可以发现没有写一行前端代码，却拥有了完整的权限管理和字典管理功能，是不是很棒！<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/Xu47QPRntHiwoyT.png" alt=""></p></li></ul><h2 id="实现单表-CRUD"><a href="#实现单表-CRUD" class="headerlink" title="实现单表 CRUD"></a>实现单表 CRUD</h2><blockquote><p>使用核心注解<code>@Erupt</code>和<code>@EruptField</code>定义一个实体类即可快速完成CRUD操作，让我们以商品品牌管理为例试试吧。</p></blockquote><ul><li><p>不需要<code>Controller、Service、Dao</code>，仅仅一个实体类即可完成CRUD，首先我们创建实体类<code>PmsBrand</code>；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Erupt</span>(name = <span class="string">"商品品牌"</span>)</span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"pms_brand"</span>)</span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PmsBrand</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"generator"</span>)</span><br><span class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"generator"</span>, strategy = <span class="string">"native"</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>)</span><br><span class="line">    <span class="meta">@EruptField</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"品牌名称"</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"品牌名称"</span>,notNull=<span class="keyword">true</span>,search = <span class="meta">@Search</span>(vague = <span class="keyword">true</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"品牌首字母"</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"品牌首字母"</span>,notNull=<span class="keyword">true</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> String firstLetter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"品牌LOGO"</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"品牌LOGO"</span>, type = EditType.ATTACHMENT,</span><br><span class="line">                    attachmentType = <span class="meta">@AttachmentType</span>(type = AttachmentType.Type.IMAGE))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> String logo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"品牌专区大图"</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"品牌专区大图"</span>, type = EditType.ATTACHMENT,</span><br><span class="line">                    attachmentType = <span class="meta">@AttachmentType</span>(type = AttachmentType.Type.IMAGE))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> String bigPic;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"品牌故事"</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"品牌故事"</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> String brandStory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"排序"</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"排序"</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"是否显示"</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"是否显示"</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Boolean showStatus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"品牌制造商"</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"品牌制造商"</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Boolean factoryStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer productCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer productCommentCount;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建成功后重启项目，在<code>菜单维护</code>中添加一个叫<code>商品</code>的一级菜单；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/pd4WEx785TAnYkJ.png" alt=""></p></li></ul><ul><li>然后再添加一个叫<code>品牌管理</code>的二级菜单，注意选择好<code>菜单类</code>型和<code>上级菜单</code>，输入类型值为实体类的类名称<code>PmsBrand</code>；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/Gc1rjgtH94EIUFl.png" alt=""></li></ul><ul><li>菜单添加成功后，刷新页面，完整的品牌管理功能就出现了，来试下新增；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/t5Awhcs9K763dof.png" alt=""></li></ul><ul><li>再看下查询列表页面，可以发现我们通过<code>@Edit</code>注解，将实体类的字段转换成了不同的输入控件，比如文本框、图片上传框、单选框和数值框。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/GNHmLFcwsnA5dPb.png" alt=""></li></ul><h2 id="核心注解说明"><a href="#核心注解说明" class="headerlink" title="核心注解说明"></a>核心注解说明</h2><p>几个Erupt的核心注解，对照PmsBrand中的代码学习即可！</p><h3 id="Erupt"><a href="#Erupt" class="headerlink" title="@Erupt"></a>@Erupt</h3><blockquote><p>name：功能名称<br>desc：功能描述</p></blockquote><h3 id="EruptField"><a href="#EruptField" class="headerlink" title="@EruptField"></a>@EruptField</h3><blockquote><p>views：表格展示配置<br>edit：编辑项配置<br>sort：前端展示顺序，数字越小越靠前</p></blockquote><h3 id="View"><a href="#View" class="headerlink" title="@View"></a>@View</h3><blockquote><p>title：表格列名称<br>desc：表格列描述<br>type：数据展示形式，默认为AUTO，可以根据属性类型自行推断<br>show：是否显示</p></blockquote><h3 id="Edit"><a href="#Edit" class="headerlink" title="@Edit"></a>@Edit</h3><blockquote><p>title：表格列名称<br>desc：表格列描述<br>type：编辑类型，默认为AUTO，可以根据属性类型自行推断<br>show：是否显示<br>notNull：是否为必填项<br>search：是否支持搜索，search = @Search(vague = true)会启用高级查询策略</p></blockquote><h2 id="扩展模块"><a href="#扩展模块" class="headerlink" title="扩展模块"></a>扩展模块</h2><blockquote><p>当然Erupt的功能远不止于此，还集成了很多实用的系统功能，截止1.8.x版本包括定时任务、代码生成器、系统监控及NoSQL支持等。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/xISbjCfPBcZkFd3.png" alt=""></p><h3 id="定时任务erupt-job"><a href="#定时任务erupt-job" class="headerlink" title="定时任务erupt-job"></a>定时任务erupt-job</h3><blockquote><p>通过定时任务功能，我们可以在代码中定义好定时任务，然后在图形化界面中操作任务</p></blockquote><ul><li><p>首先我们需要在<code>pom.xml</code>中添加<code>erupt-job相关依赖</code>；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定时任务erupt-job--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-job<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>之后在<code>application.yml</code>中添加邮件配置（否则启动会报错）；</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xxxxxx@qq.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.exmail.qq.com</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail.smtp.ssl.auth:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">mail.smtp.ssl.enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">mail.smtp.ssl.required:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>之后创建一个定时任务实现类<code>JobHandlerImpl</code>，在exec方法中添加定时任务执行代码；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobHandlerImpl</span> <span class="keyword">implements</span> <span class="title">EruptJobHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exec</span><span class="params">(String code, String param)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"定时任务已经执行，code:&#123;&#125;,param:&#123;&#125;"</span>,code,param);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>之后重新启动应用，在任务维护中添加一个定时任务，每5秒(<code>Cron表达式</code>)执行一次；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/EyR7oZNGrid4mSt.png" alt=""></p></li><li><p>添加成功后，定时任务开始执行，点击任务列表中的<code>日志</code>按钮即可查看执行日志。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/t1eIbwAHZOxjCa6.png" alt=""></p></li></ul><h3 id="代码生成器erupt-generator"><a href="#代码生成器erupt-generator" class="headerlink" title="代码生成器erupt-generator"></a>代码生成器erupt-generator</h3><blockquote><p>如果你觉得手写实体类比较麻烦的话，还可以用用Erupt中的<code>代码生成器</code>。</p></blockquote><ul><li><p>在<code>pom.xml</code>中添加<code>erupt-generator相关依赖</code>；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 代码生成器 erupt-generator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>代码生成</code>菜单中我们可以像在Navicat中一样，直接添加表和字段，从而生成实体类代码；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/q6Qky24v5VFOeYX.png" alt=""></p></li><li><p>我们在添加过程中可以发现，Erupt支持的<code>编辑类型</code>还挺多的，<code>多达30种</code>；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/9VxGmNUIzAnd4Bk.png" alt=""></p></li><li><p>添加成功后，点击列表项的代码预览按钮可以直接生成代码，复制到自己项目下即可。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/ELzJul2v5HPRtYS.png" alt=""></p></li></ul><h3 id="系统监控erupt-monitor"><a href="#系统监控erupt-monitor" class="headerlink" title="系统监控erupt-monitor"></a>系统监控erupt-monitor</h3><blockquote><p>通过使用Erupt的系统监控功能，我们可以查看服务器的配置、Redis的缓存使用情况和在线用户信息。</p></blockquote><ul><li>在<code>pom.xml</code>中添加<code>erupt-monitor</code>相关依赖；<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务器监控 erupt-monitor--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-monitor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>由于需要使用到Redis，所以要在<code>application.yml</code>中添加<code>Redis</code>配置，并<code>开启Session</code>的Redis存储功能；</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span> <span class="comment"># Redis服务器地址</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span> <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span> <span class="comment"># Redis服务器连接端口</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span> <span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">3000ms</span> <span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="attr">erupt:</span></span><br><span class="line">  <span class="comment"># 开启redis方式存储session，默认false，开启后需在配置文件中添加redis配置</span></span><br><span class="line">  <span class="attr">redisSession:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>通过<code>服务监控</code>菜单，可以查看到服务器的CPU、内存和Java虚拟机信息；</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/PAFbqaZ5rI7CvBQ.png" alt=""></p><ul><li><p>通过<code>缓存监控</code>菜单，可以查看到Redis信息、命令统计和Redis Key统计；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/5SEwVyCNuL1hcl9.png" alt=""></p></li><li><p>通过<code>在线用户</code>菜单，可以查看到在线用户信息，还可以让用户<code>强行退出！</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/mybDWpLwz4if5rk.png" alt=""></p></li></ul><h3 id="NoSQL数据源erupt-mongodb"><a href="#NoSQL数据源erupt-mongodb" class="headerlink" title="NoSQL数据源erupt-mongodb"></a>NoSQL数据源erupt-mongodb</h3><p>Erupt支持多种数据源，包括：MySQL、Oracle、PostgreSQL、H2，甚至支持 MongoDB。下面我们来体验下MongoDB的支持功能。</p><ul><li>在<code>pom.xml</code>中添加<code>erupt-mongodb相关依赖</code>；<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--NoSQL数据源 erupt-mongodb--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>由于需要使用到<code>MongoDB</code>，所以要在<code>application.yml</code>中添加MongoDB配置；</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span> <span class="comment"># mongodb的连接地址</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">27017</span> <span class="comment"># mongodb的连接端口号</span></span><br><span class="line">      <span class="attr">database:</span> <span class="string">erupt</span> <span class="comment"># mongodb的连接的数据库</span></span><br></pre></td></tr></table></figure><ul><li>以一个简化版的商品管理为例，还是熟悉的套路，添加一个<code>PmsProduct</code>实体类；<blockquote><p>与之前操作MySQL的区别是通过<code>@EruptDataProcessor</code>注解指定用MongoDB来存储数据，<code>@Table</code>注解改为使用<code>@Document</code>注解；</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EruptDataProcessor</span>(EruptMongodbImpl.MONGODB_PROCESS)  <span class="comment">//此注解表示使用MongoDB来存储数据</span></span><br><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"product"</span>)</span><br><span class="line"><span class="meta">@Erupt</span>(</span><br><span class="line">        name = <span class="string">"商品管理"</span>,</span><br><span class="line">        orderBy = <span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PmsProduct</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@EruptField</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"商品名称"</span>, sortable = <span class="keyword">true</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"商品名称"</span>, search = <span class="meta">@Search</span>(vague = <span class="keyword">true</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"副标题"</span>, sortable = <span class="keyword">true</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"副标题"</span>, search = <span class="meta">@Search</span>(vague = <span class="keyword">true</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> String subTitle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"价格"</span>, sortable = <span class="keyword">true</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"价格"</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"商品图片"</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"商品图片"</span>, type = EditType.ATTACHMENT,</span><br><span class="line">                    attachmentType = <span class="meta">@AttachmentType</span>(type = AttachmentType.Type.IMAGE))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"状态"</span>, sortable = <span class="keyword">true</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"状态"</span>,</span><br><span class="line">                    boolType = <span class="meta">@BoolType</span>(trueText = <span class="string">"上架"</span>, falseText = <span class="string">"下架"</span>),</span><br><span class="line">                    search = <span class="meta">@Search</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Boolean publishStatus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField</span>(</span><br><span class="line">            views = <span class="meta">@View</span>(title = <span class="string">"创建时间"</span>, sortable = <span class="keyword">true</span>),</span><br><span class="line">            edit = <span class="meta">@Edit</span>(title = <span class="string">"创建时间"</span>, search = <span class="meta">@Search</span>(vague = <span class="keyword">true</span>))</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接下来就是在<code>菜单维护</code>里面添加一个<code>商品管理</code>的菜单，刷新一下就可以看到该功能了。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/aGfbIlzdxXykP1A.png" alt=""></li></ul><h3 id="在线接口开发erupt-magic-api"><a href="#在线接口开发erupt-magic-api" class="headerlink" title="在线接口开发erupt-magic-api"></a>在线接口开发erupt-magic-api</h3><blockquote><p>最后再介绍一个神奇的功能，直接通过UI界面来开发接口，无需定义Controller、Service、Dao、Mapper、XML、VO等Java对象！</p></blockquote><ul><li><p>在<code>pom.xml</code>中添加<code>erupt-magic-api相关依赖</code>；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在线接口开发 erupt-magic-api--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-magic-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>application.yml</code>中添加<code>magic-api相关配置</code>；</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">erupt:</span></span><br><span class="line">  <span class="comment"># 设置具体哪些包被jackson消息转化而不是gson</span></span><br><span class="line">  <span class="attr">jacksonHttpMessageConvertersPackages:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">org.ssssssss......</span></span><br><span class="line"></span><br><span class="line"><span class="attr">magic-api:</span></span><br><span class="line">  <span class="attr">web:</span> <span class="string">/magic/web</span></span><br><span class="line">  <span class="comment"># 接口配置文件存放路径，如下：</span></span><br><span class="line">  <span class="attr">resource.location:</span> <span class="string">D:/erupt/magic-script</span></span><br></pre></td></tr></table></figure></li><li><p>我们可以直接通过<code>magic-api</code>自己定义的脚本来实现查询，比如下面这个脚本，用于查询全部品牌；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sql = <span class="string">"select * from pms_brand"</span>;    </span><br><span class="line"><span class="keyword">return</span> db.select(sql);</span><br></pre></td></tr></table></figure></li><li><p>在<code>接口配置</code>菜单中直接添加该脚本即可实现品牌列表查询接口，无需额外编写代码；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/SyYx2vDIOdCNXPo.png" alt=""></p></li><li><p>在浏览器中直接访问接口，发现已经自动生成接口，是不是很棒！<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/sypFMJiS8KgTP9v.png" alt=""></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果你的需求是搭建一个业务并不复杂的后台管理系统，Erupt是一个很好的选择！它能让你不写前端代码！但是如果你的需求方对界面有很多要求，而你的业务逻辑又比较复杂的话那就要自己实现前端了!</p><blockquote><p>原文：<a href="https://mp.weixin.qq.com/s/jZ44i8nJRPKwewohoq59Jw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/jZ44i8nJRPKwewohoq59Jw</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 敏捷开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码生成 </tag>
            
            <tag> Erupt </tag>
            
            <tag> 权限管理 </tag>
            
            <tag> 数据安全 </tag>
            
            <tag> 定时任务 </tag>
            
            <tag> 系统监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中那18把&quot;金刚&quot;锁</title>
      <link href="/2021/09/16/Java%E4%B8%AD%E9%82%A318%E6%8A%8A%E9%87%91%E5%88%9A%E9%94%81/"/>
      <url>/2021/09/16/Java%E4%B8%AD%E9%82%A318%E6%8A%8A%E9%87%91%E5%88%9A%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h2><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p><code>悲观锁</code>对应于生活中悲观的人，悲观的人总是想着事情往坏的方向发展。</p><blockquote><p>举个生活中的例子，假设厕所只有一个坑位了，悲观锁上厕所会第一时间把门反锁上，这样其他人上厕所只能在门外等候，这种状态就是「阻塞」了。</p></blockquote><p>回到代码世界中，一个<code>共享数据加了悲观锁，那线程每次想操作这个数据前都会假设其他线程也可能会操作这个数据，所以每次操作前都会上锁，这样其他线程想操作这个数据拿不到锁只能阻塞了。</code></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/6pej8roC7FS5OfM.jpg" alt="悲观锁"></p><ul><li>在Java语言中<code>synchronized</code>和<code>ReentrantLock</code>等就是典型的悲观锁，还有一些使用了synchronized关键字的容器类如<code>HashTable</code>等也是悲观锁的应用。</li></ul><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p><code>乐观锁</code>对应于生活中乐观的人，乐观的人总是想着事情往好的方向发展。</p><blockquote><p>举个生活中的例子，假设厕所只有一个坑位了，乐观锁认为：这荒郊野外的，又没有什么人，不会有人抢我坑位的，每次关门上锁多浪费时间，还是不加锁好了。你看乐观锁就是天生乐观！</p></blockquote><p>回到代码世界中，<code>乐观锁操作数据时不会上锁，在更新的时候会判断一下在此期间是否有其他线程去更新这个数据。</code></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/921e5WbPZhjLuSd.jpg" alt="乐观锁"></p><ul><li>乐观锁可以使用<code>版本号机制</code>和<code>CAS算法</code>实现。在 Java 语言中 <code>java.util.concurrent.atomic</code>包下的<code>原子类就是使用CAS 乐观锁实现</code>的。</li></ul><h3 id="两种锁的使用场景"><a href="#两种锁的使用场景" class="headerlink" title="两种锁的使用场景"></a>两种锁的使用场景</h3><ul><li>悲观锁和乐观锁没有孰优孰劣，有其各自适应的场景。</li><li><code>乐观锁</code>适用于<code>写比较少（冲突比较小）</code>的场景，因为不用上锁、释放锁，省去了锁的开销，从而提升了吞吐量。</li><li><code>悲观锁</code>适用于<code>写多读少</code>的场景，即冲突比较严重，线程间竞争激励的场景，如果使用乐观锁就是导致线程不断进行重试，这样可能还降低了性能。</li></ul><h2 id="独占锁和共享锁"><a href="#独占锁和共享锁" class="headerlink" title="独占锁和共享锁"></a>独占锁和共享锁</h2><h3 id="独占锁-排他锁、写锁"><a href="#独占锁-排他锁、写锁" class="headerlink" title="独占锁(排他锁、写锁)"></a>独占锁(排他锁、写锁)</h3><p><code>独占锁</code>是指<code>锁一次只能被一个线程所持有</code>。如果一个线程对数据加上排他锁后，那么其他线程不能再对该数据加任何类型的锁。获得独占锁的线程<code>即能读数据又能修改数据</code>。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/nMObw7uKoQV9mH6.jpg" alt="独占锁(排他锁、写锁)"></p><ul><li>JDK中的<code>synchronized</code>和<code>java.util.concurrent(JUC)</code>包中<code>Lock的实现类</code>就是独占锁。</li></ul><p><code>注：独占锁(排他锁)和悲观锁的设计概念一致</code></p><h3 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h3><p><code>共享锁</code>是指<code>锁可被多个线程所持有</code>。如果一个线程对数据加上共享锁后，那么其他线程只能对数据再加共享锁，不能加独占锁。获得共享锁的线程<code>只能读数据，不能修改数据</code>。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/xYg7lmEUOhrb2uI.jpg" alt="共享锁"></p><ul><li>在 JDK 中 <code>ReentrantReadWriteLock</code> 就是一种共享锁。</li></ul><h2 id="互斥锁和读写锁"><a href="#互斥锁和读写锁" class="headerlink" title="互斥锁和读写锁"></a>互斥锁和读写锁</h2><h3 id="互斥锁-独占锁的常规实现"><a href="#互斥锁-独占锁的常规实现" class="headerlink" title="互斥锁(独占锁的常规实现)"></a>互斥锁(独占锁的常规实现)</h3><p><code>互斥锁</code>是<code>独占锁的</code>一种<code>常规实现</code>，是指<code>某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性</code>。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/Qh8XtKSPj6lm5TN.jpg" alt="互斥锁"></p><ul><li>互斥锁一次只能一个线程拥有互斥锁，其他线程只有等待。</li></ul><h3 id="读写锁-共享锁的具体实现"><a href="#读写锁-共享锁的具体实现" class="headerlink" title="读写锁(共享锁的具体实现)"></a>读写锁(共享锁的具体实现)</h3><p><code>读写锁</code>是<code>共享</code>锁的一种<code>具体实现</code>。<code>读写锁管理一组锁，一个是只读的锁，一个是写锁</code>。</p><blockquote><p>读锁可以<code>在没有写锁的时候被多个线程同时持有</code>，而写锁是独占的。<code>写锁的优先级要高于读锁</code>，一个获得了读锁的线程必须能看到前一个释放的写锁所更新的内容。</p></blockquote><ul><li>读写锁相比于互斥锁并发程度更高，<code>每次只有一个写线程</code>，但是同时可以有多个线程并发读。</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/Fxy9hlP38vCHVtR.jpg" alt="读写锁"></p><p>在 JDK 中定义了一个读写锁的接口：<code>ReadWriteLock</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取读锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取写锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ReentrantReadWriteLock</code>实现了ReadWriteLock接口</li></ul><h2 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><h3 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h3><p><code>公平锁</code>是指<code>多个线程按照申请锁的顺序来获取锁</code>，这里类似排队买票，先来的人先买，后来的人在队尾排着，这是公平的。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/wqoKifLesDhYTMv.jpg" alt="公平锁"><br>在 java 中可以通过构造函数初始化公平锁</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建一个可重入锁，true 表示公平锁，false 表示非公平锁。默认非公平锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h3 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h3><p><code>非公平锁</code>是指<code>多个线程获取锁的顺序并不是按照申请锁的顺序</code>，有可能后申请的线程比先申请的线程优先获取锁，在高并发环境下，有可能造成优先级翻转，或者饥饿的状态（某个线程一直得不到锁）。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/HnE8wlaM5VYCemd.jpg" alt="非公平锁"><br>在 java 中<code>synchronized</code>关键字是非公平锁，<code>ReentrantLock默认</code>也是非公平锁。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建一个可重入锁，true 表示公平锁，false 表示非公平锁。默认非公平锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><h2 id="可重入锁-递归锁"><a href="#可重入锁-递归锁" class="headerlink" title="可重入锁(递归锁)"></a>可重入锁(递归锁)</h2><p>可重入锁又称之为递归锁，是指<code>同一个线程在外层方法获取了锁，在进入内层方法会自动获取锁</code>。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/kFcuHdJtrg4fATV.jpg" alt="可重入锁(递归锁)"><br>对于Java <code>ReentrantLock</code>和<code>Synchronized</code>都是一个可重入锁。</p><blockquote><p><code>敲黑板：可重入锁的一个好处是可一定程度避免死锁。</code></p></blockquote><p>以 synchronized 为例，看一下下面的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">mehtodA</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"> <span class="comment">// Do some magic tings</span></span><br><span class="line"> mehtodB();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">mehtodB</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"> <span class="comment">// Do some magic tings</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中methodA调用methodB，如果<code>一个线程调用methodA已经获取了锁再去调用methodB就不需要再次获取锁了</code>，这就是可重入锁的特性。如果不是可重入锁的话，mehtodB 可能不会被当前线程执行，可能造成死锁。</p><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p><code>自旋锁</code>是指<code>线程在没有获得锁时不是被直接挂起，而是执行一个忙循环</code>，这个忙循环就是所谓的自旋。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/6WF5Ko8T9jU2srS.jpg" alt="自旋锁"></p><ul><li>自旋锁的目的是为了<code>减少线程被挂起的几率</code>，因为线程的挂起和唤醒也都是耗资源的操作。</li><li>如果锁被另一个线程占用的时间比较长，即使自旋了之后当前线程还是会被挂起，忙循环就会变成浪费系统资源的操作，反而降低了整体性能。因此<code>自旋锁是不适应锁占用时间长的并发情况的</code>。</li></ul><p>在 Java 中，<code>AtomicInteger</code>类有自旋的操作，我们看一下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        v = getIntVolatile(o, offset);</span><br><span class="line">    <span class="comment">// CAS 操作如果失败就会一直循环获取当前 value 值然后重试。</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!compareAndSwapInt(o, offset, v, v + delta));</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>JDK1.6又引入了自适应自旋</code>，这个就比较智能了，<code>自旋时间不再固定，由前一次在同一个锁上的自旋时间以及锁的拥有者的状态来决定</code>。如果虚拟机认为这次自旋也很有可能再次成功那就会自旋较多的时间，如果自旋很少成功，那以后可能就直接省略掉自旋过程，避免浪费处理器资源。</p><h2 id="分段锁-锁设计"><a href="#分段锁-锁设计" class="headerlink" title="分段锁(锁设计)"></a>分段锁(锁设计)</h2><p><code>分段锁</code>是一种<code>锁的设计</code>，并<code>不是具体的一种锁</code>。</p><blockquote><p>分段锁设计目的是<code>将锁的粒度进一步细化</code>，当操作不需要更新整个数组的时候，就仅仅针对数组中的一项进行加锁操作。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/xv7NRAgBVwrkOoe.jpg" alt="分段锁(锁设计)"></p><ul><li>在 Java 语言中<code>CurrentHashMap</code>底层就用了分段锁，使用Segment，就可以进行并发使用了。</li></ul><h2 id="锁升级（无锁-偏向锁-轻量级锁-重量级锁）"><a href="#锁升级（无锁-偏向锁-轻量级锁-重量级锁）" class="headerlink" title="锁升级（无锁|偏向锁|轻量级锁|重量级锁）"></a>锁升级（无锁|偏向锁|轻量级锁|重量级锁）</h2><p><code>JDK1.6 为了提升性能减少获得锁和释放锁所带来的消耗</code>，引入了4种<code>锁的状态</code>：<code>无锁</code>、<code>偏向锁</code>、<code>轻量级锁</code>和<code>重量级锁</code>，它会<code>随着多线程的竞争情况逐渐升级，但不能降级</code>。</p><h3 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a>无锁</h3><p><code>无锁状态</code>其实就是上面讲的<code>乐观锁</code>，这里不再赘述。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p><code>偏向锁(Biased Locking)</code>是指<code>它会偏向于第一个访问锁的线程</code>，如果在运行过程中，只有一个线程访问加锁的资源，不存在多线程竞争的情况，那么线程是不需要重复获取锁的，这种情况下，就会给线程加一个偏向锁。</p><p>偏向锁的实现是<code>通过控制对象Mark Word的标志位来实现的</code>，如果当前是可偏向状态，需要进一步判断对象头存储的线程 ID 是否与当前线程 ID 一致，如果一致直接进入。</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p><code>当线程竞争变得比较激烈时，偏向锁就会升级为轻量级锁</code>，轻量级锁认为虽然竞争是存在的，但是理想情况下竞争的程度很低，通过自旋方式等待上一个线程释放锁。</p><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>如果线程并发进一步加剧，线程的自旋超过了一定次数，或者一个线程持有锁，一个线程在自旋，又来了第三个线程访问时（反正就是竞争继续加大了），轻量级锁就会膨胀为重量级锁，重量级锁会使除了此时拥有锁的线程以外的线程都阻塞。</p><blockquote><p><code>升级到重量级锁</code>其实就是<code>互斥锁</code>了，一个线程拿到锁，其余线程都会处于阻塞等待状态。</p></blockquote><ul><li>在 Java 中，<code>synchronized</code>关键字内部实现原理就是锁升级的过程：<code>无锁 --&gt; 偏向锁 --&gt; 轻量级锁 --&gt; 重量级锁</code>。</li></ul><h2 id="锁优化技术（锁粗化、锁消除）"><a href="#锁优化技术（锁粗化、锁消除）" class="headerlink" title="锁优化技术（锁粗化、锁消除）"></a>锁优化技术（锁粗化、锁消除）</h2><h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p><code>锁粗化</code>就是将多个同步块的数量减少，并将单个同步块的作用范围扩大，本质上就是<code>将多次上锁、解锁的请求合并为一次同步请求</code>。</p><p>举个例子，一个循环体中有一个代码同步块，每次循环都会执行加锁解锁操作。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object LOCK = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(LOCK)&#123;</span><br><span class="line">        <span class="comment">// do some magic things</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过锁粗化后就变成下面这个样子了：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">synchronized</span>(LOCK)&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// do some magic things</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p><code>锁消除</code>是指<code>虚拟机编译器在运行时检测到了共享数据没有竞争的锁，从而将这些锁进行消除</code>。</p><p>举个例子让大家更好理解。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String s1, String s2)</span></span>&#123;</span><br><span class="line">    StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    stringBuffer.append(s1);</span><br><span class="line">    stringBuffer.append(s2);</span><br><span class="line">    <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中有一个 test 方法，主要作用是将字符串s1和字符串s2串联起来。</p><blockquote><ol><li>test方法中三个变量s1,s2,stringBuffer，它们都是局部变量，局部变量是在栈上的，栈是线程私有的，所以就算有多个线程访问test方法也是线程安全的。</li><li>StringBuffer是线程安全的类，append方法是同步方法，但是test方法本来就是线程安全的，为了提升效率，虚拟机帮我们消除了这些同步锁，这个过程就被称为锁消除。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// <span class="title">append</span> 是同步方法</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">synchronized</span> <span class="title">StringBuffer</span> <span class="title">append</span>(<span class="title">String</span> <span class="title">str</span>) </span>&#123;</span><br><span class="line">    toStringCache = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">super</span>.append(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>前面讲了 Java 语言中各种各种的锁，最后再通过六个问题统一总结一下：<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/GBz4PsidtJZ1UVk.jpg" alt="总结"></p><blockquote><p>原文：<a href="https://mp.weixin.qq.com/s/2jxzNnyGWDFol4Q9R2a_Yg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/2jxzNnyGWDFol4Q9R2a_Yg</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁机制 </tag>
            
            <tag> 乐观锁 </tag>
            
            <tag> 悲观锁 </tag>
            
            <tag> 排他锁 </tag>
            
            <tag> 共享锁 </tag>
            
            <tag> 互斥锁 </tag>
            
            <tag> 公平锁 </tag>
            
            <tag> 可重入锁 </tag>
            
            <tag> 自旋锁 </tag>
            
            <tag> 轻量级锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 提高代码效率小技巧</title>
      <link href="/2021/09/15/Java%20%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E6%95%88%E7%8E%87%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2021/09/15/Java%20%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E6%95%88%E7%8E%87%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>代码优化 ，一个很重要的课题。可能有些人觉得没用，一些细小的地方有什么好修改的，改与不改对于代码的运行效率有什么影响呢？这个问题我是这么考虑的，就像大海里面的鲸鱼一样，它吃一条小虾米有用吗？没用，但是，吃的小虾米一多之后，鲸鱼就被喂饱了。</p><p>代码优化也是一样，如果项目着眼于尽快无BUG上线，那么此时可以抓大放小，代码的细节可以不精打细磨；但是如果有足够的时间开发、维护代码，这时候就必须考虑每个可以优化的细节了，一个一个细小的优化点累积起来，对于代码的运行效率绝对是有提升的。</p><p><code>代码优化的目标是：</code></p><ul><li>减小代码的体积</li><li>提高代码运行的效率</li></ul><h2 id="优化细节"><a href="#优化细节" class="headerlink" title="优化细节"></a>优化细节</h2><h3 id="不要创建和导入不使用的对象或不使用的类"><a href="#不要创建和导入不使用的对象或不使用的类" class="headerlink" title="不要创建和导入不使用的对象或不使用的类"></a>不要创建和导入不使用的对象或不使用的类</h3><p>如果代码中出现“The value of the local variable i is not used”、“The import java.util is never used”，那么请删除这些无用的内容。</p><h3 id="尽量指定类、方法的final修饰符"><a href="#尽量指定类、方法的final修饰符" class="headerlink" title="尽量指定类、方法的final修饰符"></a>尽量指定类、方法的final修饰符</h3><ul><li>带有 final 修饰符的类是不可派生的。</li><li>在 Java 核心 API中，有许多应用final的例子，例如java.lang.String，整个类都是 final 的。</li><li>为类指定 final 修饰符可以让类不可以被继承，为方法指定final修饰符可以让方法不可以被重写。如果指定了一个类为final，则该类所有的方法都是 final 的。</li><li>Java 编译器会寻找机会内联所有的final方法，内联对于提升Java运行效率作用重大。<code>如果一个方法体本身就很大，这样的优势就小了很多了</code>。</li></ul><p><code>注：在最近的java设计中，虚拟机（特别是hotspot技术）可以自己去根据具体情况自动优化选择是否进行内联，因此和final关键字就无关了。</code></p><h3 id="尽量重用对象"><a href="#尽量重用对象" class="headerlink" title="尽量重用对象"></a>尽量重用对象</h3><p>特别是 String 对象的使用，出现字符串连接时应该使用StringBuilder/StringBuffer 代替。由于Java虚拟机不仅要花时间生成对象，以后可能还需要花时间对这些对象进行垃圾回收和处理，因此，生成过多的对象将会给程序的性能带来很大的影响。</p><h3 id="尽可能使用局部变量"><a href="#尽可能使用局部变量" class="headerlink" title="尽可能使用局部变量"></a>尽可能使用局部变量</h3><p>调用方法时传递的参数以及在调用中创建的临时变量都保存在栈中速度较快，其他变量，如静态变量、实例变量等，都在堆中创建，速度较慢。另外，栈中创建的变量，随着方法的运行结束，这些内容就没了，不需要额外的垃圾回收。</p><h3 id="尽量避免随意使用静态变量"><a href="#尽量避免随意使用静态变量" class="headerlink" title="尽量避免随意使用静态变量"></a>尽量避免随意使用静态变量</h3><p>要知道，当某个对象被定义为static的变量所引用，那么GC通常是不会回收这个对象所占有的堆内存的，如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> B b = <span class="keyword">new</span> B();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>此时静态变量 b 的生命周期与 A 类相同，如果 A 类不被卸载，那么引用 B 指向的 B 对象会常驻内存，直到程序终止。</code></p><h3 id="将常量声明为static-final，并以大写命名"><a href="#将常量声明为static-final，并以大写命名" class="headerlink" title="将常量声明为static final，并以大写命名"></a>将常量声明为static final，并以大写命名</h3><p>这样在编译期间就可以把这些内容放入常量池中，避免运行期间计算生成常量的值。另外，将常量的名字以大写命名也可以方便区分出常量与变量</p><h3 id="不要让public方法中有太多的形参"><a href="#不要让public方法中有太多的形参" class="headerlink" title="不要让public方法中有太多的形参"></a>不要让public方法中有太多的形参</h3><p>public 方法即对外提供的方法，如果给这些方法太多形参的话主要有两点坏处：</p><ul><li>违反了面向对象的编程思想，Java讲求一切都是对象，太多的形参，和面向对象的编程思想并不契合</li><li>参数太多势必导致方法调用的出错概率增加</li></ul><p>至于这个“太多”指的是多少个，<code>3、4个</code>吧。比如我们用 JDBC 写一个 insertStudentInfo() 方法，有10个学生信息字段要插入 Student 表中，可以把这10个参数封装在一个实体类中，作为 insert() 方法的形参。</p><h3 id="不要对超出范围的基本数据类型做向下强制转型"><a href="#不要对超出范围的基本数据类型做向下强制转型" class="headerlink" title="不要对超出范围的基本数据类型做向下强制转型"></a>不要对超出范围的基本数据类型做向下强制转型</h3><p>这绝不会得到想要的结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> l = <span class="number">12345678901234L</span>;</span><br><span class="line">    <span class="keyword">int</span> i = (<span class="keyword">int</span>) l;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可能期望得到其中的某几位，但是结果却是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1942892530</span><br></pre></td></tr></table></figure><p>解释一下。Java 中 long是8个字节64位的，所以12345678901234在计算机中的表示应该是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 1011 0011 1010 0111 0011 1100 1110 0010 1111 1111 0010</span><br></pre></td></tr></table></figure><p>一个 int 型数据是4个字节32位的，从低位取出上面这串二进制数据的前32位是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0111 0011 1100 1110 0010 1111 1111 0010</span><br></pre></td></tr></table></figure><p>这串二进制表示为十进制1942892530，所以就是我们上面的控制台上输出的内容。从这个例子上还能顺便得到两个结论：</p><ul><li>整型默认的数据类型是int，longl=12345678901234L，这个数字已经超出了int的范围了，所以最后有一个L，表示这是一个long型数。顺便，浮点型的默认类型是 double，所以定义 float 的时候要写成float f = 3.5f</li><li>接下来再写一句 int ii = l + i; 会报错，因为 long + int 是一个long，不能赋值给 int</li></ul><h3 id="尽量采用懒加载的策略"><a href="#尽量采用懒加载的策略" class="headerlink" title="尽量采用懒加载的策略"></a>尽量采用懒加载的策略</h3><p>即在需要的时候才创建，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"aaa"</span>;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">    list.add(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议替换为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">    String str = <span class="string">"aaa"</span>;</span><br><span class="line">    list.add(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尽量在合适的场合使用单例"><a href="#尽量在合适的场合使用单例" class="headerlink" title="尽量在合适的场合使用单例"></a>尽量在合适的场合使用单例</h3><p>使用单例可以减轻加载的负担、缩短加载的时间、提高加载的效率，但并不是所有地方都适用于单例，简单来说，单例主要适用于以下三个方面：</p><ul><li>控制资源的使用，通过线程同步来控制资源的并发访问</li><li>控制实例的产生，以达到节约资源的目的</li><li>控制数据的共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信</li></ul><h3 id="慎用异常"><a href="#慎用异常" class="headerlink" title="慎用异常"></a>慎用异常</h3><ul><li>异常对性能不利。</li><li>抛出异常首先要创建一个新的对象，Throwable接口的构造函数调用名为fillInStackTrace()的本地同步方法，fillInStackTrace()方法检查堆栈，收集调用跟踪信息。</li><li>只要有异常被抛出，Java虚拟机就必须调整调用堆栈，因为在处理过程中创建了一个新的对象。</li><li>异常只能用于错误处理，不应该用来控制程序流程。</li></ul><h3 id="不要在循环中使用try…catch…"><a href="#不要在循环中使用try…catch…" class="headerlink" title="不要在循环中使用try…catch…"></a>不要在循环中使用try…catch…</h3><p>应该把其放在最外层，除非不得已。如果毫无理由地这么写了，只要你的领导资深一点、有强迫症一点，八成就要骂你为什么写出这种垃圾代码来了。</p><h3 id="及时关闭流"><a href="#及时关闭流" class="headerlink" title="及时关闭流"></a>及时关闭流</h3><p>Java 编程过程中，进行数据库连接、I/O流操作时务必小心，在使用完毕后，及时关闭以释放资源。因为对这些大对象的操作会造成系统大的开销，稍有不慎，将会导致严重的后果。</p><h3 id="对资源的close-建议分开操作"><a href="#对资源的close-建议分开操作" class="headerlink" title="对资源的close()建议分开操作"></a>对资源的close()建议分开操作</h3><p>意思是，比如我有这么一段代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    XXX.close();</span><br><span class="line">    YYY.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议修改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    XXX.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    YYY.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可避免资源泄露。万一 XXX.close() 抛异常，进入了 catch 块中，YYY.close()不会执行，资源不会回收，一直占用，可能引起资源泄露的。而改为上面的写法之后，就保证了无论如何 XXX 和 YYY 都会被 close 掉。</p><h3 id="尽量减少对变量的重复计算"><a href="#尽量减少对变量的重复计算" class="headerlink" title="尽量减少对变量的重复计算"></a>尽量减少对变量的重复计算</h3><p>明确一个概念，对方法的调用，即使方法中只有一句语句，也是有消耗的，包括创建栈帧、调用方法时保护现场、调用方法完毕时恢复现场等。所以例如下面的操作：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议替换为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, <span class="keyword">int</span> length = list.size(); i &lt; length; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，在 list.size() 很大的时候，就减少了很多的消耗。</p><h3 id="为底层以数组方式实现的集合、工具类指定初始长度"><a href="#为底层以数组方式实现的集合、工具类指定初始长度" class="headerlink" title="为底层以数组方式实现的集合、工具类指定初始长度"></a>为底层以数组方式实现的集合、工具类指定初始长度</h3><p>如果能估计到待添加的内容长度，比如ArrayList、LinkedLlist、StringBuilder、StringBuffer、HashMap、HashSet等等，以 StringBuilder 为例：</p><ul><li>StringBuilder() // 默认分配16个字符的空间</li><li>StringBuilder(int size) // 默认分配size个字符的空间</li><li>StringBuilder(String str) // 默认分配16个字符+str.length()个字符空间</li></ul><p>可以通过类的来设定它的初始化容量，这样可以明显地提升性能。<br>比如<code>当StringBuilder达到最大容量的时候，它会将自身容量增加到当前的2倍再加2，无论何时只要StringBuilder达到它的最大容量，它就不得不创建一个新的字符数组然后将旧的字符数组内容拷贝到新字符数组中，这是十分耗费性能的一个操作</code>。<br>试想，如果能预估到字符数组中大概要存放5000个字符而不指定长度，最接近5000的2次幂是4096，每次扩容加的2不管，那么：</p><blockquote><p>在4096的基础上，再申请8194个大小的字符数组，加起来相当于一次申请了12290个大小的字符数组，如果一开始能指定5000个大小的字符数组，就节省了一倍以上的空间；把原来的4096个字符拷贝到新的的字符数组中去。</p></blockquote><p>这样，既浪费内存空间又降低代码运行效率。所以，给底层以数组实现的集合、工具类设置一个合理的初始化容量是错不了的，这会带来立竿见影的效果。<br><code>注：像 HashMap 这种是以数组+链表实现的集合，别把初始大小和你估计的大小设置得一样，因为一个table上只连接一个对象的可能性几乎为0。初始大小建议设置为2的N次幂，如果能估计到有2000个元素，设置成 new HashMap(128)、new HashMap(256) 都可以。</code></p><h3 id="当复制大量数据时"><a href="#当复制大量数据时" class="headerlink" title="当复制大量数据时"></a>当复制大量数据时</h3><p>使用System.arraycopy()方法</p><h3 id="乘法和除法使用移位操作"><a href="#乘法和除法使用移位操作" class="headerlink" title="乘法和除法使用移位操作"></a>乘法和除法使用移位操作</h3><p>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (val = <span class="number">0</span>; val &lt; <span class="number">100000</span>; val += <span class="number">5</span>) &#123;</span><br><span class="line">    a = val * <span class="number">8</span>;</span><br><span class="line">    b = val / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用移位操作可以极大地提高性能，因为在计算机底层，对位的操作是最方便、最快的，因此建议修改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (val = <span class="number">0</span>; val &lt; <span class="number">100000</span>; val += <span class="number">5</span>) &#123;</span><br><span class="line">    a = val &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    b = val &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移位操作虽然快，但是可能会使代码不太好理解，因此最好加上相应的注释。</p><h3 id="循环内不要不断创建对象引用"><a href="#循环内不要不断创建对象引用" class="headerlink" title="循环内不要不断创建对象引用"></a>循环内不要不断创建对象引用</h3><p>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i++) &#123;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种做法会导致内存中有count份Object对象引用存在，count很大的话，就耗费内存了，建议为改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= count; i++) &#123;</span><br><span class="line">    obj = <span class="keyword">new</span> Object();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，<code>内存中只有一份Object对象引用，每次new Object()的时候，Object对象引用指向不同的Object罢了，但是内存中只有一份</code>，这样就大大节省了内存空间了。</p><h3 id="把一个基本数据类型转为字符串"><a href="#把一个基本数据类型转为字符串" class="headerlink" title="把一个基本数据类型转为字符串"></a>把一个基本数据类型转为字符串</h3><ul><li>基本数据类型.toString()：最快<br>Integer.toString() 直接调用</li><li>String.valueOf(数据)：次之<br>String.valueOf() 方法底层调用了Integer.toString()方法，但是会在调用前做空判断</li><li>数据+：最慢<br>i + “”底层使用了 StringBuilder 实现，先用 append() 方法拼接，再用 toString() 方法获取字符串</li></ul><h3 id="字符串变量和字符串常量equals"><a href="#字符串变量和字符串常量equals" class="headerlink" title="字符串变量和字符串常量equals"></a>字符串变量和字符串常量equals</h3><p>将字符串常量写在前面，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">"123"</span>)) &#123;</span><br><span class="line">   ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议修改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"123"</span>.equals(str))  &#123;</span><br><span class="line">    ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么做<code>主要是可以避免空指针异常</code>。</p><h3 id="不要对数组使用toString-方法"><a href="#不要对数组使用toString-方法" class="headerlink" title="不要对数组使用toString()方法"></a>不要对数组使用toString()方法</h3><p>数组使用toString()打印出来的是什么：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] is = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    System.out.println(is.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[I@18a992f</span><br></pre></td></tr></table></figure><p>本意是想打印出数组内容，却有<code>可能因为数组引用is为空而导致空指针异常</code>。但是对集合toString()是可以打印出集合里面的内容的，因为<code>集合的父类 AbstractCollections 重写了 Object 的 toString() 方法</code>。</p><h3 id="基于效率和类型检查的考虑"><a href="#基于效率和类型检查的考虑" class="headerlink" title="基于效率和类型检查的考虑"></a>基于效率和类型检查的考虑</h3><p>应该尽可能使用array，无法确定数组大小时才使用ArrayList</p><h3 id="尽量使用HashMap、ArrayList、StringBuilder"><a href="#尽量使用HashMap、ArrayList、StringBuilder" class="headerlink" title="尽量使用HashMap、ArrayList、StringBuilder"></a>尽量使用HashMap、ArrayList、StringBuilder</h3><p>除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销</p><h3 id="不要将数组声明为public-static-final"><a href="#不要将数组声明为public-static-final" class="headerlink" title="不要将数组声明为public static final"></a>不要将数组声明为public static final</h3><p>因为这毫无意义，这样<code>只是定义了引用为static final，数组的内容还是可以随意改变的</code>，<code>将数组声明为public更是一个安全漏洞，这意味着这个数组可以被外部类所改变</code>。</p><h3 id="ArrayList和LinkedList的选择"><a href="#ArrayList和LinkedList的选择" class="headerlink" title="ArrayList和LinkedList的选择"></a>ArrayList和LinkedList的选择</h3><p>顺序插入和随机访问比较多的场景使用ArrayList，元素删除和中间插入比较多的场景使用LinkedList这个，理解ArrayList和LinkedList的原理就知道了</p><h3 id="公用集合中不使用的数据必须及时remove"><a href="#公用集合中不使用的数据必须及时remove" class="headerlink" title="公用集合中不使用的数据必须及时remove"></a>公用集合中不使用的数据必须及时remove</h3><p>如果一个集合类是公用的（也就是说不是方法里面的属性），那么这个集合里面的元素是不会自动释放的，因为始终有引用指向它们。所以，如果公用集合里面的某些数据不使用而不去remove掉它们，那么将会造成这个公用集合不断增大，使得系统有内存泄露的隐患。</p><h3 id="实现RandomAccess接口的集合"><a href="#实现RandomAccess接口的集合" class="headerlink" title="实现RandomAccess接口的集合"></a>实现RandomAccess接口的集合</h3><p>比如ArrayList，应当使用最普通的for循环而不是foreach循环来遍历，这是 JDK 推荐给用户的。<br>JDK API 对于 RandomAccess接口的解释是：实现RandomAccess接口用来表明其支持快速随机访问，此接口的主要目的是允许一般的算法更改其行为，从而将其应用到随机或连续访问列表时能提供良好的性能。<br>实际经验表明，<code>实现RandomAccess接口的类实例，假如是随机访问的，使用普通 for 循环效率将高于使用foreach循环</code>；反过来，<code>如果是顺序访问的，则使用 Iterator 会效率更高</code>。<br><code>参见Java语法糖1：可变长度参数以及 foreach 循环原理。</code></p><h3 id="使用最有效率的方式去遍历Map"><a href="#使用最有效率的方式去遍历Map" class="headerlink" title="使用最有效率的方式去遍历Map"></a>使用最有效率的方式去遍历Map</h3><p>遍历 Map 的方式有很多，通常场景下我们需要的是遍历 Map 中的 Key 和 Value，那么推荐使用的、效率最高的方式是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    map.put(<span class="string">"111"</span>, <span class="string">"222"</span>);</span><br><span class="line">    Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iter = entrySet.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">        Map.Entry&lt;String, String&gt; entry = iter.next();</span><br><span class="line">        System.out.println(entry.getKey() + <span class="string">"    "</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>只是想遍历一下这个 Map的 key 值，那用 Set keySet = map.keySet(); 会比较合适一些</code></p><h3 id="使用同步代码块替代同步方法"><a href="#使用同步代码块替代同步方法" class="headerlink" title="使用同步代码块替代同步方法"></a>使用同步代码块替代同步方法</h3><p>除非能确定一整个方法都是需要进行同步的，否则尽量使用同步代码块，避免对那些不需要进行同步的代码也进行了同步，影响了代码执行效率。</p><h3 id="使用带缓冲的输入输出流进行IO操作"><a href="#使用带缓冲的输入输出流进行IO操作" class="headerlink" title="使用带缓冲的输入输出流进行IO操作"></a>使用带缓冲的输入输出流进行IO操作</h3><p>带缓冲的输入输出流，即 BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream，这可以极大地提升 IO 效率。</p><h3 id="程序运行过程中避免使用反射"><a href="#程序运行过程中避免使用反射" class="headerlink" title="程序运行过程中避免使用反射"></a>程序运行过程中避免使用反射</h3><p>反射是 Java 提供给用户一个很强大的功能，功能强大往往意味着效率不高。<br>不建议在程序运行过程中使用尤其是频繁使用反射机制，特别是 Method 的 invoke() 方法，如果确实有必要，一种建议性的做法是<code>将那些需要通过反射加载的类在项目启动的时候通过反射实例化出一个对象并放入内存</code>，用户只关心和对端交互的时候获取最快的响应速度，并不关心项目启动花多久时间。</p><h3 id="使用数据库连接池和线程池"><a href="#使用数据库连接池和线程池" class="headerlink" title="使用数据库连接池和线程池"></a>使用数据库连接池和线程池</h3><p>这两个池都是用于重用对象的，<code>前者可以避免频繁地打开和关闭连接</code>，<code>后者可以避免频繁地创建和销毁线程</code>。</p><h3 id="及时清除不再需要的会话"><a href="#及时清除不再需要的会话" class="headerlink" title="及时清除不再需要的会话"></a>及时清除不再需要的会话</h3><p>为了清除不再活动的会话，许多应用服务器都有默认的会话超时时间，一般为30分钟。当应用服务器需要保存更多的会话时，如果内存不足，那么操作系统会把部分数据转移到磁盘，应用服务器也可能根据MRU（最近最频繁使用）算法把部分不活跃的会话转储到磁盘，甚至可能抛出内存不足的异常。如果会话要被转储到磁盘，那么必须要先被序列化，在大规模集群中，对对象进行序列化的代价是很昂贵的。因此，当会话不再需要时，应当及时调用 HttpSession 的 invalidate() 方法清除会话。</p><blockquote><p>原文：<a href="https://mp.weixin.qq.com/s/RgpEaHrVnFOuLVQ-qfMfIw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/RgpEaHrVnFOuLVQ-qfMfIw</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的for循环优化方式</title>
      <link href="/2021/09/07/%E5%B8%B8%E8%A7%81%E7%9A%84for%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
      <url>/2021/09/07/%E5%B8%B8%E8%A7%81%E7%9A%84for%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们都经常使用一些循环耗时计算的操作，特别是for循环，它是一种重复计算的操作，如果处理不好，耗时就比较大，如果处理书写得当将大大提高效率，下面总结几条for循环的常见优化方式。</p><p>首先，我们初始化一个集合 list，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure><h2 id="方法一：最常规的不加思考的写法"><a href="#方法一：最常规的不加思考的写法" class="headerlink" title="方法一：最常规的不加思考的写法"></a>方法一：最常规的不加思考的写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：较常见，易于理解<br><code>缺点：每次都要计算list.size()</code></p><h2 id="方法二：数组长度提取出来"><a href="#方法二：数组长度提取出来" class="headerlink" title="方法二：数组长度提取出来"></a>方法二：数组长度提取出来</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> m = list.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：不必每次都计算<br><code>缺点：</code></p><ol><li>m的作用域不够小，违反了最小作用域原则</li><li>不能在for循环中操作list的大小，比如除去或新加一个元素</li></ol><h2 id="方法三：数组长度提取出来"><a href="#方法三：数组长度提取出来" class="headerlink" title="方法三：数组长度提取出来"></a>方法三：数组长度提取出来</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = list.size(); i &lt; n; i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：不必每次都计算 ，变量的作用域遵循最小范围原则<br><code>缺点：</code></p><ol><li>m的作用域不够小，违反了最小作用域原则</li><li>不能在for循环中操作list的大小，比如除去或新加一个元素</li></ol><h2 id="方法四：采用倒序的写法"><a href="#方法四：采用倒序的写法" class="headerlink" title="方法四：采用倒序的写法"></a>方法四：采用倒序的写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = list.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：不必每次都计算 ，变量的作用域遵循最小范围原则<br><code>缺点：</code></p><ol><li>结果的顺序会反</li><li>看起来不习惯，不易读懂</li></ol><p>适用场合：与显示结果顺序无关的地方：比如保存之前数据的校验</p><h2 id="方法五：Iterator-遍历"><a href="#方法五：Iterator-遍历" class="headerlink" title="方法五：Iterator 遍历"></a>方法五：Iterator 遍历</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Iterator&lt;String&gt; it = list.iterator(); it.hasNext();) &#123;</span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：简洁</p><h2 id="方法六：jdk1-5后的写法"><a href="#方法六：jdk1-5后的写法" class="headerlink" title="方法六：jdk1.5后的写法"></a>方法六：jdk1.5后的写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：简洁结合泛型使用更简洁<br><code>缺点：jdk1.4向下不兼容</code></p><h2 id="方法七：循环嵌套外小内大原则"><a href="#方法七：循环嵌套外小内大原则" class="headerlink" title="方法七：循环嵌套外小内大原则"></a>方法七：循环嵌套外小内大原则</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/07/1PauCrfipgtOmhc.png" alt=""></p><h2 id="方法八：循环嵌套提取不需要循环的逻辑"><a href="#方法八：循环嵌套提取不需要循环的逻辑" class="headerlink" title="方法八：循环嵌套提取不需要循环的逻辑"></a>方法八：循环嵌套提取不需要循环的逻辑</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前：</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    i = i * a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后：</span></span><br><span class="line"><span class="keyword">int</span> c = a * b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    i = i * c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法九：异常处理写在循环外面"><a href="#方法九：异常处理写在循环外面" class="headerlink" title="方法九：异常处理写在循环外面"></a>方法九：异常处理写在循环外面</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反例</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正例</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原文：<a href="https://blog.csdn.net/csdn_aiyang/article/details/75162134" target="_blank" rel="noopener">https://blog.csdn.net/csdn_aiyang/article/details/75162134</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码优化 </tag>
            
            <tag> 循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接池到底应该设多大？颠覆你的认知</title>
      <link href="/2021/08/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E8%AE%BE%E5%A4%9A%E5%A4%A7%EF%BC%9F%E9%A2%A0%E8%A6%86%E4%BD%A0%E7%9A%84%E8%AE%A4%E7%9F%A5/"/>
      <url>/2021/08/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E8%AE%BE%E5%A4%9A%E5%A4%A7%EF%BC%9F%E9%A2%A0%E8%A6%86%E4%BD%A0%E7%9A%84%E8%AE%A4%E7%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>我在研究HikariCP（一个数据库连接池）时无意间在HikariCP的Github wiki上看到了一篇文章（即前面给出的链接），这篇文章有力地消除了我一直以来的疑虑，看完之后感觉神清气爽。故在此做译文分享。</p><p>数据库连接池的配置是开发者们常常搞出坑的地方，在配置数据库连接池时，有几个可以说是和直觉背道而驰的原则需要明确。</p><h2 id="1万并发用户访问"><a href="#1万并发用户访问" class="headerlink" title="1万并发用户访问"></a>1万并发用户访问</h2><p>想象你有一个网站，压力虽然还没到Facebook那个级别，但也有个1万上下的并发访问——也就是说差不多2万左右的TPS。那么这个网站的数据库连接池应该设置成多大呢？结果可能会让你惊讶，因为这个问题的正确问法是：</p><blockquote><p>“这个网站的数据库连接池应该设置成多小呢？”</p></blockquote><p>下面这个视频是Oracle Real World Performance Group发布的，请先看完：</p><blockquote><p><a href="http://www.dailymotion.com/video/x2s8uec" target="_blank" rel="noopener">http://www.dailymotion.com/video/x2s8uec</a></p></blockquote><p>（因为这视频是英文解说且没有字幕，我替大家做一下简单的概括：）<br><code>视频中对Oracle数据库进行压力测试，9600并发线程进行数据库操作，每两次访问数据库的操作之间sleep 550ms，一开始设置的中间件线程池大小为2048：</code></p><blockquote><p><code>初始的配置</code></p></blockquote><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTMwNjZkMjdhY2M4MTVjZGEucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMzc0L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p>压测跑起来之后是这个样子的：</p><blockquote><p><code>2048连接时的性能数据</code></p></blockquote><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTI5MWZmMTQzMGEwNGM1MGIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMzkzL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p><code>每个请求要在连接池队列里等待33ms，获得连接后执行SQL需要77ms</code></p><p>此时数据库的等待事件是这个熊样的：<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTRkODNlZjFhNTA1M2RkMmIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMzkzL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p>各种buffer busy waits，数据库CPU在95%左右（这张图里没截到CPU）</p><p><code>接下来，把中间件连接池减到1024（并发什么的都不变），性能数据变成了这样：</code><br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTRjZDczYzNjYzA1YTg2ZDcucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMzk2L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p><code>获取链接等待时长没怎么变，但是执行SQL的耗时减少了。</code><br>下面这张图，上半部分是wait，下半部分是吞吐量<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTNhY2EzMGIwODVlNGM1MjUucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTc1L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p>能看到，<code>中间件连接池从2048减半之后，吐吞量没变，但wait事件减少了一半。</code></p><p>接下来，<code>把数据库连接池减到96，并发线程数仍然是9600不变。</code></p><blockquote><p><code>96个连接时的性能数据</code><br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTM1MDUzYTVjODVjODVkZjQucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvNTIyL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p></blockquote><p>队列平均等待1ms，执行SQL平均耗时2ms。<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTAzOWJiNzZlYWY2NGNkMzIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMjE4L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p>`wait事件几乎没了，吞吐量上升。</p><p>没有调整任何其他东西，仅仅只是缩小了中间件层的数据库连接池，就把请求响应时间从100ms左右缩短到了3ms。`</p><h2 id="But-why"><a href="#But-why" class="headerlink" title="But why?"></a>But why?</h2><p>为什么nginx只用4个线程发挥出的性能就大大超越了100个进程的Apache HTTPD？回想一下计算机科学的基础知识，答案其实是很明显的。</p><blockquote><p>即使是单核CPU的计算机也能“同时”运行数百个线程。但我们都[应该]知道这只不过是操作系统用时间分片玩的一个小把戏。一颗CPU核心同一时刻只能执行一个线程，然后操作系统切换上下文，核心开始执行另一个线程的代码，以此类推。给定一颗CPU核心，其顺序执行A和B永远比通过时间分片“同时”执行A和B要快，这是一条计算机科学的基本法则。一旦线程的数量超过了CPU核心的数量，再增加线程数系统就只会更慢，而不是更快。</p></blockquote><p>这几乎就是真理了……</p><h2 id="有限的资源"><a href="#有限的资源" class="headerlink" title="有限的资源"></a>有限的资源</h2><p>上面的说法只能说是接近真理，但还并没有这么简单，有一些其他的因素需要加入。<code>当我们寻找数据库的性能瓶颈时，总是可以将其归为三类：CPU、磁盘、网络。</code>把内存加进来也没有错，但比起磁盘和网络，内存的带宽要高出好几个数量级，所以就先不加了。</p><blockquote><p>如果我们无视磁盘和网络，那么结论就非常简单。在一个8核的服务器上，设定连接/线程数为8能够提供最优的性能，再增加连接数就会因上下文切换的损耗导致性能下降。数据库通常把数据存储在磁盘上，磁盘又通常是由一些旋转着的金属碟片和一个装在步进马达上的读写头组成的。读/写头同一时刻只能出现在一个地方，然后它必须“寻址”到另外一个位置来执行另一次读写操作。所以就有了寻址的耗时，此外还有旋回耗时，读写头需要等待碟片上的目标数据“旋转到位”才能进行操作。使用缓存当然是能够提升性能的，但上述原理仍然成立。</p></blockquote><p>在这一时间段（即”I/O等待”）内，线程是在“阻塞”着等待磁盘，此时操作系统可以将那个空闲的CPU核心用于服务其他线程。所以，由于线程总是在I/O上阻塞，我们可以让线程/连接数比CPU核心多一些，这样能够在同样的时间内完成更多的工作。</p><blockquote><p><code>那么应该多多少呢？</code>这要取决于磁盘。较新型的SSD不需要寻址，也没有旋转的碟片。可别想当然地认为“SSD速度更快，所以我们应该增加线程数”，恰恰相反，<code>无需寻址和没有旋回耗时意味着更少的阻塞</code>，所以更少的线程[更接近于CPU核心数]会发挥出更高的性能。只有当阻塞创造了更多的执行机会时，更多的线程数才能发挥出更好的性能。</p></blockquote><p><code>网络和磁盘类似。通过以太网接口读写数据时也会形成阻塞，10G带宽会比1G带宽的阻塞少一些，1G带宽又会比100M带宽的阻塞少一些。</code>不过网络通常是放在第三位考虑的，有些人会在性能计算中忽略它们。<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTY5NDI5ZDNkOWE2ZDkyNjEucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvNjQzL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png" alt=""></p><p>上图是PostgreSQL的benchmark数据，可以看到TPS增长率从50个连接数开始变缓。<code>在上面Oracle的视频中，他们把连接数从2048降到了96，实际上96都太高了，除非服务器有16或32颗核心。</code></p><h2 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h2><p>下面的公式是由PostgreSQL提供的，不过我们认为可以广泛地应用于大多数数据库产品。你应该模拟预期的访问量，并从这一公式开始测试你的应用，寻找最合适的连接数值。</p><blockquote><p><code>连接数 = ((核心数 * 2) + 有效磁盘数)</code></p></blockquote><br>>核心数不应包含超线程(hyper thread)，即使打开了hyperthreading也是。如果活跃数据全部被缓存了，那么有效磁盘数是0，随着缓存命中率的下降，有效磁盘数逐渐趋近于实际的磁盘数。这一公式作用于SSD时的效果如何尚未有分析。<p><code>按这个公式，你的4核i7数据库服务器的连接池大小应该为((4 * 2) + 1) = 9。</code>取个整就算是是10吧。是不是觉得太小了？跑个性能测试试一下，我们保证它能轻松搞定3000用户以6000TPS的速率并发执行简单查询的场景。如果连接池大小超过10，你会看到响应时长开始增加，TPS开始下降。</p><blockquote><p>笔者注：<br><code>这一公式其实不仅适用于数据库连接池的计算，大部分涉及计算和I/O的程序，线程数的设置都可以参考这一公式。我之前在对一个使用Netty编写的消息收发服务进行压力测试时，最终测出的最佳线程数就刚好是CPU核心数的一倍。</code></p></blockquote><p><strong>公理：</strong><code>你需要一个小连接池，和一个充满了等待连接的线程的队列</code><br>如果你有10000个并发用户，设置一个10000的连接池基本等于失了智。1000仍然很恐怖。即是100也太多了。你需要一个10来个连接的小连接池，然后让剩下的业务线程都在队列里等待。连接池中的连接数量应该等于你的数据库能够有效同时进行的查询任务数（通常不会高于2*CPU核心数）。</p><p>我们经常见到一些小规模的web应用，应付着大约十来个的并发用户，却使用着一个100连接数的连接池。这会对你的数据库造成极其不必要的负担。</p><p><strong>请注意</strong><br>连接池的大小最终与系统特性相关。</p><p>比如一个混合了长事务和短事务的系统，通常是任何连接池都难以进行调优的。<code>最好的办法是创建两个连接池，一个服务于长事务，一个服务于短事务。</code></p><p>再例如一个系统执行一个任务队列，只允许一定数量的任务同时执行，此时并发任务数应该去适应连接池连接数，而不是反过来。</p><blockquote><p>原文：<a href="https://www.jianshu.com/p/a8f653fc0c54" target="_blank" rel="noopener">https://www.jianshu.com/p/a8f653fc0c54</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何把Java的Jar包做成exe？超详细教程来了！</title>
      <link href="/2021/08/05/%E5%A6%82%E4%BD%95%E6%8A%8AJava%E7%9A%84Jar%E5%8C%85%E5%81%9A%E6%88%90exe/"/>
      <url>/2021/08/05/%E5%A6%82%E4%BD%95%E6%8A%8AJava%E7%9A%84Jar%E5%8C%85%E5%81%9A%E6%88%90exe/</url>
      
        <content type="html"><![CDATA[<p>近期做了一个前后端合并的spring boot项目，但是要求达成exe文件，提供给不懂电脑的小白安装使用，就去研究了半天，踩了很多坑，写这篇文章，是想看到这篇文章的人，按照我的步骤走，能少踩坑。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><ol><li>一个jar包，没有bug能正常启动的jar包</li><li>exe4j，一个将jar转换成exe的工具，百度链接：<a href="https://pan.baidu.com/s/1J30uUMJcYnqWCJSr6gkM5w，提取码：6esr，注册码：L-g782dn2d-1f1yqxx1rv1sqd" target="_blank" rel="noopener">https://pan.baidu.com/s/1J30uUMJcYnqWCJSr6gkM5w，提取码：6esr，注册码：L-g782dn2d-1f1yqxx1rv1sqd</a></li><li>inno setup，一个将依赖和exe一起打成一个安装程序的工具，链接：<a href="https://pan.baidu.com/s/1DgFo1ceM_8Bqx_b-veibbQ，提取码：g9jd" target="_blank" rel="noopener">https://pan.baidu.com/s/1DgFo1ceM_8Bqx_b-veibbQ，提取码：g9jd</a></li></ol></blockquote><h2 id="制作步骤"><a href="#制作步骤" class="headerlink" title="制作步骤"></a>制作步骤</h2><h3 id="exe4j"><a href="#exe4j" class="headerlink" title="exe4j"></a>exe4j</h3><ul><li>将jar包放在了桌面</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002244748.png" alt=""></p><ul><li>打开安装好的exe4j</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002452495.png" alt=""></p><ul><li>直接下一步进入界面，选择JAVA转EXE</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002540751.png" alt=""></p><ul><li>然后点下一步，输入名称和输出路径</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002646584.png" alt=""></p><ul><li>继续点击下一步，选择启动模式</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002904461.png" alt=""></p><ul><li>下方有个选项，需要设置打包后的程序兼容32和64位系统</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020020400300477.png" alt=""></p><ul><li>进来后勾选上</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003036476.png" alt=""></p><ul><li>然后一直下一步，一直出现如下界面，开始选择jar包以及配置在VM参数配置的地方加上：-Dfile.encoding=utf-8</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003457499.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003530510.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003646323.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003700634.png" alt=""></p><ul><li>点击下一步，配置JRE</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003848260.png" alt=""></p><ul><li>下拉框点击后进入如下界面</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003959383.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004026684.png" alt=""></p><ul><li>照着这个样子写的目的是，最终会把本地jre目录和exe一起打包，让exe文件自己去根据路径去查找一起打包的jre，可不用再安装jdk</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004122719.png" alt=""></p><ul><li>接着下一步，选择Client VM</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004404491.png" alt=""></p><ul><li>然后一直下一步，最终出现如下界面</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004451130.png" alt=""></p><h3 id="inno-setup"><a href="#inno-setup" class="headerlink" title="inno setup"></a>inno setup</h3><ul><li>这个时候你会发现桌面多了一个demo.exe文件，这个时候先别着急点开，接下来就是将jre和exe文件再打个包合并，达到在没有jdk电脑环境下也能运行打开inno setup，左上角File - New</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004721363.png" alt=""></p><ul><li>直接点下一步，填写配置，应用名称，版本等，随意</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004828569.png" alt=""></p><ul><li>然后点击下一步，这个地方默认就行，直接下一步</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020020400490086.png" alt=""></p><ul><li>接着选择生成好的exe文件</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005035248.png" alt=""></p><ul><li>然后下一步，进入这个界面保持默认，直接下一步</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005136140.png" alt=""></p><ul><li>依旧下一步，不用管</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005143994.png" alt=""></p><ul><li>继续下一步，这里是选择语言</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005211217.png" alt=""></p><ul><li>然后就是选择输出路径和填写安装程序的名字了</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005320116.png" alt=""></p><ul><li>然后下一步，直接点Next，然后结束，配置到最后一步了，脚本文件，到这里会弹出问你是否马上编译，选择否，先把脚本写好再自己编译</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005441574.png" alt=""></p><ul><li>然后到了最后一步了，把本地的JRE写进脚本</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005653781.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005804780.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005919893.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/08/05/oO3HIbjr6ESL2C1.png" alt=""></p><ul><li>然后直接编译就好了，会提示保存当前脚本，随便起个名字，下个还可以继续用</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010100205.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010143208.png" alt=""></p><ul><li>然后等待绿色滚动条结束</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010154655.png" alt=""></p><ul><li>当绿色滚动条结束后，桌面会多了一个setup.exe文件</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010504973.png" alt=""></p><ul><li>也同时会跳出一个安装的，因为程序帮你自动启动生成的安装程序了，安装就可以了，安装的时候记得勾选创建快捷方式</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010605563.png" alt=""></p><ul><li>这个就是最后的程序了，双击运行就可以看到结果了，把setup.exe文件给别人安装，就都可以看到自己的程序了</li></ul><blockquote><p>原文：<a href="https://blog.csdn.net/m0_37701381/article/details/104163877" target="_blank" rel="noopener">https://blog.csdn.net/m0_37701381/article/details/104163877</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jar </tag>
            
            <tag> exe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>compileflow 淘宝工作流引擎</title>
      <link href="/2021/07/22/compileflow%20%E6%B7%98%E5%AE%9D%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/"/>
      <url>/2021/07/22/compileflow%20%E6%B7%98%E5%AE%9D%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="compileflow是什么"><a href="#compileflow是什么" class="headerlink" title="compileflow是什么"></a>compileflow是什么</h2><p>compileflow是一个非常轻量、高性能、可集成、可扩展的流程引擎。</p><p>compileflow Process引擎是淘宝工作流TBBPM引擎之一，是专注于纯内存执行，无状态的流程引擎，通过将流程文件转换生成java代码编译执行，简洁高效。当前是阿里业务中台交易等多个核心系统的流程引擎。</p><p>compileflow能让开发人员通过流程编辑器设计自己的业务流程，将复杂的业务逻辑可视化，为业务设计人员与开发工程师架起了一座桥梁。</p><blockquote><p><a href="https://github.com/compileflow/compileflow-designer-upgrade" target="_blank" rel="noopener">最新插件安装包下载</a> </p></blockquote><h2 id="设计意图"><a href="#设计意图" class="headerlink" title="设计意图"></a>设计意图</h2><ol><li>希望为业务开发提供端至端，从设计至实现的业务流程解决方案。</li><li>提供多种流程引擎，实现从战略至商业能力，商业能力至业务流程，业务流程至系统，并最终实现业务的可视化全局架构。</li><li>设计高效的执行引擎，实现对服务的快速组合或扩展，提升idea(构思)至value(价值)的研发响应与交互速度。</li></ol><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><ol><li>高性能：通过将流程文件转换生成java代码编译执行<code>(爽啊，Activiti可没这功能)</code>，简洁高效。</li><li>丰富的应用场景：在阿里巴巴中台解决方案中广泛使用，支撑了导购、交易、履约、资金等多个业务场景。</li><li>可集成：轻量、简洁的设计使得可以极其方便地集成到各个解决方案和业务场景中。</li><li>完善的插件支持：流程设计目前有IntelliJ IDEA、Eclipse插件支持，可以在流程设计中实时动态生成java代码并预览，所见即所得。</li><li>支持流程设计图导出svg文件和单元测试代码。</li></ol><h2 id="IntelliJ-IDEA安装插件"><a href="#IntelliJ-IDEA安装插件" class="headerlink" title="IntelliJ IDEA安装插件"></a>IntelliJ IDEA安装插件</h2><blockquote><p><code>注意: compileflow仅支持JDK 1.8及以上版本。</code></p></blockquote><p>以IntelliJ IDEA 2019版本为例，下载最新包到本地</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/C1USc8xzsgHoyAT.png" alt="微信图片_20210722112025.png"></p><p>使用本地安装的方式安装，注意安装整个zip不用手动解压 </p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/WbBXhDQMPUfrwoK.png" alt="微信图片_20210722113354.png"></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/yAnptbmq6PrvUeQ.png" alt="微信图片_20210722113123.png"></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/o6Q8luLqvBGIeUc.png" alt="微信图片_20210722113159.png"></p><p>重启IntelliJ IDEA就会生效</p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><p>如果Maven项目，需引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.compileflow<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>compileflow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><h4 id="新建BPM文件"><a href="#新建BPM文件" class="headerlink" title="新建BPM文件"></a>新建BPM文件</h4><ul><li><p>可在resources目录下创建，选中resources目录右键点击【Create New Bpm<br>File】。例如我这边创建在resources的bpm目录下。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/M5rhKWqGlnoQsBj.png" alt=""></p></li><li><p>输入文件名，例如：我这里的hello<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/vzokpQNTjqbZlPd.png" alt=""></p></li><li><p>插件默认会生成了hello.bpm文件，是一个简单的开平方根demo流程，如下图<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/4S8xPMGQrznsu7W.png" alt=""></p></li></ul><h4 id="可视化编辑"><a href="#可视化编辑" class="headerlink" title="可视化编辑"></a>可视化编辑</h4><ul><li><p>你可以选择下方【process-flow】进行可视化编辑，从左侧拖入节点到画布，或者选中节点拖动。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/pNi38WaMHI5xon2.png" alt=""></p></li><li><p>双击空白处可编辑全局参数<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/oBctevwJzYUg4q5.png" alt=""></p></li></ul><ul><li>双击节点可以编辑节点参数（拖拽可调整节点位置）<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/Sey9Xr1TJcbdasz.png" alt=""></li></ul><h4 id="Java代码预览"><a href="#Java代码预览" class="headerlink" title="Java代码预览"></a>Java代码预览</h4><ul><li>可以选择下方【java code】进行Java代码预览。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/z1RWMcSvdkB4ugV.png" alt=""></li></ul><h4 id="创建测试代码"><a href="#创建测试代码" class="headerlink" title="创建测试代码"></a>创建测试代码</h4><ul><li><p>选中文件右键，点击【Create New Bpm JUnit Test】可自动生成测试类<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/yb2NYWcHoJzgVaT.png" alt=""></p></li><li><p>到指定路径查看生成的测试类（修改入参数运行整个demo就完成了）<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/nRAm1NB8DIZgk3S.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> compileflow </tag>
            
            <tag> Activiti </tag>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq 消息延迟推送--插件模式</title>
      <link href="/2021/07/13/rabbitmq%20%E6%B6%88%E6%81%AF%E5%BB%B6%E8%BF%9F%E6%8E%A8%E9%80%81--%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/07/13/rabbitmq%20%E6%B6%88%E6%81%AF%E5%BB%B6%E8%BF%9F%E6%8E%A8%E9%80%81--%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>目前常见的应用软件都有消息的延迟推送的影子，应用也极为广泛，例如：</p><ul><li>淘宝七天自动确认收货。在签收商品后，物流系统会在七天后延时发送一个消息给支付系统，通知支付系统将款打给商家，这个过程持续七天，就是使用了消息中间件的延迟推送功能。</li><li>12306 购票支付确认页面。在选好票点击确定跳转的页面中往往都会有倒计时，代表着 30分钟内订单不确认的话将会自动取消订单。其实在下订单那一刻开始购票业务系统就会发送一个延时消息给订单系统，延时30分钟，告诉订单系统订单未完成，如果我们在30分钟内完成了订单，则可以通过逻辑代码判断来忽略掉收到的消息。</li></ul><p>在上面两种场景中，如果使用下面两种传统解决方案无疑大大降低了系统的整体性能和吞吐量：</p><ul><li>使用 redis 给订单设置过期时间，最后通过判断 redis中是否还有该订单来决定订单是否已经完成。这种解决方案相较于消息的延迟推送性能较低，因为我们知道redis都是存储于内存中，我们遇到恶意下单或者刷单的将会给内存带来巨大压力。</li><li>使用传统的数据库轮询来判断数据库表中订单的状态，这无疑增加了IO次数，性能极低。</li><li>使用 jvm 原生的 DelayQueue，也是大量占用内存，而且没有持久化策略，系统宕机或者重启都会丢失订单信息。</li></ul><p><code>之前一般采用死信队列+TTL过期时间来实现延迟队列，现在RabbitMQ 官方提供了延迟队列的插件，这个插件是实验性的，但相当稳定，废话不多说开整</code></p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><ul><li><p>此插件需要 Erlang 23.2 或更高版本。<a href="https://www.erlang.org/downloads" target="_blank" rel="noopener">Erlang windows下载</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/ixcSFRsLmgYr6Ip.png" alt=""></p></li><li><p>最新版本针对 RabbitMQ3.8.x，较早的系列已不受支持。<a href="https://www.rabbitmq.com/install-windows.html" target="_blank" rel="noopener">RabbitMQ下载</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/rXgpzQeiwhuft19.png" alt=""></p></li><li><p>RabbitMQ 官方提供的延迟队列插件，下载放置到 RabbitMQ 根目录下的 plugins 内。<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases" target="_blank" rel="noopener">延迟队列插件下载</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/BLk7eUylAROVp9C.png" alt=""></p></li><li><p>进入RabbitMQ安装目录的sbin目录下，在cmd窗口使用命令启用延迟插件</p></li></ul><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/GqDQIAdZ45herik.png" alt=""></p><ul><li>禁用插件，使用如下命令，<code>但请注意，所有尚未交付的延迟消息都将丢失</code>。</li></ul><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins disable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/fLWb2iS6mF4wJMa.png" alt=""></p><p><code>注：本demo在windows环境下模拟，插件采用rabbitmq-delayed-message-exchange v3.8.x版本；插件启用或禁用时，若Rabbitmq服务一直是启用状态的话，需重启使其生效</code></p><h2 id="实现延迟推送信息"><a href="#实现延迟推送信息" class="headerlink" title="实现延迟推送信息"></a>实现延迟推送信息</h2><h3 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.goitman<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq-delayed-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Web 项目开发starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 消息队列依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- log4j日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- fastJson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>一般来说消息生产和消费是两个独立的项目，配置应该分开，这里为了方便就整合在一块啦</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="comment"># 连接超时，单位毫秒，0表示无穷大，不超时</span></span><br><span class="line">    <span class="attr">connection-timeout:</span> <span class="number">15000</span></span><br><span class="line">    <span class="comment"># 开启confirm确认机制</span></span><br><span class="line">    <span class="comment">#publisher-confirms: true</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">    <span class="comment"># 开启return确认机制</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 设置为true后，路由不到队列的消息不会被自动删除，从而被return消息模式监听到</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">mandatory:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">listener:</span></span><br><span class="line">    <span class="attr">simple:</span></span><br><span class="line">      <span class="comment"># 表示消息确认方式，其有三种配置方式，分别是none(不确认)、manual(手动确认)和auto(自动确认)；默认auto</span></span><br><span class="line">      <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line">      <span class="comment"># 最小消费者数量</span></span><br><span class="line">      <span class="attr">concurrency:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 最大消费者数量</span></span><br><span class="line">      <span class="attr">max-concurrency:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment"># 在单个请求中处理的消息个数，必须大于等于transaction(事务)数量.</span></span><br><span class="line">      <span class="attr">prefetch:</span> <span class="number">2</span></span><br><span class="line">      <span class="comment"># 当ack模式为auto时，一个事务（ack间）处理的消息数量</span></span><br><span class="line">      <span class="comment">#transaction-size:</span></span><br></pre></td></tr></table></figure><ol><li>在RabbitMQ中可以虚拟消息服务器VirtualHost，每个VirtualHost相当月一个相对独立的RabbitMQ服务器，每个VirtualHost之间是相互隔离的。exchange、queue、message不能互通。</li><li>在springboot2.2.0.RELEASE版本之前是amqp正式支持的属性，用来配置消息发送到交换器之后是否触发回调方法，在2.2.0及之后该属性过期使用spring.rabbitmq.publisher-confirm-type属性配置代替，用来配置更多的确认类型；<ul><li>NONE值是禁用发布确认模式，是默认值</li><li>CORRELATED值是发布消息成功到交换器后会触发回调方法</li><li>SIMPLE值经测试有两种效果，其一效果和CORRELATED值一样会触发回调方法，其二在发布消息成功后使用rabbitTemplate调用waitForConfirms或waitForConfirmsOrDie方法等待broker节点返回发送结果，根据返回结果来判定下一步的逻辑，要注意的点是waitForConfirmsOrDie方法如果返回false则会关闭channel，则接下来无法发送消息到broker;</li></ul></li></ol><h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RabbitmqApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 引导类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 17:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RabbitmqApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>模拟一个订单对象，发送、接收对象信息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Order</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 订单对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 15:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订单ID</span></span><br><span class="line">    <span class="keyword">public</span> String orderId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订单状态，0：投递中、1：消费中、2：消费成功</span></span><br><span class="line">    <span class="keyword">public</span> String orderStatus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(String orderId, String orderStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.orderStatus = orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(String orderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderStatus</span><span class="params">(String orderStatus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderStatus = orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.RabbitListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RabbitmqConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 配置类，创建交换机、路由键、队列和之间的关联绑定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 17:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(RabbitmqConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAYED_EXCHANGE = <span class="string">"delayedExchange"</span>;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAYED_QUEUE = <span class="string">"delayedQueue"</span>;</span><br><span class="line">    <span class="comment">// 路由键，#匹配一个或多个词</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAYED_KEY = <span class="string">"delayed.#"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建主题模式交换机，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">delayedExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数一：交换机名称；参数二：数据是否持久化；参数三：数据是否自动删除</span></span><br><span class="line">        TopicExchange exchange = <span class="keyword">new</span> TopicExchange(DELAYED_EXCHANGE, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 开启延迟队列</span></span><br><span class="line">        exchange.setDelayed(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> exchange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建队列</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">delayedQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数一：队列名称；参数二：数据是否持久化</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(DELAYED_QUEUE, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定交换机和队列之间的联系，并配置路由键字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">delayedBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue()).to(delayedExchange()).with(DELAYED_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * 消费者JSON数据反序列化</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory)&#123;</span><br><span class="line">        SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">        factory.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">/* 不设置手动确认，将会报错：</span></span><br><span class="line"><span class="comment">         * Channel shutdown: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=406, reply-text=PRECONDITION_FAILED - unknown delivery tag 1, class-id=60, method-id=80)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">        factory.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.config.RabbitmqConfig;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.AmqpException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageDeliveryMode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ProducerSender</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 消息生产者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 16:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ProducerSender<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息发送确认回调方法，确保消息是否发送到交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> RabbitTemplate.ConfirmCallback confirmCallback = <span class="keyword">new</span> RabbitTemplate.ConfirmCallback() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * correlationData：SpringBoot提供的业务标识对象，封装业务ID信息，需要在发送消息时传入此参数，这里才能接收到，否则是null</span></span><br><span class="line"><span class="comment">         * ack：消息发送的结果状态，成功是true，失败是false</span></span><br><span class="line"><span class="comment">         * cause：发送失败的描述信息，如果发送成功是null。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">            logger.info(<span class="string">"correlationData:&#123;&#125;,ack:&#123;&#125;,cause:&#123;&#125;"</span>,correlationData.toString(), ack, cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息发送失败回调方法，可能是队列或路由键不存在等等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> RabbitTemplate.ReturnCallback returnCallback = <span class="keyword">new</span> RabbitTemplate.ReturnCallback() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * message：发送的信息内容</span></span><br><span class="line"><span class="comment">         * replyCode：状态码，200为成功</span></span><br><span class="line"><span class="comment">         * replyText：失败信息</span></span><br><span class="line"><span class="comment">         * exchange：交换机名称</span></span><br><span class="line"><span class="comment">         * routingKey：路由键</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode, String replyText, String exchange, String routingKey)</span> </span>&#123;</span><br><span class="line">            logger.info(<span class="string">"returnedMessage:&#123;&#125;,replyCode:&#123;&#125;,replyText:&#123;&#125;,exchange:&#123;&#125;,routingKey:&#123;&#125;"</span>,</span><br><span class="line">                    <span class="keyword">new</span> String(message.getBody()), replyCode, replyText, exchange, routingKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 消息发送，一般定时任务配合</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 消息发送确认，处理消息到交换机之间的逻辑</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(confirmCallback);</span><br><span class="line">        <span class="comment">// 设为true，消息不会自动删除，而被return消息模式监听</span></span><br><span class="line">        rabbitTemplate.setMandatory(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 消息失败监听，处理交换机到队列之间的逻辑</span></span><br><span class="line">        rabbitTemplate.setReturnCallback(returnCallback);</span><br><span class="line">        <span class="comment">// 生产者JSON数据序列化</span></span><br><span class="line">        rabbitTemplate.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消息发送，标准发送信息和延时发送差异在于MessagePostProcessor</span></span><br><span class="line">        <span class="comment">// rabbitTemplate.convertAndSend(RabbitmqConfig.DELAYED_EXCHANGE,"delayed.boot",message,new CorrelationData(UUID.randomUUID().toString().replace("-","")));</span></span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConfig.DELAYED_EXCHANGE, <span class="string">"delayed.boot"</span>, message, <span class="keyword">new</span> MessagePostProcessor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line">                <span class="comment">// 设置消息持久化</span></span><br><span class="line">                message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);</span><br><span class="line">                <span class="comment">// 设置消息延迟发送时间，单位毫秒ms</span></span><br><span class="line">                message.getMessageProperties().setDelay(<span class="number">6000</span>);</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 消息唯一ID</span></span><br><span class="line">        &#125;, <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ConsumerReceiver</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 消息消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 16:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ConsumerReceiver<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ·<span class="doctag">@RabbitListener</span>可以标注在类上，当在类上时需<span class="doctag">@RabbitHandler</span>配合使用，</span></span><br><span class="line"><span class="comment">     * 如有多个<span class="doctag">@RabbitHandler</span>，根据MessageConverter转换后的对象来匹配哪个方法处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ·<span class="doctag">@RabbitListener</span>(queues = "delayedQueue",containerFactory = "")</span></span><br><span class="line"><span class="comment">     * ·containerFactory：可指定一个RabbitListenerContainerFactory的bean，默认为rabbitListenerContainerFactory的实例</span></span><br><span class="line"><span class="comment">     *  也可在rabbitListenerContainerFactory实例上的<span class="doctag">@Bean</span>注解中标记名称如：<span class="doctag">@Bean</span>("rabbitListenerContainerFactory2")</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"delayedQueue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiverMessage</span><span class="params">(Message msg , Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 应避免脏数据的接收，若数据一直消费失败而退回队列，队列又一直发送数据给消费者，将造成无限循环，导致内存溢出系统崩溃</span></span><br><span class="line">        Order order = JSONObject.parseObject(<span class="keyword">new</span> String(msg.getBody(),<span class="string">"UTF-8"</span>), Order<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        logger.info(<span class="string">"order:&#123;&#125;"</span>,order.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取消息数量，可和批量确认一起使用</span></span><br><span class="line">        <span class="comment">// channel.basicQos(10);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// boolean flag = ****(); 在此做逻辑，返回boolean类型决定消息是走确认机制，还是退回机制</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 确认机制，参数一：消息唯一标识；参数二：是否批量确认，false为不开启</span></span><br><span class="line"><span class="comment">            * 若开启批量确认，最后一条确认的ID，会把之前未确认的消息一并确认</span></span><br><span class="line"><span class="comment">            * 开启批量后需做好幂等性处理，若消息在未确认之前，连接中断会造成重复消费</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            channel.basicAck(msg.getMessageProperties().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">            logger.info(<span class="string">"消费成功，ID:&#123;&#125;"</span>,msg.getMessageProperties().getDeliveryTag());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 退回机制，参数一：唯一标识符；参数二：是否批量退回，false为单条退回；参数三：是否把消息退回队列中，false为废弃消息</span></span><br><span class="line"><span class="comment">            * 若有多个消费者需做好幂等性处理，避免消息重复消费</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            channel.basicNack(msg.getMessageProperties().getDeliveryTag(),<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">            logger.info(<span class="string">"消费失败，ID:&#123;&#125;"</span>,msg.getMessageProperties().getDeliveryTag());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>当然也可以写个测试方法，这里就这样啦</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.component.ProducerSender;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> MessageSendTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 17:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSendTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProducerSender producerSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/delayedSend"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delayedSend</span><span class="params">(@RequestBody Order order)</span></span>&#123;</span><br><span class="line">        producerSender.sendMessage(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/13/zrKMZP7a25FkVpI.png" alt=""></p><h3 id="绑定交换机和队列之间的联系，并配置路由键字符"><a href="#绑定交换机和队列之间的联系，并配置路由键字符" class="headerlink" title="绑定交换机和队列之间的联系，并配置路由键字符"></a>绑定交换机和队列之间的联系，并配置路由键字符</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/13/dhOLK3kyl8SB5Dn.png" alt=""></p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/13/B8p5dejZLf9Miyt.png" alt=""></p><h3 id="6秒后交换机将数据发送到队列，队列即时发送给消费端消费数据"><a href="#6秒后交换机将数据发送到队列，队列即时发送给消费端消费数据" class="headerlink" title="6秒后交换机将数据发送到队列，队列即时发送给消费端消费数据"></a>6秒后交换机将数据发送到队列，队列即时发送给消费端消费数据</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/13/c3jmVPazAlunKrW.png" alt=""></p><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/rabbitmq-delayed-demo" target="_blank" rel="noopener">https://github.com/wangdaicong/spring-boot-project/tree/master/rabbitmq-delayed-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sirongboot </tag>
            
            <tag> rabbitmq </tag>
            
            <tag> 延迟推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>60岁开发者的建议，尝试改变一下吧！</title>
      <link href="/2021/07/01/60%E5%B2%81%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E5%BB%BA%E8%AE%AE%EF%BC%8C%E5%B0%9D%E8%AF%95%E6%94%B9%E5%8F%98%E4%B8%80%E4%B8%8B%E5%90%A7/"/>
      <url>/2021/07/01/60%E5%B2%81%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E5%BB%BA%E8%AE%AE%EF%BC%8C%E5%B0%9D%E8%AF%95%E6%94%B9%E5%8F%98%E4%B8%80%E4%B8%8B%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/e2cf29614c116b67ec89e99f352c232e.png" alt=""></p><p><code>35岁焦虑</code>是程序员间讨论最多的话题之一。</p><p>是不是一直以为这个话题只有我们国内开发者会讨论？</p><p>最近，在国外的reddit上出现了这样一个热门贴：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/77da0dc1a199c8808b29fbc3741e59d2.png" alt=""></p><p>当程序员老了会怎么样？对于45-50岁之间的程序员，你有什么故事和建议吗？对于职业规划方面有什么好的建议吗？</p><p>这些问题相信也是很多开发者想了解的。从这个帖子中，我们发现了很多高年龄程序员的建议，下面跟着小编一起看看有哪些高赞回复吧！</p><h3 id="60多岁的开发者-dhjdhj"><a href="#60多岁的开发者-dhjdhj" class="headerlink" title="60多岁的开发者 @dhjdhj"></a>60多岁的开发者 @dhjdhj</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/0361b348fb1dd6e121dac4a4a997b0a0.png" alt=""></p><p>他给出的建议是：<code>“不惧怕改变，才能长期保持自己的价值”</code>。</p><p>他还分享了自己的职业经历：</p><p>30多岁的时候，他任职于一家大型研究机构，与很多世界著名科学家共事。在一次具有很大挑战的事情上，为了快速解决问题，很多人都被要求参与进去。这里面就有很多人无法适应这样的变化，最终离开了。</p><p>因为这件事的发生，给了他很大的触动，他认为这样的根源是由于那些人无法应对变化的环境导致的（也就是我们常说的）。因此，自从这件事之后，他就开始坚持这两件事：</p><ol><li><code>经常换工具</code>，包括编辑器等各种基础工具。因为如果一直坚守自己已经会的东西，会让自己僵化，甚至对它们产生宗教版的迷恋</li><li><code>关注最新的开发趋势</code>，评估新技术的重要性，选择你认为有价值的东西学习起来</li></ol><h3 id="50多岁的开发者-gilbertron"><a href="#50多岁的开发者-gilbertron" class="headerlink" title="50多岁的开发者 @gilbertron"></a>50多岁的开发者 @gilbertron</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/701d83fb301d5b07fd05a19928f8678e.png" alt=""></p><p> @gilbertron 在 @dhjdhj 回复下的评论也表达了一个值得大家思考的观点，他表示：现在很多人抱怨一些新技术只是在重复发明老技术，人们不会利用那些优秀的老技术。但是，不要去固执的判断某个技术的好坏，好不好应该由行业来判断。开发者要做的就是<code>不断学习，不一定要做第一个使用新技术的人，但绝不要做因为拒绝使用新技术而被淘汰的人！</code></p><h3 id="62岁的开发者-kintotal"><a href="#62岁的开发者-kintotal" class="headerlink" title="62岁的开发者 @kintotal"></a>62岁的开发者 @kintotal</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/2680eb0b714c424926df39fd50418088.png" alt=""></p><p>@kintotal 表示：他一直都在为自己投资教育，先后获得了3个学位，平时还通过各种平台学习课程。他的职业计划是66岁退休，70岁以后还计划以某种身份参与编程或从事咨询的工作。对于45-50岁这个阶段，他认为这依然还是程序员生涯的黄金时期，只要自己能够保持不断学习的状态，那么你就会慢慢好起来！</p><p>对于这些高龄开发者的故事与建议。我们可以发现一个共同点，那就是：<code>持续学习，投资自己，拥抱变化！</code>说白了，就是要紧跟技术的发展，保持个人的技术价值！那么，你觉得这些建议是不是现在焦虑的原因呢？你觉得自己的程序员生涯可以做到多少岁呢？留言说说你的观点吧！</p><blockquote><p>原文：<a href="https://www.reddit.com/r/programming/comments/nytzaz/what_happens_to_a_programmers_career_as_he_gets/" target="_blank" rel="noopener">https://www.reddit.com/r/programming/comments/nytzaz/what_happens_to_a_programmers_career_as_he_gets/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举，你了解它吗？</title>
      <link href="/2021/04/30/%E6%9E%9A%E4%B8%BE%EF%BC%8C%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%AE%83%E5%90%97/"/>
      <url>/2021/04/30/%E6%9E%9A%E4%B8%BE%EF%BC%8C%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%AE%83%E5%90%97/</url>
      
        <content type="html"><![CDATA[<p>枚举是 JDK 1.5 新增的数据类型，使用枚举我们可以很好的描述一些特定的业务场景，比如一年中的春、夏、秋、冬，还有每周的周一到周天，还有各种颜色，以及可以用它来描述一些状态信息，比如错误码等。</p><p>枚举类型不止存在在 Java 语言中，在其它语言中也都能找到它的身影，例如 C# 和 Python 等，但我发现在实际的项目中使用枚举的人很少，所以本文就来聊一聊枚举的相关内容，好让朋友们对枚举有一个大概的印象，这样在编程时起码还能想到有“枚举”这样一个类型。</p><p>本文的结构目录如下：<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/04/30/hILQroPBSkVuM7q.jpg" alt=""></p><h1 id="枚举的-7-种使用方法"><a href="#枚举的-7-种使用方法" class="headerlink" title="枚举的 7 种使用方法"></a>枚举的 7 种使用方法</h1><p>很多人不使用枚举的一个重要的原因是对枚举不够熟悉，那么我们就先从枚举的 7 种使用方法说起。</p><h2 id="用法一：常量"><a href="#用法一：常量" class="headerlink" title="用法一：常量"></a>用法一：常量</h2><p>在 JDK 1.5 之前，我们定义常量都是 public static final… ，但有了枚举，我们就可以把这些常量定义成一个枚举类了，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ColorEnum &#123;  </span><br><span class="line">  RED, GREEN, BLANK, YELLOW  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用法二：switch"><a href="#用法二：switch" class="headerlink" title="用法二：switch"></a>用法二：switch</h2><p>将枚举用在 switch 判断中，使得代码可读性更高了，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ColorEnum &#123;</span><br><span class="line">    GREEN, YELLOW, RED</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorTest</span> </span>&#123;</span><br><span class="line">    ColorEnum color = ColorEnum.RED;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">            <span class="keyword">case</span> RED:</span><br><span class="line">                color = ColorEnum.GREEN;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> YELLOW:</span><br><span class="line">                color = ColorEnum.RED;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> GREEN:</span><br><span class="line">                color = ColorEnum.YELLOW;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用法三：枚举中增加方法"><a href="#用法三：枚举中增加方法" class="headerlink" title="用法三：枚举中增加方法"></a>用法三：枚举中增加方法</h2><p>我们可以在枚举中增加一些方法，让枚举具备更多的特性，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ErrorCodeEnum &#123;</span><br><span class="line">    SUCCESS(<span class="number">1000</span>, <span class="string">"success"</span>),</span><br><span class="line">    PARAM_ERROR(<span class="number">1001</span>, <span class="string">"parameter error"</span>),</span><br><span class="line">    SYS_ERROR(<span class="number">1003</span>, <span class="string">"system error"</span>),</span><br><span class="line">    NAMESPACE_NOT_FOUND(<span class="number">2001</span>, <span class="string">"namespace not found"</span>),</span><br><span class="line">    NODE_NOT_EXIST(<span class="number">3002</span>, <span class="string">"node not exist"</span>),</span><br><span class="line">    NODE_ALREADY_EXIST(<span class="number">3003</span>, <span class="string">"node already exist"</span>),</span><br><span class="line">    UNKNOWN_ERROR(<span class="number">9999</span>, <span class="string">"unknown error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    ErrorCodeEnum(<span class="keyword">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">msg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ErrorCodeEnum <span class="title">getErrorCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ErrorCodeEnum it : ErrorCodeEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it.code() == code) &#123;</span><br><span class="line">                <span class="keyword">return</span> it;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ErrorCodeEnum errorCode = ErrorCodeEnum.SUCCESS;</span><br><span class="line">        System.out.println(<span class="string">"状态码："</span> + errorCode.code() + </span><br><span class="line">                           <span class="string">" 状态信息："</span> + errorCode.msg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>状态码：1000 状态信息：success</p></blockquote><h2 id="用法四：覆盖枚举方法"><a href="#用法四：覆盖枚举方法" class="headerlink" title="用法四：覆盖枚举方法"></a>用法四：覆盖枚举方法</h2><p>我们可以覆盖一些枚举中的方法用于实现自己的业务，比如我们可以覆盖 toString() 方法，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ColorEnum &#123;</span><br><span class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLOW(<span class="string">"黄色"</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="comment">//  成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ColorEnum</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//覆盖方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.index + <span class="string">"："</span> + <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ColorEnum colorEnum = ColorEnum.RED;</span><br><span class="line">        System.out.println(colorEnum.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1：红色</p></blockquote><h2 id="用法五：实现接口"><a href="#用法五：实现接口" class="headerlink" title="用法五：实现接口"></a>用法五：实现接口</h2><p>枚举类可以用来实现接口，但不能用于继承类，因为枚举默认继承了 java.lang.Enum 类，在 Java 语言中允许实现多接口，但不能继承多个父类，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Behaviour</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ColorEnum implements Behaviour &#123;</span><br><span class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLOW(<span class="string">"黄色"</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ColorEnum</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.index + <span class="string">"："</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ColorEnum colorEnum = ColorEnum.RED;</span><br><span class="line">        colorEnum.print();</span><br><span class="line">        System.out.println(<span class="string">"颜色："</span> + colorEnum.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1：红色<br>颜色：红色</p></blockquote><h2 id="用法六：在接口中组织枚举类"><a href="#用法六：在接口中组织枚举类" class="headerlink" title="用法六：在接口中组织枚举类"></a>用法六：在接口中组织枚举类</h2><p>我们可以在一个接口中创建多个枚举类，用它可以很好的实现“多态”，也就是说我们可以将拥有相同特性，但又有细微实现差别的枚举类聚集在一个接口中，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ColorInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> ColorEnum implements ColorInterface &#123;</span><br><span class="line">        GREEN, YELLOW, RED</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">enum</span> NewColorEnum implements ColorInterface &#123;</span><br><span class="line">        NEW_GREEN, NEW_YELLOW, NEW_RED</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 赋值第一个枚举类</span></span><br><span class="line">        ColorInterface colorEnum = ColorInterface.ColorEnum.RED;</span><br><span class="line">        System.out.println(colorEnum);</span><br><span class="line">        <span class="comment">// 赋值第二个枚举类</span></span><br><span class="line">        colorEnum = ColorInterface.NewColorEnum.NEW_RED;</span><br><span class="line">        System.out.println(colorEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>RED<br>NEW_RED</p></blockquote><h2 id="用法七：使用枚举集合"><a href="#用法七：使用枚举集合" class="headerlink" title="用法七：使用枚举集合"></a>用法七：使用枚举集合</h2><p>在 Java 语言中和枚举类相关的，还有两个枚举集合类 java.util.EnumSet 和 java.util.EnumMap，使用它们可以实现更多的功能。</p><p>使用 EnumSet 可以保证元素不重复，并且能获取指定范围内的元素，示例代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ColorEnum &#123;</span><br><span class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLOW(<span class="string">"黄色"</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ColorEnum</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ErrorCodeEnum &#123;</span><br><span class="line">    SUCCESS(<span class="number">1000</span>, <span class="string">"success"</span>),</span><br><span class="line">    ERROR(<span class="number">2001</span>, <span class="string">"parameter error"</span>),</span><br><span class="line">    SYS_ERROR(<span class="number">2002</span>, <span class="string">"system error"</span>),</span><br><span class="line">    NAMESPACE_NOT_FOUND(<span class="number">2003</span>, <span class="string">"namespace not found"</span>),</span><br><span class="line">    NODE_NOT_EXIST(<span class="number">3002</span>, <span class="string">"node not exist"</span>),</span><br><span class="line">    NODE_ALREADY_EXIST(<span class="number">3003</span>, <span class="string">"node already exist"</span>),</span><br><span class="line">    UNKNOWN_ERROR(<span class="number">9999</span>, <span class="string">"unknown error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ErrorCodeEnum</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">msg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;ColorEnum&gt; list = <span class="keyword">new</span> ArrayList&lt;ColorEnum&gt;();</span><br><span class="line">        list.add(ColorEnum.RED);</span><br><span class="line">        list.add(ColorEnum.RED);  <span class="comment">// 重复元素</span></span><br><span class="line">        list.add(ColorEnum.YELLOW);</span><br><span class="line">        list.add(ColorEnum.GREEN);</span><br><span class="line">        <span class="comment">// 去掉重复数据</span></span><br><span class="line">        EnumSet&lt;ColorEnum&gt; enumSet = EnumSet.copyOf(list);</span><br><span class="line">        System.out.println(<span class="string">"去重："</span> + enumSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定范围的枚举（获取所有的失败状态）</span></span><br><span class="line">        <span class="comment">// range():创建一个枚举集，并在给定的st(开始位置)和en(结束位置)范围内获取元素。</span></span><br><span class="line">        EnumSet&lt;ErrorCodeEnum&gt; errorCodeEnums = EnumSet.range(ErrorCodeEnum.ERROR, ErrorCodeEnum.UNKNOWN_ERROR);</span><br><span class="line">        System.out.println(<span class="string">"所有失败状态："</span> + errorCodeEnums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>去重：[RED, GREEN, YELLOW]<br>所有失败状态：[ERROR, SYS_ERROR, NAMESPACE_NOT_FOUND, NODE_NOT_EXIST, NODE_ALREADY_EXIST, UNKNOWN_ERROR]</p></blockquote><p><code>EnumMap 与 HashMap 类似，不过它是一个专门为枚举设计的 Map 集合，相比 HashMap 来说它的性能更高，因为它内部放弃使用链表和红黑树的结构，采用数组作为数据存储的结构。</code></p><p>EnumMap 基本使用示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> ColorEnum &#123;</span><br><span class="line">    RED, GREEN, BLANK, YELLOW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.EnumMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EnumMap&lt;ColorEnum, String&gt; enumMap = <span class="keyword">new</span> EnumMap&lt;&gt;(ColorEnum<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        enumMap.put(ColorEnum.RED, <span class="string">"红色"</span>);</span><br><span class="line">        enumMap.put(ColorEnum.GREEN, <span class="string">"绿色"</span>);</span><br><span class="line">        enumMap.put(ColorEnum.BLANK, <span class="string">"白色"</span>);</span><br><span class="line">        enumMap.put(ColorEnum.YELLOW, <span class="string">"黄色"</span>);</span><br><span class="line">        System.out.println(ColorEnum.RED + <span class="string">":"</span> + enumMap.get(ColorEnum.RED));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>RED:红色</p></blockquote><h1 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h1><p>阿里《Java开发手册》对枚举的相关规定如下，我们在使用时需要稍微注意一下。</p><blockquote><p>【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。<br>【参考】枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br>说明：枚举其实就是特殊的常量类，<code>且构造方法被默认强制是私有</code>。<br>正例：枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS / UNKNOWN_REASON。</p></blockquote><h1 id="假如不使用枚举"><a href="#假如不使用枚举" class="headerlink" title="假如不使用枚举"></a>假如不使用枚举</h1><p>在枚举没有诞生之前，也就是 JDK 1.5 版本之前，我们通常会使用 int 常量来表示枚举，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COLOR_RED = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COLOR_BLUE = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COLOR_GREEN = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>但是使用 int 类型可能存在两个问题：</p><blockquote><ol><li>int 类型本身并不具备安全性，假如某个程序员在定义 int 时少些了一个 final关键字，那么就会存在被其他人修改的风险，而反观枚举类，它“天然”就是一个常量类，不存在被修改的风险（原因详见下半部分）；</li><li>使用 int 类型的语义不够明确，比如我们在控制台打印时如果只输出 1…2…3这样的数字，我们肯定不知道它代表的是什么含义。</li></ol></blockquote><p>那有人就说了，那就使用常量字符呗，这总不会还不知道语义吧？实现示例代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLOR_RED = <span class="string">"RED"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLOR_BLUE = <span class="string">"BLUE"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLOR_GREEN = <span class="string">"GREEN"</span>;</span><br></pre></td></tr></table></figure><p>但是这样同样存在一个问题，有些初级程序员会不按套路出牌，他们可能会直接使用字符串的值进行比较，而不是直接使用枚举的字段，实现示例代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLOR_RED = <span class="string">"RED"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLOR_BLUE = <span class="string">"BLUE"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLOR_GREEN = <span class="string">"GREEN"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String color = <span class="string">"BLUE"</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"BLUE"</span>.equals(color)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"蓝色"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样当我们修改了枚举中的值，那程序就凉凉了。</p><h1 id="枚举使用场景"><a href="#枚举使用场景" class="headerlink" title="枚举使用场景"></a>枚举使用场景</h1><p>枚举的常见使用场景是<code>单例</code>，它的完整实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 枚举类型是线程安全的，并且只会装载一次</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> SingletonEnum &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 声明单例对象</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Singleton instance;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 实例化</span></span><br><span class="line">        SingletonEnum() &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取实例（单例对象）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonEnum.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hi,Java."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton singleton = Singleton.getInstance();</span><br><span class="line">        singleton.sayHi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为枚举只会在类加载时装载一次，所以它是线程安全的，这也是《Effective Java》作者极力推荐使用枚举来实现单例的主要原因。</p><h1 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h1><h2 id="枚举为什么是线程安全的？"><a href="#枚举为什么是线程安全的？" class="headerlink" title="枚举为什么是线程安全的？"></a>枚举为什么是线程安全的？</h2><p>这一点要从枚举最终生成的字节码说起，首先我们先来定义一个简单的枚举类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ColorEnumTest &#123;</span><br><span class="line">    RED, GREEN, BLANK, YELLOW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们再将上面的那段代码编译为字节码，具体内容如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorEnumTest</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Enum</span>&lt;<span class="title">ColorEnumTest</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ColorEnumTest RED;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ColorEnumTest GREEN;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ColorEnumTest BLANK;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ColorEnumTest YELLOW;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ColorEnumTest[] values();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ColorEnumTest <span class="title">valueOf</span><span class="params">(java.lang.String)</span></span>;</span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述结果可以看出<code>枚举类最终会被编译为被 final 修饰的普通类，它的所有属性也都会被 static 和 final 关键字修饰，所以枚举类在项目启动时就会被 JVM 加载并初始化，而这个执行过程是线程安全的，所以枚举类也是线程安全的类。</code></p><blockquote><p>小贴士：代码反编译的过程是先用 javac 命令将 java 代码编译字节码（.class），再使用 javap 命令查看编译的字节码。</p></blockquote><h2 id="枚举比较小技巧"><a href="#枚举比较小技巧" class="headerlink" title="枚举比较小技巧"></a>枚举比较小技巧</h2><p>我们在枚举比较时使用 == 就够了，因为枚举类是在程序加载时就创建了（它并不是 new 出来的），并且枚举类不允许在外部直接使用 new 关键字来创建枚举实例，所以我们在使用枚举类时本质上只有一个对象，因此在枚举比较时使用 == 就够了。</p><p>并且我们在查看枚举的 equlas() 源码会发现，它的内部其实还是直接调用了 == 方法，源码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>==other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文我们介绍了枚举类的 7 种使用方法：常量、switch、枚举中添加方法、覆盖枚举方法、实现接口、在接口中组织枚举类和使用枚举集合等，然后讲了如果不使用枚举类使用 int 类型和 String 类型存在的一些弊端：语义不够清晰、容易被修改、存在被误用的风险，所以我们在适合的环境下应该尽量使用枚举类。并且我们还讲了枚举类的使用场景–单例，以及枚举类为什么是安全的，最后我们讲了枚举比较的小技巧，希望本文对你有帮助。</p><blockquote><p>原文：<a href="https://mp.weixin.qq.com/s/HDotguLpNgtwK-Jz2UsODQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/HDotguLpNgtwK-Jz2UsODQ</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非对称加密RSA与对称加密AES项目应用</title>
      <link href="/2021/04/13/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86RSA%E4%B8%8E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86AES%E9%A1%B9%E7%9B%AE%E5%BA%94%E7%94%A8/"/>
      <url>/2021/04/13/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86RSA%E4%B8%8E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86AES%E9%A1%B9%E7%9B%AE%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在项目中，为了保证数据的安全，我们常常会对传递的数据进行加密。常用的加密算法有对称加密（AES）和非对称加密（RSA）。</p><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><h3 id="AES加密算法"><a href="#AES加密算法" class="headerlink" title="AES加密算法"></a>AES加密算法</h3><p>对称加密就是指，加密和解密使用同一个密钥的加密方式；加密计算量小、速度块，适合对大量数据进行加密的场景。AES取代DES成为加密标准<code>(微信小程序加密传输就是用这个加密算法的)</code>。</p><h3 id="AES加密的五个关键词"><a href="#AES加密的五个关键词" class="headerlink" title="AES加密的五个关键词"></a>AES加密的五个关键词</h3><ul><li><p>分组密码体制</p><blockquote><p>AES采用分组密码体制，即AES加密会首先把明文切成一段一段的，而且每段数据的长度要求必须是128位16个字节，如果最后一段不够16个字节了，就需要用Padding来把这段数据填满16个字节，然后分别对每段数据进行加密，最后再把每段加密数据拼起来形成最终的密文。</p></blockquote></li><li><p>Padding</p><blockquote><p>Padding就是用来把不满16个字节的分组数据填满16个字节用的，它有三种模式PKCS5、PKCS7和NOPADDING。解密端需要使用和加密端同样的Padding模式，才能准确的识别有效数据和填充数据。开发通常采用PKCS7 Padding模式。</p></blockquote></li><li><p>初始向量IV</p><blockquote><p>初始向量IV的作用是使加密更加安全可靠，我们使用AES加密时需要主动提供初始向量，而且只需要提供一个初始向量就够了，后面每段数据的加密向量都是前面一段的密文。初始向量IV的长度规定为128位16个字节，初始向量的来源为随机生成。</p></blockquote></li><li><p>密钥</p><blockquote><p>开发通常采用128位16个字节的密钥，我们使用AES加密时需要主动提供密钥，而且只需要提供一个密钥就够了，每段数据加密使用的都是这一个密钥，密钥来源为随机生成。</p></blockquote></li><li><p>四种加密模式</p><blockquote><p>AES一共有四种加密模式，分别是ECB（电子密码本模式）、CBC（密码分组链接模式）、CFB、OFB，一般使用的是ECB、CBC模式</p></blockquote></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>服务端和我们客户端必须使用一样的密钥和初始向量IV。</li><li>服务端和我们客户端必须使用一样的加密模式。</li><li>服务端和我们客户端必须使用一样的Padding模式。<br><code>以上三条有一个不满足，双方就无法完成互相加解密。</code></li></ol><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><h3 id="RSA加密算法"><a href="#RSA加密算法" class="headerlink" title="RSA加密算法"></a>RSA加密算法</h3><p>RSA加密是一种非对称加密。可以在不直接传递密钥的情况下，完成解密。这能够确保信息的安全性，避免了直接传递密钥所造成的被破解的风险。<br>RSA是由一对密钥来进行加解密的过程，分别称为公钥和私钥。两者之间有数学相关，该加密算法的原理就是对一极大整数做因数分解的困难性来保证安全性。通常个人保存私钥，公钥是公开的（可能同时多人持有）。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20201108110852897.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmtleXRv,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="RSA签名"><a href="#RSA签名" class="headerlink" title="RSA签名"></a>RSA签名</h3><p>加密和签名都是为了安全性考虑，但略有不同。常有人问加密和签名是用私钥还是公钥？其实都是对加密和签名的作用有所混淆。简单的说，<code>加密是为了防止信息被泄露，而签名是为了防止信息被篡改</code>。这里举2个例子说明。</p><h4 id="第一个场景"><a href="#第一个场景" class="headerlink" title="第一个场景"></a>第一个场景</h4><p>B<code>(客户端)</code>要给A<code>(服务器)</code>传递一条重要消息。</p><p>RSA的加密过程如下：</p><blockquote><ol><li>A生成一对密钥（公钥和私钥），私钥不公开，A自己保留。公钥为公开的，任何人可以获取。</li><li>A传递自己的公钥给B，B用A的公钥对消息进行加密。</li><li>A接收到B加密的消息，利用A自己的私钥对消息进行解密。</li></ol></blockquote><p>在整个过程中，只有2次传递过程，第一次是A传递公钥给B，第二次是B用公钥加密消息传递给A，即使都被敌方截获，也没有危险性，因为<code>只有A的私钥才能对消息进行解密</code>，防止了消息内容的泄露。</p><h4 id="第二个场景"><a href="#第二个场景" class="headerlink" title="第二个场景"></a>第二个场景</h4><p>A<code>(服务器)</code>收到B<code>(客户端)</code>发的消息后，需要进行<code>回复“收到”</code>。</p><p>RSA签名的过程如下：</p><blockquote><ol><li>A生成一对密钥（公钥和私钥），私钥不公开，A自己保留。公钥为公开的，任何人可以获取。</li><li>A用自己的私钥对消息加签，形成签名，并将加签的消息和消息<code>(加密后的信息)</code>本身一起传递给B。</li><li>B收到消息后，在获取A的公钥进行验签，如果验签出来的内容与消息本身一致，证明消息是A回复的。</li></ol></blockquote><p>在整个过程中，只有2次传递过程，第一次是A传递加签的消息和消息<code>(加密后的信息)</code>本身给B，第二次是B获取A的公钥，即使都被敌方截获，也没有危险性，因为只有A的私钥才能对消息进行签名；即使知道了消息内容<code>(加密后的信息)</code>，也无法伪造带签名的回复给B，防止了消息内容的篡改。</p><h3 id="存在的缺陷"><a href="#存在的缺陷" class="headerlink" title="存在的缺陷"></a>存在的缺陷</h3><p>综合两个场景你会发现：</p><blockquote><ol><li>第一个场景虽然被截获的消息没有泄露，但是黑客可以利用截获的公钥，将假信息进行加密，然后传递给A。</li><li>第二个场景虽然截获的消息不能被篡改，但是消息的内容可以利用公钥解密来获得，并不能防止泄露。</li></ol></blockquote><p>所以在实际应用中，要根据情况灵活使用，可以同时使用加密和签名，也可以A和B都有一套自己的公钥和私钥(<code>这里的A、B指服务端，前端的话不安全</code>)，当A要给B发送消息时，先用B的公钥对消息加密，再对加密的消息使用A的私钥来加签名，达到既不泄露也不被篡改，更能保证消息的安全性。</p><h2 id="项目详情"><a href="#项目详情" class="headerlink" title="项目详情"></a>项目详情</h2><h3 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.goitman<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rsa-encrypt-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Web 项目开发starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--RSA加解密依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.shuibo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rsa-encrypt-body-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok 简化插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rsa:</span></span><br><span class="line">  <span class="attr">encrypt:</span></span><br><span class="line">    <span class="attr">open:</span> <span class="literal">true</span> <span class="comment"># 是否开启加密 true  or  false</span></span><br><span class="line">    <span class="attr">showLog:</span> <span class="literal">true</span> <span class="comment"># 是否打印加解密log true  or  false</span></span><br><span class="line">    <span class="comment"># RSA公钥 java生成</span></span><br><span class="line">    <span class="attr">publicKey:</span> </span><br><span class="line">    <span class="comment"># RSA私钥 java生成</span></span><br><span class="line">    <span class="attr">privateKey:</span></span><br></pre></td></tr></table></figure><p><code>RSA公私钥生成工具在后续工具类中</code></p><h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.shuibo.annotation.EnableSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RsaEncryptApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 启动引导类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/2 16:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableSecurity</span> <span class="comment">// 启用加解密注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaEncryptApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(RsaEncryptApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Consumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/2 16:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><p><code>由于RSA的特性，一个1024位的密钥只能加密117位字节数据和解密128位字节数据，当数据量超过117位字节或128位字节的时候，程序就会抛出异常</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> CreateRsaSecrteKeyUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 生成RSA公钥私钥，RSA与AES加解密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/2 15:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateRsaSecrteKeyUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PUBLIC_KEY = <span class="string">"RSAPublicKey"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRIVATE_KEY = <span class="string">"RSAPrivateKey"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA算法名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RSA_ALGORITHM = <span class="string">"RSA"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA填充算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RSA_PADDING_ALGORITHM = <span class="string">"RSA/ECB/PKCS1Padding"</span>;</span><br><span class="line"><span class="comment">//    public static final String RSA_PADDING_ALGORITHM = "RSA/CBC/PKCS1Padding";</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA加签算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SIGNATURE_ALGORITHM = <span class="string">"MD5withRSA"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA最大加密明文大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ENCRYPT_BLOCK = <span class="number">117</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA最大解密密文大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_DECRYPT_BLOCK = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编码方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String UTF_8 = <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AES算法名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AES_ALGORITHM = <span class="string">"AES"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AES填充算法</span></span><br><span class="line"><span class="comment">//    public static final String AES_PADDING_ALGORITHM = "AES/ECB/PKCS5Padding";</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AES_PADDING_ALGORITHM = <span class="string">"AES/CBC/PKCS5Padding"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     只有在填充算法模式为CBC时才使用</span></span><br><span class="line"><span class="comment">     初始向量，不可以为32位，只能为数字或字母</span></span><br><span class="line"><span class="comment">     否则异常java.security.InvalidAlgorithmParameterException: Wrong IV length: must be 16 bytes long</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String iv = <span class="string">"初始向量"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * map对象中存放公私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">initKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获得对象 KeyPairGenerator 参数 RSA</span></span><br><span class="line">        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(RSA_ALGORITHM);</span><br><span class="line">        <span class="comment">// keysize：表示的是生成key的长度，单位字节(bits，64的整数倍,最小512位)</span></span><br><span class="line">        <span class="comment">// 如果采用2048，上面最大加密和最大解密则为:245、256</span></span><br><span class="line">        keyPairGen.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//通过对象 KeyPairGenerator 获取对象KeyPair</span></span><br><span class="line">        KeyPair keyPair = keyPairGen.generateKeyPair();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过对象 KeyPair 获取RSA公私钥对象RSAPublicKey RSAPrivateKey</span></span><br><span class="line">        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line">        <span class="comment">//公私钥对象存入map中</span></span><br><span class="line">        Map&lt;String, Object&gt; keyMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;(<span class="number">2</span>);</span><br><span class="line">        keyMap.put(PUBLIC_KEY, publicKey);</span><br><span class="line">        keyMap.put(PRIVATE_KEY, privateKey);</span><br><span class="line">        <span class="keyword">return</span> keyMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPublicKey</span><span class="params">(Map&lt;String, Object&gt; keyMap)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获得map中的公钥对象 转为key对象</span></span><br><span class="line">        Key key = (Key) keyMap.get(PUBLIC_KEY);</span><br><span class="line">        <span class="keyword">return</span> encryptBASE64(key.getEncoded());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPrivateKey</span><span class="params">(Map&lt;String, Object&gt; keyMap)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获得map中的私钥对象 转为key对象</span></span><br><span class="line">        Key key = (Key) keyMap.get(PRIVATE_KEY);</span><br><span class="line">        <span class="keyword">return</span> encryptBASE64(key.getEncoded());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [key 字符串]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> decryptBASE64</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> BASE64字符串解码为二进制数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decryptBASE64(String key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> BASE64Decoder()).decodeBuffer(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [key 字节数组]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> encryptBASE64</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 二进制数据编码为BASE64字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptBASE64</span><span class="params">(<span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> BASE64Encoder()).encodeBuffer(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [data 需加密数据, publicKey 公钥]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> encryptRSADatePub</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 分段公钥加密数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptRSADate</span><span class="params">(String data, String publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] dataByte = data.getBytes();</span><br><span class="line">            <span class="keyword">byte</span>[] keyBytes = decryptBASE64(publicKey);</span><br><span class="line">            X509EncodedKeySpec x509KeySpec = <span class="keyword">new</span> X509EncodedKeySpec(keyBytes);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(RSA_ALGORITHM);</span><br><span class="line">            Key publicK = keyFactory.generatePublic(x509KeySpec);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(RSA_PADDING_ALGORITHM);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, publicK);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            IvParameterSpec ivp = new IvParameterSpec(iv.getBytes());</span></span><br><span class="line"><span class="comment">//            cipher.init(Cipher.ENCRYPT_MODE, publicK, ivp);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分段加密</span></span><br><span class="line">            <span class="keyword">int</span> inputLen = dataByte.length;</span><br><span class="line">            ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> offSet = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] cache;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段加密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) &#123;</span><br><span class="line">                    cache = cipher.doFinal(dataByte, offSet, MAX_ENCRYPT_BLOCK);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cache = cipher.doFinal(dataByte, offSet, inputLen - offSet);</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_ENCRYPT_BLOCK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span>[] encryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="keyword">return</span> encryptBASE64(encryptedData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [data 需解密数据, privateKey 私钥]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> decryptRSADate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 分段解密数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptRSADate</span><span class="params">(String data, String privateKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] dataByte = decryptBASE64(data);</span><br><span class="line">            <span class="keyword">byte</span>[] keyBytes = decryptBASE64(privateKey);</span><br><span class="line">            PKCS8EncodedKeySpec pkcs8KeySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(keyBytes);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(RSA_ALGORITHM);</span><br><span class="line">            Key privateK = keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(RSA_PADDING_ALGORITHM);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, privateK);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            IvParameterSpec ivp = new IvParameterSpec(iv.getBytes());</span></span><br><span class="line"><span class="comment">//            cipher.init(Cipher.DECRYPT_MODE, privateK, ivp);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分段解密</span></span><br><span class="line">            <span class="keyword">int</span> inputLen = dataByte.length;</span><br><span class="line">            ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> offSet = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] cache;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段解密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) &#123;</span><br><span class="line">                    cache = cipher</span><br><span class="line">                            .doFinal(dataByte, offSet, MAX_DECRYPT_BLOCK);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cache = cipher</span><br><span class="line">                            .doFinal(dataByte, offSet, inputLen - offSet);</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_DECRYPT_BLOCK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span>[] decryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(decryptedData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [data 签名数据, privateKey 私钥]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> sign</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String data, String privateKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// String转私钥对象</span></span><br><span class="line">            <span class="keyword">byte</span>[] keyBytes = decryptBASE64(privateKey);</span><br><span class="line">            PKCS8EncodedKeySpec keySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(keyBytes);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(RSA_ALGORITHM);</span><br><span class="line">            PrivateKey privateK = keyFactory.generatePrivate(keySpec);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取加签对象</span></span><br><span class="line">            Signature sig = Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class="line">            sig.initSign(privateK);</span><br><span class="line">            sig.update(data.getBytes(UTF_8));</span><br><span class="line">            <span class="keyword">return</span> encryptBASE64(sig.sign());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [data 验签数据, sign 签名, publicKey 公钥]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> verify</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 验签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String data, String sign, String publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// String转公钥对象</span></span><br><span class="line">            <span class="keyword">byte</span>[] keyBytes = decryptBASE64(publicKey);</span><br><span class="line">            X509EncodedKeySpec keySpec = <span class="keyword">new</span> X509EncodedKeySpec(keyBytes);</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(RSA_ALGORITHM);</span><br><span class="line">            PublicKey publicK = keyFactory.generatePublic(keySpec);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取加签对象</span></span><br><span class="line">            Signature sig = Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class="line">            sig.initVerify(publicK);</span><br><span class="line">            sig.update(data.getBytes(UTF_8));</span><br><span class="line">            <span class="keyword">return</span> sig.verify(decryptBASE64(sign));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span>  encryptAES</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>  AES 加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [context 明文, key 密钥8位的倍数，建议16位]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptAES</span><span class="params">(String context, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] decode = context.getBytes(UTF_8);</span><br><span class="line">            Key secretKeySpec = <span class="keyword">new</span> SecretKeySpec(key.getBytes(UTF_8), AES_ALGORITHM);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(AES_PADDING_ALGORITHM);</span><br><span class="line"><span class="comment">//            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);</span></span><br><span class="line"></span><br><span class="line">            IvParameterSpec ivp = <span class="keyword">new</span> IvParameterSpec(iv.getBytes());</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivp);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Base64.encodeBase64String(cipher.doFinal(decode));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span>  decryptAES</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>  AES 解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [context 密文, key 密钥8位的倍数，建议16位]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptAES</span><span class="params">(String context, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] decode = Base64.decodeBase64(context);</span><br><span class="line">            Key secretKeySpec = <span class="keyword">new</span> SecretKeySpec(key.getBytes(UTF_8), AES_ALGORITHM);</span><br><span class="line">            Cipher cipher = Cipher.getInstance(AES_PADDING_ALGORITHM);</span><br><span class="line"><span class="comment">//            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);</span></span><br><span class="line"></span><br><span class="line">            IvParameterSpec ivp = <span class="keyword">new</span> IvParameterSpec(iv.getBytes());</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivp);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(cipher.doFinal(decode), UTF_8);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> randomKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 创建字符串密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">randomKey</span><span class="params">(<span class="keyword">int</span> lenght)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">char</span>[] c = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="string">'0'</span>; i &lt;= <span class="string">'9'</span>; i++) &#123;</span><br><span class="line">            str += (<span class="keyword">char</span>) i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="string">'A'</span>; i &lt;= <span class="string">'Z'</span>; i++) &#123;</span><br><span class="line">            str += (<span class="keyword">char</span>) i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">short</span> i = <span class="string">'a'</span>; i &lt;= <span class="string">'z'</span>; i++) &#123;</span><br><span class="line">            str += (<span class="keyword">char</span>) i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c = <span class="keyword">new</span> <span class="keyword">char</span>[lenght];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = (<span class="keyword">int</span>) (Math.random() * str.length());</span><br><span class="line">            c[i] = str.charAt(index);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"密钥："</span> + <span class="keyword">new</span> String(c) + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; keyMap;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keyMap = initKey();</span><br><span class="line">            String publicKey = getPublicKey(keyMap);</span><br><span class="line">            System.out.println(<span class="string">"公钥："</span> + publicKey + <span class="string">"\n"</span>);</span><br><span class="line">            String privateKey = getPrivateKey(keyMap);</span><br><span class="line">            System.out.println(<span class="string">"私钥："</span> + privateKey + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"===================先加密再加签==================="</span>);</span><br><span class="line">            String str = <span class="string">"签名内容！"</span>;</span><br><span class="line">            <span class="comment">// 公钥加密</span></span><br><span class="line">            String encryptData = encryptRSADate(str, publicKey);</span><br><span class="line">            System.out.println(<span class="string">"公钥加密："</span> + encryptData + <span class="string">"\n"</span>);</span><br><span class="line">            <span class="comment">// 私钥对密文加签</span></span><br><span class="line">            String sign = sign(encryptData, privateKey);</span><br><span class="line">            System.out.println(<span class="string">"加签后："</span> + sign + <span class="string">"\n"</span>);</span><br><span class="line">            <span class="comment">// 公钥对密文验签</span></span><br><span class="line">            <span class="keyword">boolean</span> verify = verify(encryptData, sign, publicKey);</span><br><span class="line">            System.out.println(<span class="string">"验签情况："</span> + verify + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 私钥解密</span></span><br><span class="line">            String decryptData = decryptRSADate(<span class="string">"WXpNTk5yTU90NHJiQWwyZlBzNnJKdC9ZWk80YUJyWiswS1orUjR1clYxa2JuVVJRNnN0eUh4ekNVQlM0cFUxK3R6dU1PYVlsZkZQM2ZHaHB4VXNPbFRRbXZwWithUjVVZWtLVWRic2hqV0FweUpkNDZaLy9XTnVLMk9uYmhTMGdWMkZIK1NHUlc4L0dnR2ZPdmpOVjJrYmkzS25aQWdkUFRKT3NwTlowQ0owPQ=="</span>, privateKey);</span><br><span class="line">            System.out.println(<span class="string">"私钥解密："</span> + decryptData);</span><br><span class="line"></span><br><span class="line">            System.out.println(randomKey(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="控制层类"><a href="#控制层类" class="headerlink" title="控制层类"></a>控制层类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Consumer;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.util.CreateRsaSecrteKeyUtil;</span><br><span class="line"><span class="keyword">import</span> cn.shuibo.annotation.Decrypt;</span><br><span class="line"><span class="keyword">import</span> cn.shuibo.annotation.Encrypt;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RsaCotroller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/2 16:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaCotroller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;rsa.encrypt.privateKey&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;rsa.encrypt.publicKey&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Encrypt</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/encrypt"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encrypt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(<span class="string">"注解加密用户"</span>, <span class="string">"注解加密密码"</span>);</span><br><span class="line">        <span class="keyword">return</span> consumer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Decrypt</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/decrypt"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decrypt</span><span class="params">(@RequestBody Consumer consumer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> consumer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手工加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/encryption"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encryption</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(<span class="string">"手工加密用户"</span>, <span class="string">"手工加密密码"</span>);</span><br><span class="line">        <span class="comment">// 因前端传送的是JSON数据，所以需先将对象转为JSON后，再加密</span></span><br><span class="line">        <span class="keyword">return</span> CreateRsaSecrteKeyUtil.encryptRSADate(JSON.toJSONString(consumer), publicKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/decryption"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decryption</span><span class="params">(@RequestBody String str)</span> </span>&#123;</span><br><span class="line">        Consumer consumer = JSON.parseObject(CreateRsaSecrteKeyUtil.decryptRSADate(str, privateKey), Consumer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> consumer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手工加密加签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/signature"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">signature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(<span class="string">"手工加密加签"</span>, <span class="string">"手工加密加签"</span>);</span><br><span class="line">        <span class="comment">// 因前端传送的是JSON数据，所以需先将对象转为JSON后，再加密</span></span><br><span class="line">        String encryptDate = CreateRsaSecrteKeyUtil.encryptRSADate(JSON.toJSONString(consumer), publicKey);</span><br><span class="line">        String sign = CreateRsaSecrteKeyUtil.sign(encryptDate, privateKey);</span><br><span class="line">        System.out.println(<span class="string">"密文："</span> + encryptDate + <span class="string">"\n"</span>);</span><br><span class="line">        System.out.println(<span class="string">"加签："</span> + sign);</span><br><span class="line">        <span class="keyword">return</span> sign + <span class="string">"&amp;"</span> + encryptDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动解签解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/verify"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">verify</span><span class="params">(@RequestBody String str)</span> </span>&#123;</span><br><span class="line">        String[] data = str.split(<span class="string">"&amp;"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> verify = CreateRsaSecrteKeyUtil.verify(data[<span class="number">1</span>], data[<span class="number">0</span>], publicKey);</span><br><span class="line">        <span class="keyword">if</span> (verify) &#123;</span><br><span class="line">            Consumer consumer = JSON.parseObject(CreateRsaSecrteKeyUtil.decryptRSADate(data[<span class="number">1</span>], privateKey), Consumer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"验签成功："</span> + consumer.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"验签失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES加密，前端解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/encodeAES"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encodeAES</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(<span class="string">"手工加密用户"</span>, <span class="string">"手工加密密码"</span>);</span><br><span class="line">        String key = CreateRsaSecrteKeyUtil.randomKey(<span class="number">16</span>);</span><br><span class="line">        String data = CreateRsaSecrteKeyUtil.encryptAES(consumer.toString(), key);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data + <span class="string">"&amp;"</span> + key;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"加密失败！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES解密，前端加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/decodeAES"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decodeAES</span><span class="params">(@RequestBody String str, HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 密钥用rsa加密过</span></span><br><span class="line">        String encodeKey = req.getHeader(<span class="string">"encodeKey"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String key = CreateRsaSecrteKeyUtil.decryptRSADate(encodeKey, privateKey).replace(<span class="string">"\""</span>, <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">return</span> CreateRsaSecrteKeyUtil.decryptAES(str, key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"解密失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注解加解密不能和手工加解密签一起使用，会有冲突，后面测试章节会介绍</code></p><h3 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>非对称加解密加验签与对称加解密<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--非对称、对称加解密--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jsencrypt.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--非对称加验签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jsrsasign-all-min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对称加解密--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/crypto-js/3.1.9-1/crypto-js.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;script src="js/crypto-js.js"&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami"</span> <span class="attr">onclick</span>=<span class="string">"zhujie1()"</span>&gt;</span>前端解密，后端 注解 加密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami1"</span> <span class="attr">onclick</span>=<span class="string">"zhujie2()"</span>&gt;</span>前端加密，后端 注解 解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami3"</span> <span class="attr">onclick</span>=<span class="string">"shoudong1()"</span>&gt;</span>前端解密，后端 手动 加密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami4"</span> <span class="attr">onclick</span>=<span class="string">"shoudong2()"</span>&gt;</span>前端加密，后端 手动 解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami5"</span> <span class="attr">onclick</span>=<span class="string">"jiaqian1()"</span>&gt;</span>前端验签解密，后端 手动 加密加签<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami6"</span> <span class="attr">onclick</span>=<span class="string">"jiaqian2()"</span>&gt;</span>前端加密加签，后端 手动 验签解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami7"</span> <span class="attr">onclick</span>=<span class="string">"aesDecode()"</span>&gt;</span>AES后端加密，前端解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"jiami8"</span> <span class="attr">onclick</span>=<span class="string">"aesEncode()"</span>&gt;</span>AES前端加密，后端解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> PUBLIC_KEY = <span class="string">''</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> PRIVATE_KEY = <span class="string">''</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ALGORITHM = <span class="string">'MD5withRSA'</span>;</span></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加密方法</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">RSA_encryption</span><span class="params">(jsonData)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> encrypt = <span class="keyword">new</span> JSEncrypt();</span></span><br><span class="line">        encrypt.setPublicKey(PUBLIC_KEY);</span><br><span class="line"><span class="actionscript"><span class="comment">// 使用jsencrypt只能支持100多位的加密，encryptlong基于 jsencrypt 扩展长文本分段加解密功能，encryptLong() 长文本加密</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> encrypted = encrypt.encryptLong(<span class="built_in">JSON</span>.stringify(jsonData));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'加密前数据:%o'</span>, jsonData);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'加密后数据:%o'</span>, encrypted);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'加密前数据:%o'</span>, jsonData.length + <span class="string">" "</span>+encrypted.length);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> encrypted;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 私钥解密方法</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">RSA_decryption</span><span class="params">(jsonData)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> decrypt = <span class="keyword">new</span> JSEncrypt();</span></span><br><span class="line">        decrypt.setPrivateKey(PRIVATE_KEY);</span><br><span class="line"><span class="actionscript"><span class="comment">// decryptLong() 长文本解密</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> decrypted = decrypt.decryptLong(jsonData);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'解密前数据:%o'</span>, jsonData);<span class="number">0</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'解密后数据:%o'</span>, decrypted);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> decrypted;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 私钥加签</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">RSA_sign</span><span class="params">(encryptDate)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// prvkeypem：传入pem标准格式的秘钥字符串, 解析生成秘钥实例: RSAKey. 标准的pem格式秘钥含有开始标记和结束标记, 如本文使用的秘钥: -----BEGIN xxx-----, -----END xxx-----. 至于xxx的具体内容不是太重要, 代码里自动通过正则清洗掉头和尾标记</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> signature = <span class="keyword">new</span> KJUR.crypto.Signature(&#123;alg: ALGORITHM, prvkeypem: <span class="string">'-----BEGIN PRIVATE KEY-----'</span> + PRIVATE_KEY + <span class="string">'-----END PRIVATE KEY-----'</span>&#125;);</span></span><br><span class="line"><span class="actionscript">        signature.updateString(encryptDate); <span class="comment">// 传入待签明文</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> sign = hextob64(signature.sign()); <span class="comment">// 签名, hextob64得到16进制字符结果</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'私钥加签数据:%o'</span>, sign);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> sign + <span class="string">"&amp;"</span> + encryptDate;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 公钥验签</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">RSA_verify</span><span class="params">(encryptDate, sign)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> signature = <span class="keyword">new</span> KJUR.crypto.Signature(&#123;alg: ALGORITHM, prvkeypem: <span class="string">'-----BEGIN PUBLIC KEY-----'</span> + PUBLIC_KEY + <span class="string">'-----END PUBLIC KEY-----'</span>&#125;);</span></span><br><span class="line"><span class="actionscript">        signature.updateString(encryptDate); <span class="comment">// 传入签密文</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> result = signature.verify(b64tohex(sign));<span class="comment">// 解签, b64tohex得到字符结果</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'加签:%o'</span>, sign);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'验签结果:%o'</span>, result);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> result;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// ====================================================================================================</span></span></span><br><span class="line">    /**</span><br><span class="line">     * 前端解密，后端 注解 加密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">zhujie1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/encrypt"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"GET"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(reslut)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> res = RSA_decryption(reslut)</span></span><br><span class="line">                alert(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 前端加密，后端 注解 解密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">zhujie2</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> str = &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"name"</span>: <span class="string">"前端加密用户"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"passWord"</span>: <span class="string">"前端加密密码"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/decrypt"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line">            data: RSA_encryption(str),</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// ====================================================================================================</span></span></span><br><span class="line">    /**</span><br><span class="line">     * 前端解密，后端 手动 加密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">shoudong1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/encryption"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"GET"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(reslut)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> res = RSA_decryption(reslut)</span></span><br><span class="line">                alert(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 前端加密，后端 手动 解密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">shoudong2</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> str = &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"name"</span>: <span class="string">"加密用户1"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"passWord"</span>: <span class="string">"加密密码1"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/decryption"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line">            data: RSA_encryption(str),</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// ====================================================================================================</span></span></span><br><span class="line">    /**</span><br><span class="line">     * 前端验签解密，后端 手动 加密加签</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">jiaqian1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/signature"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"GET"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(reslut)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> res = reslut.split(<span class="string">"&amp;"</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> re = RSA_verify(res[<span class="number">1</span>], res[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> encryptDate = <span class="built_in">JSON</span>.stringify(RSA_decryption(res[<span class="number">1</span>]));</span></span><br><span class="line"><span class="actionscript">                alert(re + <span class="string">": "</span> + encryptDate);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 前端加密加签，后端 手动 验签解密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">jiaqian2</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> str = &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"name"</span>: <span class="string">"手动解签解密1"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"passWord"</span>: <span class="string">"手动解签解密1"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> encryptDate = RSA_encryption(str);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> sign = RSA_sign(encryptDate)</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/verify"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line">            data: sign,</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// ====================================================================================================</span></span></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成随机密钥</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">randomString</span><span class="params">(length)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> str = <span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> result = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = length; i &gt; <span class="number">0</span>; --i)</span></span><br><span class="line"><span class="javascript">            result += str[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * str.length)];</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> result.toString();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//aes加密</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">encryptAES</span><span class="params">(context, key)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> encrypted = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> (context) == <span class="string">'string'</span>) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> (context) == <span class="string">'object'</span>) &#123;</span></span><br><span class="line"><span class="javascript">            context = <span class="built_in">JSON</span>.stringify(context);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> srcs = CryptoJS.enc.Utf8.parse(context);</span></span><br><span class="line">        encrypted = CryptoJS.AES.encrypt(srcs, CryptoJS.enc.Utf8.parse(key), &#123;</span><br><span class="line"><span class="actionscript">            iv: CryptoJS.enc.Utf8.parse(<span class="string">"初始向量"</span>),</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// mode: CryptoJS.mode.ECB,</span></span></span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> encrypted.toString();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// aes解密</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">decryptAES</span><span class="params">(context, key)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> decrypt = CryptoJS.AES.decrypt(context, CryptoJS.enc.Utf8.parse(key), &#123;</span></span><br><span class="line"><span class="actionscript">            iv:CryptoJS.enc.Utf8.parse(<span class="string">"初始向量"</span>),</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// mode: CryptoJS.mode.ECB,</span></span></span><br><span class="line">            mode: CryptoJS.mode.CBC,</span><br><span class="line">            padding: CryptoJS.pad.Pkcs7</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> decryptedStr = decrypt.toString(CryptoJS.enc.Utf8);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> decryptedStr.toString();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * AES后端加密，前端解密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">aesDecode</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/encodeAES"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"GET"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(reslut)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> res = reslut.split(<span class="string">"&amp;"</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> key = res[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> encryptDate = decryptAES(res[<span class="number">0</span>], key);</span></span><br><span class="line"><span class="actionscript">                alert(encryptDate + <span class="string">" : "</span> + key);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * AES前端加密，后端解密</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">aesEncode</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> k = randomString(<span class="number">16</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> str = &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="string">"name"</span>: <span class="string">"AES加解密"</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="string">"passWord"</span>: <span class="string">"AES加解密"</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> encryptDate = encryptAES(str,k)</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">"/decodeAES"</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">            contentType: <span class="string">"application/json;charset=utf-8"</span>,</span></span><br><span class="line">            headers: &#123;</span><br><span class="line"><span class="actionscript">                <span class="string">"encodeKey"</span>: RSA_encryption(k)</span></span><br><span class="line">            &#125;,</span><br><span class="line">            data: encryptDate,</span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意事项：</code></p><blockquote><ol><li>第36行加验签算法需跟工具类中的加验签算法一致，否则解签失败</li><li>第68、80行加签验签方法中参数prvkeypem，必须传入pem标准格式的秘钥字符串，否则加验签失败；标准的pem格式含有开始标记和结束标记，如本文使用的秘钥：—–BEGIN xxx—–，—–END xxx—–。至于xxx的具体内容不是太重要，代码里自动通过正则清洗掉头和尾标记</li><li>第220、231行的iv初始向量必须与CreateRsaSecrteKeyUtil工具类中第64行中定义的iv初始向量一致，否则加解密失败</li></ol></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>注解加解密和手工加解密签一起使用产生冲突问题</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/SakerMxWQ8Buq6R.png" alt=""></p><blockquote><p>按照1、2、3的步骤来测试验证下效果，首先请求后端注解解密接口</p></blockquote><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/22/DdWpEmnCUIAOxFr.png" alt=""></p><p>毫无疑问，参数解密成功，直接返回前端，并弹框显示</p><blockquote><p>第2步，请求后端手动解密接口；咦！接收参数怎么就已经解密啦？来debug</p></blockquote><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/LA2hKU9aHVfpDkB.png" alt=""></p><p>原来第1步调起的解密注解，既然还在工作，喝，好家伙把第2步的请求参数也顺带解密啦，导致工具类解密时报出JSON数据异常</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/5MVmeGvoIljptdW.png" alt=""></p><blockquote><p>好吧，接着第3步，请求后端手动解签解密接口；我去，数据呢？怎么空字符串啦？</p></blockquote><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/EqgtPHvyhmf6S5G.png" alt=""></p><p>前端明明正常发送请求数据了啊，上debug</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/22/6tksobwyJpNDgmT.png" alt=""></p><p>还是解密注解造的孽，它无法解密加签的数据(加签算法和加密算法不一样，看工具类详情可知)，所以直接报解密失败，并返回个空字符串</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/REoPntqfTr8HCcN.png" alt=""></p><blockquote><p><code>结论：只要开启了解密注解，它就会一直保持开启解密状态，从而影响手动解密方法的正常使用</code></p></blockquote><h2 id="小程序非对称加密"><a href="#小程序非对称加密" class="headerlink" title="小程序非对称加密"></a>小程序非对称加密</h2><p>在上请求页面中RSA加解密使用了jsencrypt.js，其中有如下一段代码：<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/04/12/IO8sKr9yzBT5iJZ.png" alt=""></p><p>因为微信小程序的js中不能使用window对象，会导致报undefined错误（难道window对象真的在小程序中不存在吗？事实并非如此，有兴趣的可以去研究下，在这不作扩展），所以需换个思路来解决问题，使用wx_rsa.js（源码中已附文件）来实现非对称加密，使用方法如下</p><h3 id="JS引用"><a href="#JS引用" class="headerlink" title="JS引用"></a>JS引用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> RSA = <span class="built_in">require</span>(<span class="string">'../wx_rsa.js'</span>)</span><br></pre></td></tr></table></figure><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wx_RSA_encrypto</span>(<span class="params">jsonData</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> encrypt_rsa = RSA.KEYUTIL.getKey(<span class="string">"-----BEGIN PUBLIC KEY-----公钥-----END PUBLIC KEY-----"</span>);</span><br><span class="line">    <span class="keyword">var</span> encStr = encrypt_rsa.encrypt(jsonData);</span><br><span class="line">    <span class="keyword">return</span> RSA.hex2b64(encStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>客户端一般不推荐保存私钥，此为示例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wx_RSA_decrypto</span>(<span class="params">encStr</span>) </span>&#123;</span><br><span class="line">    decrypt_rsa = RSA.KEYUTIL.getKey(<span class="string">"-----BEGIN PRIVATE KEY-----私钥-----END PRIVATE KEY-----"</span>);</span><br><span class="line">    encStr = RSA.b64tohex(encStr);</span><br><span class="line">    <span class="keyword">var</span> decStr = decrypt_rsa.decrypt(encStr);</span><br><span class="line">    <span class="keyword">return</span> decStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于加签验签可用回上节请求页面中的方法，当然也可用wx_rsa.js中的方法，在此不做扩展，自行研究调用</p><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/rsa-encrypt-demo" target="_blank" rel="noopener">https://github.com/wangdaicong/spring-boot-project/tree/master/rsa-encrypt-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sirongboot </tag>
            
            <tag> 接口加解密 </tag>
            
            <tag> 微信小程序 </tag>
            
            <tag> 防抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thumbnailator 图片处理类库</title>
      <link href="/2021/03/16/Thumbnailator%20%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E7%B1%BB%E5%BA%93/"/>
      <url>/2021/03/16/Thumbnailator%20%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E7%B1%BB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Thumbnailator 是一个优秀的图片处理的Google开源Java类库。处理效果远比Java API的好。从API提供现有的图像文件和图像对象的类中简化了处理过程，两三行代码就能够从现有图片生成处理后的图片，且允许微调图片的生成方式，同时保持了需要写入的最低限度的代码量。<code>还支持对一个目录的所有图片进行批量处理操作。</code></p><p>支持的处理操作：图片缩放、裁剪、水印添加、旋转、保持比例、格式转换等等。Thumbnailator至今仍在不断更新……</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Thumbnailator图片处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.coobird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thumbnailator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="上传页面"><a href="#上传页面" class="headerlink" title="上传页面"></a>上传页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/html"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图上上传处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"upload"</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/jpeg,image/jpg,image/png,image/gif"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"but"</span> <span class="attr">value</span>=<span class="string">"上传图片"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:500px"</span> <span class="attr">name</span>=<span class="string">"tbg"</span> <span class="attr">id</span>=<span class="string">"tbg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"tbgShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:500px"</span> <span class="attr">name</span>=<span class="string">"ntbg"</span> <span class="attr">id</span>=<span class="string">"ntbg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"ntbgShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"ppt"</span> <span class="attr">id</span>=<span class="string">"ppt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"pptShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"rt"</span> <span class="attr">id</span>=<span class="string">"rt"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"rtShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"cp"</span> <span class="attr">id</span>=<span class="string">"cp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"cpShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"wm"</span> <span class="attr">id</span>=<span class="string">"wm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"wmShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"ti"</span> <span class="attr">id</span>=<span class="string">"ti"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"tiShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"ci"</span> <span class="attr">id</span>=<span class="string">"ci"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"ciShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"os"</span> <span class="attr">id</span>=<span class="string">"os"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"osShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;width:300px"</span> <span class="attr">name</span>=<span class="string">"bi"</span> <span class="attr">id</span>=<span class="string">"bi"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"biShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"border:none;"</span> <span class="attr">name</span>=<span class="string">"avatar"</span> <span class="attr">id</span>=<span class="string">"avatar"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"avatarShow"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#but"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data = <span class="keyword">new</span> FormData($(<span class="string">"#upload"</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> ($(<span class="string">"#file"</span>).val() != <span class="string">""</span> &amp;&amp; $(<span class="string">"#file"</span>)[<span class="number">0</span>].files[<span class="number">0</span>].size / <span class="number">1000</span> &lt; <span class="number">1024</span> * <span class="number">5</span>) &#123; <span class="comment">// 限制图片大小</span></span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">async</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                    type: <span class="string">"POST"</span>,</span></span><br><span class="line"><span class="actionscript">                    url: <span class="string">"/process"</span>,</span></span><br><span class="line"><span class="actionscript">                    dataType: <span class="string">"json"</span>,</span></span><br><span class="line">                    data: data,</span><br><span class="line"><span class="actionscript">                    fileElementId: <span class="string">"file"</span>,</span></span><br><span class="line"><span class="actionscript">                    cache: <span class="literal">false</span>,   <span class="comment">// 上传文件不需要缓存</span></span></span><br><span class="line"><span class="actionscript">                    contentType: <span class="literal">false</span>, <span class="comment">// 不设置contentType值，已经声明属性enctype="multipart/form-data"，所以这里设置为false。</span></span></span><br><span class="line"><span class="actionscript">                    processData: <span class="literal">false</span>, <span class="comment">// data值是FormData对象，不需要对数据做处理</span></span></span><br><span class="line"><span class="actionscript">                    success: <span class="function"><span class="keyword">function</span> <span class="params">(d)</span> </span>&#123;</span></span><br><span class="line">                        if (</span><br><span class="line"><span class="actionscript">                            d.hasOwnProperty(<span class="string">"srcPath"</span>) || d.hasOwnProperty(<span class="string">"tbgPath"</span>) ||</span></span><br><span class="line"><span class="actionscript">                            d.hasOwnProperty(<span class="string">"pptPath"</span>) || d.hasOwnProperty(<span class="string">"ntbgPath"</span>) ||</span></span><br><span class="line"><span class="actionscript">                            d.hasOwnProperty(<span class="string">"rtPath"</span>) || d.hasOwnProperty(<span class="string">"cpPath"</span>) ||</span></span><br><span class="line"><span class="actionscript">                            d.hasOwnProperty(<span class="string">"wmPath"</span>) || d.hasOwnProperty(<span class="string">"tiPath"</span>) ||</span></span><br><span class="line"><span class="actionscript">                            d.hasOwnProperty(<span class="string">"ciPath"</span>) || d.hasOwnProperty(<span class="string">"osPath"</span>) ||</span></span><br><span class="line"><span class="actionscript">                            d.hasOwnProperty(<span class="string">"biPath"</span>)</span></span><br><span class="line">                        ) &#123;</span><br><span class="line"><span class="actionscript">                            <span class="comment">//图片显示</span></span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#avatar"</span>).attr(<span class="string">"value"</span>, d.srcMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#avatarShow"</span>).attr(<span class="string">"src"</span>, d.srcPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#tbg"</span>).attr(<span class="string">"value"</span>, d.tbgMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#tbgShow"</span>).attr(<span class="string">"src"</span>, d.tbgPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#ntbg"</span>).attr(<span class="string">"value"</span>, d.ntbgMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#ntbgShow"</span>).attr(<span class="string">"src"</span>, d.ntbgPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#ppt"</span>).attr(<span class="string">"value"</span>, d.pptMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#pptShow"</span>).attr(<span class="string">"src"</span>, d.pptPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#rt"</span>).attr(<span class="string">"value"</span>, d.rtMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#rtShow"</span>).attr(<span class="string">"src"</span>, d.rtPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#cp"</span>).attr(<span class="string">"value"</span>, d.cpMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#cpShow"</span>).attr(<span class="string">"src"</span>, d.cpPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#wm"</span>).attr(<span class="string">"value"</span>, d.wmMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#wmShow"</span>).attr(<span class="string">"src"</span>, d.wmPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#ti"</span>).attr(<span class="string">"value"</span>, d.tiMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#tiShow"</span>).attr(<span class="string">"src"</span>, d.tiPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#ci"</span>).attr(<span class="string">"value"</span>, d.ciMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#ciShow"</span>).attr(<span class="string">"src"</span>, d.ciPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#os"</span>).attr(<span class="string">"value"</span>, d.osMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#osShow"</span>).attr(<span class="string">"src"</span>, d.osPath);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#bi"</span>).attr(<span class="string">"value"</span>, d.biMsg);</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">"#biShow"</span>).attr(<span class="string">"src"</span>, d.biPath);</span></span><br><span class="line"><span class="actionscript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                            alert(<span class="string">"上传失败"</span>);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line"><span class="actionscript">                    error: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                        alert(<span class="string">"上传异常"</span>);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文件上传工具类"><a href="#文件上传工具类" class="headerlink" title="文件上传工具类"></a>文件上传工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> FileUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 文件上传工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/10 15:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file     文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path     文件存放路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 保存的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">upload</span><span class="params">(MultipartFile file, String path, String fileName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//确定上传的文件名</span></span><br><span class="line">        String realPath = path + <span class="string">"\\"</span> + fileName;</span><br><span class="line"></span><br><span class="line">        File dest = <span class="keyword">new</span> File(realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断文件父目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!dest.getParentFile().exists()) &#123;</span><br><span class="line">            dest.getParentFile().mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//保存文件</span></span><br><span class="line">            file.transferTo(dest);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求接口"><a href="#请求接口" class="headerlink" title="请求接口"></a>请求接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/process"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">imagePro</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    String filename = <span class="keyword">null</span>;</span><br><span class="line">    String url = <span class="string">"http://127.0.0.1:8080/img/"</span>;</span><br><span class="line">    String localPath = <span class="keyword">null</span>;</span><br><span class="line">    String srcPath = <span class="keyword">null</span>;</span><br><span class="line">    String suffixName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    String type = file.getContentType();</span><br><span class="line">    <span class="keyword">if</span> (type.equals(<span class="string">"image/jpeg"</span>) || type.equals(<span class="string">"image/jpg"</span>) || type.equals(<span class="string">"image/png"</span>) || type.equals(<span class="string">"image/gif"</span>)) &#123;</span><br><span class="line">        filename = file.getOriginalFilename();</span><br><span class="line">        suffixName = filename.substring(filename.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">        localPath = <span class="keyword">this</span>.getClass().getResource(<span class="string">"/"</span>).getPath() + <span class="string">"static/img/"</span>;</span><br><span class="line">        srcPath = localPath + uuidName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (FileUtils.upload(file, localPath, uuidName)) &#123;</span><br><span class="line">            map.put(<span class="string">"srcPath"</span>, url + uuidName);</span><br><span class="line">            map.put(<span class="string">"srcMsg"</span>, <span class="string">"原图大小为："</span> + String.format(<span class="string">"%.0f"</span>, file.getSize() / <span class="number">1024f</span>) + <span class="string">" KB"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    thumbnailImg(map, <span class="number">200</span>, <span class="number">300</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    thumbnailImg2(map, <span class="number">200</span>, <span class="number">300</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    proportionImg(map, <span class="number">0.5</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    rotatingImg(map, <span class="number">200</span>, <span class="number">300</span>, <span class="number">90</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    compressionImg(map, <span class="number">1</span>, <span class="number">0.5</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    watermarkImg(map, <span class="number">500</span>, <span class="number">500</span>,<span class="string">"1.jpg"</span>,<span class="number">0.5f</span>,<span class="number">0.8</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    tailoringImg(map, <span class="number">300</span>, <span class="number">300</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    conversionImg(map, <span class="string">"gif"</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    outputStream(map, <span class="string">"gif"</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    bufferedImg(map, <span class="string">"bmp"</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原图"><a href="#原图" class="headerlink" title="原图"></a>原图</h3><p><code>文件大小：468 KB分辨率：2560*1440像素</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/G25tluRWXhD98rw.jpg" alt="2022617.jpg"></p><h2 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h2><h3 id="按指定大小缩放图片（遵循原图高宽比例）"><a href="#按指定大小缩放图片（遵循原图高宽比例）" class="headerlink" title="按指定大小缩放图片（遵循原图高宽比例）"></a>按指定大小缩放图片（遵循原图高宽比例）</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/dQoSMpUyRtZDhWC.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> thumbnailImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 按指定大小缩放图片（遵循原图高宽比例）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [map, wdith 宽度, heigth 高度, url 请求地址, localPath 本地项目地址, srcPath 原图片地址, suffixName 文件后缀名]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">thumbnailImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">int</span> wdith, <span class="keyword">int</span> heigth, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">        <span class="comment">// of()可设置为图片目录地址，toFile()可设为图片转换后的目录地址，图片批量处理</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .size(wdith, heigth)</span><br><span class="line">                .toFile(localPath + uuidName);</span><br><span class="line">        File file = <span class="keyword">new</span> File(localPath + uuidName);</span><br><span class="line">        BufferedImage bin = ImageIO.read(file);</span><br><span class="line">        map.put(<span class="string">"tbgPath"</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">"tbgMsg"</span>, <span class="string">"遵循原图缩略大小为："</span> + String.format(<span class="string">"%.0f"</span>, file.length() / <span class="number">1024f</span>) + <span class="string">" KB; "</span> + <span class="string">"比例大小为："</span> + bin.getWidth() + <span class="string">"*"</span> + bin.getHeight());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按指定大小缩放图片（不遵循原图比例）"><a href="#按指定大小缩放图片（不遵循原图比例）" class="headerlink" title="按指定大小缩放图片（不遵循原图比例）"></a>按指定大小缩放图片（不遵循原图比例）</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/gfFUW2Ne7xSQvRd.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> thumbnailImg2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 按指定大小缩放图片（不遵循原图比例）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [map, wdith, heigth, url, localPath, srcPath , suffixName]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">thumbnailImg2</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">int</span> wdith, <span class="keyword">int</span> heigth, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">            <span class="comment">// keepAspectRatio值为false，默认为true</span></span><br><span class="line">            Thumbnails.of(srcPath)</span><br><span class="line">                    .size(wdith, heigth)</span><br><span class="line">                    .keepAspectRatio(<span class="keyword">false</span>)</span><br><span class="line">                    .toFile(localPath + uuidName);</span><br><span class="line">            File file = <span class="keyword">new</span> File(localPath + uuidName);</span><br><span class="line">            <span class="comment">// 图像缓存区类</span></span><br><span class="line">            BufferedImage bin = ImageIO.read(file);</span><br><span class="line">            map.put(<span class="string">"ntbgPath"</span>, url + uuidName);</span><br><span class="line">            map.put(<span class="string">"ntbgMsg"</span>, <span class="string">"不遵循原图缩略大小为："</span> + String.format(<span class="string">"%.0f"</span>, file.length() / <span class="number">1024f</span>) + <span class="string">" KB; "</span> + <span class="string">"比例大小为："</span> + bin.getWidth() + <span class="string">"*"</span> + bin.getHeight());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="按比例率缩放图片"><a href="#按比例率缩放图片" class="headerlink" title="按比例率缩放图片"></a>按比例率缩放图片</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/DrVOy7Y9cn6ijd8.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span>  proportionImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>  按比例率缩放图片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  [map, percentag 比例值, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">proportionImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">double</span> percentag, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">        <span class="comment">// scale 取值范围：大于1：放大，反之缩小；等于1：比例不变，压缩图片大小；等同于百分比)</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .scale(percentag)</span><br><span class="line">                .toFile(localPath + uuidName);</span><br><span class="line">        map.put(<span class="string">"pptPath"</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">"pptMsg"</span>, <span class="string">"比例图大小为："</span> + String.format(<span class="string">"%.0f"</span>, <span class="keyword">new</span> File(localPath + uuidName).length() / <span class="number">1024f</span>) + <span class="string">" KB; "</span> + <span class="string">"比例值为："</span> + percentag);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="旋转图片"><a href="#旋转图片" class="headerlink" title="旋转图片"></a>旋转图片</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/MT34DbQgXryJRoN.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> rotatingImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 旋转图片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [map, wdith, heigth, angle 角度, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rotatingImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">int</span> wdith, <span class="keyword">int</span> heigth, <span class="keyword">int</span> angle, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">        <span class="comment">// rotate角度：正数顺时针旋转，反之亦然</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .size(wdith, heigth)</span><br><span class="line">                .rotate(angle)</span><br><span class="line">                .toFile(localPath + uuidName);</span><br><span class="line">        map.put(<span class="string">"rtPath"</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">"rtMsg"</span>, <span class="string">"旋转角度为："</span> + angle);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="压缩图片文件大小"><a href="#压缩图片文件大小" class="headerlink" title="压缩图片文件大小"></a>压缩图片文件大小</h3><p><code>比例图大小为：72 KB; 比例值为：0.5 (压缩图与原图分辨率一致，此代码未做比例缩放处理)</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> compressionImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 压缩图片文件大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [map, percentag 比例值, compressValue 压缩值, url, localPath, srcPath , suffixName]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">compressionImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">double</span> percentag, <span class="keyword">double</span> compressValue, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">        <span class="comment">// outputQuality 取值范围：0.0-1.0之间，等于1质量最高，等同于百分比，文件大小变大</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .scale(percentag)</span><br><span class="line">                .outputQuality(compressValue)</span><br><span class="line">                .toFile(localPath + uuidName);</span><br><span class="line">        map.put(<span class="string">"cpPath"</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">"cpMsg"</span>, <span class="string">"压缩图大小为："</span> + String.format(<span class="string">"%.0f"</span>, <span class="keyword">new</span> File(localPath + uuidName).length() / <span class="number">1024f</span>) + <span class="string">" KB; "</span> + <span class="string">"压缩值为："</span> + compressValue);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加水印"><a href="#添加水印" class="headerlink" title="添加水印"></a>添加水印</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/WRFPymzuo5wZhMg.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span>  watermarkImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>  添加水印</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  [map, wdith, heigth, fileName 图片名称, transparency 透明度, compressValue 压缩值, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">watermarkImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">int</span> wdith, <span class="keyword">int</span> heigth, String fileName, <span class="keyword">float</span> transparency, <span class="keyword">double</span> compressValue, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">        <span class="comment">// 读取水印图片</span></span><br><span class="line">        BufferedImage read = ImageIO.read(<span class="keyword">new</span> File(localPath + fileName));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * watermark(位置，水印图，透明度)：Positions.BOTTOM_RIGHT表示在右下角，有9个位置枚举可选</span></span><br><span class="line"><span class="comment">         * transparency 取值范围：0.0-1.0之间，1为不透明</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .size(wdith, heigth)</span><br><span class="line">                .watermark(Positions.BOTTOM_RIGHT, read, transparency)</span><br><span class="line">                .outputQuality(compressValue).toFile(localPath + uuidName);</span><br><span class="line">        map.put(<span class="string">"wmPath"</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">"wmMsg"</span>, <span class="string">"添加水印成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片裁剪"><a href="#图片裁剪" class="headerlink" title="图片裁剪"></a>图片裁剪</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/UYlkmG7IrT3pdyv.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span>  tailoringImg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>  图片裁剪</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [map, wdith, heigth, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tailoringImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="keyword">int</span> wdith, <span class="keyword">int</span> heigth, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String uuidName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>) + suffixName;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * sourceRegion(位置，裁剪宽度，裁剪高度)</span></span><br><span class="line"><span class="comment">             * 位置：Positions.CENTER 表示在中间，有9个位置枚举可选，也可用两个像素值定位</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Thumbnails.of(srcPath)</span><br><span class="line"><span class="comment">//                    .sourceRegion(Positions.CENTER, wdith, heigth)</span></span><br><span class="line">                    .sourceRegion(<span class="number">0</span>,<span class="number">0</span>, wdith, heigth)</span><br><span class="line">                    .size(wdith, heigth)</span><br><span class="line">                    .toFile(localPath + uuidName);</span><br><span class="line">            map.put(<span class="string">"tiPath"</span>, url + uuidName);</span><br><span class="line">            map.put(<span class="string">"tiMsg"</span>, <span class="string">"图片裁剪成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="图片格式转换"><a href="#图片格式转换" class="headerlink" title="图片格式转换"></a>图片格式转换</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/zy6r4qZKuhna9xs.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  conversionImg</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 图片格式转换</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  [map, format 图片格式, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">conversionImg</span><span class="params">(Map&lt;String, Object&gt; map, String format, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String formatPath = srcPath.substring(<span class="number">0</span>, srcPath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">"."</span> + format;</span><br><span class="line">        String fileName = srcPath.substring(srcPath.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>, srcPath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">"."</span> + format;</span><br><span class="line">        <span class="comment">// outputFormat： 支持bmp,jpg,png,gif,jpeg格式</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .scale(<span class="number">0.5f</span>)</span><br><span class="line">                .outputFormat(format)</span><br><span class="line">                .toFile(formatPath);</span><br><span class="line">        map.put(<span class="string">"ciPath"</span>, url + fileName);</span><br><span class="line">        map.put(<span class="string">"ciMsg"</span>, <span class="string">"格式为："</span> + format + <span class="string">"    图片大小为："</span> + String.format(<span class="string">"%.0f"</span>, <span class="keyword">new</span> File(formatPath).length() / <span class="number">1024f</span>) + <span class="string">" KB; "</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把图片输出至输出流"><a href="#把图片输出至输出流" class="headerlink" title="把图片输出至输出流"></a>把图片输出至输出流</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/JfEA5XCnkVFNazs.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  outputStream</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 把图片输出至输出流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  [map, format, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outputStream</span><span class="params">(Map&lt;String, Object&gt; map, String format, String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String formatPath = srcPath.substring(<span class="number">0</span>, srcPath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">"."</span> + format;</span><br><span class="line">        String fileName = srcPath.substring(srcPath.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>, srcPath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">"."</span> + format;</span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(formatPath);</span><br><span class="line"></span><br><span class="line">        Thumbnails.of(srcPath).size(<span class="number">300</span>, <span class="number">400</span>).outputFormat(format).toOutputStream(os);</span><br><span class="line">        map.put(<span class="string">"osPath"</span>, url + fileName);</span><br><span class="line">        map.put(<span class="string">"osMsg"</span>, <span class="string">"输出文件流成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出图片缓冲流"><a href="#输出图片缓冲流" class="headerlink" title="输出图片缓冲流"></a>输出图片缓冲流</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/sNR4IqQJDyZW5UY.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  bufferedImg</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span>  输出图片缓冲流</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  [map, format, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bufferedImg</span><span class="params">(Map&lt;String, Object&gt; map, String format,String url, String localPath, String srcPath, String suffixName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String formatPath = srcPath.substring(<span class="number">0</span>, srcPath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">"."</span> + format;</span><br><span class="line">        String fileName = srcPath.substring(srcPath.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>, srcPath.lastIndexOf(<span class="string">"."</span>)) + <span class="string">"."</span> + format;</span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(formatPath);</span><br><span class="line"></span><br><span class="line">        BufferedImage bi = Thumbnails.of(srcPath).size(<span class="number">300</span>, <span class="number">400</span>).asBufferedImage();</span><br><span class="line">        ImageIO.write(bi, format, os);</span><br><span class="line">        map.put(<span class="string">"biPath"</span>, url + fileName);</span><br><span class="line">        map.put(<span class="string">"biMsg"</span>, <span class="string">"输出图片缓冲流成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：若png、gif格式图片中含有透明背景，使用该工具压缩处理后背景会变成黑色，这是Thumbnailator的一个bug</code></p><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/imageProcessing-demo" target="_blank" rel="noopener">https://github.com/wangdaicong/spring-boot-project/tree/master/imageProcessing-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thumbnailator </tag>
            
            <tag> 图片处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java生成有规则的编号</title>
      <link href="/2020/11/02/Java%E7%94%9F%E6%88%90%E6%9C%89%E8%A7%84%E5%88%99%E7%9A%84%E7%BC%96%E5%8F%B7/"/>
      <url>/2020/11/02/Java%E7%94%9F%E6%88%90%E6%9C%89%E8%A7%84%E5%88%99%E7%9A%84%E7%BC%96%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>做订单、出入库单等等数据时，往往需要自动生成有一定规则的编号。</p><p>编号格式为：两个字母+日期（8位）+编号（3位）。</p><h2 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a>第一种方法：</h2><p>其中，日期为系统当前的日期。首先获取系统当前日期，然后根据日期格式将date类型转换成String类型即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat f = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);<span class="comment">//设置日期格式</span></span><br><span class="line">String date = f.format(<span class="keyword">new</span> Date);</span><br></pre></td></tr></table></figure><p>后三位编号根据数据库中当天已存在编号进行自增。首先需要查询出数据库中当天的编号并且以降序排序。sql语句如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"select * from 数据库表名 where 字段 like '字母"</span>+date+<span class="string">"%' order by 字段 desc"</span>;</span><br></pre></td></tr></table></figure><p>查询的数据放在集合内，判断集合内是否有数据。有数据就获取集合中第一条数据中的编号（最大号），再截取编号的后三位，转换为int类型，自增后再转换为String类型，通过三目运算符循环三次在前面加0直至为三位数的字符串，最后拼接得到编号。若集合内没有数据就直接拼接001。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;实体类&gt; 集合名 = service.方法名(); <span class="comment">// 调用Service中的方法获取SQL中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(集合名.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">String n = 集合名.get(<span class="number">0</span>).get字段名();</span><br><span class="line"><span class="keyword">int</span> intNumber = Integer.parseInt(n.substring(<span class="number">10</span>));</span><br><span class="line">intNumber++;</span><br><span class="line">String Number = String.valueOf(intNumber);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">String Number = Number.length() &lt; <span class="number">3</span> ? <span class="string">"0"</span> + Number : Number;</span><br><span class="line">&#125;</span><br><span class="line">    String Number = <span class="string">"字母"</span> + date + Number;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    String Number = <span class="string">"字母"</span> + date + <span class="string">"001"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="第二种方法：思路"><a href="#第二种方法：思路" class="headerlink" title="第二种方法：思路"></a>第二种方法：思路</h2><p>设计一张临时数据库表存放编号(只需存一行数据和两列字段(如：id,value)即可，value供修改)，每次需要用时查询此表，获取当前value，同时加1，供后续使用，不够三位数时也可采用第一种方法中的补零策略(方法很多)</p><h2 id="第三种方法：redis推荐"><a href="#第三种方法：redis推荐" class="headerlink" title="第三种方法：redis推荐"></a>第三种方法：redis推荐</h2><p>配置redis(单机)，下图为在springBOOT架构中application.yml的配置，传统架构的配置方式都一样</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818125153151.png" alt=""></p><p>生成编号代码：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818130515200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmtleXRv,size_16,color_FFFFFF,t_70" alt=""></p><p>TimeUnit部分源码：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818130705952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmtleXRv,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="三种方法比较："><a href="#三种方法比较：" class="headerlink" title="三种方法比较："></a>三种方法比较：</h2><p>第一、二种方法都会有个致命的BUG，就是在多并发的情况下，拿到同一个编号的几率很大，有人说加同步代码块synchronized啊，确实可行，但在访问量大的情况下，一直让用户等待，页面一直在loading，那就尴尬啦，让人怀疑我们的技术能力啊</p><p><code>注意：synchronized与负载均衡(分布式)没关系，synchronized只跟进程有关联</code></p><p>第三种方法，就避免了这个问题，因为Redis是单进程单线程模式，采用队列模式将并发访问变成串行访问<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818132312935.png" alt=""></p><p>如数据源无此Key，那初始值为1，每次获取后，自动加1供后续使用</p><p><code>注意：increment方法中value还可以为double类型</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818134033441.png" alt=""></p><p>如数据源无此Key，那初始值为2.3，每次获取后，自动加2.3</p>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编号生成 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于TaskScheduler和CronTask实现动态增删启停定时任务功能</title>
      <link href="/2020/11/01/%E5%9F%BA%E4%BA%8ETaskScheduler%E5%92%8CCronTask%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%A2%9E%E5%88%A0%E5%90%AF%E5%81%9C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/11/01/%E5%9F%BA%E4%BA%8ETaskScheduler%E5%92%8CCronTask%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%A2%9E%E5%88%A0%E5%90%AF%E5%81%9C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>在spring boot项目中定时任务的开发方式：<br>一、可通过@EnableScheduling注解和@Scheduled注解实现<br>二、可通过SchedulingConfigurer接口来实现<br>三、集成Quartz框架实现<br><code>注意：第一和第二方式不能动态添加、删除、启动、停止任务。</code>在满足项目需求的情况下，尽量少的依赖其它框架，避免项目过于臃肿和复杂是最基本的开发原则。<br>查看 spring-context 这个 jar 包中 org.springframework.scheduling.ScheduledTaskRegistrar 这个类的源代码，发现可以通过改造这个类（主要是基于TaskScheduler和CronTask两个类来实现）就能实现动态增删启停定时任务功能。</p><h2 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scheduledTaskRegistrar-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Web 项目开发starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--校验--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok 简化插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--通用mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mysql数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">数据库连接地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">数据库名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">数据库密码</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># xml文件地址</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment"># 打印mybatis的执行sql语句</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment"># 开启驼峰自动转换</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="启动引导类"><a href="#启动引导类" class="headerlink" title="启动引导类"></a>启动引导类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> scheduledTaskApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 启动引导类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/26 17:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.scheduledTask.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTaskApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ScheduledTaskApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@MapperScan：指定扫描的Mapper类的包的路径，简化直接在每个Mapper类上添加注解@Mapper</p><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><h3 id="配置线程池"><a href="#配置线程池" class="headerlink" title="配置线程池"></a>配置线程池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ScheduledConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 配置线程池</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 14:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulingConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskScheduler <span class="title">taskScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建任务调度线程池</span></span><br><span class="line">        ThreadPoolTaskScheduler taskScheduler = <span class="keyword">new</span> ThreadPoolTaskScheduler();</span><br><span class="line">        <span class="comment">// 初始化线程池数量</span></span><br><span class="line">        taskScheduler.setPoolSize(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 是否将取消后的任务，从队列中删除</span></span><br><span class="line">        taskScheduler.setRemoveOnCancelPolicy(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置线程名前缀</span></span><br><span class="line">        taskScheduler.setThreadNamePrefix(<span class="string">"ThreadPool-"</span>);</span><br><span class="line">        <span class="keyword">return</span> taskScheduler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行类"><a href="#执行类" class="headerlink" title="执行类"></a>执行类</h2><h3 id="同步处理定时任务类"><a href="#同步处理定时任务类" class="headerlink" title="同步处理定时任务类"></a>同步处理定时任务类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledFuture;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ScheduledTask</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 同步处理任务类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 15:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTask</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用volatile同步机制，处理定时任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> ScheduledFuture future;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> cancel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 取消定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ScheduledFuture future = <span class="keyword">this</span>.future;</span><br><span class="line">        <span class="keyword">if</span> (future != <span class="keyword">null</span>) &#123;</span><br><span class="line">            future.cancel(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时任务注册类"><a href="#定时任务注册类" class="headerlink" title="定时任务注册类"></a>定时任务注册类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.config.CronTask;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> CronTaskRegistrar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 定时任务注册类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 17:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CronTaskRegistrar</span> <span class="keyword">implements</span> <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在多线程下，使用并发集合做为缓存，初始化容量16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Runnable, ScheduledTask&gt; scheduledTasks = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入定时任务接口</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskScheduler taskScheduler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [task 定时任务, cronExpression cron表达式]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> addCronTask</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 添加定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCronTask</span><span class="params">(Runnable task, String cronExpression)</span> </span>&#123;</span><br><span class="line">        addCronTask(<span class="keyword">new</span> CronTask(task, cronExpression));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  addCronTask</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  注册定时任务，并将任务加入到缓存中</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  [cronTask] 定时任务对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCronTask</span><span class="params">(CronTask cronTask)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cronTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Runnable task = cronTask.getRunnable();</span><br><span class="line">            <span class="keyword">if</span> (scheduledTasks.containsKey(task)) &#123;</span><br><span class="line">                removeCronTask(task);</span><br><span class="line">            &#125;</span><br><span class="line">            scheduledTasks.put(task, scheduleCronTask(cronTask));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  removeCronTask</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  取消定时任务，并将缓存中的任务记录删除</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  [task] 线程对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCronTask</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        ScheduledTask scheduledTask = scheduledTasks.remove(task);</span><br><span class="line">        <span class="keyword">if</span> (scheduledTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">            scheduledTask.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  scheduleCronTask</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  调用线程池</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  [cronTask] 定时任务对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  com.scheduledtask.task.ScheduledTask</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScheduledTask <span class="title">scheduleCronTask</span><span class="params">(CronTask cronTask)</span> </span>&#123;</span><br><span class="line">        ScheduledTask scheduledTask = <span class="keyword">new</span> ScheduledTask();</span><br><span class="line">        <span class="comment">// 指定一个触发器执行定时任务，并返回执行结果</span></span><br><span class="line">        scheduledTask.future = taskScheduler.schedule(cronTask.getRunnable(), cronTask.getTrigger());</span><br><span class="line">        <span class="keyword">return</span> scheduledTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  destroy</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  销毁所有定时任务，并将缓存清除</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ScheduledTask task : scheduledTasks.values()) &#123;</span><br><span class="line">            task.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">        scheduledTasks.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处用Map来模拟缓存，当然可以换教专业的缓存组件，如redis等等</p><h3 id="初始化定时任务类"><a href="#初始化定时任务类" class="headerlink" title="初始化定时任务类"></a>初始化定时任务类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskRunner</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 初始化定时任务类</span></span><br><span class="line"><span class="comment"> *              如有多个组件实现了CommandLineRunner接口来实现启动加载功能，Order注解可实现先后加载顺序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 14:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// @Order(value = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CronTaskRegistrar cronTaskRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 重新开启线程，避免影响主程序的启动</span></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 查找任务状态为正常的任务数据</span></span><br><span class="line">                List&lt;Task&gt; taskList = taskService.getTaskListByStatus(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!CollectionUtils.isEmpty(taskList)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">                        <span class="comment">// 执行定时任务</span></span><br><span class="line">                        SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">                        <span class="comment">// 注册任务数据</span></span><br><span class="line">                        cronTaskRegistrar.addCronTask(runnable, task.getCronExpression());</span><br><span class="line">                    &#125;</span><br><span class="line">                    log.info(<span class="string">"定时任务加载完毕......"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Spring Boot中提供了CommandLineRunner(实现启动初始化功能)和ApplicationRunner(引导类)两个接口来实现容器启动<br><code>CommandLineRunner的执行是整个应用启动的一部分，避免CommandLineRunner启动中抛出异常（java.lang.IllegalStateException: Failed to execute CommandLineRunner），直接影响主程序的启动，从而此处重新开启一个线程，让CommandLineRunner和主线程相互独立</code>，此时抛出异常并不会影响到主线程，防止踩坑</p><h3 id="定时任务执行类"><a href="#定时任务执行类" class="headerlink" title="定时任务执行类"></a>定时任务执行类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.util.SpringContextUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ReflectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> SchedulingRunnable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 反射机制执行定时任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 16:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulingRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="keyword">private</span> String params;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"定时任务开始执行 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;"</span>, beanName, methodName, params);</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object target = SpringContextUtils.getBean(beanName);</span><br><span class="line"></span><br><span class="line">            Method method = StringUtils.isEmpty(params) ?</span><br><span class="line">                    target.getClass().getDeclaredMethod(methodName) :</span><br><span class="line">                    target.getClass().getDeclaredMethod(methodName, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            ReflectionUtils.makeAccessible(method);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(params)) &#123;</span><br><span class="line">                method.invoke(target);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                method.invoke(target, params);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">"定时任务异常 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;"</span>, beanName, methodName, params);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis() - startTime;</span><br><span class="line">        log.info(<span class="string">"定时任务执行结束 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;，耗时：&#123;&#125;"</span>, beanName, methodName, params, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SchedulingRunnable that = (SchedulingRunnable) o;</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> beanName.equals(that.beanName) &amp;&amp;</span><br><span class="line">                    methodName.equals(that.methodName) &amp;&amp;</span><br><span class="line">                    that.params == <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanName.equals(that.beanName) &amp;&amp;</span><br><span class="line">                methodName.equals(that.methodName) &amp;&amp;</span><br><span class="line">                params.equals(that.params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(beanName, methodName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(beanName, methodName, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="获取实例对象"><a href="#获取实例对象" class="headerlink" title="获取实例对象"></a>获取实例对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> SpringContextUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 获取当前上下文对象工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 16:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtils</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 应用上下文对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        SpringContextUtils.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span>  getBean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>  获取当前上下文对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [name]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  java.lang.Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是获取定时任务业务逻辑类注解@Component上配置的实例名(对应数据库中的beanName)</p><h2 id="实体对象与sql脚本"><a href="#实体对象与sql脚本" class="headerlink" title="实体对象与sql脚本"></a>实体对象与sql脚本</h2><h3 id="任务实体类"><a href="#任务实体类" class="headerlink" title="任务实体类"></a>任务实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.pojo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Task</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 定时任务实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 10:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//全参构造</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">// 无参构造</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"task"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"beanName"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"对象名不能为空！"</span>)</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"methodName"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"方法名不能为空！"</span>)</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"methodParams"</span>)</span><br><span class="line">    <span class="keyword">private</span> String methodParams;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cronExpression"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"cron表达式不能为空！"</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(message = <span class="string">"cron表达式错误！"</span>, regexp = <span class="string">"^\\s*($|#|\\w+\\s*=|(\\?|\\*|(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?(?:,(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?)*)\\s+(\\?|\\*|(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?(?:,(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?)*)\\s+(\\?|\\*|(?:[01]?\\d|2[0-3])(?:(?:-|\\/|\\,)(?:[01]?\\d|2[0-3]))?(?:,(?:[01]?\\d|2[0-3])(?:(?:-|\\/|\\,)(?:[01]?\\d|2[0-3]))?)*)\\s+(\\?|\\*|(?:0?[1-9]|[12]\\d|3[01])(?:(?:-|\\/|\\,)(?:0?[1-9]|[12]\\d|3[01]))?(?:,(?:0?[1-9]|[12]\\d|3[01])(?:(?:-|\\/|\\,)(?:0?[1-9]|[12]\\d|3[01]))?)*)\\s+(\\?|\\*|(?:[1-9]|1[012])(?:(?:-|\\/|\\,)(?:[1-9]|1[012]))?(?:L|W)?(?:,(?:[1-9]|1[012])(?:(?:-|\\/|\\,)(?:[1-9]|1[012]))?(?:L|W)?)*|\\?|\\*|(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(?:(?:-)(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))?(?:,(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(?:(?:-)(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))?)*)\\s+(\\?|\\*|(?:[0-6])(?:(?:-|\\/|\\,|#)(?:[0-6]))?(?:L)?(?:,(?:[0-6])(?:(?:-|\\/|\\,|#)(?:[0-6]))?(?:L)?)*|\\?|\\*|(?:MON|TUE|WED|THU|FRI|SAT|SUN)(?:(?:-)(?:MON|TUE|WED|THU|FRI|SAT|SUN))?(?:,(?:MON|TUE|WED|THU|FRI|SAT|SUN)(?:(?:-)(?:MON|TUE|WED|THU|FRI|SAT|SUN))?)*)(|\\s)+(\\?|\\*|(?:|\\d&#123;4&#125;)(?:(?:-|\\/|\\,)(?:|\\d&#123;4&#125;))?(?:,(?:|\\d&#123;4&#125;)(?:(?:-|\\/|\\,)(?:|\\d&#123;4&#125;))?)*))$"</span>)</span><br><span class="line">    <span class="keyword">private</span> String cronExpression;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"jobStatus"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer jobStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"createTime"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updateTime"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创表语句"><a href="#创表语句" class="headerlink" title="创表语句"></a>创表语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`task`</span> (</span><br><span class="line">      <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">      <span class="string">`beanName`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'任务名称'</span>,</span><br><span class="line">      <span class="string">`methodName`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'方法名称'</span>,</span><br><span class="line">      <span class="string">`methodParams`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'方法参数'</span>,</span><br><span class="line">      <span class="string">`cronExpression`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'cron表达式'</span>,</span><br><span class="line">      <span class="string">`jobStatus`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'任务状态 0暂停 1正常'</span>,</span><br><span class="line">      <span class="string">`remark`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">      <span class="string">`createTime`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">      <span class="string">`updateTime`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">      PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">      <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`beanName`</span> (<span class="string">`beanName`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci <span class="keyword">COMMENT</span>=<span class="string">'定时任务表'</span>;</span><br></pre></td></tr></table></figure><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.mapper.TaskMapper;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 业务逻辑层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 15:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TaskService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskMapper taskMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertTask</span><span class="params">(Task task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.insertSelective(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Task&gt; <span class="title">getTaskListByStatus</span><span class="params">(Integer jobStatus)</span> </span>&#123;</span><br><span class="line">        Example example = <span class="keyword">new</span> Example(Task<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Example.Criteria criteria = example.createCriteria();</span><br><span class="line">        criteria.andEqualTo(<span class="string">"jobStatus"</span>, jobStatus);</span><br><span class="line">        <span class="keyword">return</span> taskMapper.selectByExample(example);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">findTaskByJobId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteTaskByJobId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.deleteByPrimaryKey(id) &gt; <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateTask</span><span class="params">(Task task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.updateByPrimaryKeySelective(task) &gt; <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据连接"><a href="#数据连接" class="headerlink" title="数据连接"></a>数据连接</h2><h3 id="数据层类"><a href="#数据层类" class="headerlink" title="数据层类"></a>数据层类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 数据连接层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 11:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TaskMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Task</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：因为继承Mapper类，使用通用mapper插件做数据层处理，基本的CRUD单表操作方法都已有</code></p><h3 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.scheduledtask.mapper.TaskMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskStatus</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 任务状态枚举</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 11:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">// 全参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TaskStatus &#123;</span><br><span class="line">    SUSPEND(<span class="string">"暂停"</span>, <span class="number">0</span>),</span><br><span class="line">    NORMAL(<span class="string">"正常"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">desc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时任务业务逻辑类"><a href="#定时任务业务逻辑类" class="headerlink" title="定时任务业务逻辑类"></a>定时任务业务逻辑类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskOne</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 定时任务业务逻辑类</span></span><br><span class="line"><span class="comment"> *              Component中的value对应数据库的beanName字段</span></span><br><span class="line"><span class="comment"> *              方法名对应数据库的methodName字段</span></span><br><span class="line"><span class="comment"> *              参数对应数据库的methodParams字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/30 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"TaskOne"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskOne</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">taskWithParams</span><span class="params">(String params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   此处写有参定时任务的业务逻辑</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">taskNoParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *   此处写无参定时任务的业务逻辑</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层类"><a href="#控制层类" class="headerlink" title="控制层类"></a>控制层类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.enums.TaskStatus;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.task.CronTaskRegistrar;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.task.SchedulingRunnable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 控制层类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 16:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CronTaskRegistrar cronTaskRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/addTask"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addTask</span><span class="params">(@Valid Task task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (taskService.insertTask(task) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"新增失败！"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (task.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.addCronTask(runnable, task.getCronExpression());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"新增成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/deleteTask/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteTask</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">        Task task = taskService.findTaskByJobId(id);</span><br><span class="line">        <span class="keyword">if</span> (!taskService.deleteTaskByJobId(id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"删除失败！"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (task.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.removeCronTask(runnable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"删除成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/updateTask"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateTask</span><span class="params">(Task taskNew)</span> </span>&#123;</span><br><span class="line">        Task taskOld = taskService.findTaskByJobId(taskNew.getId());</span><br><span class="line">        <span class="keyword">if</span> (taskService.updateTask(taskNew)) &#123;</span><br><span class="line">            <span class="comment">// 先取消原有的定时任务，并删除缓存</span></span><br><span class="line">            <span class="keyword">if</span> (taskOld.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                <span class="comment">// 链式编程，使用了lombok的注解@Accessors</span></span><br><span class="line">                SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable()</span><br><span class="line">                        .setBeanName(taskOld.getBeanName())</span><br><span class="line">                        .setMethodName(taskOld.getMethodName())</span><br><span class="line">                        .setParams(taskOld.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.removeCronTask(runnable);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 新增定时任务，并添加到缓存</span></span><br><span class="line">            <span class="keyword">if</span> (taskNew.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(taskNew.getBeanName(), taskNew.getMethodName(), taskNew.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.addCronTask(runnable, taskNew.getCronExpression());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"更新失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"更新成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改任务状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/updateTaskStatus/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateTaskStatus</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">        Task task = taskService.findTaskByJobId(id);</span><br><span class="line">        <span class="comment">// 如原先是启动状态，便设置为停止，并从缓存中删除，反之亦然</span></span><br><span class="line">        <span class="keyword">if</span> (task.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">            SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">            cronTaskRegistrar.removeCronTask(runnable);</span><br><span class="line">            task.setJobStatus(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> taskService.updateTask(task) ? <span class="string">"修改成功！"</span> : <span class="string">"修改失败！"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">            cronTaskRegistrar.addCronTask(runnable, task.getCronExpression());</span><br><span class="line">            task.setJobStatus(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> taskService.updateTask(task) ? <span class="string">"修改成功！"</span> : <span class="string">"修改失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：此处用到的校验注解是在org.springframework.validation包下的，如只在方法参数上加@Validated校验注解无效的话，则在类上加@Validated注解，并在方法参数上加@Valid注解</code></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="启动加载"><a href="#启动加载" class="headerlink" title="启动加载"></a>启动加载</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/01/zVoHO4Wfu2y69AJ.png" alt="项目启动"></p><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.controller.TaskController;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ScheduledTaskTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= ScheduledTaskApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ScheduledTaskTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskController taskController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTaskController</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/*      Task task = new Task();</span></span><br><span class="line"><span class="comment">        task.setBeanName("TaskOne");</span></span><br><span class="line"><span class="comment">        task.setMethodName("taskWithParams");</span></span><br><span class="line"><span class="comment">        task.setMethodParams("111");</span></span><br><span class="line"><span class="comment">        task.setCronExpression("0/5 * * * * ?");</span></span><br><span class="line"><span class="comment">        task.setJobStatus(1);</span></span><br><span class="line"><span class="comment">        task.setRemark("111");</span></span><br><span class="line"><span class="comment">        task.setCreateTime(new Date());</span></span><br><span class="line"><span class="comment">        task.setUpdateTime(new Date());</span></span><br><span class="line"><span class="comment">        String msg = taskController.addTask(task);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String msg = taskController.deleteTask(2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*      Task task = new Task();</span></span><br><span class="line"><span class="comment">        task.setId(50);</span></span><br><span class="line"><span class="comment">        task.setBeanName("TaskOne");</span></span><br><span class="line"><span class="comment">        task.setMethodName("taskNoParams");</span></span><br><span class="line"><span class="comment">        task.setMethodParams("");</span></span><br><span class="line"><span class="comment">        task.setCronExpression("0/5 * * * * ?");</span></span><br><span class="line"><span class="comment">        task.setJobStatus(1);</span></span><br><span class="line"><span class="comment">        task.setRemark("111");</span></span><br><span class="line"><span class="comment">        task.setCreateTime(new Date());</span></span><br><span class="line"><span class="comment">        task.setUpdateTime(new Date());</span></span><br><span class="line"><span class="comment">        String msg = taskController.updateTask(task);*/</span></span><br><span class="line"></span><br><span class="line">        String msg = taskController.updateTaskStatus(<span class="number">50</span>);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/scheduledTaskRegistrar-demo" target="_blank" rel="noopener">https://github.com/wangdaicong/spring-boot-project/tree/master/scheduledTaskRegistrar-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 任务调度 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定时任务 </tag>
            
            <tag> spring </tag>
            
            <tag> 通用mapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>screw (螺丝钉) 数据库表结构文档生成工具</title>
      <link href="/2020/07/15/screw%20(%E8%9E%BA%E4%B8%9D%E9%92%89)%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/07/15/screw%20(%E8%9E%BA%E4%B8%9D%E9%92%89)%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>　　数据库文档也是交付的重要内容，本文的工具可以帮助大家快速生成相应文档，并支持多种数据库<br>      　　在企业级开发中、我们经常会有编写数据库表结构文档的时间付出，关于数据库表结构文档状态：要么没有、要么有、但都是手写、后期运维开发，需要手动进行维护到文档中，很是繁琐、如果忘记一次维护、就会给以后工作造成很多困扰、无形中制造了很多坑留给自己和后人。</p><h2 id="screw-特点"><a href="#screw-特点" class="headerlink" title="screw 特点"></a>screw 特点</h2><ul><li>简洁、轻量、设计良好。不需要 powerdesigner 这种重量的建模工具 多数据库支持 。</li><li>支持市面常见的数据库类型MySQL、Oracle、SqlServer</li><li>多种格式文档。支持 MD、HTML、WORD 格式</li><li>灵活扩展。支持用户自定义模板和展示样式</li></ul><h2 id="数据库支持"><a href="#数据库支持" class="headerlink" title="数据库支持"></a>数据库支持</h2><ul><li>MySQL</li><li>MariaDB</li><li>TIDB</li><li>Oracle</li><li>SqlServer</li><li>PostgreSQL</li><li>Cache DB</li></ul><h2 id="文档生成支持"><a href="#文档生成支持" class="headerlink" title="文档生成支持"></a>文档生成支持</h2><ul><li>html</li><li>word</li><li>markdwon</li></ul><h2 id="文档截图"><a href="#文档截图" class="headerlink" title="文档截图"></a>文档截图</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyMi8xNjE0MTRfNzRjZDBiNjhfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyMi8xNjE3MjNfNmRhNThjNDFfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><h3 id="word"><a href="#word" class="headerlink" title="word"></a>word</h3><p> <img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyNS8yMDA5NDZfMWRjMDcxN2ZfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><h3 id="markdwon"><a href="#markdwon" class="headerlink" title="markdwon"></a>markdwon</h3><p> <img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyNS8yMTQ3NDlfN2IxNWQ4YmRfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"><br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyNS8yMTUwMDZfMzYwMWUxMzVfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><h2 id="SpringBoot整合screw生成数据库文档"><a href="#SpringBoot整合screw生成数据库文档" class="headerlink" title="SpringBoot整合screw生成数据库文档"></a>SpringBoot整合screw生成数据库文档</h2><h3 id="代码生成（推荐）"><a href="#代码生成（推荐）" class="headerlink" title="代码生成（推荐）"></a>代码生成（推荐）</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--freemarker模版--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--screw依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试类代码"><a href="#测试类代码" class="headerlink" title="测试类代码"></a>测试类代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrewApplicationTests</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数据源：HikariCP 线程池, SpringBoot 2.0开始内置了HikariCP，2.0之前的版本需要引入依赖</span></span><br><span class="line">        HikariConfig hikariConfig = <span class="keyword">new</span> HikariConfig();</span><br><span class="line">        <span class="comment">// com.mysql.jdbc.Driver MySQL5驱动；com.mysql.cj.jdbc.Driver MySQL6之后的驱动</span></span><br><span class="line">        hikariConfig.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        hikariConfig.setJdbcUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/数据库名"</span>);</span><br><span class="line">        hikariConfig.setUsername(<span class="string">"数据库帐号"</span>);</span><br><span class="line">        hikariConfig.setPassword(<span class="string">"数据可密码"</span>);</span><br><span class="line">        <span class="comment">//设置可以获取tables remarks信息</span></span><br><span class="line">        hikariConfig.addDataSourceProperty(<span class="string">"useInformationSchema"</span>, <span class="string">"true"</span>);</span><br><span class="line">        hikariConfig.setMinimumIdle(<span class="number">2</span>);</span><br><span class="line">        hikariConfig.setMaximumPoolSize(<span class="number">5</span>);</span><br><span class="line">        DataSource dataSource = <span class="keyword">new</span> HikariDataSource(hikariConfig);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 1、生成文件配置</span></span><br><span class="line">        EngineConfig engineConfig = EngineConfig.builder()</span><br><span class="line">                <span class="comment">//生成文件路径(改成自己的生成路径)</span></span><br><span class="line">                .fileOutputDir(<span class="string">"/Users/用户/Desktop"</span>)</span><br><span class="line">                <span class="comment">//生成后是否立即打开目录</span></span><br><span class="line">                .openOutputDir(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">//文件类型 有HTML、WORD、MD三种枚举选择</span></span><br><span class="line">                .fileType(EngineFileType.WORD)</span><br><span class="line">                <span class="comment">//生成模板实现</span></span><br><span class="line">                .produceType(EngineTemplateType.freemarker).build();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 忽略表名（可选）</span></span><br><span class="line">        List&lt;String&gt; ignoreTableName = Arrays.asList(<span class="string">"aa"</span>, <span class="string">"test_group"</span>);</span><br><span class="line">        <span class="comment">// 忽略表前缀（可选）</span></span><br><span class="line">        List&lt;String&gt; ignorePrefix = Collections.singletonList(<span class="string">"czb_"</span>);</span><br><span class="line">        <span class="comment">// 忽略表后缀（可选）</span></span><br><span class="line">        List&lt;String&gt; ignoreSuffix = Arrays.asList(<span class="string">"_test"</span>, <span class="string">"_test1"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 2、配置想要忽略的表（可选）</span></span><br><span class="line">        ProcessConfig processConfig = ProcessConfig.builder()</span><br><span class="line">                .ignoreTableName(ignoreTableName)</span><br><span class="line">                .ignoreTablePrefix(ignorePrefix)</span><br><span class="line">                .ignoreTableSuffix(ignoreSuffix)</span><br><span class="line">                .build();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 3、生成文档配置（包含以下自定义版本号、标题、描述（数据库名 + 描述 = 文件名）等配置连接）</span></span><br><span class="line">        Configuration config = Configuration.builder()</span><br><span class="line">                .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">                .title(<span class="string">"数据库文档"</span>)</span><br><span class="line">                .description(<span class="string">"数据库设计文档生成"</span>)</span><br><span class="line">                .dataSource(dataSource)</span><br><span class="line">                .engineConfig(engineConfig)</span><br><span class="line">                .produceConfig(processConfig).build();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 4、执行生成</span></span><br><span class="line">        <span class="keyword">new</span> DocumentationExecute(config).execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动run，运行测试类或contextLoads方法即可</p><img  src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200715131215704.png" align='left'/><h3 id="Maven-插件生成"><a href="#Maven-插件生成" class="headerlink" title="Maven 插件生成"></a>Maven 插件生成</h3><p>在pom.xml文件中加入如下配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- HikariCP --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mysql driver--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.48<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--username--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">username</span>&gt;</span>数据库帐号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--password--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">password</span>&gt;</span>数据库密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver  com.mysql.jdbc.Driver MySQL5驱动；com.mysql.cj.jdbc.Driver MySQL6之后的驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--jdbc url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdbcUrl</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/数据库名<span class="tag">&lt;/<span class="name">jdbcUrl</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成文件类型 HTML、WORD、MD三种选择--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileType</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">fileType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--文件输出目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileOutputDir</span>&gt;</span>E:<span class="tag">&lt;/<span class="name">fileOutputDir</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--打开文件输出目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">openOutputDir</span>&gt;</span>true<span class="tag">&lt;/<span class="name">openOutputDir</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成模板--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">produceType</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">produceType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--描述--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>数据库文档生成<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--版本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据库文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后运行maven插件生成即可</p><img  src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200715130912560.png" align='left'/><blockquote><p>screw 码云地址：<a href="https://gitee.com/leshalv/screw" target="_blank" rel="noopener">https://gitee.com/leshalv/screw</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 文档生成 </tag>
            
            <tag> screw </tag>
            
            <tag> mysql </tag>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析 VO、DTO、DO、PO 的概念、区别和用处！</title>
      <link href="/2020/07/13/%E6%B5%85%E6%9E%90%20VO%E3%80%81DTO%E3%80%81DO%E3%80%81PO%20%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E5%A4%84%EF%BC%81/"/>
      <url>/2020/07/13/%E6%B5%85%E6%9E%90%20VO%E3%80%81DTO%E3%80%81DO%E3%80%81PO%20%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E5%A4%84%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>本篇文章主要讨论一下我们经常会用到的一些对象：VO、DTO、DO和PO。<br>由于不同的项目和开发人员有不同的命名习惯，这里我首先对上述的概念进行一个简单描述，名字只是个标识，我们重点关注其概念：</p><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p><strong>VO（View Object）：</strong>视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p><p><strong>DTO（Data Transfer Object）</strong>：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p><p><strong>DO（Domain Object）</strong>：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。</p><p><strong>PO（Persistent Object）</strong>：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</p><h2 id="模型："><a href="#模型：" class="headerlink" title="模型："></a>模型：</h2><p>下面以一个时序图建立简单模型来描述上述对象在三层架构应用中的位置 </p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/13/82WpYBrICDsPc4M.png" alt="avatar"></p><ul><li>用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。</li><li>展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。</li><li>服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。</li><li>服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。</li><li>对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。</li></ul><h2 id="VO与DTO的区别"><a href="#VO与DTO的区别" class="headerlink" title="VO与DTO的区别"></a>VO与DTO的区别</h2><p>　　大家可能会有个疑问（在笔者参与的项目中，很多程序员也有相同的疑惑）：既然DTO是展示层与服务层之间传递数据的对象，为什么还需要一个VO呢？对！对于绝大部分的应用场景来说，DTO和VO的属性值基本是一致的，而且他们通常都是POJO，因此没必要多此一举，但不要忘记这是实现层面的思维，对于设计层面来说，概念上还是应该存在VO和DTO，因为两者有着本质的区别，DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。</p><p>　　用一个例子来说明可能会比较容易理解：例如服务层有一个getUser的方法返回一个系统用户，其中有一个属性是gender(性别)，对于服务层来说，它只从语义上定义：1-男性，2-女性，0-未指定，而对于展示层来说，它可能需要用“帅哥”代表男性，用“美女”代表女性，用“秘密”代表未指定。说到这里，可能你还会反驳，在服务层直接就返回“帅哥美女”不就行了吗？对于大部分应用来说，这不是问题，但设想一下，如果需求允许客户可以定制风格，而不同风格对于“性别”的表现方式不一样，又或者这个服务同时供多个客户端使用（不同门户），而不同的客户端对于表现层的要求有所不同，那么，问题就来了。再者，回到设计层面上分析，从职责单一原则来看，服务层只负责业务，与具体的表现形式无关，因此，它返回的DTO，不应该出现与表现形式的耦合。</p><p>　　理论归理论，这到底还是分析设计层面的思维，是否在实现层面必须这样做呢？一刀切的做法往往会得不偿失，下面我马上会分析应用中如何做出正确的选择。</p><h2 id="VO与DTO的应用"><a href="#VO与DTO的应用" class="headerlink" title="VO与DTO的应用"></a>VO与DTO的应用</h2><p>　　上面只是用了一个简单的例子来说明VO与DTO在概念上的区别，本节将会告诉你如何在应用中做出正确的选择。</p><p>　　在以下才场景中，我们可以考虑把VO与DTO二合为一（注意：是实现层面）：</p><ul><li>当需求非常清晰稳定，而且客户端很明确只有一个的时候，没有必要把VO和DTO区分开来，这时候VO可以退隐，用一个DTO即可，为什么是VO退隐而不是DTO？回到设计层面，服务层的职责依然不应该与展示层耦合，所以，对于前面的例子，你很容易理解，DTO对于“性别”来说，依然不能用“帅哥美女”，这个转换应该依赖于页面的脚本（如JavaScript）或其他机制（JSTL、EL、CSS）</li><li>即使客户端可以进行定制，或者存在多个不同的客户端，如果客户端能够用某种技术（脚本或其他机制）实现转换，同样可以让VO退隐</li></ul><br>　　以下场景需要优先考虑VO、DTO并存：<ul><li>上述场景的反面场景</li><li>因为某种技术原因，比如某个框架（如Flex）提供自动把POJO转换为UI中某些Field时，可以考虑在实现层面定义出VO，这个权衡完全取决于使用框架的自动转换能力带来的开发和维护效率提升与设计多一个VO所多做的事情带来的开发和维护效率的下降之间的比对。</li><li>如果页面出现一个“大视图”，而组成这个大视图的所有数据需要调用多个服务，返回多个DTO来组装（当然，这同样可以通过服务层提供一次性返回一个大视图的DTO来取代，但在服务层提供一个这样的方法是否合适，需要在设计层面进行权衡）。</li></ul><h2 id="DTO与DO的区别"><a href="#DTO与DO的区别" class="headerlink" title="DTO与DO的区别"></a>DTO与DO的区别</h2><p>　　首先是概念上的区别，DTO是展示层和服务层之间的数据传输对象（可以认为是两者之间的协议），而DO是对现实世界各种业务角色的抽象，这就引出了两者在数据上的区别，例如UserInfo和User（对于DTO和DO的命名规则，请参见笔者前面的一篇博文），对于一个getUser方法来说，本质上它永远不应该返回用户的密码，因此UserInfo至少比User少一个password的数据。而在领域驱动设计中，正如第一篇系列文章所说，DO不是简单的POJO，它具有领域业务逻辑。</p><h2 id="DTO与DO的应用"><a href="#DTO与DO的应用" class="headerlink" title="DTO与DO的应用"></a>DTO与DO的应用</h2><p>　　从上一节的例子中，细心的读者可能会发现问题：既然getUser方法返回的UserInfo不应该包含password，那么就不应该存在password这个属性定义，但如果同时有一个createUser的方法，传入的UserInfo需要包含用户的password，怎么办？在设计层面，展示层向服务层传递的DTO与服务层返回给展示层的DTO在概念上是不同的，但在实现层面，我们通常很少会这样做（定义两个UserInfo，甚至更多），因为这样做并不见得很明智，我们完全可以设计一个完全兼容的DTO，在服务层接收数据的时候，不该由展示层设置的属性（如订单的总价应该由其单价、数量、折扣等决定），无论展示层是否设置，服务层都一概忽略，而在服务层返回数据时，不该返回的数据（如用户密码），就不设置对应的属性。</p><p>　　对于DO来说，还有一点需要说明：为什么不在服务层中直接返回DO呢？这样可以省去DTO的编码和转换工作，原因如下：</p><ul><li>两者在本质上的区别可能导致彼此并不一一对应，一个DTO可能对应多个DO，反之亦然，甚至两者存在多对多的关系。</li><li>DO具有一些不应该让展示层知道的数据</li><li>DO具有业务方法，如果直接把DO传递给展示层，展示层的代码就可以绕过服务层直接调用它不应该访问的操作，对于基于AOP拦截服务层来进行访问控制的机制来说，这问题尤为突出，而在展示层调用DO的业务方法也会因为事务的问题，让事务难以控制。</li><li>对于某些ORM框架（如Hibernate）来说，通常会使用“延迟加载”技术，如果直接把DO暴露给展示层，对于大部分情况，展示层不在事务范围之内（Open session in view在大部分情况下不是一种值得推崇的设计），如果其尝试在Session关闭的情况下获取一个未加载的关联对象，会出现运行时异常（对于Hibernate来说，就是LazyInitiliaztionException）。</li><li>从设计层面来说，展示层依赖于服务层，服务层依赖于领域层，如果把DO暴露出去，就会导致展示层直接依赖于领域层，这虽然依然是单向依赖，但这种跨层依赖会导致不必要的耦合。</li></ul><br>　　对于DTO来说，也有一点必须进行说明，就是DTO应该是一个“扁平的二维对象”，举个例子来说明：如果User会关联若干个其他实体（例如Address、Account、Region等），那么getUser()返回的UserInfo，是否就需要把其关联的对象的DTO都一并返回呢？如果这样的话，必然导致数据传输量的大增，对于分布式应用来说，由于涉及数据在网络上的传输、序列化和反序列化，这种设计更不可接受。如果getUser除了要返回User的基本信息外，还需要返回一个AccountId、AccountName、RegionId、RegionName，那么，请把这些属性定义到UserInfo中，把一个“立体”的对象树“压扁”成一个“扁平的二维对象”，笔者目前参与的项目是一个分布式系统，该系统不管三七二十一，把一个对象的所有关联对象都转换为相同结构的DTO对象树并返回，导致性能非常的慢。<h2 id="DO与PO的区别"><a href="#DO与PO的区别" class="headerlink" title="DO与PO的区别"></a>DO与PO的区别</h2><p>　　DO和PO在绝大部分情况下是一一对应的，PO是只含有get/set方法的POJO，但某些场景还是能反映出两者在概念上存在本质的区别：</p><ul><li>DO在某些场景下不需要进行显式的持久化，例如利用策略模式设计的商品折扣策略，会衍生出折扣策略的接口和不同折扣策略实现类，这些折扣策略实现类可以算是DO，但它们只驻留在静态内存，不需要持久化到持久层，因此，这类DO是不存在对应的PO的。</li><li>同样的道理，某些场景下，PO也没有对应的DO，例如老师Teacher和学生Student存在多对多的关系，在关系数据库中，这种关系需要表现为一个中间表，也就对应有一个TeacherAndStudentPO的PO，但这个PO在业务领域没有任何现实的意义，它完全不能与任何DO对应上。这里要特别声明，并不是所有多对多关系都没有业务含义，这跟具体业务场景有关，例如：两个PO之间的关系会影响具体业务，并且这种关系存在多种类型，那么这种多对多关系也应该表现为一个DO，又如：“角色”与“资源”之间存在多对多关系，而这种关系很明显会表现为一个DO——“权限”。</li><li>某些情况下，为了某种持久化策略或者性能的考虑，一个PO可能对应多个DO，反之亦然。例如客户Customer有其联系信息Contacts，这里是两个一对一关系的DO，但可能出于性能的考虑（极端情况，权作举例），为了减少数据库的连接查询操作，把Customer和Contacts两个DO数据合并到一张数据表中。反过来，如果一本图书Book，有一个属性是封面cover，但该属性是一副图片的二进制数据，而某些查询操作不希望把cover一并加载，从而减轻磁盘IO开销，同时假设ORM框架不支持属性级别的延迟加载，那么就需要考虑把cover独立到一张数据表中去，这样就形成一个DO对应对个PO的情况。</li><li>PO的某些属性值对于DO没有任何意义，这些属性值可能是为了解决某些持久化策略而存在的数据，例如为了实现“乐观锁”，PO存在一个version的属性，这个version对于DO来说是没有任何业务意义的，它不应该在DO中存在。同理，DO中也可能存在不需要持久化的属性。</li></ul><h2 id="DO与PO的应用"><a href="#DO与PO的应用" class="headerlink" title="DO与PO的应用"></a>DO与PO的应用</h2><p>　　由于ORM框架的功能非常强大而大行其道，而且JavaEE也推出了JPA规范，现在的业务应用开发，基本上不需要区分DO与PO，PO完全可以通过JPA，Hibernate Annotations/hbm隐藏在DO之中。虽然如此，但有些问题我们还必须注意：</p><ul><li>对于DO中不需要持久化的属性，需要通过ORM显式的声明，如：在JPA中，可以利用@Transient声明。</li><li>对于PO中为了某种持久化策略而存在的属性，例如version，由于DO、PO合并了，必须在DO中声明，但由于这个属性对DO是没有任何业务意义的，需要让该属性对外隐藏起来，最常见的做法是把该属性的get/set方法私有化，甚至不提供get/set方法，但对于Hibernate来说，这需要特别注意，由于Hibernate从数据库读取数据转换为DO时，是利用反射机制先调用DO的空参数构造函数构造DO实例，然后再利用JavaBean的规范反射出set方法来为每个属性设值，如果不显式声明set方法，或把set方法设置为private，都会导致Hibernate无法初始化DO，从而出现运行时异常，可行的做法是把属性的set方法设置为protected。</li><li>对于一个DO对应多个PO，或者一个PO对应多个DO的场景，以及属性级别的延迟加载，Hibernate都提供了很好的支持，请参考Hibnate的相关资料。</li></ul><br>　　到目前为止，相信大家都已经比较清晰的了解VO、DTO、DO、PO的概念、区别和实际应用了。通过上面的详细分析，我们还可以总结出一个原则：分析设计层面和实现层面完全是两个独立的层面，即使实现层面通过某种技术手段可以把两个完全独立的概念合二为一，在分析设计层面，我们仍然（至少在头脑中）需要把概念上独立的东西清晰的区分开来，这个原则对于做好分析设计非常重要（工具越先进，往往会让我们越麻木）。<br>　　<blockquote><p>作者：Johnny.Liang<br>来源：blogjava.net/johnnylzb/archive/2010/05/27/321968.html</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VO </tag>
            
            <tag> DTO </tag>
            
            <tag> DO </tag>
            
            <tag> PO </tag>
            
            <tag> 领域驱动 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
