<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>通用Service + 多线程完美解决批处理问题</title>
      <link href="/2022/07/19/%E9%80%9A%E7%94%A8Service%20+%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3%E6%89%B9%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/19/%E9%80%9A%E7%94%A8Service%20+%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3%E6%89%B9%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在对数据量大的情况下，进行批量操作的时候，效率直接拉跨，同时还要考虑事务机制问题。那是否有既简单又通用的批处理思路呢？当然，多线程执行批量任务就是一种十分重要的操作思路</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>获取数据库连接，控制事务机制</li><li>对大集合进行拆分成N个小集合。</li><li>开启线程池，对小集合进行批量更新操作，并返回执行结果。</li><li>线程批量提交，返回Future对象，进而判断事务是否需要提交或回滚</li></ol><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiFunction;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ThreadPoolService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | goitman.blog.csdn.net</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 批处理服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/14 16:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拆分大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">splitSize</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  线程方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  [bigList 需拆分集合, mapperClass mapper的calss对象, function 双重函数]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, U, R&gt; <span class="keyword">void</span> <span class="title function_">threadMethod</span><span class="params">(List&lt;T&gt; bigList, Class&lt;U&gt; mapperClass, BiFunction&lt;List&lt;T&gt;, U, R&gt; function)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取sql会话</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> sqlSession.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取CPU核心数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">corePoolSize</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors() + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maximumPoolSize</span> <span class="operator">=</span> (<span class="type">int</span>) Math.floor(bigList.size() / splitSize * <span class="number">2</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> (<span class="type">int</span>) Math.floor(maximumPoolSize / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * corePoolSize：线程数(决定添加的任务是开辟新的线程执行,还是放到任务队列)</span></span><br><span class="line"><span class="comment">         * maximumPoolSize：最大线程数，根据任务队列的类型，决定线程池会开辟的最大线程数量</span></span><br><span class="line"><span class="comment">         * keepAliveTime：空闲线程数量超过corePoolSize时，多余的线程会在多长时间内被销毁</span></span><br><span class="line"><span class="comment">         * workQueue：任务队列，被添加到线程池中，但尚未被执行的任务；分为直接提交队列、有界任务队列、无界任务队列、优先任务队列</span></span><br><span class="line"><span class="comment">         * AbortPolicy：拒绝策略，AbortPolicy策略会直接抛出异常，阻止系统正常工作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                corePoolSize,</span><br><span class="line">                maximumPoolSize,</span><br><span class="line">                <span class="number">10</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(capacity),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将集合拆分成小集合，并封装</span></span><br><span class="line">        List&lt;List&lt;T&gt;&gt; resultList = Lists.partition(bigList, splitSize);</span><br><span class="line"></span><br><span class="line">        List&lt;Callable&lt;Integer&gt;&gt; callList = Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭事务自动提交</span></span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">// 根据Class对象，获取相应mapper</span></span><br><span class="line">            <span class="type">U</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(mapperClass);</span><br><span class="line">            <span class="comment">// 对拆分的集合进行多线程执行批量处理</span></span><br><span class="line">            <span class="keyword">for</span> (List&lt;T&gt; parList : resultList) &#123;</span><br><span class="line">                <span class="comment">// 使用Callable多线程，获取执行结果</span></span><br><span class="line">                <span class="comment">// callable和Runnable的区别在于：callable可以有返回值，也可以抛出异常的特性，而Runnable没有</span></span><br><span class="line">                Callable&lt;Integer&gt; callable = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        List&lt;T&gt; updateList = Lists.newArrayList();</span><br><span class="line">                        <span class="keyword">for</span> (T t : parList) &#123;</span><br><span class="line">                            updateList.add(t);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> (Integer) function.apply(updateList, mapper);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                callList.add(callable);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 批量提交，返回Future对象</span></span><br><span class="line">            List&lt;Future&lt;Integer&gt;&gt; futures = threadPool.invokeAll(callList);</span><br><span class="line">            <span class="comment">// 遍历判断返回值</span></span><br><span class="line">            <span class="keyword">for</span> (Future&lt;Integer&gt; future : futures) &#123;</span><br><span class="line">                <span class="keyword">if</span> (future.get() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 事务回滚</span></span><br><span class="line">                    connection.rollback();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            int i = 100 / 0;</span></span><br><span class="line">            <span class="comment">// 事务提交</span></span><br><span class="line">            connection.commit();</span><br><span class="line">            System.out.println(bigList.size() + <span class="string">&quot; 条数据耗时：&quot;</span> + (System.currentTimeMillis() - start) / <span class="number">1000</span> + <span class="string">&quot; s&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 事务回滚</span></span><br><span class="line">            connection.rollback();</span><br><span class="line">            System.out.println(<span class="string">&quot;异常耗时：&quot;</span> + (System.currentTimeMillis() - start) / <span class="number">1000</span> + <span class="string">&quot; s&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>没写TEST测试，直接用了个预加载来模拟数据的批处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.commandrunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.mapper.BallDao;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Period;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.service.ThreadPoolService;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> StartRunner</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/7/12 16:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolService threadPoolService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        List&lt;Period&gt; list = Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">10001</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="type">Period</span> <span class="variable">period</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Period</span>(i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            list.add(period);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        threadPoolService.threadMethod(list, BallDao.class, (data, BallDao) -&gt; BallDao.insertPeriod(data));</span><br><span class="line"><span class="comment">//        threadPoolService.threadMethod(list, BallTwoDao.class, (data, BallTwoDao) -&gt; BallTwoDao.deletePeriod(data));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h1><p>毕竟Callable可以返回结果，也可以抛出异常供后续处理，自然效率上要比Runnable差那么一丢丢，但好处实在是太多太多。多线程耍得起飞的人，人生都开启了多线程模式……</p><blockquote><p>源码：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/generalTool-demo">https://github.com/wangdaicong/spring-boot-project/tree/master/generalTool-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> Callable </tag>
            
            <tag> Runnable </tag>
            
            <tag> 事务控制 </tag>
            
            <tag> java8 </tag>
            
            <tag> 双重函数 </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot同时支持 form 表单、form-data、json 的优雅写法</title>
      <link href="/2022/07/09/SpringBoot%E5%90%8C%E6%97%B6%E6%94%AF%E6%8C%81%20form%20%E8%A1%A8%E5%8D%95%E3%80%81form-data%E3%80%81json%20%E7%9A%84%E4%BC%98%E9%9B%85%E5%86%99%E6%B3%95/"/>
      <url>/2022/07/09/SpringBoot%E5%90%8C%E6%97%B6%E6%94%AF%E6%8C%81%20form%20%E8%A1%A8%E5%8D%95%E3%80%81form-data%E3%80%81json%20%E7%9A%84%E4%BC%98%E9%9B%85%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在 Java 中，一个接口只支持一种 <code>content-type</code>，<code>json</code> 就用 <code>@RequestBody</code>，<code>form</code> 表单就用<code> @RequestParam</code> 或<code>不写</code>，<code>form-data</code> 就用 <code>MultipartFile</code>。</p><h1 id="兼容版本"><a href="#兼容版本" class="headerlink" title="兼容版本"></a>兼容版本</h1><p>如果要把在一个接口中同时兼容三种，比较笨的办法就是获取 <code>HttpServletRequest</code>，然后自己再写方法解析。类似如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">getParams</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> request.getContentType();</span><br><span class="line">    <span class="keyword">if</span> (contentType.contains(<span class="string">&quot;application/json&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// json 解析...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (contentType.contains(<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// form 表单解析 ...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (contentType.contains(<span class="string">&quot;multipart&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 文件流解析</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(<span class="string">&quot;不支持的content-type&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样写有弊端</p><blockquote><ol><li>代码很丑，具体到解析代码又臭又长</li><li>只能返回固定 map 或者自己重新组装参数类</li><li>无法使用<code>@Valid</code>校验参数，像这种几十个参数都要检验的简直是灾难</li></ol></blockquote><h1 id="优雅版本"><a href="#优雅版本" class="headerlink" title="优雅版本"></a>优雅版本</h1><p>网上有 <code>form</code> 表单和 <code>json</code> 同时兼容的版本，但是没有兼容 <code>form-data</code>，在这做一下补充。</p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> GamePHP &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义注解解析"><a href="#自定义注解解析" class="headerlink" title="自定义注解解析"></a>自定义注解解析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GamePHPMethodProcessor</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GameFormMethodArgumentResolver formResolver;</span><br><span class="line">    <span class="keyword">private</span> GameJsonMethodArgumentResolver jsonResolver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GamePHPMethodProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">PHPMessageConverter</span> <span class="variable">PHPMessageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PHPMessageConverter</span>();</span><br><span class="line">        messageConverters.add(PHPMessageConverter);</span><br><span class="line"></span><br><span class="line">        jsonResolver = <span class="keyword">new</span> <span class="title class_">GameJsonMethodArgumentResolver</span>(messageConverters);</span><br><span class="line">        formResolver = <span class="keyword">new</span> <span class="title class_">GameFormMethodArgumentResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">        <span class="type">GamePHP</span> <span class="variable">ann</span> <span class="operator">=</span> parameter.getParameterAnnotation(GamePHP.class);</span><br><span class="line">        <span class="keyword">return</span> (ann != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ServletRequest</span> <span class="variable">servletRequest</span> <span class="operator">=</span> nativeWebRequest.getNativeRequest(ServletRequest.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> servletRequest.getContentType();</span><br><span class="line">        <span class="keyword">if</span> (contentType == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;不支持contentType&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contentType.contains(<span class="string">&quot;application/json&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> jsonResolver.resolveArgument(methodParameter, modelAndViewContainer, nativeWebRequest, webDataBinderFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contentType.contains(<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> formResolver.resolveArgument(methodParameter, modelAndViewContainer, nativeWebRequest, webDataBinderFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contentType.contains(<span class="string">&quot;multipart&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> formResolver.resolveArgument(methodParameter, modelAndViewContainer, nativeWebRequest, webDataBinderFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;不支持contentType&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加到-spring-configuration"><a href="#添加到-spring-configuration" class="headerlink" title="添加到 spring configuration"></a>添加到 spring configuration</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MyMvcConfigurer <span class="title function_">mvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyMvcConfigurer</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyMvcConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> &#123;</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> <span class="title class_">GamePHPMethodProcessor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="form-data-的特殊处理"><a href="#form-data-的特殊处理" class="headerlink" title="form-data 的特殊处理"></a>form-data 的特殊处理</h2><ul><li>引入 jar 包</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>新增解析 bean</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name = &quot;multipartResolver&quot;)</span></span><br><span class="line"><span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">CommonsMultipartResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    resolver.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    resolver.setResolveLazily(<span class="literal">true</span>);<span class="comment">//resolveLazily属性启用是为了推迟文件解析，以在在UploadAction中捕获文件大小异常</span></span><br><span class="line">    resolver.setMaxInMemorySize(<span class="number">40960</span>);</span><br><span class="line">    resolver.setMaxUploadSize(<span class="number">50</span>*<span class="number">1024</span>*<span class="number">1024</span>);<span class="comment">//上传文件大小 50M 50*1024*1024</span></span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特殊说明，<code>GameJsonMethodArgumentResolver</code> 和 <code>GameFormMethodArgumentResolver</code> 是我们自定义的 json 和 form 解析，如果你没有自定义的，使用 spring 默认的 <code>ServletModelAttributeMethodProcessor</code> 和 <code>RequestResponseBodyMethodProcessor</code> 也可以。</p><p>只需将 <code>@RequestParam</code> 注解改为<code> @GamePHP</code>，接口即可同时兼容三种 <code>content-type</code>。</p><p>其流程为，spring 启动的时候，<code>MyMvcConfigurer</code> 调用 <code>addArgumentResolvers</code> 方法将 <code>GamePHPMethodProcessor</code> 注入，接到请求时，<code>supportsParameter</code> 方法判断是否使用此 <code>resolver</code>，如果为 <code>true</code>，则进入 <code>resolveArgument</code> 方法执行。</p><blockquote><p>原文：juejin.cn&#x2F;post&#x2F;7054441239839506446</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> form </tag>
            
            <tag> form-data </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键部署Redis任意版本</title>
      <link href="/2022/07/06/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2Redis%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%AC/"/>
      <url>/2022/07/06/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2Redis%E4%BB%BB%E6%84%8F%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>今天给大家分享一个超级实用的脚本，Linux环境下一键自动安装部署Redis的任意版本，记住是<code>任意版本</code>哦！</p><blockquote><p>脚本用法：<code>chmod 755 redis-install.sh &amp;&amp; sh redis-install.sh 4.0.10</code> （后面跟的是你需要的版本号，需要什么版本就写什么版本），我这里安装的<code>4.0.10</code></p></blockquote><h1 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/bash</span></span><br><span class="line"><span class="comment">##redis任何版本全程自动化源码编译安装</span></span><br><span class="line"><span class="comment">##用法： sh redis-install.sh 4.0.10 （后面跟的是你需要的版本号，需要什么版本就写什么版本），我这里安装的4.0.10</span></span><br><span class="line">version=<span class="variable">$1</span></span><br><span class="line"><span class="function"><span class="title">usage</span></span>()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;usage: <span class="variable">$0</span> version&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">usage</span><br><span class="line"><span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Redis安装包下载</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br><span class="line"><span class="keyword">if</span> [ ! -f redis-<span class="variable">$&#123;version&#125;</span>.tar.gz ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">curl -o /usr/local/src/redis-<span class="variable">$&#123;version&#125;</span>.tar.gz http://download.redis.io/releases/redis-<span class="variable">$&#123;version&#125;</span>.tar.gz</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Redis依赖包安装</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache fast</span><br><span class="line">yum -y install gcc gcc-c++ tcl</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译Redis所需要的gcc</span></span><br><span class="line">yum -y install centos-release-scl</span><br><span class="line">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line"><span class="built_in">source</span> /opt/rh/devtoolset-9/enable</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt;/etc/profile</span><br><span class="line">gcc --version</span><br><span class="line"></span><br><span class="line"><span class="comment">##内系统参数核优化</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/rc.d/rc.local &lt;&lt; <span class="string">&quot;EOF&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##关闭Linux的THP（内存管理系统）通过使用更大的内存页面，来减少具有大量内存的计算机上的TLB的开销</span></span><br><span class="line"><span class="keyword">if</span> [ -f /sys/kernel/mm/transparent_hugepage/enabled ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /sys/kernel/mm/transparent_hugepage/defrag ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">chmod</span> u+x /etc/rc.d/rc.local</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /sys/kernel/mm/transparent_hugepage/enabled ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /sys/kernel/mm/transparent_hugepage/defrag ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt; /etc/sysctl.conf &lt;&lt; <span class="string">&quot;EOF&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Linux系统内核参数优化</span></span><br><span class="line">net.core.somaxconn = 2048</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 2048</span><br><span class="line">vm.overcommit_memory = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/security/limits.conf &lt;&lt; <span class="string">&quot;EOF&quot;</span></span><br><span class="line">root soft nofile 65535</span><br><span class="line">root hard nofile 65535</span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#Redis编译安装</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br><span class="line">tar -zxvf redis-<span class="variable">$&#123;version&#125;</span>.tar.gz</span><br><span class="line"><span class="built_in">cd</span> /usr/local/src/redis-<span class="variable">$&#123;version&#125;</span></span><br><span class="line">make</span><br><span class="line">make PREFIX=/usr/local/redis install</span><br><span class="line"></span><br><span class="line"><span class="comment">#Redis基础配置</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/redis/&#123;etc,logs,data&#125;</span><br><span class="line">egrep -v <span class="string">&quot;^$|^#&quot;</span> /usr/local/src/redis-<span class="variable">$&#123;version&#125;</span>/redis.conf &gt; /usr/local/redis/etc/redis.conf</span><br><span class="line"><span class="comment">#sed -i &quot;s/bind 127.0.0.1/bind 0.0.0.0/g&quot; /usr/local/redis/etc/redis.conf</span></span><br><span class="line">sed -i <span class="string">&quot;s/protected-mode yes/protected-mode no/g&quot;</span> /usr/local/redis/etc/redis.conf</span><br><span class="line">sed -i <span class="string">&quot;s/daemonize no/daemonize yes/g&quot;</span> /usr/local/redis/etc/redis.conf</span><br><span class="line">sed -i <span class="string">&quot;s/pidfile \/var\/run\/redis_6379.pid/pidfile \/usr\/local\/redis\/redis.pid/g&quot;</span> /usr/local/redis/etc/redis.conf</span><br><span class="line">sed -i <span class="string">&quot;s/dir \.\//dir \/usr\/local\/redis\/data/g&quot;</span> /usr/local/redis/etc/redis.conf</span><br><span class="line">sed -i <span class="string">&quot;s/logfile \&quot;\&quot;/logfile \&quot;\/usr\/local\/redis\/logs\/redis.log\&quot;/g&quot;</span> /usr/local/redis/etc/redis.conf</span><br><span class="line">sed -i <span class="string">&quot;s/dbfilename dump.rdb/dbfilename dump.rdb/g&quot;</span> /usr/local/redis/etc/redis.conf</span><br><span class="line">sed -i <span class="string">&quot;s/appendfilename \&quot;appendonly.aof\&quot;/appendfilename \&quot;appendonly.aof\&quot;/g&quot;</span> /usr/local/redis/etc/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#PATH配置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$&#123;PATH&#125;</span>:/usr/local/redis/bin&quot;</span> &gt;&gt;/etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment">#启动redis服务</span></span><br><span class="line">/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class="line"><span class="comment">#查看redis监听端口</span></span><br><span class="line">netstat -tanp|grep redis</span><br></pre></td></tr></table></figure><h1 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h1><p>执行脚本后开始自动安装redis4.0.10<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/07/06/5MoIJB7FDmjf8vb.png"></p><p>自动安装Redis4.0.10所需要的的依赖包，如下图所示：<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/07/06/cePFxkIDL2SVKmE.png"></p><p>自动开始解压：<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/07/06/RYI8Eygj3un2NsK.png"></p><p>开始自动make<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/07/06/nNBJR8iA3VP7FUx.png"></p><p>开始自动make install<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/07/06/DrbHtW6NyLKiI4P.png"></p><p>安装完成，Redis服务已成功启动：<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/07/06/32h68P9suJDdZTB.png"></p><p>到这里整个自动安装脚本已成功执行完毕，我们可以收到通过ps –ef|grep redis来查看服务状态以及监听端口。<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/07/06/sJ4aBMcWlb6EwAo.png"></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>登陆redis，执行简单的语句：<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/07/06/UAasmY1ROtSq4Ko.png"></p><blockquote><p>原文：toutiao.com&#x2F;article&#x2F;6906374379522015747</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
            <tag> shell脚本 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis分布式锁的8大坑</title>
      <link href="/2022/06/29/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%848%E5%A4%A7%E5%9D%91/"/>
      <url>/2022/06/29/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%848%E5%A4%A7%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>在分布式系统中，由于<code>Redis分布式锁</code>相对于更简单和高效，成为了分布式锁的首先，被用到了很多实际业务场景当中。</p><p>但不是说用了Redis分布式锁，就可以高枕无忧了，如果没有用好或者用对，也会引来一些意想不到的问题。</p><p>今天一起聊聊Redis分布式锁的一些坑，给有需要的朋友一个参考。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/27/oElAm2ZWiQgkObT.png"></p><h1 id="非原子操作"><a href="#非原子操作" class="headerlink" title="非原子操作"></a>非原子操作</h1><p>使用Redis的分布式锁，首先想到的可能是<code>setNx命令</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (jedis.setnx(lockKey, val) == <span class="number">1</span>) &#123;</span><br><span class="line">   jedis.expire(lockKey, timeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>容易，三下五除二就可以把代码写好。</p><blockquote><p>这段代码确实可以加锁成功，但<code>有没有发现什么问题？</code></p><p>加锁操作和后面的设置超时时间是分开的，并非原子操作。</p><p>假如加锁成功，但是设置<code>超时时间失败了，该lockKey就变成永不失效</code>。假如<code>在高并发场景中，有大量的lockKey加锁成功了，但不会失效，有可能直接导致redis内存空间不</code>足。</p></blockquote><p>那么，有没有保证原子性的加锁命令呢？</p><p>答案是：有，请看下面。</p><h1 id="忘了释放锁"><a href="#忘了释放锁" class="headerlink" title="忘了释放锁"></a>忘了释放锁</h1><p>上面说到使用<code>setNx命令加锁</code>操作和设置超时时间是分开的，并非原子操作。</p><p>而在Redis中还有<code>set命令</code>，该命令可以指定多个参数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(lockKey, requestId, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, expireTime);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;OK&quot;</span>.equals(result)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>lockKey：锁的标识</li><li>requestId：请求id</li><li>NX：只在键不存在时，才对键进行设置操作。</li><li>PX：设置键的过期时间为 millisecond 毫秒。</li><li>expireTime：过期时间</li></ul></blockquote><p><code>set命令是原子操作</code>，加锁和设置超时时间，一个命令就能轻松搞定。</p><p>使用<code>set命令加锁</code>，表面上看起来没有问题。但如果仔细想想，<code>加锁之后，每次都要达到了超时时间才释放锁，会不会有点不合理？</code>加锁后，如果不及时释放锁，会有很多问题。</p><p>分布式锁更合理的用法是：</p><blockquote><ol><li>手动加锁</li><li>业务操作</li><li>手动释放锁</li><li>如果手动释放锁失败了，则达到超时时间，redis会自动释放锁。</li></ol></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/29/y8EmnMdsCFDKkIr.png"></p><p>那么问题来了，如何释放锁呢？</p><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(lockKey, requestId, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, expireTime);</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;OK&quot;</span>.equals(result)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    unlock(lockKey);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>需要捕获业务代码的异常，然后在finally中释放锁。换句话说就是：<code>无论代码执行成功或失败了，都需要释放锁。</code></p><p>此时，有些朋友可能会问：<code>假如刚好在释放锁的时候，系统被重启了，或者网络断线了，或者机房断点了，不也会导致释放锁失败？</code></p><p>这是一个好问题，因为这种小概率问题确实存在。</p><p>但还记得前面给锁设置过超时时间吗？即使出现异常情况造成释放锁失败，但到了设定的超时时间，锁还是会被Redis自动释放。</p><p>但<code>只在finally中释放锁，就够了吗？</code></p><h1 id="释放了别人的锁"><a href="#释放了别人的锁" class="headerlink" title="释放了别人的锁"></a>释放了别人的锁</h1><p>做人要厚道，先回答上面的问题：<code>只在finally中释放锁，当然是不够的，因为释放锁的姿势，还是不对。</code></p><p>哪里不对？</p><blockquote><p>答：<code>在多线程场景中，可能会出现释放了别人的锁的情况。</code></p></blockquote><p>有些朋友可能会反驳：假设在多线程场景中，线程A获取到了锁，但如果线程A没有释放锁，此时，线程B是获取不到锁的，何来释放了别人锁之说？</p><blockquote><p>答：<code>假如线程A和线程B，都使用lockKey加锁。线程A加锁成功了，但是由于业务功能耗时时间很长，超过了设置的超时时间。这时候，Redis会自动释放lockKey锁。此时，线程B就能给lockKey加锁成功了，接下来执行它的业务操作。恰好这个时候，线程A执行完了业务功能，接下来，在finally方法中释放了锁lockKey。这不就出问题了，线程B的锁，被线程A释放了。</code></p></blockquote><p>这个时候，线程B肯定哭晕在厕所里，并且嘴里还振振有词。</p><p>那么，如何解决这个问题呢？</p><p>不知道注意到没？<code>在使用set命令加锁时，除了使用lockKey锁标识，还多设置了一个参数：requestId，为什么要需要记录requestId呢？</code></p><blockquote><p>答：requestId是在释放锁的时候用的。</p></blockquote><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (jedis.get(lockKey).equals(requestId)) &#123;</span><br><span class="line">    jedis.del(lockKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>在释放锁的时候，先获取到该锁的值（之前设置值就是requestId），然后<code>判断跟之前设置的值是否相同，如果相同才允许删除锁，返回成功。如果不同，则直接返回失败。</code></p><blockquote><p>换句话说就是：自己只能释放自己加的锁，不允许释放别人加的锁。</p></blockquote><p>这里为什么要用requestId，用userId不行吗？</p><blockquote><p>答：如果用userId的话，对于请求来说并不唯一，多个不同的请求，可能使用同一个userId。而requestId是全局唯一的，不存在加锁和释放锁乱掉的情况。</p></blockquote><p>此外，使用lua脚本，也能解决释放了别人的锁的问题：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then </span><br><span class="line"> return redis.call(&#x27;del&#x27;, KEYS[1]) </span><br><span class="line">else </span><br><span class="line">  return 0 </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>lua脚本能保证查询锁是否存在和删除锁是原子操作，用它来释放锁效果更好一些。</p><p>说到lua脚本，其实加锁操作也建议使用lua脚本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then</span><br><span class="line">    redis.call(&#x27;hset&#x27;, KEYS[1], ARGV[2], 1); </span><br><span class="line">    redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); </span><br><span class="line"> return nil; </span><br><span class="line">end</span><br><span class="line">if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1)</span><br><span class="line">   redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); </span><br><span class="line">   redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); </span><br><span class="line">  return nil; </span><br><span class="line">end; </span><br><span class="line">return redis.call(&#x27;pttl&#x27;, KEYS[1]);</span><br></pre></td></tr></table></figure><p>这是Redisson框架的加锁代码，写的不错，大家可以借鉴一下。</p><p>有趣，下面还有哪些好玩的东西？</p><h1 id="大量失败请求"><a href="#大量失败请求" class="headerlink" title="大量失败请求"></a>大量失败请求</h1><p>上面的加锁方法看起来好像没有问题，但如果仔细想想，<code>如果有1万的请求同时去竞争那把锁，可能只有一个请求是成功的，其余的9999个请求都会失败。</code></p><p>在秒杀场景下，会有什么问题？</p><blockquote><p>答：每1万个请求，有1个成功。再1万个请求，有1个成功。如此下去，直到库存不足。这就变成均匀分布的秒杀了，跟想象中的不一样。</p></blockquote><p>如何解决这个问题呢？</p><p>此外，还有一种场景：</p><blockquote><p>比如，有两个线程同时上传文件到sftp，上传文件前先要创建目录。假设两个线程需要创建的目录名都是当天的日期，比如：20210920，如果不做任何控制，直接并发的创建目录，第二个线程必然会失败。</p></blockquote><p>这时候有些朋友可能会说：这还不容易，加一个Redis分布式锁就能解决问题了，此外再判断一下，如果目录已经存在就不创建，只有目录不存在才需要创建。</p><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(lockKey, requestId, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, expireTime);</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;OK&quot;</span>.equals(result)) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!exists(path)) &#123;</span><br><span class="line">       mkdir(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">    unlock(lockKey,requestId);</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>一切看似美好，但经不起仔细推敲。</p><p>来自灵魂的一问：<code>第二个请求如果加锁失败了，接下来，是返回失败，还是返回成功呢？</code></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/29/yAdoqeiSknwQlCX.png"></p><p><code>显然第二个请求，肯定是不能返回失败的，如果返回失败了，这个问题还是没有被解决。</code>如果文件还没有上传成功，直接返回成功会有更大的问题。头疼，到底该如何解决呢？</p><blockquote><p>答：使用<code>自旋锁</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="type">Long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">     <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(lockKey, requestId, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, expireTime);</span><br><span class="line">     <span class="keyword">if</span> (<span class="string">&quot;OK&quot;</span>.equals(result)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!exists(path)) &#123;</span><br><span class="line">           mkdir(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line">      <span class="keyword">if</span> (time&gt;=timeout) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          Thread.sleep(<span class="number">50</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">    unlock(lockKey,requestId);</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><code>在规定的时间，比如500毫秒内，自旋不断尝试加锁（说白了，就是在死循环中，不断尝试加锁），如果成功则直接返回。如果失败，则休眠50毫秒，再发起新一轮的尝试。如果到了超时时间，还未加锁成功，则直接返回失败。</code></p><p>好吧，学到一招了，还有吗？</p><h1 id="锁重入问题"><a href="#锁重入问题" class="headerlink" title="锁重入问题"></a>锁重入问题</h1><p>都知道<code>Redis分布式锁是互斥的</code>。假如对某个key加锁了，如果该key对应的锁还没失效，再用相同key去加锁，大概率会失败。</p><p>没错，大部分场景是没问题的。</p><p>为什么说是大部分场景呢？</p><p>因为还有这样的场景：</p><blockquote><p>假设在某个请求中，需要获取一颗满足条件的菜单树或者分类树。以<code>菜单</code>为例，这就需要在接口中从根节点开始，递归遍历出所有满足条件的子节点，然后组装成一颗菜单树。</p><p>需要注意的是菜单不是一成不变的，在后台系统中运营同学可以动态添加、修改和删除菜单。为了保证在并发的情况下，每次都可能获取最新的数据，这里可以加<code>Redis分布式锁</code>。</p><p>加<code>Redis分布式锁</code>的思路是对的。但接下来问题来了，<code>在递归方法中递归遍历多次，每次都是加的同一把锁。递归第一层当然是可以加锁成功的，但递归第二层、第三层...第N层，不就会加锁失败了？</code></p></blockquote><p>递归方法中加锁的伪代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">expireTime</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> level,String lockKey,String requestId)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">     <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(lockKey, requestId, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, expireTime);</span><br><span class="line">     <span class="keyword">if</span> (<span class="string">&quot;OK&quot;</span>.equals(result)) &#123;</span><br><span class="line">        <span class="keyword">if</span>(level&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">           <span class="built_in">this</span>.fun(++level,lockKey,requestId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     unlock(lockKey,requestId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你直接这么用，看起来好像没有问题。但最终执行程序之后发现，等待你的结果只有一个：<code>出现异常</code>。</p><p>因为<code>从根节点开始，第一层递归加锁成功，还没释放锁，就直接进入第二层递归。因为锁名为lockKey，并且值为requestId的锁已经存在，所以第二层递归大概率会加锁失败，然后返回到第一层。第一层接下来正常释放锁，然后整个递归方法直接返回了。</code></p><p>这下子，大家知道出现什么问题了吧？</p><p>没错，递归方法其实只执行了第一层递归就返回了，其他层递归由于加锁失败，根本没法执行。</p><p>那么这个问题该如何解决呢？</p><blockquote><p>答：使用<code>可重入锁</code>。</p></blockquote><p>以<code>Redisson框架为例，它的内部实现了可重入锁的功能</code>。</p><p>由此可见，Redisson在Redis分布式锁中的江湖地位很高。</p><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">expireTime</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String lockKey)</span> &#123;</span><br><span class="line">  <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getLock(lockKey);</span><br><span class="line">  <span class="built_in">this</span>.fun(lock,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(RLock lock,<span class="type">int</span> level)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">      lock.lock(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">      <span class="keyword">if</span>(level&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">         <span class="built_in">this</span>.fun(lock,++level);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     lock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码也许并不完美，这里只是给了一个大致的思路，如果大家有这方面需求的话，以上代码仅供参考。</p><p>接下来，聊聊Redisson可重入锁的实现原理。</p><p>加锁主要是通过以下脚本实现的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) </span><br><span class="line">then  </span><br><span class="line">   redis.call(&#x27;hset&#x27;, KEYS[1], ARGV[2], 1);        redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); </span><br><span class="line">   return nil; </span><br><span class="line">end;</span><br><span class="line">if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) </span><br><span class="line">then  </span><br><span class="line">  redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); </span><br><span class="line">  redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); </span><br><span class="line">  return nil; </span><br><span class="line">end;</span><br><span class="line">return redis.call(&#x27;pttl&#x27;, KEYS[1]);</span><br></pre></td></tr></table></figure><blockquote><ul><li>KEYS[1]：锁名</li><li>ARGV[1]：过期时间</li><li>ARGV[2]：uuid + “:” + threadId，可认为是requestId</li></ul></blockquote><ol><li>先判断如果锁名不存在，则加锁。</li><li>接下来，判断如果锁名和requestId值都存在，则使用hincrby命令给该锁名和requestId值计数，每次都加1。注意一下，这里就是重入锁的关键，锁重入一次值就加1。</li><li>如果锁名存在，但值不是requestId，则返回过期时间。</li></ol><p>释放锁主要是通过以下脚本实现的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) </span><br><span class="line">then </span><br><span class="line">  return nil</span><br><span class="line">end</span><br><span class="line">local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1);</span><br><span class="line">if (counter &gt; 0) </span><br><span class="line">then </span><br><span class="line">    redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); </span><br><span class="line">    return 0; </span><br><span class="line"> else </span><br><span class="line">   redis.call(&#x27;del&#x27;, KEYS[1]); </span><br><span class="line">   redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); </span><br><span class="line">   return 1; </span><br><span class="line">end; </span><br><span class="line">return nil</span><br></pre></td></tr></table></figure><ol><li>先判断如果锁名和requestId值不存在，则直接返回。</li><li>如果锁名和requestId值存在，则重入锁减1。</li><li>如果减1后，重入锁的value值还大于0，说明还有引用，则重试设置过期时间。</li><li>如果减1后，重入锁的value值还等于0，则可以删除锁，然后发消息通知等待线程抢锁。</li></ol><blockquote><p>再次强调一下，如果系统可以容忍数据暂时不一致，有些场景不加锁也行，这里只是举个例子，本节内容并不适用于所有场景。</p></blockquote><h1 id="锁竞争问题"><a href="#锁竞争问题" class="headerlink" title="锁竞争问题"></a>锁竞争问题</h1><p>如果有大量需要写入数据的业务场景，使用普通的redis分布式锁是没有问题的。</p><p>但如果<code>有些业务场景，写入的操作比较少，反而有大量读取的操作。这样直接使用普通的Redis分布式锁，会不会有点浪费性能？</code></p><p>都知道，锁的粒度越粗，多个线程抢锁时竞争就越激烈，造成多个线程锁等待的时间也就越长，性能也就越差。</p><p>所以，<code>提升Redis分布式锁性能的第一步，就是要把锁的粒度变细</code>。</p><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p>众所周知，加锁的目的是为了保证，在并发环境中读写数据的安全性，即不会出现数据错误或者不一致的情况。</p><p>但在绝大多数实际业务场景中，一般是读数据的频率远远大于写数据。而线程间的并发读操作是并不涉及并发安全问题，我们没有必要给读操作加互斥锁，只要保证读写、写写并发操作上锁是互斥的就行，这样可以提升系统的性能。</p><p>以Redisson框架为例，它内部已经实现了读写锁的功能。</p><p><code>读锁</code>的伪代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> redisson.getReadWriteLock(<span class="string">&quot;readWriteLock&quot;</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> readWriteLock.readLock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    rLock.lock();</span><br><span class="line">    <span class="comment">//业务操作</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log.error(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    rLock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>写锁</code>的伪代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> redisson.getReadWriteLock(<span class="string">&quot;readWriteLock&quot;</span>);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> readWriteLock.writeLock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    rLock.lock();</span><br><span class="line">    <span class="comment">//业务操作</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">   log.error(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    rLock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>将读锁和写锁分开，最大的好处是提升读操作的性能，因为读和读之间是共享的，不存在互斥性</code>。而实际业务场景中，绝大多数数据操作都是读操作。所以，如果提升了读操作的性能，也就会提升整个锁的性能。</p><p>下面总结一个读写锁的特点：</p><blockquote><ul><li>读与读是共享的，不互斥</li><li>读与写互斥</li><li>写与写互斥</li></ul></blockquote><h2 id="锁分段"><a href="#锁分段" class="headerlink" title="锁分段"></a>锁分段</h2><p>此外，为了减小锁的粒度，比较常见的做法是将大锁：<code>分段</code>。</p><p>在java中<code>ConcurrentHashMap</code>，就是将数据分为<code>16段</code>，每一段都有单独的锁，并且处于不同锁段的数据互不干扰，以此来提升锁的性能。</p><p>放在实际业务场景中，可以这样做：</p><blockquote><p>比如在秒杀扣库存的场景中，现在的库存中有2000个商品，用户可以秒杀。为了防止出现超卖的情况，通常情况下，可以对库存加锁。如果有1W的用户竞争同一把锁，显然系统吞吐量会非常低。</p><p>为了提升系统性能，可以<code>将库存分段</code>，比如：<code>分为100段，这样每段就有20个商品可以参与秒杀</code>。</p><p>在秒杀的过程中，<code>先把用户id获取hash值，然后除以100取模。模为1的用户访问第1段库存，模为2的用户访问第2段库存，模为3的用户访问第3段库存，后面以此类推，到最后模为100的用户访问第100段库存</code>。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/29/8ULJ6WZi1INvAtu.png"></p><p>如此一来，在多线程环境中，可以大大的减少锁的冲突。以前多个线程只能同时竞争1把锁，尤其在秒杀的场景中，竞争太激烈了，简直可以用惨绝人寰来形容，其后果是导致绝大数线程在锁等待。现在多个线程同时竞争100把锁，等待的线程变少了，从而系统吞吐量也就提升了。</p><blockquote><p>注：将锁分段虽说可以提升系统的性能，但它也会让系统的复杂度提升不少。因为它需要引入额外的<code>路由算法，跨段统计</code>等功能。在实际业务场景中，需要综合考虑，不是说一定要将锁分段。</p></blockquote><h1 id="锁超时问题"><a href="#锁超时问题" class="headerlink" title="锁超时问题"></a>锁超时问题</h1><p>在前面提到过，如果线程A加锁成功了，但是由于业务功能耗时时间很长，超过了设置的超时时间，这时候Redis会自动释放线程A加的锁。</p><blockquote><p>有些朋友可能会说：到了超时时间，锁被释放了就释放了呗，对功能又没啥影响。</p><p>答：错，错，错。对功能其实有影响。</p></blockquote><p>通常加锁的目的是：<code>为了防止访问临界资源时，出现数据异常的情况</code>。比如：<code>线程A在修改数据C的值，线程B也在修改数据C的值，如果不做控制，在并发情况下，数据C的值会出问题</code>。</p><p>为了保证某个方法，或者段代码的互斥性，即如果线程A执行了某段代码，是不允许其他线程在某一时刻同时执行的，可以用<code>synchronized</code>关键字加锁。</p><p>但这种锁有很大的局限性，只能保证单个节点的互斥性。如果需要在多个节点中保持互斥性，就需要用<code>Redis分布式锁</code>。</p><p>做了这么多铺垫，现在回到正题。</p><p>假设线程A加<code>Redis分布式锁</code>的代码，包含代码1和代码2两段代码。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/29/2NspyucJ1tgmUkv.png"></p><p>由于该线程要执行的业务操作非常耗时，程序在执行完代码1的时，已经到了设置的超时时间，Redis自动释放了锁。而代码2还没来得及执行。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/29/yHrvqENxfX5upid.png"></p><p>此时，代码2相当于裸奔的状态，无法保证互斥性。假如它里面访问了临界资源，并且其他线程也访问了该资源，可能就会出现数据异常的情况。（<code>访问临界资源，不单单指读取，还包含写入</code>）</p><p>那么，如何解决这个问题呢？</p><blockquote><p>答：如果达到了超时时间，但业务代码还没执行完，需要给锁自动续期。</p></blockquote><p>可以使用<code>TimerTask</code>类，来实现自动续期的功能：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>(); </span><br><span class="line">timer.schedule(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="comment">//自动续期逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">10000</span>, TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure><p>获取锁之后，自动开启一个定时任务，每隔10秒钟，自动刷新一次过期时间。这种机制在<code>Redisson框架</code>中，有个比较霸气的名字：<code>watch dog</code>，即传说中的看门狗。</p><p>当然自动续期功能，还是优先推荐使用<code>lua脚本</code>实现，比如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then </span><br><span class="line">   redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]);</span><br><span class="line">  return 1; </span><br><span class="line">end;</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure><p>需要注意的地方是：在实现自动续期功能时，还需要设置一个总的过期时间，可以跟Redisson保持一致，设置成30秒。如果业务代码到了这个总的过期时间，还没有执行完，就不再自动续期了。</p><blockquote><p>自动续期的功能是获取锁之后开启一个定时任务，每隔10秒判断一下锁是否存在，如果存在，则刷新过期时间。如果续期3次，也就是30秒之后，业务方法还是没有执行完，就不再续期了。</p></blockquote><h1 id="主从复制的问题"><a href="#主从复制的问题" class="headerlink" title="主从复制的问题"></a>主从复制的问题</h1><p>上面花了这么多篇幅介绍的内容，对单个Redis实例是没有问题的。</p><p>but，如果Redis存在多个实例。比如：<code>做了主从，或者使用了哨兵模式，基于Redis的分布式锁的功能，就会出现问题</code>。</p><p>具体是什么问题？</p><p>假设redis现在用的主从模式，1个master节点，3个slave节点。master节点负责写数据，slave节点负责读数据。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/29/mBDYckgoUyA3nVS.png"></p><p>本来是和谐共处，相安无事的。Redis加锁操作，都在master上进行，加锁成功后，再异步同步给所有的slave。</p><p>突然有一天，<code>master节点由于某些不可逆的原因，挂掉了</code>。</p><p>这样<code>需要找一个slave升级为新的master节点</code>，假如slave1被选举出来了。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/29/dgTkwVNeoXODEys.png"></p><p>如果<code>有个锁A比较悲催，刚加锁成功master就挂了，还没来得及同步到slave1</code>。</p><p>这样会导致新master节点中的锁A丢失了。后面，如果有新的线程，使用锁A加锁，依然可以成功，分布式锁失效了。</p><p>那么，如何解决这个问题呢？</p><blockquote><p>答：Redisson框架为了解决这个问题，提供了一个专门的类：RedissonRedLock，使用了Redlock算法。</p></blockquote><p>RedissonRedLock解决问题的思路如下：</p><blockquote><ol><li>需要搭建几套相互独立的Redis环境，假如我们在这里搭建了5套。</li><li>每套环境都有一个<code>Redisson node</code>节点。</li><li>多个<code>Redisson node</code>节点组成了<code>RedissonRedLock</code>。</li><li>环境包含：单机、主从、哨兵和集群模式，可以是一种或者多种混合。</li></ol></blockquote><p>在这里以主从为例，架构图如下：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/29/sCuwecjak7UYpF8.png"></p><p><code>RedissonRedLock</code>加锁过程如下：</p><blockquote><ol><li>获取所有的<code>Redisson node</code>节点信息，循环向所有的<code>Redisson node</code>节点加锁，假设<code>节点数为N</code>，例子中<code>N等于5</code>。</li><li>如果在N个节点当中，有<code>N/2 + 1</code>个节点加锁成功了，那么整个<code>RedissonRedLock加锁</code>是<code>成功</code>的。</li><li>如果在N个节点当中，<code>小于N/2 + 1</code>个节点加锁成功，那么整个<code>RedissonRedLock加锁</code>是<code>失败</code>的。</li><li>如果中途发现各个节点加锁的总耗时，大于等于设置的最大等待时间，则直接返回失败。</li></ol></blockquote><p>从上面可以看出，使用<code>Redlock算法</code>，确实能解决多实例场景中，假如master节点挂了，导致分布式锁失效的问题。</p><p>但也引出了一些新问题，比如：</p><blockquote><ol><li>需要额外搭建多套环境，申请更多的资源，需要评估一下成本和性价比。</li><li>如果有N个redisson node节点，需要加锁N次，最少也需要加锁N&#x2F;2+1次，才知道redlock加锁是否成功。显然，增加了额外的时间成本，有点得不偿失。</li></ol></blockquote><p>由此可见，在实际业务场景，尤其是高并发业务中，<code>RedissonRedLock</code>其实使用的并不多。</p><p>在分布式环境中，CAP是绕不过去的。</p><blockquote><p>CAP指的是在一个分布式系统中：</p><ul><li>一致性（Consistency）</li><li>可用性（Availability）</li><li>分区容错性（Partition tolerance）</li></ul></blockquote><p>这三个要素最多只能同时实现两点，不可能三者兼顾。</p><p>如果实际业务场景，更需要的是保证数据<code>一致性</code>。那么请<code>使用CP类型的分布式锁</code>，比如：<code>zookeeper</code>，它是基于磁盘的，性能可能没那么好，但数据一般不会丢。</p><p>如果你的实际业务场景，更需要的是保证数据高<code>可用性</code>。那么请<code>使用AP类型的分布式锁</code>，比如：<code>Redis</code>，它是基于内存的，性能比较好，但有丢失数据的风险。</p><blockquote><p>其实，在我们绝大多数分布式业务场景中，使用Redis分布式锁就够了，真的别太较真。因为数据不一致问题，可以通过最终一致性方案解决。但如果系统不可用了，对用户来说是暴击一万点伤害。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可重入锁 </tag>
            
            <tag> Redis分布式锁 </tag>
            
            <tag> 原子性 </tag>
            
            <tag> 读写锁 </tag>
            
            <tag> lua脚本 </tag>
            
            <tag> 主从复制 </tag>
            
            <tag> RedissonRedLock </tag>
            
            <tag> Redisson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot打包 + shell脚本部署</title>
      <link href="/2022/06/21/SpringBoot%E6%89%93%E5%8C%85%20+%20shell%E8%84%9A%E6%9C%AC%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/06/21/SpringBoot%E6%89%93%E5%8C%85%20+%20shell%E8%84%9A%E6%9C%AC%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot打包并结合shell脚本命令部署，重点在分享一个shell程序启动工具，希望能便利工作：</p><blockquote><ul><li>profiles指定不同环境的配置</li><li>maven-assembly-plugin打发布压缩包</li><li>shenniu_publish.sh程序启动工具</li><li>linux上使用shenniu_publish.sh启动程序</li></ul></blockquote><p>示例项目文件结构：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/21/iz3MpJBH1vyX4Sk.png"></p><h1 id="profiles指定不同环境的配置"><a href="#profiles指定不同环境的配置" class="headerlink" title="profiles指定不同环境的配置"></a>profiles指定不同环境的配置</h1><p>通常一套程序分为了很多个部署环境：开发，测试，uat，线上 等，要想对这些环境区分配置文件，可以通过两种方式：</p><blockquote><ul><li>通过<code>application.yml</code>中编码指定<code>profile.active=uat</code>方式指定</li><li>通过<code>pom.xml中profiles来区分</code>不同环境对应的配置文件夹，人工可以手动在idea勾选生成不同环境的包(推荐)</li></ul></blockquote><p>这里要讲的是第二种，首先在<code>pom.xml</code>中配置如下内容： </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>node<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--传递给脚本的参数值--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>node<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">package-name</span>&gt;</span>$&#123;scripts_packageName&#125;<span class="tag">&lt;/<span class="name">package-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">boot-main</span>&gt;</span>$&#123;scripts_bootMain&#125;<span class="tag">&lt;/<span class="name">boot-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">package-name</span>&gt;</span>$&#123;scripts_packageName&#125;<span class="tag">&lt;/<span class="name">package-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">boot-main</span>&gt;</span>$&#123;scripts_bootMain&#125;<span class="tag">&lt;/<span class="name">boot-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>node2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>node2<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">package-name</span>&gt;</span>$&#123;scripts_packageName&#125;<span class="tag">&lt;/<span class="name">package-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">boot-main</span>&gt;</span>$&#123;scripts_bootMain&#125;<span class="tag">&lt;/<span class="name">boot-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>节点粗解：</p><ul><li><code>id</code>：用来指定<code>不同环境配置文件所在的目录</code>，如下：</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/21/HoKgS9iqf2mn7Fz.png"></p><ul><li><code>properties</code>：该节点中的节点是可<code>作为参数传递给其他配置文件</code>，如这里的<code>package-name</code>节点值就可以在另外的<code>assembly.xml</code>或者<code>shell脚本</code>文件中通过<code>$&#123;package-name&#125;</code>获取到，如下<code>shenniu_publish.sh</code>文件示例：</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/21/MN6UYCOtryWdaKm.png"></p><ul><li><code>activeByDefault</code>：指定默认环境配置文件夹</li></ul><h1 id="maven-assembly-plugin打发布压缩包"><a href="#maven-assembly-plugin打发布压缩包" class="headerlink" title="maven-assembly-plugin打发布压缩包"></a>maven-assembly-plugin打发布压缩包</h1><p>对于<code>SpringBoot</code>程序打包，可以分为<code>jar</code>和<code>war</code>，这里是jar包；有些场景是<code>配置文件</code>或者第三方等依赖包不想放到工程jar中，并且把这些文件压缩成一个zip包，方便上传到linux；此时通过<code>maven-assembly-plugin</code>和<code>maven-jar-plugin</code>就可以做到，<code>pom.xml</code>的配置如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;scripts_bootMain&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--打包排除项--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.sh<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-a-jar<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- The configuration of the plugin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Specifies the configuration file of the assembly plugin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>$&#123;project.basedir&#125;/src/main/assembly/assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>值得注意的地方如下几点：</p><blockquote><ul><li><code>mainClass</code>节点：用来<code>指定启动main函数入口类路径</code>，如这里的：<code>com.sm.EurekaServerApplication</code></li><li><code>excludes</code>节点：<code>排除主jar包中配置等一些列后缀文件</code>，因为要包这些配置文件放到主包外面</li><li><code>descriptor</code>节点：用来<code>指定assembly插件对应的assembly.xml</code>配置文件</li></ul></blockquote><p>完整<code>pom.xml</code>文件内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">scripts_packageName</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">scripts_packageName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scripts_bootMain</span>&gt;</span>com.sm.EurekaServerApplication<span class="tag">&lt;/<span class="name">scripts_bootMain</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>node<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--传递给脚本的参数值--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>node<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">package-name</span>&gt;</span>$&#123;scripts_packageName&#125;<span class="tag">&lt;/<span class="name">package-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">boot-main</span>&gt;</span>$&#123;scripts_bootMain&#125;<span class="tag">&lt;/<span class="name">boot-main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">package-name</span>&gt;</span>$&#123;scripts_packageName&#125;<span class="tag">&lt;/<span class="name">package-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">boot-main</span>&gt;</span>$&#123;scripts_bootMain&#125;<span class="tag">&lt;/<span class="name">boot-main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>node2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>node2<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">package-name</span>&gt;</span>$&#123;scripts_packageName&#125;<span class="tag">&lt;/<span class="name">package-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">boot-main</span>&gt;</span>$&#123;scripts_bootMain&#125;<span class="tag">&lt;/<span class="name">boot-main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>node3<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>node3<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">package-name</span>&gt;</span>$&#123;scripts_packageName&#125;<span class="tag">&lt;/<span class="name">package-name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">boot-main</span>&gt;</span>$&#123;scripts_bootMain&#125;<span class="tag">&lt;/<span class="name">boot-main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/profiles/$&#123;activeProfile&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>static/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>templates/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>non-exists<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>non-exists<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>false<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;scripts_bootMain&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--打包排除项--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.sh<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-a-jar<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- The configuration of the plugin --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- Specifies the configuration file of the assembly plugin --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>$&#123;project.basedir&#125;/src/main/assembly/assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有了上面<code>pom.xml</code>配置，还需要<code>assembly.xml</code>的配置，这里提取了<code>结合shell脚本</code>发布程序的配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/ASSEMBLY/2.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://maven.apache.org/ASSEMBLY/2.0.0 &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>$&#123;activeProfile&#125;<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包成一个用于发布的zip文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--true：zip中生成一级目录(此处屏蔽，配合脚本需要profiles后缀)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>false<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--打包进zip文件的lib目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">useProjectArtifact</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useProjectArtifact</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;package-name&#125;-$&#123;activeProfile&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">unpack</span>&gt;</span>false<span class="tag">&lt;/<span class="name">unpack</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置文件打包进zip文件的conf目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/profiles/$&#123;activeProfile&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;package-name&#125;-$&#123;activeProfile&#125;/conf<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;include&gt;*.xml&lt;/include&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;include&gt;*.properties&lt;/include&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;include&gt;*.yml&lt;/include&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--启动脚本打包进zip文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/scripts<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件文件权限为777 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>777<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 目录权限为777  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directoryMode</span>&gt;</span>777<span class="tag">&lt;/<span class="name">directoryMode</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--脚本中参数变量为pom中的值 关键--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtered</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtered</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 项目编译出来的jar打包进zip文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;package-name&#125;-$&#123;activeProfile&#125;/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure><p>节点解析：</p><blockquote><ul><li><code>formats</code>节点：把<code>配置文件和jar包等压缩成什么文件格式</code>，这里可以有：zip，tar等</li><li><code>fileMode</code>节点：<code>指定scripts目录下脚本</code>文件(<code>shenniu_publish.sh</code>)<code>在linux上文件权限为777</code></li><li><code>filtered</code>节点：<code>脚本中参数变量为pom.xml的profiles中properties的值</code>(该配置，是把pom.xml中属性值映射生成到sh文件中，如：${package-name})</li></ul></blockquote><p>完成上面配置后，此时可以通过idea上勾选切换不同环境来打zip包，如图：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/21/Fioy6KwQfDuI1sj.png"></p><h1 id="shenniu-publish-sh程序启动工具"><a href="#shenniu-publish-sh程序启动工具" class="headerlink" title="shenniu_publish.sh程序启动工具"></a>shenniu_publish.sh程序启动工具</h1><p>上面步骤完成了zip格式的发布包，再分享下启动程序的shell脚本，该<code>脚本具有的功能</code>如下：</p><blockquote><ul><li>解压zip+启动jar包</li><li>启动jar包</li><li>停止对应jar运行</li><li>重启jar程序</li></ul></blockquote><p>目前该<code>shell中封装了两种启动jar命令</code>的方式：</p><blockquote><ul><li>java -cp</li><li>java -jar</li></ul></blockquote><p>如图命令格式：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/21/OvEx5JZQ72THmWo.png"></p><p>完整<code>shell代码</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment">#可变参数变量</span></span><br><span class="line">languageType=<span class="string">&quot;javac&quot;</span> <span class="comment">#支持 java,javac,netcore 发布</span></span><br><span class="line"><span class="comment">#参数值由pom文件传递</span></span><br><span class="line">baseZipName=<span class="string">&quot;<span class="variable">$&#123;package-name&#125;</span>-<span class="variable">$&#123;activeProfile&#125;</span>&quot;</span> <span class="comment">#压缩包名称</span></span><br><span class="line">packageName=<span class="string">&quot;<span class="variable">$&#123;package-name&#125;</span>&quot;</span> <span class="comment">#命令启动包名</span></span><br><span class="line">mainclass=<span class="string">&quot;<span class="variable">$&#123;boot-main&#125;</span>&quot;</span> <span class="comment">#java -cp启动时，指定main入口类;命令：java -cp conf;lib\*.jar;$&#123;packageName&#125;.jar $&#123;mainclass&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例子</span></span><br><span class="line"><span class="comment"># baseZipName=&quot;publish-test&quot; #压缩包名称  publish-test.zip的publish</span></span><br><span class="line"><span class="comment"># packageName=&quot;publish&quot; #命令启动包名 publish.jar的xx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#固定变量</span></span><br><span class="line">basePath=$(<span class="built_in">cd</span> `<span class="built_in">dirname</span> <span class="variable">$0</span>`/; <span class="built_in">pwd</span>)</span><br><span class="line">baseZipPath=<span class="string">&quot;<span class="variable">$&#123;basePath&#125;</span>/<span class="variable">$&#123;baseZipName&#125;</span>.zip&quot;</span>  <span class="comment">#压缩包路径</span></span><br><span class="line">baseDirPath=<span class="string">&quot;<span class="variable">$&#123;basePath&#125;</span>&quot;</span> <span class="comment">#解压部署磁盘路径</span></span><br><span class="line">pid= <span class="comment">#进程pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">shenniu_unzip</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;解压---------------------------------------------&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;压缩包路径：<span class="variable">$&#123;baseZipPath&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ ! `find <span class="variable">$&#123;baseZipPath&#125;</span>` ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;不存在压缩包：<span class="variable">$&#123;baseZipPath&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;解压磁盘路径：<span class="variable">$&#123;baseDirPath&#125;</span>/<span class="variable">$&#123;baseZipName&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;开始解压...&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#解压命令</span></span><br><span class="line">        unzip -<span class="built_in">od</span> <span class="variable">$&#123;baseDirPath&#125;</span>/<span class="variable">$&#123;baseZipName&#125;</span> <span class="variable">$&#123;baseZipPath&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#设置执行权限</span></span><br><span class="line">        <span class="built_in">chmod</span> +x <span class="variable">$&#123;baseDirPath&#125;</span>/<span class="variable">$&#123;baseZipName&#125;</span>/<span class="variable">$&#123;packageName&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;解压完成。&quot;</span>  </span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测pid</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getPid</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;检测状态---------------------------------------------&quot;</span></span><br><span class="line">    pid=`ps -ef | grep -n <span class="variable">$&#123;packageName&#125;</span> | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;pid&#125;</span> ] </span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;运行pid：<span class="variable">$&#123;pid&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;未运行&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动程序</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">start</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">#启动前，先停止之前的</span></span><br><span class="line">    stop</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;pid&#125;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;停止程序失败，无法启动&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;启动程序---------------------------------------------&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#选择语言类型</span></span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">&quot;输入程序类型(java,javac,netcore)，下一步按回车键(默认：<span class="variable">$&#123;languageType&#125;</span>)：&quot;</span> read_languageType</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;read_languageType&#125;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            languageType=<span class="variable">$&#123;read_languageType&#125;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;选择程序类型：<span class="variable">$&#123;languageType&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#进入运行包目录</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$&#123;baseDirPath&#125;</span>/<span class="variable">$&#123;baseZipName&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#分类启动</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;languageType&#125;</span>&quot;</span> == <span class="string">&quot;javac&quot;</span> ] </span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">if</span> [ <span class="variable">$&#123;mainclass&#125;</span> ] </span><br><span class="line">            <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">nohup</span> java -<span class="built_in">cp</span> conf:lib\*.jar:<span class="variable">$&#123;packageName&#125;</span>.jar <span class="variable">$&#123;mainclass&#125;</span> &gt;<span class="variable">$&#123;baseDirPath&#125;</span>/<span class="variable">$&#123;packageName&#125;</span>.out 2&gt;&amp;1 &amp;</span><br><span class="line">               <span class="comment">#nohup java -cp conf:lib\*.jar:$&#123;packageName&#125;.jar $&#123;mainclass&#125; &gt;/dev/null 2&gt;&amp;1 &amp;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$&#123;languageType&#125;</span>&quot;</span> == <span class="string">&quot;java&quot;</span> ] </span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">nohup</span> java -jar <span class="variable">$&#123;baseDirPath&#125;</span>/<span class="variable">$&#123;baseZipName&#125;</span>/<span class="variable">$&#123;packageName&#125;</span>.jar &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">            <span class="comment"># java -jar $&#123;baseDirPath&#125;/$&#123;baseZipName&#125;/$&#123;packageName&#125;.jar</span></span><br><span class="line">        <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$&#123;languageType&#125;</span>&quot;</span> == <span class="string">&quot;netcore&quot;</span> ] </span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="comment">#nohup dotnet run $&#123;baseDirPath&#125;/$&#123;baseZipName&#125;/$&#123;packageName&#125; &gt;/dev/null 2&gt;&amp;1 &amp;</span></span><br><span class="line">            <span class="built_in">nohup</span> <span class="variable">$&#123;baseDirPath&#125;</span>/<span class="variable">$&#123;baseZipName&#125;</span>/<span class="variable">$&#123;packageName&#125;</span> &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#查询是否有启动进程</span></span><br><span class="line">        getPid</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;pid&#125;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;已启动&quot;</span></span><br><span class="line">            <span class="comment">#nohup日志</span></span><br><span class="line">            <span class="built_in">tail</span> -n 50 -f <span class="variable">$&#123;baseDirPath&#125;</span>/<span class="variable">$&#123;packageName&#125;</span>.out</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;启动失败&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止程序</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">stop</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    getPid</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;pid&#125;</span> ] </span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;停止程序---------------------------------------------&quot;</span></span><br><span class="line">        <span class="built_in">kill</span> -9 <span class="variable">$&#123;pid&#125;</span></span><br><span class="line">        </span><br><span class="line">        getPid</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;pid&#125;</span> ] </span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="comment">#stop</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;停止失败&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;停止成功&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动时带参数，根据参数执行</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;#&#125;</span> -ge 1 ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$&#123;1&#125;</span> <span class="keyword">in</span></span><br><span class="line">        <span class="string">&quot;start&quot;</span>) </span><br><span class="line">            start</span><br><span class="line">        ;;</span><br><span class="line">        <span class="string">&quot;restart&quot;</span>) </span><br><span class="line">            start</span><br><span class="line">        ;;</span><br><span class="line">        <span class="string">&quot;stop&quot;</span>) </span><br><span class="line">            stop</span><br><span class="line">        ;;</span><br><span class="line">        <span class="string">&quot;unzip&quot;</span>) </span><br><span class="line">            <span class="comment">#执行解压</span></span><br><span class="line">            shenniu_unzip</span><br><span class="line">            <span class="comment">#执行启动</span></span><br><span class="line">            start</span><br><span class="line">        ;;</span><br><span class="line">        *) </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;1&#125;</span>无任何操作&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">    command如下命令：</span></span><br><span class="line"><span class="string">    unzip：解压并启动</span></span><br><span class="line"><span class="string">    start：启动</span></span><br><span class="line"><span class="string">    stop：停止进程</span></span><br><span class="line"><span class="string">    restart：重启</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    示例命令如：./shenniu_publish start</span></span><br><span class="line"><span class="string">    &quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>shell中的参数<code>package-name，activeProfile，boot-main</code> 都是<code>由pom.xml中profiles的properties中提供</code>，是<code>可变的参数</code>，<code>脚本代码本身不需要人工去修改</code>，只<code>需要变的是pom.xml的参数即可</code>；其实在生成zip包的时候，shell中的参数就被替换了，可以看zip中shell文件内容如下：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/21/oON5qrtUE9biRIm.png"></p><h1 id="linux上使用shenniu-publish-sh启动程序"><a href="#linux上使用shenniu-publish-sh启动程序" class="headerlink" title="linux上使用shenniu_publish.sh启动程序"></a>linux上使用shenniu_publish.sh启动程序</h1><p>把生成的zip上传到linux上，通过命令解压：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -od 不显示解压过程，从 zip 文件移出一个文件</span></span><br><span class="line">unzip -<span class="built_in">od</span> eureka-server-0.0.1-node eureka-server-0.0.1-node.zip</span><br></pre></td></tr></table></figure><p><code>其实shell脚本中包含有解压命令，但是在打包时放在了zip中，所以只能通过手动解压了，当然可以调整</code>；此时进入解压目录如此：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/21/nh9pbTPBR7DzGHV.png"></p><p><code>注</code>：这里<code>第一次执行./shenniu_publish.sh</code>脚本时候，提示了错误信息是<code>由于是在windows上编辑的这个脚本，其空格等和linux上不一样，所以运行会有问题</code>，要解决可以<code>使用vim命令在linux把该文件转成linux格式</code>，如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim shenniu_publish.sh</span><br><span class="line"><span class="built_in">set</span> ff=unix</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><p>执行完后，再来运行脚本<code>./shenniu_publish.sh</code>，此时有如下提示：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/21/TUrq2REkZAa5lcj.png"></p><p><code>此刻文件是解压状态</code>，因此只需要start命令启动程序即可：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/21/p78Na4AXQVeYISv.png"></p><p>到这里<code>shenniu_publish.sh脚本使用就完成了</code>，只要脚本没有提示错误，基本都能启动jar服务；其他<code>restart和stop命令也如此执行</code>就行：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/21/swDqLadPG2UA18K.png"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> shell脚本 </tag>
            
            <tag> 部署 </tag>
            
            <tag> assembly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>So easy 将程序部署到服务器</title>
      <link href="/2022/06/10/So%20easy%20%E5%B0%86%E7%A8%8B%E5%BA%8F%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/06/10/So%20easy%20%E5%B0%86%E7%A8%8B%E5%BA%8F%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h1><p>打开<code>VMWare</code>，点击“打开<code>虚拟机</code>”，本文选择<code>centos7.ova</code>镜像存储路径</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/qdfC7KjXeoVnSLb.png"></p><p>点击导入</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/ofYdPIi3nSN8OLM.png"></p><p>选择“<code>不再显示此消息</code>”，点击“<code>重试</code>”按钮</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/A9PSVtY8hJvL7Xm.png"></p><p>点击“<code>编辑虚拟机设置</code>”，修改处理器、内存、硬盘等信息后，启动。按<code>Ctrl+Alt</code>键可以切换到<code>windows</code>下。启动成功后，输入账号<code>root</code>密码<code>123456</code>(<code>帐号密码以镜像系统的设置为准</code>)，登录。</p><h1 id="配置IP地址"><a href="#配置IP地址" class="headerlink" title="配置IP地址"></a>配置IP地址</h1><p>先在<code>VMWare</code>里设置好网络连接方式为<code>桥接模式</code></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/ZsG94HDxVQ7baRm.png"></p><p>有关于<code>centos7</code>获取<code>IP地址</code>的方法主要有两种，</p><blockquote><ol><li>动态获取ip</li><li>设置静态ip</li></ol></blockquote><h2 id="动态获取ip"><a href="#动态获取ip" class="headerlink" title="动态获取ip"></a>动态获取ip</h2><p>前提是你的路由器已经<code>开启了DHCP</code>，修改网卡配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class="line"><span class="comment"># ifcfg-enp0s3 为网卡名称</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/dKBkShl5ELfTRJ9.png"></p><p>动态获取IP地址需要<code>修改两处地方</code>即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BOOTPROTO=&quot;dhcp&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/y5FV3lnDpPzvhqf.png"></p><p>修改后<code>重启</code>一下网络服务即可 <code>systemctl restart network</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mini ~]<span class="comment"># systemctl restart network</span></span><br><span class="line">[root@mini ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>这样动态配置IP地址就设置好了，这个时候再查看一下<code>ip addr</code> 就可以看到已经获取了IP地址(记录下可设置固定ip)，且可以上网<code>ping www.baidu.com</code></p><h2 id="设置固定ip"><a href="#设置固定ip" class="headerlink" title="设置固定ip"></a>设置固定ip</h2><p>还是修改网卡配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br></pre></td></tr></table></figure><p>将BOOTPROTO&#x3D;”dhcp”改成 BOOTPROTO&#x3D;”static”</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BOOTPROTO=&quot;static&quot;</span><br></pre></td></tr></table></figure><p>再添加IP信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IPADDR=&quot;192.168.0.121&quot; #设置的固定IP</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot; #子网掩码，不需要修改</span><br><span class="line">GATEWAY=&quot;192.168.0.1&quot; #VMware网关IP地址</span><br><span class="line">DNS1=&quot;114.114.114.114&quot; #这个是国内的DNS地址，固定的</span><br></pre></td></tr></table></figure><h1 id="疑难问题"><a href="#疑难问题" class="headerlink" title="疑难问题"></a>疑难问题</h1><p>问题一：<code>systemctl restart network报错</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Job <span class="keyword">for</span> network.service failed. See ‘systemctl status network.service’ and ‘journalctl -xn’ <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p>问题二：<code>ping不通百度</code></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul><li>排除ip冲突</li></ul><p>用主机ping这个ip看是否已存在。</p><ul><li>删除多余的网卡配置文件</li></ul><p>删除ifcfg-e开头的多余的网卡配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /etc/sysconfig/network-scripts/ifcfg-eXXX</span><br></pre></td></tr></table></figure><ul><li>HWADDR错误 ，查到正确的HWADDR</li></ul><p>输入<code>ip addr</code>，查找到HWADDR</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/xbQ85zp7NnD9kAw.png"></p><p>进入 <code>cd /etc/sysconfig/network-scripts</code> 目录编辑对应的 <code>vi ifcfg-ensXX</code>，将HWADDR设置正确，重启 <code>service network restart</code>或者<code>删除HWADDR</code>。</p><ul><li><p>将<code>ifc-ethXX</code>中的<code>DEVICE</code>那一行<code>注释掉或者删掉</code></p></li><li><p>将<code>ifcfg-xxx</code>中的<code>NAME</code>改为和文件名一致</p></li><li><p><code>删除</code>网卡的<code>UUID</code></p></li><li><p><code>停止NetworkManager.service</code></p></li></ul><p>停止网络管理服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># systemctl stop NetworkManager.service</span></span><br><span class="line">[root@localhost Desktop]<span class="comment"># systemctl disable NetworkManager.service</span></span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/NetworkManager.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.freedesktop.NetworkManager.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service.</span><br></pre></td></tr></table></figure><p>重启network服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost network-scripts]<span class="comment"># service network restart</span></span><br><span class="line">Restarting network (via systemctl): [ OK ]</span><br></pre></td></tr></table></figure><ul><li>删除设备规则配置文件</li></ul><p>无论有无这文件，删就是了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /etc/udev/rules.d/70-persistent-net.rules</span><br></pre></td></tr></table></figure><ul><li>打开VMWare的虚拟机服务</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/gDI1p5hAfOq3BFm.png"></p><ul><li><p>看VMWare右下角的网络适配器是否连接，如果没有连接则连接上</p></li><li><p>重启大法</p></li></ul><p>如果以上都没有解决，还有最后一招– 重启 看一看有没有奇迹发生！!@$%^&amp;*</p><ul><li>无论如何还是不行</li></ul><blockquote><ol><li>使用NAT模式</li><li>先改为动态获取ip地址</li><li>查看当前DNS <code>cat /etc/resolv.conf</code></li><li>改为静态ip</li><li>更新完需要的软件后可再次改回桥接模式</li></ol></blockquote><h1 id="安装JDK1-8"><a href="#安装JDK1-8" class="headerlink" title="安装JDK1.8"></a>安装JDK1.8</h1><h2 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h2><p><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/Q8OkiKaVowHJcRE.png"></p><h2 id="上传到centos"><a href="#上传到centos" class="headerlink" title="上传到centos"></a>上传到centos</h2><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/ghkXFTKU1xRGP2M.png"></p><p>将本地<code>jdk-8u281-linux-x64.tar.gz</code>上传到<code>/usr</code>下，重命名为<code>java1.8</code>，如本地目录切换到<code>d:/tmp1</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp&gt;lcd d:/tmp1</span><br></pre></td></tr></table></figure><p>centos目录切换到&#x2F;usr</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp&gt;<span class="built_in">cd</span> /usr</span><br></pre></td></tr></table></figure><p>查看本地目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp&gt; lpwd</span><br><span class="line">d:/tmp</span><br></pre></td></tr></table></figure><p>查看centos目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp&gt; <span class="built_in">pwd</span></span><br><span class="line">/usr</span><br></pre></td></tr></table></figure><p>上传</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp&gt; put jdk-8u281-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>重命名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sftp&gt; <span class="built_in">mv</span> jdk-8u281-linux-x64.tar.gz java1.8</span><br></pre></td></tr></table></figure><h2 id="解压JDK"><a href="#解压JDK" class="headerlink" title="解压JDK"></a>解压JDK</h2><p>键入命令 <code>cd /usr</code> 来到刚才的复制文件处，键入命令<code>tar -zxvf java1.8</code> 进行解压，解压出一个文件夹<code>jdk1.8.0_281</code>，进入该文件夹<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/RdDna3JtvAr6EKH.png"></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>键入命令<code>vi /etc/profile</code>修改配置文件，记得要在<code>root</code>权限下修改，<code>输入i</code>进入编辑状态，然后将光标移到最后一行，粘贴如下内容，要<code>根据自己的解压目录设置</code></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/1C96UivfOjaSWwx.png"></p><p>点击<code>esc</code>进入命令模式，输入<code>:wq</code>保存修改信息；然后键入命令<code>source /etc/profile </code>使配置文件生效。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>键入命令<code>java -version</code>查看。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/u1vRFwUbihcXJOK.png"></p><h1 id="安装MySQL5-7"><a href="#安装MySQL5-7" class="headerlink" title="安装MySQL5.7"></a>安装MySQL5.7</h1><h2 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure><h2 id="下载rpm包"><a href="#下载rpm包" class="headerlink" title="下载rpm包"></a>下载rpm包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget http://repo.mysql.com/yum/mysql-5.7-community/el/7/x86_64/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">sudo rpm -ivh mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><h2 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure><h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable mysqld</span><br></pre></td></tr></table></figure><h2 id="查找初始密码"><a href="#查找初始密码" class="headerlink" title="查找初始密码"></a>查找初始密码</h2><p>在<code>/var/log/mysqld.log</code>文件中找到<code>初始密码</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/u7DrlWzTeYLF1va.png"></p><h2 id="登陆mysql"><a href="#登陆mysql" class="headerlink" title="登陆mysql"></a>登陆mysql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mysql -uroot -p</span><br></pre></td></tr></table></figure><p>输入上述初始密码</p><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;1qaz!QAZ&#x27;</span>;</span><br></pre></td></tr></table></figure><p>密码强度默认规则为：<code>长度最少8位，包含大小写字母、数字、特殊字符</code></p><h2 id="设置远程登陆"><a href="#设置远程登陆" class="headerlink" title="设置远程登陆"></a>设置远程登陆</h2><ul><li>执行授权命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;1qaz!QAZ&#x27;</span> WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p><code>exit</code>退出mysql操作控制台</p><ul><li>开放3306端口</li></ul><p>开启防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start firewalld.service</span><br></pre></td></tr></table></figure><p>永久开放3306端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --add-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure><p>重新加载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>关闭防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><h2 id="设置默认编码"><a href="#设置默认编码" class="headerlink" title="设置默认编码"></a>设置默认编码</h2><ul><li>查看修改前mysql编码</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/RCogNLEhkB1UJYP.png"></p><ul><li>修改<code>/etc/my.cnf</code>文件，加入下面两行</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/fUjd67SV31sJxgG.png"></p><ul><li>修改后，重启mysql</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart mysqld</span><br></pre></td></tr></table></figure><ul><li>查看修改后的mysql编码</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/Z1CUzcmn95dlghu.png"></p><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>使用navicat连接mysql</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/Ok495rFotpsGfma.png"></p><blockquote><p><code>数据</code>文件位置：<code>/var/lib/mysql</code><br><code>配置</code>文件位置：<code>/etc/my.cnf</code><br><code>日志</code>文件位置：<code>/var/log/mysqld.log</code></p></blockquote><h1 id="项目开机自启动"><a href="#项目开机自启动" class="headerlink" title="项目开机自启动"></a>项目开机自启动</h1><ul><li>上传jar包</li></ul><p>上传<code>jar</code>包到到<code>/usr/local/project/</code>，试运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar springboot.jar</span><br></pre></td></tr></table></figure><ul><li>新增service文件</li></ul><p>在<code>/etc/systemd/system/</code>目录下面，新增一个以<code>service为后缀</code>的脚本文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/systemd/system</span><br><span class="line">vi java.service</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=java</span><br><span class="line">After=syslog.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/jdk1.8.0_281/bin/java -jar /usr/local/project/springboot.jar</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><blockquote><p><code>/usr/jdk1.8.0_281</code>为jdk安装路径<br><code>/usr/local/project/springboot.jar</code>为打包好的jar包文件</p></blockquote><ul><li>添加执行权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /etc/systemd/system/java.service</span><br></pre></td></tr></table></figure><ul><li>重新加载服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>启动服务并加入开机自启动</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start java</span><br><span class="line">systemctl enable java</span><br><span class="line"></span><br><span class="line">ps -ef | grep &quot;java&quot;| grep -v grep</span><br><span class="line">systemctl status java.service -l</span><br></pre></td></tr></table></figure><h1 id="安装Tomcat8-5"><a href="#安装Tomcat8-5" class="headerlink" title="安装Tomcat8.5"></a>安装Tomcat8.5</h1><ul><li>下载tomcat8.5</li></ul><p><a href="https://tomcat.apache.org/download-80.cgi">https://tomcat.apache.org/download-80.cgi</a></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/10/nGbstAkBlR6LXF9.png"></p><ul><li>上传并解压</li></ul><p>上传到<code>/usr/</code>，并执行下列命令解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.5.63.tar.gz</span><br></pre></td></tr></table></figure><ul><li>tomcat增加启动参数</li></ul><p><code>tomcat 根目录</code>下需要<code>增加</code>一个pid文件<code>tomcat.pid</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> tomcat.pid</span><br></pre></td></tr></table></figure><p>在<code>tomcat/bin</code> 目录下面，增加<code>setenv.sh</code>配置，<code>catalina.sh</code>启动的时候会调用，同时配置Java内存参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_HOME=/usr/apache-tomcat-8.5.63</span><br><span class="line"><span class="built_in">export</span> CATALINA_BASE=/usr/apache-tomcat-8.5.63</span><br><span class="line"><span class="comment">#add tomcat pid</span></span><br><span class="line">CATALINA_PID=<span class="string">&quot;<span class="variable">$CATALINA_BASE</span>/tomcat.pid&quot;</span></span><br><span class="line"><span class="comment">#add java opts</span></span><br><span class="line">JAVA_OPTS=<span class="string">&quot;-server -XX:PermSize=256M -XX:MaxPermSize=1024m -Xms512M -Xmx1024M -XX:MaxNewSiz</span></span><br></pre></td></tr></table></figure><ul><li>新增service文件</li></ul><p>在<code>/etc/systemd/system/</code>目录下面，<code>新增</code>一个以<code>service为后缀</code>的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/tomcat.service</span><br></pre></td></tr></table></figure><p>文件内容如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Tomcat</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">Environment=<span class="string">&quot;JAVA_HOME=/usr/jdk1.8.0_281&quot;</span></span><br><span class="line">PIDFile=/usr/apache-tomcat-8.5.63/tomcat.pid</span><br><span class="line">ExecStart=/usr/apache-tomcat-8.5.63/bin/startup.sh</span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>添加执行权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /etc/systemd/system/tomcat.service</span><br></pre></td></tr></table></figure><ul><li>重新加载服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>启动服务并加入开机自启动</li></ul><p>直接启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start tomcat</span><br></pre></td></tr></table></figure><p>加入开机启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> tomcat</span><br></pre></td></tr></table></figure><p>查看启动状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status tomcat.service</span><br></pre></td></tr></table></figure><p>停止服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop tomcat</span><br></pre></td></tr></table></figure><p>查询tomcat 进程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep “tomcat”| grep -v grep</span><br></pre></td></tr></table></figure><p>如果<code>多个tomcat，则拷贝到不同的目录，使用不同的端口。tomcat.service文件名不同即可</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">如：tomcat1.service tomcat2.service tomcat3.service</span><br></pre></td></tr></table></figure><ul><li>重启服务器</li></ul><p>重启，试试能不能访问。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> JDK </tag>
            
            <tag> MySQL </tag>
            
            <tag> Tomcat </tag>
            
            <tag> 镜像 </tag>
            
            <tag> ip </tag>
            
            <tag> jar包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>延迟任务的10种实现方式</title>
      <link href="/2022/06/01/%E5%BB%B6%E8%BF%9F%E4%BB%BB%E5%8A%A1%E7%9A%8410%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/06/01/%E5%BB%B6%E8%BF%9F%E4%BB%BB%E5%8A%A1%E7%9A%8410%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>延迟任务的10种实现方式，主要内容如下：</p><blockquote><ol><li>手动无线循环</li><li>ScheduledExecutorService</li><li>DelayQueue</li><li>Redis zset 数据判断的方式</li><li>Redis 键空间通知的方式</li><li>Netty 提供的 HashedWheelTimer 工具类</li><li>RabbitMQ 死信队列</li><li>RabbitMQ 延迟消息插件 rabbitmq-delayed-message-exchange</li><li>Spring Scheduled</li><li>Quartz</li></ol></blockquote><h1 id="什么是延迟任务"><a href="#什么是延迟任务" class="headerlink" title="什么是延迟任务"></a>什么是延迟任务</h1><p>顾明思议，我们<code>把需要延迟执行的任务叫做延迟任务</code>。延迟任务的<code>使用场景</code>有以下这些：</p><blockquote><ol><li>红包 24 小时未被查收，需要延迟执退还业务；</li><li>每个月账单日，需要给用户发送当月的对账单；</li><li>订单下单之后 30 分钟后，用户如果没有付钱，系统需要自动取消订单。</li></ol></blockquote><p>等事件都需要使用延迟任务。</p><h1 id="延迟任务实现思路分析"><a href="#延迟任务实现思路分析" class="headerlink" title="延迟任务实现思路分析"></a>延迟任务实现思路分析</h1><p>延迟任务<code>实现的关键是在某个时间节点执行某个任务</code>。基于这个信息我们可以想到<code>实现延迟任务的手段</code>有以下两个：</p><blockquote><ul><li>自己手写一个<code>“死循环”</code>一直判断当前时间节点有没有要执行的任务；</li><li>借助<code>JDK</code>或者<code>第三方提供的工具</code>类来实现延迟任务。</li></ul></blockquote><ol><li>JDK 实现延迟任务能想到的关键词是：<code>DelayQueue、ScheduledExecutorService</code></li><li>第三方提供的延迟任务执行方法就：<code>Redis、Netty、MQ</code> 等手段。</li></ol><h1 id="延迟任务实现"><a href="#延迟任务实现" class="headerlink" title="延迟任务实现"></a>延迟任务实现</h1><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><p>此方式需要开启一个<code>无限循环一直扫描任务</code>，然后使用一个 Map 集合用来存储任务和延迟执行的时间，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延迟任务执行方法汇总</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayTaskExample</span> &#123;</span><br><span class="line">    <span class="comment">// 存放定时任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Long&gt; _TaskMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序启动时间：&quot;</span> + LocalDateTime.now());</span><br><span class="line">        <span class="comment">// 添加定时任务</span></span><br><span class="line">        _TaskMap.put(<span class="string">&quot;task-1&quot;</span>, Instant.now().plusSeconds(<span class="number">3</span>).toEpochMilli()); <span class="comment">// 延迟 3s</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用无限循环实现延迟任务</span></span><br><span class="line">        loopTask();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无限循环实现延迟任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loopTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">itemLong</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> _TaskMap.entrySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry) it.next();</span><br><span class="line">                itemLong = (Long) entry.getValue();</span><br><span class="line">                <span class="comment">// 有任务需要执行</span></span><br><span class="line">                <span class="keyword">if</span> (Instant.now().toEpochMilli() &gt;= itemLong) &#123;</span><br><span class="line">                    <span class="comment">// 延迟任务，业务逻辑执行</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;执行任务：&quot;</span> + entry.getKey() +</span><br><span class="line">                            <span class="string">&quot; ，执行时间：&quot;</span> + LocalDateTime.now());</span><br><span class="line">                    <span class="comment">// 删除任务</span></span><br><span class="line">                    _TaskMap.remove(entry.getKey());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的结果为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">程序启动时间：<span class="number">2020</span>-<span class="number">04</span>-12T18:<span class="number">51</span>:<span class="number">28.188</span></span><br><span class="line">执行任务：task-<span class="number">1</span> ，执行时间：<span class="number">2020</span>-<span class="number">04</span>-12T18:<span class="number">51</span>:<span class="number">31.189</span></span><br></pre></td></tr></table></figure><p>任务延迟了 3s 钟执行了，符合我们的预期。</p><h2 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h2><p>Java API 提供了两种实现延迟任务的方法：<code>DelayQueue</code> 和 <code>ScheduledExecutorService</code>。</p><h3 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h3><p>使用 <code>ScheduledExecutorService</code> 来以<code>固定的频率</code>一直执行任务，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayTaskExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序启动时间：&quot;</span> + LocalDateTime.now());</span><br><span class="line">        scheduledExecutorServiceTask();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ScheduledExecutorService 实现固定频率一直循环执行任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">scheduledExecutorServiceTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">        executor.scheduleWithFixedDelay(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="comment">// 执行任务的业务代码</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;执行任务&quot;</span> +</span><br><span class="line">                                <span class="string">&quot; ，执行时间：&quot;</span> + LocalDateTime.now());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="number">2</span>, <span class="comment">// 初次执行间隔</span></span><br><span class="line">                <span class="number">2</span>, <span class="comment">// 2s 执行一次</span></span><br><span class="line">                TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序执行的结果为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">程序启动时间：<span class="number">2020</span>-<span class="number">04</span>-12T21:<span class="number">28</span>:<span class="number">10.416</span></span><br><span class="line">执行任务 ，执行时间：<span class="number">2020</span>-<span class="number">04</span>-12T21:<span class="number">28</span>:<span class="number">12.421</span></span><br><span class="line">执行任务 ，执行时间：<span class="number">2020</span>-<span class="number">04</span>-12T21:<span class="number">28</span>:<span class="number">14.422</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>使用 <code>ScheduledExecutorService#scheduleWithFixedDelay(...)</code> 方法之后，会以<code>某个频率一直循环</code>执行延迟任务。</p><h3 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h3><p><code>DelayQueue 是一个支持延时获取元素的无界阻塞队列</code>，<code>队列中的元素必须实现 Delayed 接口，并重写 getDelay(TimeUnit) 和 compareTo(Delayed) 方法</code>，DelayQueue 实现延迟队列的完整代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">DelayQueue</span> <span class="variable">delayQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DelayQueue</span>();</span><br><span class="line">        <span class="comment">// 添加延迟任务</span></span><br><span class="line">        delayQueue.put(<span class="keyword">new</span> <span class="title class_">DelayElement</span>(<span class="number">1000</span>));</span><br><span class="line">        delayQueue.put(<span class="keyword">new</span> <span class="title class_">DelayElement</span>(<span class="number">3000</span>));</span><br><span class="line">        delayQueue.put(<span class="keyword">new</span> <span class="title class_">DelayElement</span>(<span class="number">5000</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;开始时间：&quot;</span> +  DateFormat.getDateTimeInstance().format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        <span class="keyword">while</span> (!delayQueue.isEmpty())&#123;</span><br><span class="line">            <span class="comment">// 执行延迟任务</span></span><br><span class="line">            System.out.println(delayQueue.take());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;结束时间：&quot;</span> +  DateFormat.getDateTimeInstance().format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DelayElement</span> <span class="keyword">implements</span> <span class="title class_">Delayed</span> &#123;</span><br><span class="line">        <span class="comment">// 延迟截止时间（单面：毫秒）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">delayTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DelayElement</span><span class="params">(<span class="type">long</span> delayTime)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.delayTime = (<span class="built_in">this</span>.delayTime + delayTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 获取剩余时间</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getDelay</span><span class="params">(TimeUnit unit)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> unit.convert(delayTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 队列里元素的排序依据</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Delayed o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.getDelay(TimeUnit.MILLISECONDS) &gt; o.getDelay(TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.getDelay(TimeUnit.MILLISECONDS) &lt; o.getDelay(TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DateFormat.getDateTimeInstance().format(<span class="keyword">new</span> <span class="title class_">Date</span>(delayTime));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序执行的结果为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">开始时间：<span class="number">2020</span>-<span class="number">4</span>-<span class="number">12</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">38</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">4</span>-<span class="number">12</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">39</span> </span><br><span class="line"><span class="number">2020</span>-<span class="number">4</span>-<span class="number">12</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">41</span> </span><br><span class="line"><span class="number">2020</span>-<span class="number">4</span>-<span class="number">12</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">43</span> </span><br><span class="line">结束时间：<span class="number">2020</span>-<span class="number">4</span>-<span class="number">12</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">43</span></span><br></pre></td></tr></table></figure><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>使用 Redis 实现延迟任务的方法大体可分为两类：通过 <code>zset 数据判断的方式</code>，和<code>通过键空间通知的方式</code>。</p><h3 id="通过数据判断的方式"><a href="#通过数据判断的方式" class="headerlink" title="通过数据判断的方式"></a>通过数据判断的方式</h3><p>借助 <code>zset 数据类型</code>，把延迟任务存储在此数据集合中，然后在开启一个无线循环查询当前时间的所有任务进行消费，实现代码如下（需要<code>借助 Jedis 框架</code>）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> utils.JedisUtils;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayQueueExample</span> &#123;</span><br><span class="line">    <span class="comment">// zset key</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">_KEY</span> <span class="operator">=</span> <span class="string">&quot;myDelayQueue&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> JedisUtils.getJedis();</span><br><span class="line">        <span class="comment">// 延迟 30s 执行（30s 后的时间）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">delayTime</span> <span class="operator">=</span> Instant.now().plusSeconds(<span class="number">30</span>).getEpochSecond();</span><br><span class="line">        jedis.zadd(_KEY, delayTime, <span class="string">&quot;order_1&quot;</span>);</span><br><span class="line">        <span class="comment">// 继续添加测试数据</span></span><br><span class="line">        jedis.zadd(_KEY, Instant.now().plusSeconds(<span class="number">2</span>).getEpochSecond(), <span class="string">&quot;order_2&quot;</span>);</span><br><span class="line">        jedis.zadd(_KEY, Instant.now().plusSeconds(<span class="number">2</span>).getEpochSecond(), <span class="string">&quot;order_3&quot;</span>);</span><br><span class="line">        jedis.zadd(_KEY, Instant.now().plusSeconds(<span class="number">7</span>).getEpochSecond(), <span class="string">&quot;order_4&quot;</span>);</span><br><span class="line">        jedis.zadd(_KEY, Instant.now().plusSeconds(<span class="number">10</span>).getEpochSecond(), <span class="string">&quot;order_5&quot;</span>);</span><br><span class="line">        <span class="comment">// 开启延迟队列</span></span><br><span class="line">        doDelayQueue(jedis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延迟队列消费</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis Redis 客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doDelayQueue</span><span class="params">(Jedis jedis)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 当前时间</span></span><br><span class="line">            <span class="type">Instant</span> <span class="variable">nowInstant</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastSecond</span> <span class="operator">=</span> nowInstant.plusSeconds(-<span class="number">1</span>).getEpochSecond(); <span class="comment">// 上一秒时间</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">nowSecond</span> <span class="operator">=</span> nowInstant.getEpochSecond();</span><br><span class="line">            <span class="comment">// 查询当前时间的所有任务</span></span><br><span class="line">            Set&lt;String&gt; data = jedis.zrangeByScore(_KEY, lastSecond, nowSecond);</span><br><span class="line">            <span class="keyword">for</span> (String item : data) &#123;</span><br><span class="line">                <span class="comment">// 消费任务</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消费：&quot;</span> + item);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 删除已经执行的任务</span></span><br><span class="line">            jedis.zremrangeByScore(_KEY, lastSecond, nowSecond);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>); <span class="comment">// 每秒轮询一次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过键空间通知"><a href="#通过键空间通知" class="headerlink" title="通过键空间通知"></a>通过键空间通知</h3><p><code>默认情况</code>下 Redis 服务器端是<code>不开启键空间通知</code>的，需要通过 <code>config set notify-keyspace-events Ex</code> 的命令<code>手动开启</code>，开启键空间通知后，就可以拿到每个键值过期的事件，我们利用这个机制实现了给每个人开启一个定时任务的功能，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPubSub;</span><br><span class="line"><span class="keyword">import</span> utils.JedisUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">_TOPIC</span> <span class="operator">=</span> <span class="string">&quot;__keyevent@0__:expired&quot;</span>; <span class="comment">// 订阅频道名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> JedisUtils.getJedis();</span><br><span class="line">        <span class="comment">// 执行定时任务</span></span><br><span class="line">        doTask(jedis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅过期消息，执行定时任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis Redis 客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doTask</span><span class="params">(Jedis jedis)</span> &#123;</span><br><span class="line">        <span class="comment">// 订阅过期消息</span></span><br><span class="line">        jedis.psubscribe(<span class="keyword">new</span> <span class="title class_">JedisPubSub</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPMessage</span><span class="params">(String pattern, String channel, String message)</span> &#123;</span><br><span class="line">                <span class="comment">// 接收到消息，执行定时任务</span></span><br><span class="line">                System.out.println(<span class="string">&quot;收到消息：&quot;</span> + message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, _TOPIC);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：这里的键空间通知，其实是利用<code>Redis的发布与订阅模式</code>来完成</p></blockquote><h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h2><p><code>Netty 是由 JBOSS 提供的一个 Java 开源框架</code>，它是一个<code>基于 NIO 的客户、服务器端的编程框架</code>，使用 Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户、服务端应用。<code>Netty 相当于简化和流线化了网络应用的编程开发过程</code>，例如：基于 TCP 和 UDP 的 socket 服务开发。</p><p>可以使用 Netty 提供的工具类 <code>HashedWheelTimer</code> 来实现延迟任务，实现代码如下。</p><p>首先在项目中添加 Netty 引用，配置如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.48.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Netty 实现的完整代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayTaskExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序启动时间：&quot;</span> + LocalDateTime.now());</span><br><span class="line">        NettyTask();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于 Netty 的延迟任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">NettyTask</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建延迟任务实例</span></span><br><span class="line">        <span class="type">HashedWheelTimer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedWheelTimer</span>(<span class="number">3</span>, <span class="comment">// 时间间隔</span></span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="number">100</span>); <span class="comment">// 时间轮中的槽数</span></span><br><span class="line">        <span class="comment">// 创建一个任务</span></span><br><span class="line">        <span class="type">TimerTask</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行任务&quot;</span> +</span><br><span class="line">                        <span class="string">&quot; ，执行时间：&quot;</span> + LocalDateTime.now());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 将任务添加到延迟队列中</span></span><br><span class="line">        timer.newTimeout(task, <span class="number">0</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序执行的结果为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">程序启动时间：<span class="number">2020</span>-<span class="number">04</span>-13T10:<span class="number">16</span>:<span class="number">23.033</span></span><br><span class="line">执行任务 ，执行时间：<span class="number">2020</span>-<span class="number">04</span>-13T10:<span class="number">16</span>:<span class="number">26.118</span></span><br></pre></td></tr></table></figure><p><code>HashedWheelTimer </code>是使用<code>定时轮</code>实现的，<code>定时轮其实就是一种环型的数据结构</code>，可以把它想象成一个时钟，分成了许多格子，每个格子代表一定的时间，在这个格子上用一个链表来保存要执行的超时任务，同时有一个指针一格一格的走，走到那个格子时就执行格子对应的延迟任务，如下图所示：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/06/01/6lASvQBVEUguIHi.jpg"></p><p>图片可以理解为，时间轮大小为 8，某个时间转一格（例如 1s），每格指向一个链表，保存着待执行的任务。</p><h2 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h2><p>如果专门开启一个 MQ 中间件来执行延迟任务，就有点<code>杀鸡用牛刀</code>般的<code>奢侈</code>了，不过已经有了 MQ 环境的话，用它来实现延迟任务的话，还是可取的。本文以 RabbitMQ 为例实现延迟任务。</p><blockquote><p>RabbitMQ 实现延迟队列的方式有两种：</p><ol><li>通过消息过期后进入<code>死信交换器</code>，再由交换器转发到延迟消费队列，实现延迟功能；</li><li>使用 <code>rabbitmq-delayed-message-exchange 插件</code>实现延迟功能。</li></ol></blockquote><p>由于使用死信交换器比较麻烦，所以推荐使用第二种实现方式 rabbitmq-delayed-message-exchange 插件的方式实现延迟队列的功能。</p><blockquote><p>在<code>Rabbitmq 消息延迟推送 -- 插件模式</code>文章中，已讲解过<code>rabbitmq-delayed-message-exchange 插件</code>的使用，在此不再累述</p><p>传送门：<a href="https://www.goitman.cn/2021/07/13/rabbitmq%20%E6%B6%88%E6%81%AF%E5%BB%B6%E8%BF%9F%E6%8E%A8%E9%80%81--%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%BC%8F/">Rabbitmq 消息延迟推送 – 插件模式</a></p></blockquote><p><code>注：延迟插件 rabbitmq-delayed-message-exchange 是在 RabbitMQ 3.5.7 及以上的版本才支持的，依赖 Erlang/OPT 18.0 及以上运行环境。</code></p><h2 id="Scheduled和Quartz"><a href="#Scheduled和Quartz" class="headerlink" title="Scheduled和Quartz"></a>Scheduled和Quartz</h2><p>如果使用的是 Spring 或 SpringBoot 的项目的话，可以使用借助 <code>Scheduled</code> 注解来实现，需要在引导类<code>声明中开启 @EnableScheduling</code></p><p>Quartz 是一款功能强大的任务调度器，可以实现较为复杂的调度功能，它还<code>支持分布式的任务调度</code>。</p><blockquote><p>在<code>Redis 高效点赞与取消功能</code>文章中，已有Scheduled和Quartz的使用案例，在此不再累述</p><p>传送门：<a href="https://www.goitman.cn/2022/05/25/Redis%E9%AB%98%E6%95%88%E7%82%B9%E8%B5%9E%E4%B8%8E%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD/">Redis 高效点赞与取消功能</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 任务调度 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> Redis </tag>
            
            <tag> Quartz </tag>
            
            <tag> Netty </tag>
            
            <tag> DelayQueue </tag>
            
            <tag> ScheduledExecutorService </tag>
            
            <tag> Scheduled </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中实现跨域的 5 种方式</title>
      <link href="/2022/05/25/SpringBoot%E4%B8%AD%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E7%9A%84%205%20%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/05/25/SpringBoot%E4%B8%AD%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E7%9A%84%205%20%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么会出现跨域问题"><a href="#为什么会出现跨域问题" class="headerlink" title="为什么会出现跨域问题"></a>为什么会出现跨域问题</h1><p>出于<code>浏览器的同源策略限制</code>。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。</p><p><code>同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互</code>。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）</p><h1 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h1><p><code>当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域</code></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/05/25/rq1GH24cwJuVdKB.png"></p><h1 id="非同源限制"><a href="#非同源限制" class="headerlink" title="非同源限制"></a>非同源限制</h1><blockquote><ol><li>无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB</li><li>无法接触非同源网页的 DOM</li><li>无法向非同源地址发送 AJAX 请求</li></ol></blockquote><h1 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h1><p>对于 CORS的跨域请求，主要有以下几种方式可供选择：</p><blockquote><ol><li>返回新的CorsFilter</li><li>重写 WebMvcConfigurer</li><li>使用注解 @CrossOrigin</li><li>手动设置响应头 (HttpServletResponse)</li><li>自定 web filter 实现跨域</li></ol></blockquote><p>注意:</p><blockquote><ol><li>CorFilter &#x2F; WebMvConfigurer &#x2F; @CrossOrigin 需要 <code>SpringMVC 4.2以上版本才支持，对应springBoot 1.3版本以上</code></li><li>上面前两种方式属于全局CORS配置，后两种属于局部CORS配置。如果<code>使用了局部跨域是会覆盖全局跨域的规则</code>，所以可以通过@CrossOrigin注解来进行细粒度更高的跨域资源控制。</li><li>其实无论哪种方案，<code>最终目的都是修改响应头，向响应头中添加浏览器所要求的数据，进而实现跨域</code></li></ol></blockquote><h2 id="返回新的-CorsFilter-全局跨域"><a href="#返回新的-CorsFilter-全局跨域" class="headerlink" title="返回新的 CorsFilter(全局跨域)"></a>返回新的 CorsFilter(全局跨域)</h2><p>在任意配置类，返回一个 新的 CorsFIlter Bean ，并添加映射路径和具体的CORS配置路径。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 添加 CORS配置信息</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">//放行哪些原始域</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//是否发送 Cookie</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//放行哪些请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//放行哪些原始请求头部信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//暴露哪些头部信息</span></span><br><span class="line">        config.addExposedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 添加映射路径</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">corsConfigurationSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        corsConfigurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,config);</span><br><span class="line">        <span class="comment">//3. 返回新的CorsFilter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(corsConfigurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写-WebMvcConfigurer-全局跨域"><a href="#重写-WebMvcConfigurer-全局跨域" class="headerlink" title="重写 WebMvcConfigurer(全局跨域)"></a>重写 WebMvcConfigurer(全局跨域)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">//是否发送Cookie</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">//放行哪些原始域</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>&#125;)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .exposedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用注解-局部跨域"><a href="#使用注解-局部跨域" class="headerlink" title="使用注解 (局部跨域)"></a>使用注解 (局部跨域)</h2><p>在控制器(类上)上使用注解 @CrossOrigin:，表示该类的所有方法允许跨域。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在方法上使用注解 @CrossOrigin:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">   <span class="meta">@CrossOrigin(origins = &quot;*&quot;)</span> <span class="comment">//@CrossOrigin(value = &quot;http://localhost:8081&quot;) //指定具体ip允许跨域</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="手动设置响应头-局部跨域"><a href="#手动设置响应头-局部跨域" class="headerlink" title="手动设置响应头(局部跨域)"></a>手动设置响应头(局部跨域)</h2><p>使用 HttpServletResponse 对象添加响应头(Access-Control-Allow-Origin)来授权原始域，这里 Origin的值也可以设置为 “*”,表示全部放行。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">response.addHeader(<span class="string">&quot;Access-Allow-Control-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用自定义filter实现跨域"><a href="#使用自定义filter实现跨域" class="headerlink" title="使用自定义filter实现跨域"></a>使用自定义filter实现跨域</h2><p>编写过滤器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCorsFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, OPTIONS, DELETE&quot;</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;x-requested-with,content-type&quot;</span>);</span><br><span class="line">chain.doFilter(req, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在web.xml中配置这个过滤器，使其生效</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跨域访问 START--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>/路径/MyCorsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CorsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 跨域访问 END  --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 同源策略 </tag>
            
            <tag> 跨域 </tag>
            
            <tag> CORS </tag>
            
            <tag> 全局跨域 </tag>
            
            <tag> 局部跨域 </tag>
            
            <tag> 过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis高效点赞与取消功能</title>
      <link href="/2022/05/25/Redis%E9%AB%98%E6%95%88%E7%82%B9%E8%B5%9E%E4%B8%8E%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/05/25/Redis%E9%AB%98%E6%95%88%E7%82%B9%E8%B5%9E%E4%B8%8E%E5%8F%96%E6%B6%88%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/05/25/kH9BaGYtAv542Vx.png" alt="CSDN"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/05/25/yhMwFjSmVPU6BnI.png" alt="微信朋友圈"></p><p>像CSDN的点赞功能只记录了数量，微信朋友圈的点赞功能有显示点赞人头像(获取userId查询用户信息封装返回即可)</p><p>点赞、取消点赞是高频次的操作，若每次都读写数据库，大量的操作会影响数据库性能，甚至宕机，所以用缓存处理再合适不过。本文以文章点赞为例来展开叙述</p><h1 id="数据格式选择"><a href="#数据格式选择" class="headerlink" title="数据格式选择"></a>数据格式选择</h1><p>Redis有5种数据结构分别为：<code>String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）</code>。</p><p>由于需要记录文章和点赞人，还有点赞状态（点赞、取消），分析下 Redis 数据格式中<code>Hash</code>最合适。</p><p>因为<code>Hash</code>里的数据都是存在一个<code>Key</code>中，通过<code>Key</code>很方便的把所有的点赞数据都取出。<code>Key</code>里面的数据还可以存成<code>键值对</code>的形式，方便<code>存入点赞人、被点赞人和点赞状态</code>。</p><blockquote><p><code>文章 id</code> 为 <code>articleId</code>，<code>点赞人的 id </code>为 <code>userId</code> ，<code>点赞状态</code>为 <code>1(点赞)和0(取消点赞)</code>。<code>文章 id </code>和<code>点赞人 id </code>作为<code>HashKey</code>，两个 id 中间用<code>::</code>隔开，<code>点赞状态</code>作为<code>HashValue</code>。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/05/24/M82SmFyR7vaKwWl.png" alt="2.png"></p><h1 id="整合SpringBoot"><a href="#整合SpringBoot" class="headerlink" title="整合SpringBoot"></a>整合SpringBoot</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    database: 0</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 6379</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 8</span><br><span class="line">        max-wait: -1ms</span><br><span class="line">        max-idle: 8</span><br><span class="line">        min-idle: 0</span><br></pre></td></tr></table></figure><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><p>开启Redis<code>事务支持</code>和<code>序列化</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RedisConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Redis配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/16 14:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 凡事使用到template的redis操作都必须走<span class="doctag">@Transanctional</span>注解式事务，要不然会导致连接一直占用，不关闭</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        <span class="comment">// 改变redisTemplate的序列化方式，key为字符串格式，value为json格式</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// HashKey 和 HashValue 为json格式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        template.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>());</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// 开启事务支持</span></span><br><span class="line">        template.setEnableTransactionSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置事务管理器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>redisTemplate没有序列化</code>，在可视化工具中看到的数据为乱码，<code>获取数据时也可能为空</code>，模糊查询(下文有叙述）功能也使用不了</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/05/24/wXRPMBHu84I5Z6d.png" alt="1.png"></p><h1 id="Redis接口"><a href="#Redis接口" class="headerlink" title="Redis接口"></a>Redis接口</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Article;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Likes;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.service.RedisService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.Cursor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ScanOptions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RedisServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Redis接口实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/13 16:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文章点赞 KEY</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_ARTICLE_LIKE</span> <span class="operator">=</span> <span class="string">&quot;ARTICLE_LIKE&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文章点赞数量 KEY</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_ARTICLE_LIKE_COUNT</span> <span class="operator">=</span> <span class="string">&quot;ARTICLE_LIKE_COUNT&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存点赞和文章点赞量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveLike</span><span class="params">(String articleId, String userId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">field</span> <span class="operator">=</span> getLikeKey(articleId, userId);</span><br><span class="line">        redisTemplate.opsForHash().put(KEY_ARTICLE_LIKE, field, <span class="number">1</span>);</span><br><span class="line">        redisTemplate.opsForHash().increment(KEY_ARTICLE_LIKE_COUNT, articleId, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消点赞和文章点赞量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unLike</span><span class="params">(String articleId, String userId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">field</span> <span class="operator">=</span> getLikeKey(articleId, userId);</span><br><span class="line">        redisTemplate.opsForHash().put(KEY_ARTICLE_LIKE, field, <span class="number">0</span>);</span><br><span class="line">        redisTemplate.opsForHash().increment(KEY_ARTICLE_LIKE_COUNT, articleId, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除点赞数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteLike</span><span class="params">(List&lt;Likes&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Likes like : list) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">field</span> <span class="operator">=</span> getLikeKey(like.getArticleId(), like.getUserId());</span><br><span class="line">            redisTemplate.opsForHash().delete(KEY_ARTICLE_LIKE, field);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文章点赞量数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteLikeCount</span><span class="params">(String articleId)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(KEY_ARTICLE_LIKE_COUNT, articleId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取全部点赞数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Likes&gt; <span class="title function_">getAllLikeData</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Likes&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Cursor&lt;Map.Entry&lt;Object, Object&gt;&gt; cursor = redisTemplate.opsForHash().scan(KEY_ARTICLE_LIKE, ScanOptions.NONE);</span><br><span class="line">        <span class="keyword">while</span> (cursor.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;Object, Object&gt; entry = cursor.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">keys</span> <span class="operator">=</span> entry.getKey().toString();</span><br><span class="line"></span><br><span class="line">            String[] keyArr = keys.split(<span class="string">&quot;::&quot;</span>);</span><br><span class="line">            <span class="type">Likes</span> <span class="variable">like</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Likes</span>(keyArr[<span class="number">0</span>], keyArr[<span class="number">1</span>], (Integer) entry.getValue());</span><br><span class="line"></span><br><span class="line">            list.add(like);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文章点赞量数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Article&gt; <span class="title function_">getArticleLikeCount</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Article&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Cursor&lt;Map.Entry&lt;Object, Object&gt;&gt; cursor = redisTemplate.opsForHash().scan(KEY_ARTICLE_LIKE_COUNT, ScanOptions.NONE);</span><br><span class="line">        <span class="keyword">while</span> (cursor.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;Object, Object&gt; entry = cursor.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">articleId</span> <span class="operator">=</span> entry.getKey().toString();</span><br><span class="line">            <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Article</span>(articleId, (Integer) entry.getValue());</span><br><span class="line">            list.add(article);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼接文章ID和点赞人ID作为key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getLikeKey</span><span class="params">(String articleId, String userId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(articleId).append(<span class="string">&quot;::&quot;</span>).append(userId).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搞掂，就是这么简单高效，<code>在Redis内，存在相同数据只会修改value，并且Redis默认RDB持久化数据</code>。</p><p>当然也可加上<code>限时内限制每个用户点赞次数</code>的逻辑，防止<code>恶意刷接口</code>，逻辑简单，在此就不累述啦</p><blockquote><p>有人问：”点赞功能完全用Redis替代业务数据存储，该怎么查询指定数据呢？” 模糊查询参上</p></blockquote><h1 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h1><p>Redis是支持通配符模糊查询的（<code>不用通配符就是精确查找啦</code>）</p><blockquote><p><code>*</code>：通配任意多个字符<br><code>?</code>：通配单个字符<br><code>[]</code>：通配括号内的某一个字</p></blockquote><h2 id="查询Key"><a href="#查询Key" class="headerlink" title="查询Key"></a>查询Key</h2><ul><li>redisTemplate.keys(pattern)</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模糊查询 key</span></span><br><span class="line"><span class="comment"> * 参数：key = ARTICLE</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">fuzzyQueryKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    List&lt;String&gt; userIdList = (List&lt;String&gt;) redisTemplate.keys(<span class="string">&quot;*&quot;</span> + key + <span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .stream()</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> userIdList;  <span class="comment">// [ARTICLE_LIKE_COUNT, ARTICLE_LIKE]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询Hash数据中的HK"><a href="#查询Hash数据中的HK" class="headerlink" title="查询Hash数据中的HK"></a>查询Hash数据中的HK</h2><ul><li>redisTemplate.opsForHash().scan(KEY,ScanOptions.scanOptions().match(pattern).build())</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文章ID，查询点赞此文章的用户</span></span><br><span class="line"><span class="comment">     * 参数：articleId = 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">fuzzyQueryHashKey</span><span class="params">(String articleId)</span> &#123;</span><br><span class="line">        List&lt;String&gt; userIdList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Cursor&lt;Map.Entry&lt;Object, Object&gt;&gt; cursor = redisTemplate.opsForHash()</span><br><span class="line">                .scan(KEY_ARTICLE_LIKE, ScanOptions.scanOptions()</span><br><span class="line">                        .match(<span class="string">&quot;*&quot;</span> + articleId + <span class="string">&quot;*&quot;</span>)   <span class="comment">// 模糊匹配</span></span><br><span class="line"><span class="comment">//                        .count(100) // 可选，查询条数（默认 10）</span></span><br><span class="line">                        .build());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cursor.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;Object, Object&gt; entry = cursor.next();</span><br><span class="line">            String[] keyArr = entry.getKey().toString().split(<span class="string">&quot;::&quot;</span>);</span><br><span class="line">            userIdList.add(keyArr[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userIdList;  <span class="comment">// [1, 2, 3]</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>还是那句话，需要配置RedisTemplate的序列化，否则获取数据为空；</p><blockquote><p>又有人说啦：”还是要固定间隔时间从Redis中捞取数据，保存在数据库中可靠点。” !@#$%^&amp;* 业务说的都对，没办法，来吧</p></blockquote><h1 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `article` (</span><br><span class="line">  `article_id` <span class="type">varchar</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `like_count` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;点赞数量&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`article_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;文章表&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `likes` (</span><br><span class="line">  `article_id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;被点赞的文章id&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;点赞的用户id&#x27;</span>,</span><br><span class="line">  `status` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;点赞状态，0取消，1点赞&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `likeId` (`article_id`,`user_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;文章点赞表&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Article</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 文章点赞数量表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/13 16:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Article</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文章id</span></span><br><span class="line">    <span class="keyword">private</span> String articleId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文章点赞数</span></span><br><span class="line">    <span class="keyword">private</span> Integer LikeCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Article</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Article</span><span class="params">(String articleId, Integer likeCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.articleId = articleId;</span><br><span class="line">        LikeCount = likeCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getArticleId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> articleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArticleId</span><span class="params">(String articleId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.articleId = articleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getLikeCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LikeCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLikeCount</span><span class="params">(Integer likeCount)</span> &#123;</span><br><span class="line">        LikeCount = likeCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Like</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 文章点赞表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/12 20:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Likes</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文章id</span></span><br><span class="line">    <span class="keyword">private</span> String articleId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点赞用户id</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点赞状态</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Likes</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Likes</span><span class="params">(String articleId, String userId, Integer status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.articleId = articleId;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getArticleId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> articleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArticleId</span><span class="params">(String articleId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.articleId = articleId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(Integer status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><p>从Redis中获取数据保存到数据库后，删除Redis中相应数据</p><ul><li>service接口实现</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.mapper.LikeDao;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Article;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Likes;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.service.LikeService;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.service.RedisService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> LikeServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Like 接口实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/13 17:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LikeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LikeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LikeDao likeDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存点赞数据到数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">savaLikeData2DB</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Likes&gt; likeList = redisService.getAllLikeData();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (likeList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Likes like : likeList) &#123;</span><br><span class="line">                <span class="type">Likes</span> <span class="variable">likes</span> <span class="operator">=</span> likeDao.getLikesList(like);</span><br><span class="line">                <span class="keyword">if</span> (likes != <span class="literal">null</span>) &#123;</span><br><span class="line">                    likes.setStatus(like.getStatus());</span><br><span class="line">                    likeDao.updataLike(likes);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    likeDao.saveLike(like);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            redisService.deleteLike(likeList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存文章点赞量到数据库，Redis不持久化文章点赞量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveArticleLikeCount2DB</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Article&gt; articleList = redisService.getArticleLikeCount();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (articleList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Article article : articleList) &#123;</span><br><span class="line">                <span class="type">Article</span> <span class="variable">articleData</span> <span class="operator">=</span> likeDao.getArticleData(article.getArticleId());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (articleData != <span class="literal">null</span>) &#123;</span><br><span class="line">                    articleData.setLikeCount(articleData.getLikeCount() + article.getLikeCount());</span><br><span class="line">                    likeDao.updataArticle(articleData);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    likeDao.saveArticle(article);</span><br><span class="line">                &#125;</span><br><span class="line">                redisService.deleteLikeCount(article.getArticleId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mapper接口</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Article;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Likes;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> LikeDao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/19 17:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LikeDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    Likes <span class="title function_">getLikesList</span><span class="params">(Likes likes)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveLike</span><span class="params">(Likes likes)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updataLike</span><span class="params">(Likes likes)</span>;</span><br><span class="line"></span><br><span class="line">    Article <span class="title function_">getArticleData</span><span class="params">(String articleId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveArticle</span><span class="params">(Article article)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updataArticle</span><span class="params">(Article article)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.goitman.mapper.LikeDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getLikesList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.goitman.pojo.Likes&quot;</span>&gt;</span></span><br><span class="line">        select article_id,user_id,status from likes where article_id = #&#123;articleId&#125; and user_id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveLike&quot;</span> <span class="attr">flushCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        insert into likes (article_id,user_id,status)</span><br><span class="line">        values (#&#123;articleId&#125;,#&#123;userId&#125;,#&#123;status&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updataLike&quot;</span> <span class="attr">flushCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        update likes set status = #&#123;status&#125; where article_id = #&#123;articleId&#125; and user_id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getArticleData&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.goitman.pojo.Article&quot;</span>&gt;</span></span><br><span class="line">        select article_id,Like_count from article where article_id = #&#123;articleId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveArticle&quot;</span> <span class="attr">flushCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        insert into article (article_id,Like_count) values (#&#123;articleId&#125;,#&#123;LikeCount&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updataArticle&quot;</span> <span class="attr">flushCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        update article set Like_count = #&#123;LikeCount&#125; where article_id = #&#123;articleId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><h2 id="Scheduled方式"><a href="#Scheduled方式" class="headerlink" title="Scheduled方式"></a>Scheduled方式</h2><p>引导类<code>开启Scheduling注解</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RedisLikeDesignApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 引导类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/12 15:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">// 开启Scheduling注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisLikeDesignApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RedisLikeDesignApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.scheduling;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.service.LikeService;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.task.LikeTask;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> LikeScheduling</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Scheduled 执行类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/13 15:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LikeScheduling</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(LikeScheduling.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LikeService likeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0/1 * * * ? &quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">likeCron</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Scheduled 定时任务.........开始.........&quot;</span>);</span><br><span class="line">        likeService.savaLikeData2DB();</span><br><span class="line">        likeService.saveArticleLikeCount2DB();</span><br><span class="line">        log.info(<span class="string">&quot;Scheduled 定时任务.........结束.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Quartz方式"><a href="#Quartz方式" class="headerlink" title="Quartz方式"></a>Quartz方式</h2><ul><li>Quartz 配置</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.task.LikeTask;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> QuartzConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Quartz 配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/23 11:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LIKE_TASK_IDENTITY</span> <span class="operator">=</span> <span class="string">&quot;LikeTask&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JobDetail <span class="title function_">jobDatail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(LikeTask.class)  <span class="comment">// 对应Job</span></span><br><span class="line">                .withIdentity(LIKE_TASK_IDENTITY)  <span class="comment">// 给JobDetail起个id</span></span><br><span class="line">                .storeDurably()  <span class="comment">// 即使没有Trigger关联时，也不需要删除该JobDetail</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Trigger <span class="title function_">trigger</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 定时任务配置（SimpleScheduleBuilder 简单构建器、CronScheduleBuilder Cron构建器）</span></span><br><span class="line">        <span class="type">SimpleScheduleBuilder</span> <span class="variable">simpleScheduleBuilder</span> <span class="operator">=</span> SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line"><span class="comment">//                .withIntervalInSeconds()  // 以&quot;秒&quot;为单位执行</span></span><br><span class="line"><span class="comment">//                .withIntervalInHours()  // 以&quot;时&quot;为单位执行</span></span><br><span class="line"><span class="comment">//                .withRepeatCount(1)   // 执行次数（如果没配置任务开始时间，会在创建触发器时就触发一次（n+1））</span></span><br><span class="line">                .withIntervalInMinutes(<span class="number">1</span>)  <span class="comment">// 以&quot;分&quot;为单位执行</span></span><br><span class="line">                .repeatForever();   <span class="comment">// 指定触发器无限期重复</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(&quot;0 */1 * * * ?&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .forJob(jobDatail())    <span class="comment">// 关联JobDetail</span></span><br><span class="line">                .withIdentity(LIKE_TASK_IDENTITY)   <span class="comment">// 给Trigger起个id</span></span><br><span class="line">                .withSchedule(simpleScheduleBuilder)    <span class="comment">// 关联任务配置</span></span><br><span class="line"><span class="comment">//                .withSchedule(cronScheduleBuilder)</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Quartz执行类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.listener.ApplicationListens;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.service.LikeService;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> LikeTask</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Quartz 执行类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/23 11:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LikeTask</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(LikeTask.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LikeService likeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;Quartz定时任务.........开始.........&quot;</span>);</span><br><span class="line">        likeService.savaLikeData2DB();</span><br><span class="line">        likeService.saveArticleLikeCount2DB();</span><br><span class="line">        log.info(<span class="string">&quot;Quartz定时任务.........结束.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方法任选其一即可，完全看眼缘啦……</p><h1 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h1><p>在项目开发或运行中，可能会遇到如<code>随应用启动后或关闭前处理某些逻辑</code>、<code>服务器突然断电(指有备用电缓冲下)</code>防止数据丢失等的场景，这时<code>钩子函数</code>(回调函数)起到了决定性作用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.service.LikeService;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ApplicationListens</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 监听程序启动与关闭，回调钩子</span></span><br><span class="line"><span class="comment"> *              CommandLineRunner接口：当应用启动成功后的回调</span></span><br><span class="line"><span class="comment"> *              DisposableBean接口：当应用正要被销毁前的回调</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/5/12 15:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationListens</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span>, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(ApplicationListens.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LikeService likeService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动后回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭前回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;程序关闭，钩子回调.........开始.........&quot;</span>);</span><br><span class="line">        likeService.savaLikeData2DB();</span><br><span class="line">        likeService.saveArticleLikeCount2DB();</span><br><span class="line">        log.info(<span class="string">&quot;程序关闭，钩子回调.........结束.........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/redisLikeDesign-demo">https://github.com/wangdaicong/spring-boot-project/tree/master/redisLikeDesign-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 点赞 </tag>
            
            <tag> 钩子函数 </tag>
            
            <tag> Quartz </tag>
            
            <tag> Scheduling </tag>
            
            <tag> 事务支持 </tag>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>So easy Spring事务回滚机制</title>
      <link href="/2022/04/27/So%20easy%20Spring%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/04/27/So%20easy%20Spring%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="事务控制的3种方式"><a href="#事务控制的3种方式" class="headerlink" title="事务控制的3种方式"></a>事务控制的3种方式</h1><ol><li><code>编程式事务</code>：直接在代码里<code>手动开启事务，手动提交，手动回滚</code>。优点就是可以灵活控制，缺点就是<code>太麻烦了，太多重复的代码了</code>。</li><li><code>声明式事务</code>：就是使用<code>Spring Aop配置事务</code>，这种方式简化了编码。需要注意的是切入点表达式一定要写正确。</li><li><code>注解事务</code>：直接在Service层的方法上面加上<code>@Transactional注解</code>，最简单方便的方式。</li></ol><h1 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h1><p><code>排序往后的方法报错，导致排序前的方法不回滚</code>，如下：<code>updataFlag</code>方法出错，<code>analyseRedBall</code> 和 <code>analyseBlueBall</code> 方法不会回滚</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">statistics</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 三个子方法中有操作数据库方法</span></span><br><span class="line">    analyseRedBall(periods, redBalls);</span><br><span class="line">    analyseBlueBall(periods, blueBalls);</span><br><span class="line"></span><br><span class="line">    updataFlag(periods);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="为什么不会滚呢"><a href="#为什么不会滚呢" class="headerlink" title="为什么不会滚呢"></a>为什么不会滚呢</h1><p><code>Spring默认情况</code>下是捕获到方法的<code>RuntimeException</code>异常，也就是说只要属于<code>RuntimeException</code>异常或<code>及其子类</code>都能回滚。不属于运行时异常时，事务不回滚的。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p><code>确保切入点表达式</code>书写正确，如在配置里面添加rollback-for</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; rollback-for=&quot;java.lang.Exception&quot;/&gt; </span><br></pre></td></tr></table></figure><h2 id="注解事务"><a href="#注解事务" class="headerlink" title="注解事务"></a>注解事务</h2><h3 id="使用位置"><a href="#使用位置" class="headerlink" title="使用位置"></a>使用位置</h3><blockquote><ol><li><code>类上</code>：该类的所有<code> public 方法</code>将都具有务属性</li><li><code>方法上</code>：只能应用到 public 方法上，这是由Spring AOP的本质决定的，如果在 <code>protected、private</code> 或者<code>默认可见性的方法上</code>使用 @Transactional 注解，将被忽略，也不会抛出任何异常。</li><li><code>接口、接口方法上</code>：接口实现类或接口实现方法可继承事务属性，<code>Spring 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效</code></li></ol></blockquote><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>将Spring默认的<code>RuntimeException</code>异常修改为<code>Exception</code>异常，可以保证任何异常都可以回滚。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br></pre></td></tr></table></figure><p>或指定多个异常</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = &#123;Exception.class, RuntimeException.class&#125;)</span></span><br></pre></td></tr></table></figure><p>如上述实例修改为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">statistics</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 在statistics 父方法上使用事务注解，即可保证发生异常后，三个子方法事务全部回滚(子方法上不再需要写上事务注解@Transactional)</span></span><br><span class="line">    analyseRedBall(periods, redBalls);</span><br><span class="line">    analyseBlueBall(periods, blueBalls);</span><br><span class="line"></span><br><span class="line">    updataFlag(periods);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常抛出"><a href="#异常抛出" class="headerlink" title="异常抛出"></a>异常抛出</h3><p>在catch语句中<code>抛出异常</code>，以便让<code>Aop捕获异常执行回滚事务</code>，如下伪代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">statistics</span><span class="params">()</span> &#123;</span><br><span class="line">    analyseRedBall(periods, redBalls);</span><br><span class="line">    analyseBlueBall(periods, blueBalls);</span><br><span class="line"></span><br><span class="line">    updataFlag(periods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">analyseRedBall</span><span class="params">(List&lt;Period&gt; periods, List&lt;RedBall&gt; redBalls)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// ...逻辑代码</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手动事务"><a href="#手动事务" class="headerlink" title="手动事务"></a>手动事务</h2><p><code>配合事务注解@Transactional</code>，手动处理事务回滚</p><h3 id="设置回滚代码"><a href="#设置回滚代码" class="headerlink" title="设置回滚代码"></a>设置回滚代码</h3><p>在<code>catch语句中设置回滚代码</code>来实现回滚，此方法在抛出异常后也能return 返回值，适合需要拿到返回值的场景</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">statistics</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">analyseRedBall(periods, redBalls);</span><br><span class="line">     analyseBlueBall(periods, blueBalls);</span><br><span class="line"></span><br><span class="line">     updataFlag(periods);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         <span class="comment">// 加上此句，则不再需要手动抛出指定异常</span></span><br><span class="line">         TransactionAspectSupport.currentTransactionStatus().setRollbackOnly(); </span><br><span class="line">         <span class="keyword">return</span> fales; </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="设置回滚点"><a href="#设置回滚点" class="headerlink" title="设置回滚点"></a>设置回滚点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法返回的是object类型，o 为回滚点变量名</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> TransactionAspectSupport.currentTransactionStatus().createSavepoint();</span><br><span class="line"><span class="comment">// ...逻辑代码</span></span><br><span class="line">TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(o);</span><br></pre></td></tr></table></figure><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p><strong><code>到此之前，代码无误，那为什么 Spring 或 SpringBoot 的事务回滚还是没有任何效果呢？</code></strong></p><blockquote><p>数据库肯定是<code>MySQL </code>，那<code>表的存储引擎，也要支持事务安全才行</code>，最重要，也是最多人忽视的地方；<code>InnoDB 和 BDB 提供事务安全表，其他存储引擎都是非事务安全表</code></p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/9b680b0fd18352905bc8a096da69d13d.png" alt="微信图片_20220427163024.png"></p><blockquote><p>注：<code>Oracleb不存在存储引擎的概念</code>，数据处理大致可以分成两大类：<code>联机事务处理OLTP</code>（on-line transaction processing）、<code>联机分析处理OLAP</code>（On-Line Analytical Processing）。</p><ul><li>OLTP是<code>传统的关系型数据库</code>的主要应用，主要是基本的、日常的事务处理，例如银行交易。<code>强调数据库内存效率，强调内存各种指标的命令率，强调绑定变量，强调并发操作</code></li><li>OLAP是<code>数据仓库系统</code>的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。<code>强调数据分析，强调SQL执行市场，强调磁盘I/O，强调分区等</code></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务回滚 </tag>
            
            <tag> 编程式 </tag>
            
            <tag> 声明式 </tag>
            
            <tag> Transactional </tag>
            
            <tag> 存储引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caddy超越Nginx，下一代Web服务器？</title>
      <link href="/2022/04/11/Caddy%E8%B6%85%E8%B6%8ANginx%EF%BC%8C%E4%B8%8B%E4%B8%80%E4%BB%A3Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/04/11/Caddy%E8%B6%85%E8%B6%8ANginx%EF%BC%8C%E4%B8%8B%E4%B8%80%E4%BB%A3Web%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><code>Nginx</code>是一款非常流行的<code>Web服务器</code>，在<code>Github</code>上已有<code>16K+Star</code>，我们经常用它来做<code>静态资源托管</code>或<code>反向代理</code>。最近发现了一款全新的Web服务器<code>Caddy，Star数超越Nginx，标星38K+Star</code>。试用了一下Caddy，发现它使用起来比Nginx优雅多了，功能也很强大，推荐给大家！</p><blockquote><p>项目地址：<a href="https://github.com/caddyserver/caddy">https://github.com/caddyserver/caddy</a><br>官方文档：<a href="https://caddyserver.com/">https://caddyserver.com/</a></p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Caddy是一款功能强大，扩展性高的Web服务器，目前在Github上已有38K+Star。Caddy采用Go语言编写，可用于静态资源托管和反向代理。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/LZzpRCImsXUjdrq.png"></p><p>Caddy具有如下主要特性：</p><ul><li>对比Nginx复杂的配置，其独创的Caddyfile配置非常简单；</li><li>可以通过其提供的Admin API实现动态修改配置；</li><li>默认支持自动化HTTPS配置，能自动申请HTTPS证书并进行配置；</li><li>能够扩展到数以万计的站点；</li><li>可以在任意地方执行，没有额外的依赖；</li><li>采用Go语言编写，内存安全更有保证。</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先我们直接在CentOS 8上安装Caddy，使用DNF工具安装无疑是最简单的，Docker安装方式之后也会介绍。</p><ul><li>使用如下命令通过DNF工具安装Caddy，安装成功后Caddy会被注册成系统服务；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf install &#x27;dnf-command(copr)&#x27;</span><br><span class="line">dnf copr enable @caddy/caddy</span><br><span class="line">dnf install caddy</span><br></pre></td></tr></table></figure><ul><li>使用systemctl status caddy查看Caddy的状态，可以发现Caddy已被注册为系统服务，但是还没开启。</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/6zVDXcwo5MibyhI.png"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>首先我们来个<code>Caddy</code>的入门使用，让Caddy运行在<code>2015</code>端口上并返回<code>Hello, world!。</code></p><ul><li>直接使用<code>caddy</code>命令将输出Caddy的常用命令，基本看介绍就知道如何使用了，标出来的是常用命令；</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/RgFKU8mCbqI5MNG.png"></p><ul><li>使用<code>caddy start</code>命令可以让Caddy服务在后台运行；</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/jJDOeabGFs1RoqQ.png"></p><ul><li>Caddy默认使用JSON格式的配置文件，但由于JOSN格式配置书写比较麻烦，又提供了<code>Caddyfile</code>这种更加简洁的配置形式，使用如下命令能自动把<code>Caddyfile转化为JSON配置</code>；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">caddy adapter</span><br></pre></td></tr></table></figure><ul><li>我们可以先创建一个名称为<code>Caddyfile</code>的文件，文件内容如下，然后使用<code>caddy adapter</code>将它转换为JSON配置，再使用<code>caddy reload</code>使配置生效，该配置将监听<code>2015</code>端口，并返回Hello, world!；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:2015</span><br><span class="line"></span><br><span class="line">respond &quot;Hello, world!&quot;</span><br></pre></td></tr></table></figure><ul><li>然后我们使用curl命令访问localhost:2015，将返回指定的信息；</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/FJvQgxVlR63OznU.png"></p><ul><li>当然我们还可以使用Caddy提供的<code>Admin API</code>来查看配置信息，使用如下命令即可；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl localhost:2019/config/</span><br></pre></td></tr></table></figure><ul><li>当前JSON配置如下，如果你直接使用JSON配置的话需要书写如下配置，使用<code>Caddyfile</code>确实方便很多！</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;apps&quot;: &#123;</span><br><span class="line">  &quot;http&quot;: &#123;</span><br><span class="line">   &quot;servers&quot;: &#123;</span><br><span class="line">    &quot;srv0&quot;: &#123;</span><br><span class="line">     &quot;listen&quot;: [&quot;:2015&quot;],</span><br><span class="line">     &quot;routes&quot;: [&#123;</span><br><span class="line">      &quot;handle&quot;: [&#123;</span><br><span class="line">       &quot;body&quot;: &quot;Hello, world!&quot;,</span><br><span class="line">       &quot;handler&quot;: &quot;static_response&quot;</span><br><span class="line">      &#125;]</span><br><span class="line">     &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Caddyfile基本语法"><a href="#Caddyfile基本语法" class="headerlink" title="Caddyfile基本语法"></a>Caddyfile基本语法</h2><ul><li>下面案例将使用<code>Caddyfile</code>来进行配置，我们有必要了解下它的语法，<code>Caddyfile</code>的具体语法规则如下。</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/8CodQhrB9kLnHxq.png"></p><ul><li>介绍下上图中的关键字，有助于理解。</li></ul><table><thead><tr><th>关键字</th><th>解释</th><th>使用</th></tr></thead><tbody><tr><td>Global options block</td><td>服务器全局配置</td><td>可用于配置是否启用HTTPS和Admin API等</td></tr><tr><td>Snippet</td><td>可以复用的配置片段</td><td>定义好后认可以通过import关键字引用</td></tr><tr><td>Site Block</td><td>单个网站配置</td><td>通过file_server可以配置静态代理，通过reverse_proxy可以配置动态代理</td></tr><tr><td>Matcher definition</td><td>匹配定义</td><td>默认情况下指令会产生全局影响，通过它可以指定影响范围</td></tr><tr><td>Comment</td><td>注释</td><td>使用#符号开头</td></tr><tr><td>Site address</td><td>网站地址</td><td>默认使用HTTPS，如需开启HTTP，需要指定http:&#x2F;&#x2F;开头</td></tr><tr><td>Directive</td><td>指令</td><td>指令赋予了Caddy强大的功能</td></tr></tbody></table><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理就是当请求访问你的代理服务器时，代理服务器会对你的请求进行转发，可以转发到静态的资源路径上去，也可以转发到动态的服务接口上去。下面我们以对域名进行代理为例，来讲讲如何进行静态代理和动态代理。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理就是将请求代理到不同的静态资源路径上去，这里我们将对<code>docs.macrozheng.com</code>的请求代理到我的文档项目中，对<code>mall.macrozheng.com</code>的请求代理到mall的前端项目中。</p><ul><li>首先我们修改下本机的host文件：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.3.106 docs.macrozheng.com</span><br><span class="line">192.168.3.106 mall.macrozheng.com</span><br></pre></td></tr></table></figure><ul><li>然后将我们的文档项目和mall前端项目上传到Caddy的html目录中去，并进行解压操作：</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/zi3a6CQbeE4wcSt.png"></p><ul><li>修改Caddyfile文件，使用如下配置，修改完成后使用<code>caddy reload</code>命令刷新配置；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://docs.macrozheng.com &#123;</span><br><span class="line">        root * /mydata/caddy/html/docs</span><br><span class="line">        file_server browse</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http://mall.macrozheng.com &#123;</span><br><span class="line">        root * /mydata/caddy/html/mall</span><br><span class="line">        file_server browse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果你的<code>Caddyfile</code>文件格式不太合格的话，会出现如下警告，直接使用<code>caddy fmt --overwrite</code>格式化并重写配置即可解决；</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/TFAHzX1GQhLq2Ud.png"></p><ul><li>通过docs.macrozheng.com即可访问部署好的文档项目了：</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/W1Zho2MHqmPSRFj.png"></p><ul><li>通过<code>mall.macrozheng.com</code>即可访问到部署好的前端项目了。</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/ZK7Dxd6rnTeb1iU.png"></p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理就是把代理服务器的请求转发到另一个服务上去，这里我们将把对<code>api.macrozheng.com</code>的请求代理到演示环境的API服务上去。</p><ul><li>首先我们修改下本机的host文件，添加如下规则：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.3.106 api.macrozheng.com</span><br></pre></td></tr></table></figure><ul><li>修改<code>Caddyfile文件</code>，使用如下配置，修改完成后使用<code>caddy reload</code>命令刷新配置；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://api.macrozheng.com &#123;</span><br><span class="line">        reverse_proxy http://admin-api.macrozheng.com</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>之后通过<code>api.macrozheng.com/swagger-ui.html</code>即可访问到mall-admin的API文档页面了。</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/nIPlobzYOck3xwh.png"></p><h2 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h2><p>如果我们的服务器带宽比较低，网站访问速度会很慢，这时我们可以通过让Caddy开启Gzip压缩来提高网站的访问速度。这里我们以mall的前端项目为例来演示下它的提速效果。</p><ul><li>我们需要修改<code>Caddyfile</code>文件，使用<code>encode</code>指令开启Gzip压缩，修改完成后使用<code>caddy reload</code>命令刷新配置；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://mall.macrozheng.com &#123;</span><br><span class="line">        root * /mydata/caddy/html/mall</span><br><span class="line">        encode &#123;</span><br><span class="line">            gzip</span><br><span class="line">        &#125;</span><br><span class="line">        file_server browse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有个比较大的JS文件压缩前是<code>1.7M</code>；</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/sHxAtKE7G5NuyS3.png"></p><ul><li>压缩后为<code>544K</code>，访问速度也有很大提示；</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/TjhZrmoBLUV4p3Y.png"></p><ul><li>另外我们可以看下响应信息，如果有<code>Content-Encoding: gzip</code>这个响应头表明Gzip压缩已经启用了。</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/OphLB3xirTDaWVI.png"> </p><h2 id="地址重写"><a href="#地址重写" class="headerlink" title="地址重写"></a>地址重写</h2><p>有的时候我们的网站更换了域名，但还有用户在使用老的域名访问，这时可以通过Caddy的地址重写功能来让用户跳转到新的域名进行访问。</p><ul><li>我们需要修改<code>Caddyfile</code>文件，使用<code>redir</code>指令重写地址，修改完成后使用<code>caddy reload</code>命令刷新配置；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://docs.macrozheng.com &#123;</span><br><span class="line">        redir http://www.macrozheng.com</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>此时访问旧域名<code>docs.macrozheng.com</code>会直接跳转到<code>www.macrozheng.com</code>去。</li></ul><h2 id="按目录划分"><a href="#按目录划分" class="headerlink" title="按目录划分"></a>按目录划分</h2><p>有时候我们需要使用同一个域名来访问不同的前端项目，这时候就需要通过子目录来区分前端项目了。</p><ul><li>比如说我们需要按以下路径来访问各个前端项目；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www.macrozheng.com #访问文档项目</span><br><span class="line">www.macrozheng.com/admin #访问后台项目</span><br><span class="line">www.macrozheng.com/app #访问移动端项目</span><br></pre></td></tr></table></figure><ul><li>我们需要修改Caddyfile文件，使用route指令定义路由，修改完成后使用caddy reload命令刷新配置。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.macrozheng.com &#123;</span><br><span class="line">        route /admin/* &#123;</span><br><span class="line">                uri strip_prefix /admin</span><br><span class="line">                file_server &#123;</span><br><span class="line">                        root /mydata/caddy/html/admin</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        route /app/* &#123;</span><br><span class="line">                uri strip_prefix /app</span><br><span class="line">                file_server &#123;</span><br><span class="line">                        root /mydata/caddy/html/app</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        file_server * &#123;</span><br><span class="line">                root /mydata/caddy/html/www</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>Caddy能自动支持HTTPS，无需手动配置证书，这就是之前我们在配置域名时需要使用<code>http://</code>开头的原因，要想使用Caddy默认的HTTPS功能，按如下步骤操作即可。</p><ul><li><p>首先我们需要修改域名的DNS解析，直接在购买域名的网站上设置即可，这里以<code>docs.macrozheng.com</code>域名为例；</p></li><li><p>之后使用如下命令验证DNS解析记录是否正确，注意配置的服务器的<code>80</code>和<code>443</code>端口需要在外网能正常访问；</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &quot;https://cloudflare-dns.com/dns-query?name=docs.macrozheng.com&amp;type=A&quot; \</span><br><span class="line">  -H &quot;accept: application/dns-json&quot;</span><br></pre></td></tr></table></figure><ul><li>修改<code>Caddyfile</code>配置文件，进行如下配置；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docs.macrozheng.com &#123;</span><br><span class="line">        root * /mydata/caddy/html/docs</span><br><span class="line">        file_server browse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后使用<code>caddy run</code>命令启动Caddy服务器即可，是不是非常方便！</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">caddy run</span><br></pre></td></tr></table></figure><h2 id="Docker支持"><a href="#Docker支持" class="headerlink" title="Docker支持"></a>Docker支持</h2><p>当然Caddy也是支持使用Docker进行安装使用的，其使用和直接在CentOS上安装基本一致。</p><ul><li>首先使用如下命令下载Caddy的Docker镜像；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull caddy</span><br></pre></td></tr></table></figure><ul><li>然后在<code>/mydata/caddy/</code>目录下创建<code>Caddyfile</code>配置文件，文件内容如下；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.3.105:80</span><br><span class="line"></span><br><span class="line">respond &quot;Hello, world!&quot;</span><br></pre></td></tr></table></figure><ul><li>之后使用如下命令启动caddy服务，这里将宿主机上的Caddyfile配置文件、Caddy的数据目录和网站目录挂载到了容器中；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 80:80 -p 443:443 --name caddy \</span><br><span class="line">    -v /mydata/caddy/Caddyfile:/etc/caddy/Caddyfile \</span><br><span class="line">    -v /mydata/caddy/data:/data \</span><br><span class="line">    -v /mydata/caddy/html:/usr/share/caddy \</span><br><span class="line">    -d caddy</span><br></pre></td></tr></table></figure><ul><li>之后使用<code>docker exec</code>进入caddy容器内部执行命令；</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it caddy /bin/sh</span><br></pre></td></tr></table></figure><ul><li>输入Caddy命令即可操作，之后的操作就和我们直接在CentOS上安装一样了。</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/11/YrfdzaTKXxEuey3.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Caddy其强大的指令功能，让我们无需多余的配置即可实现各种功能，使用起来确实非常优雅！尤其是其能自动配置实现HTTPS，非常不错！Nginx能实现的功能Caddy基本都能实现.</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Caddy </tag>
            
            <tag> Nginx </tag>
            
            <tag> Web服务器 </tag>
            
            <tag> 反向代理 </tag>
            
            <tag> 静态代理 </tag>
            
            <tag> 动态代理 </tag>
            
            <tag> 文件压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Supervisor安装与配置</title>
      <link href="/2022/04/07/Supervisor%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/04/07/Supervisor%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Supervisor</code>（<a href="http://supervisord.org/">http://supervisord.org/</a> ）是用<code>Python开发</code>的一个<code>client/server服务</code>，是<code>Linux/Unix</code>系统下的一个<code>进程管理工具</code>，<code>不支持Windows系统</code>。它可以很方便的监听、启动、停止、重启一个或多个进程。用Supervisor管理的进程，当一个进程意外被杀死，<code>supervisort监听到进程死后，会自动将它重新拉起</code>，很方便的做到进程自动恢复的功能，<code>不再需要自己写shell脚本来控制</code>。</p><p>因为Supervisor是Python开发的，安装前先检查一下系统否安装了Python2.4以上版本。下面以<code>CentOS7，Python2.7</code>版本环境下，介绍Supervisor的安装与配置步聚。</p><h1 id="supervisor-安装"><a href="#supervisor-安装" class="headerlink" title="supervisor 安装"></a>supervisor 安装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install epel-release     </span><br><span class="line">yum install python-pip</span><br><span class="line">pip install supervisor</span><br></pre></td></tr></table></figure><p>supervisor安装完成后会生成三个执行程序：<code>supervisortd</code>、<code>supervisorctl</code>、<code>echo_supervisord_conf</code>，分别是supervisor的<code>守护进程服务</code>（用于接收进程管理命令）、<code>客户端</code>（用于和守护进程通信，发送管理进程的指令）、<code>生成初始配置文件程序</code>。</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>运行supervisord服务的时候，<code>需要指定supervisor配置文件</code>，如果没有显示指定，<code>默认</code>在以下目录查找：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$CWD/supervisord.conf</span><br><span class="line">$CWD/etc/supervisord.conf</span><br><span class="line">/etc/supervisord.conf</span><br><span class="line">/etc/supervisor/supervisord.conf (since Supervisor 3.3.0)</span><br><span class="line">../etc/supervisord.conf (Relative to the executable)</span><br><span class="line">../supervisord.conf (Relative to the executable)</span><br></pre></td></tr></table></figure><blockquote><p>$CWD表示运行supervisord程序的目录。</p></blockquote><p>可以通过<code>运行echo_supervisord_conf</code>程序<code>生成supervisor的初始化配置文件</code>，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /etc/supervisor</span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><p>supervisor的配置参数较多，下面介绍一下常用的参数配置，详细的配置及说明，请参考 <a href="http://supervisord.org/configuration.html">官方文档</a> 介绍。</p><blockquote><p><code>分号（;）开头的配置表示注释</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">;chmod=0700                 ;socket文件的mode，默认是0700</span><br><span class="line">;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid</span><br><span class="line"></span><br><span class="line">;[inet_http_server]         ;HTTP服务器，提供web管理界面</span><br><span class="line">;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span><br><span class="line">;username=user              ;登录管理后台的用户名</span><br><span class="line">;password=123               ;登录管理后台的密码</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/tmp/supervisord.log ;日志文件，默认是 $CWD/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span><br><span class="line">logfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份</span><br><span class="line">loglevel=info                ;日志级别，默认info，其它: debug,warn,trace</span><br><span class="line">pidfile=/tmp/supervisord.pid ;pid 文件</span><br><span class="line">nodaemon=false               ;是否在前台启动，默认是false，即以 daemon 的方式启动</span><br><span class="line">minfds=1024                  ;可以打开的文件描述符的最小值，默认 1024</span><br><span class="line">minprocs=200                 ;可以打开的进程数的最小值，默认 200</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span><br><span class="line">;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span><br><span class="line"></span><br><span class="line">; [program:xx]是被管理的进程配置参数，xx是进程的名称</span><br><span class="line">[program:xx]</span><br><span class="line">command=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令</span><br><span class="line">autostart=true       ; 在supervisord启动的时候也自动启动</span><br><span class="line">startsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span><br><span class="line">autorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启</span><br><span class="line">startretries=3       ; 启动失败自动重试次数，默认是3</span><br><span class="line">user=tomcat          ; 用哪个用户启动进程，默认是root</span><br><span class="line">priority=999         ; 进程启动优先级，默认999，值小的优先启动</span><br><span class="line">redirect_stderr=true ; 把stderr重定向到stdout，默认false</span><br><span class="line">stdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB</span><br><span class="line">stdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10</span><br><span class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class="line">stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out</span><br><span class="line">stopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span><br><span class="line">killasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程</span><br><span class="line"></span><br><span class="line">;包含其它配置文件</span><br><span class="line">[include]</span><br><span class="line">files = relative/directory/*.ini    ;可以指定一个或多个以.ini结束的配置文件</span><br></pre></td></tr></table></figure><p>include示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /opt/absolute/filename.ini /opt/absolute/*.ini</span><br></pre></td></tr></table></figure><h2 id="配置管理进程"><a href="#配置管理进程" class="headerlink" title="配置管理进程"></a>配置管理进程</h2><p>进程管理<code>配置参数</code>，<code>不建议全都写在supervisord.conf文件中</code>，应该<code>每个进程</code>写<code>一个配置文件</code>放在include指定的目录下包含进supervisord.conf文件中。</p><blockquote><ol><li>创建<code>/etc/supervisor/config.d</code>目录，用于存放进程管理的配置文件，命令为<code>mkdir -m 755 -p /etc/supervisor/conf.d/</code></li><li>修改<code>/etc/supervisor/supervisord.conf</code>中的include参数，将<code>/etc/supervisor/conf.d</code>目录添加到include中</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/config.d/*.ini</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/07/6n3LTqQOpXsJN4D.png"></p><p>配置Tomcat (<code>tomcat.ini</code>) 进程的一个例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[program:tomcat]</span><br><span class="line">command=/opt/apache-tomcat-8.0.35/bin/catalina.sh run</span><br><span class="line">stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=5</span><br><span class="line">priority=1</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br></pre></td></tr></table></figure><blockquote><p><code>注意：</code><br><code>Supervisor只能管理非daemon的进程</code>，也就是说Supervisor<code>不能管理守护进程</code>。否则提示<code>Exited too quickly (process log may have details)</code>异常。例子中的<code>Tomcat默认是以守护进程启动</code>的，所以改成了<code>catalina.sh run</code>，以<code>前台进程</code>的方式运行。</p></blockquote><h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 标准启动</span><br><span class="line">supervisord -c /etc/supervisor/supervisord.conf</span><br><span class="line"># 重载启动</span><br><span class="line">sudo supervisorctl reload</span><br><span class="line"># 单独启停管理，program_name 为配置中的进程名称</span><br><span class="line">sudo supervisorctl start/stop program_name</span><br><span class="line"># 查看状态</span><br><span class="line">supervisorctl status</span><br></pre></td></tr></table></figure><h1 id="控制进程"><a href="#控制进程" class="headerlink" title="控制进程"></a>控制进程</h1><h2 id="交互终端"><a href="#交互终端" class="headerlink" title="交互终端"></a>交互终端</h2><p>supervisord启动成功后，可以通过<code>supervisorctl</code>客户端控制进程，启动、停止、重启。<code>运行supervisorctl命令，不加参数，会进入supervisor客户端的交互终端</code>，并会列出当前所管理的所有进程。</p><blockquote><p>图中的<code>tomcat</code>就是为配置文件中<code>[program:tomcat]</code>指定的名字。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/07/Jsx3h14oGNutqiy.png"></p><p>输入help可以查看可以执行的命令列表，如果想看某个命令的作用，运行help 命令名称，如：help stop</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop tomcat  // 表示停止tomcat进程</span><br><span class="line">stop all     // 表示停止所有进程</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><h2 id="bash终端"><a href="#bash终端" class="headerlink" title="bash终端"></a>bash终端</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">supervisorctl status</span><br><span class="line">supervisorctl stop tomcat</span><br><span class="line">supervisorctl start tomcat</span><br><span class="line">supervisorctl restart tomcat</span><br><span class="line">supervisorctl reread</span><br><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure><h2 id="Web管理界面"><a href="#Web管理界面" class="headerlink" title="Web管理界面"></a>Web管理界面</h2><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/07/eJBsyft3G5wXCWR.png"></p><p>出于安全考虑，<code>默认配置是没有开启web管理界面</code>，需要<code>修改supervisord.conf</code>配置文件<code>打开http访权限</code>，将下面的配置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">;port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)</span><br><span class="line">;username=user              ; (default is no username (open server))</span><br><span class="line">;password=123               ; (default is no password (open server))</span><br></pre></td></tr></table></figure><p>修改成：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class="line">port=0.0.0.0:9001          ; (ip_address:port specifier, *:port for all iface)</span><br><span class="line">username=user              ; (default is no username (open server))</span><br><span class="line">password=123               ; (default is no password (open server))</span><br></pre></td></tr></table></figure><blockquote><p>port：<code>绑定访问IP和端口</code>，这里是绑定的是本地IP和9001端口<br>username：登录<code>管理后台</code>的<code>用户名</code><br>password：登录<code>管理后台</code>的<code>密码</code></p></blockquote><p>原文链接：<a href="http://blog.csdn.net/xyang81/article/details/51555473">http://blog.csdn.net/xyang81/article/details/51555473</a></p>]]></content>
      
      
      <categories>
          
          <category> 敏捷开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Supervisor </tag>
            
            <tag> 进程管理 </tag>
            
            <tag> ELK </tag>
            
            <tag> 监听 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战 ELK 优雅管理服务器日志</title>
      <link href="/2022/04/06/%E5%AE%9E%E6%88%98%20ELK%20%E4%BC%98%E9%9B%85%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A5%E5%BF%97/"/>
      <url>/2022/04/06/%E5%AE%9E%E6%88%98%20ELK%20%E4%BC%98%E9%9B%85%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在后端开发日常工作中，定位排查问题或是了解系统某些方面的情况时，会遇到以下的场景：</p><blockquote><ol><li>查询接口请求的日志。</li><li>查询服务的日志。</li><li>统计接口的每日调用数量以及时间分布。</li><li>统计接口每日的用户数量。</li></ol></blockquote><p>ELK（<code>Elasticsearch + Logstash + Kibana</code>）平台很好的完成了上述工作，并且提供了友好便利的用户界面，普遍应用于生产日志的查询分析中。ELK一句话概括：<code>用Logstash收集日志</code>或者数据到<code>Elasticsearch存储</code>起来并<code>建立相关索引</code>，再利用<code>Kibana查询界面</code>到Elasticsearch上提供的索引进行<code>查询和统计</code>。</p><ul><li>Logstash</li></ul><p><code>Logstash </code>主要用于<code>收集服务器日志</code>，它是一个开源<code>数据收集引擎</code>，具有<code>实时管道功能</code>。Logstash可以动态地将来自不同数据源的数据统一起来，并将数据标准化到所选择的目的地。</p><blockquote><p>Logstash 收集数据的过程主要分为以下三个部分：</p><ol><li><code>输入(input)</code>：数据往往都是以不同的形式、格式存储在不同的系统中，而Logstash支持从多种数据源中收集数据（<code>File、Syslog、MySQL、消息中间件</code>等等）。</li><li><code>过滤器(filter)</code>：实时解析和转换数据，识别已命名的字段以构建结构，并将它们转换成通用格式。</li><li><code>输出(output)</code>：Elasticsearch并非存储的唯一选择，Logstash提供很多输出选择。</li></ol></blockquote><ul><li>Elasticsearch</li></ul><p><code>Elasticsearch （ES）</code>是一个分布式Restful风格的<code>搜索和数据分析引擎</code>，它具有以下特点：</p><blockquote><ol><li><code>查询</code>：允许执行和合并多种类型的搜索 (结构化、非结构化、地理位置、度量指标)，搜索方式随心而变。</li><li><code>分析</code>：Elasticsearch聚合让您能够从大处着眼，探索数据的趋势和模式。</li><li><code>速度</code>：很快，可以做到亿万级的数据，毫秒级返回。</li><li><code>可扩展性</code>：可以在笔记本电脑上运行，也可以在承载了 PB 级数据的成百上千台服务器上运行。</li><li><code>弹性</code>：运行在一个分布式的环境中，从设计之初就考虑到了这一点。</li><li><code>灵活性</code>：具备多个案例场景。支持数字、文本、地理位置、结构化、非结构化，所有的数据类型都欢迎。</li></ol></blockquote><ul><li>Kibana</li></ul><p><code>基于浏览器</code>的界面便于快速创建和分享动态数据仪表板来追踪 Elasticsearch 的实时数据变化。其搭建过程也十分简单，您可以分分钟完成 Kibana 的安装，并开始探索 Elasticsearch 的索引数据，没有代码、不需要额外的基础设施。</p><ul><li>Filebeat</li></ul><p>ELK 协议栈的<code>新成员</code>，一个轻量级开源<code>日志文件数据搜集器</code>，基于 Logstash-Forwarder 源代码开发，是对它的替代。在需要采集日志数据的服务器上安装 Filebeat，并指定·日志目录·或·日志文件·后，Filebeat 就能读取数据，迅速<code>发送到 Logstash </code>进行解析，亦或<code>直接发送到 Elasticsearch </code>(日志不需要Logstash过滤拆分时)进行集中式存储和分析。</p><p>这四者都是开源软件，通常配合使用，而且又先后归于 <code>Elastic.co</code> 公司名下，所以被简称为 <code>ELK Stack</code>。根据 Google Trend 的信息显示，ELK Stack 已经成为目前最流行的集中式日志解决方案。</p><h1 id="常用架构"><a href="#常用架构" class="headerlink" title="常用架构"></a>常用架构</h1><h2 id="Logstash架构"><a href="#Logstash架构" class="headerlink" title="Logstash架构"></a>Logstash架构</h2><h3 id="单服务"><a href="#单服务" class="headerlink" title="单服务"></a>单服务</h3><p><code>只有一个 Logstash、Elasticsearch 和 Kibana </code>实例。Logstash 通过输入插件从多种数据源（比如日志文件、标准输入 Stdin 等）获取数据，再经过滤插件加工数据，然后经 Elasticsearch 输出插件输出到 Elasticsearch，通过 Kibana 展示。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/29/fFU7bjOKPz2ZGCA.png"></p><h3 id="多服务"><a href="#多服务" class="headerlink" title="多服务"></a>多服务</h3><p>把<code>一个 Logstash 数据搜集节点扩展到多个，分布于多台机器</code>，将解析好的数据发送到 Elasticsearch server 进行存储，最后在 Kibana 查询、生成日志报表等。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/29/AabmykRZHfFoL2W.png"></p><p>这种结构因为需要在各个服务器上部署 Logstash，而它<code>比较消耗 CPU 和内存资源</code>，所以比较适合计算资源丰富的服务器，否则容易造成服务器性能下降，甚至可能导致无法正常工作。</p><h2 id="Beats架构"><a href="#Beats架构" class="headerlink" title="Beats架构"></a>Beats架构</h2><p>这种架构<code>引入 Beats 作为日志搜集器</code>。目前 Beats 包括四种：</p><blockquote><ol><li>Packetbeat（搜集<code>网络流量</code>数据）</li><li>Topbeat（搜集<code>系统、进程和文件</code>，系统级别的<code>CPU和内存使用</code>情况等数据）</li><li>Filebeat（搜集<code>文件</code>数据）</li><li>Winlogbeat（搜集 <code>Windows 事件日志</code>数据）</li></ol></blockquote><p>Beats 将搜集到的数据发送到 Logstash，经 Logstash 解析、过滤后，将其发送到 Elasticsearch 存储，并由 Kibana 呈现给用户。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/29/WH9TfmAsocQkEeC.png"></p><p>这种架构<code>解决了 Logstash 在各服务器节点上占用系统资源高的问题</code>。相比 Logstash，Beats 所占系统的 CPU 和内存几乎可以忽略不计。另外，Beats 和 Logstash 之间支持 SSL&#x2F;TLS <code>加密传输</code>，客户端和服务器双向认证，保证了通信安全。</p><p>因此这种架构适合<code>对数据安全性要求较高</code>，同时各服务器性能比较敏感的场景。</p><h2 id="消息队列架构"><a href="#消息队列架构" class="headerlink" title="消息队列架构"></a>消息队列架构</h2><p><code>Beats 还不支持输出到消息队列</code>，所以在<code>消息队列两端只能是 Logstash 实例</code>。这种架构使用 Logstash 从各个数据源搜集数据，然后经消息队列输出插件输出到消息队列中。目前 <code>Logstash 支持 Kafka、Redis、RabbitMQ 等常见消息队列</code>。然后 Logstash 通过消息队列输入插件从队列中获取数据，分析过滤后经输出插件发送到 Elasticsearch，最后通过 Kibana 展示。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/29/Guja13iBIkSXKTw.png"></p><p>这种架构适合于日志规模比较庞大的情况。但由于 <code>Logstash 日志解析节点和 Elasticsearch 的负荷比较重</code>，可将他们配置为<code>集群模式</code>，以分担负荷。引入消息队列，<code>均衡了网络传输，从而降低了网络闭塞，尤其是丢失数据的可能性</code>，但依然<code>存在 Logstash 占用系统资源过多的问题</code>。</p><h1 id="案例实操"><a href="#案例实操" class="headerlink" title="案例实操"></a>案例实操</h1><p>elastic 官网下载地址：<a href="https://www.elastic.co/cn/downloads/">https://www.elastic.co/cn/downloads/</a></p><blockquote><p>安装环境及版本：</p><ul><li>操作系统：虚拟机 Centos7</li><li>JDK：1.8</li><li>ElasticSearch：7.3.0</li><li>Logstash：7.3.0</li><li>Kibana：7.3.0</li><li>filebeat ：7.3.0</li></ul><p>本案例中的软件均在<code>同一台服务器部署</code>，所以host配置部分都为localhost，若是<code>远程服务器，修改为具体ip地址即可</code></p></blockquote><p>下面以<code>Logstash单服务</code>和<code>Beats</code>两个架构为例来进行实操详解</p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h3><ul><li>下载</li></ul><blockquote><p>JDK <a href="https://www.oracle.com/java/technologies/downloads/#java8">官网下载地址</a>，本文使用：<code>jdk-8u131-linux-x64.tar.gz</code></p></blockquote><ul><li>解压安装</li></ul><p>将JDK安装包上传到服务器，进行解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u131-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/qUwD1P2dc6KYMyt.png"></p><ul><li>修改环境变量</li></ul><p>通过命令编辑<code>profile</code>文件，在文件末尾(<code>按大写&quot;G&quot;移至文件末尾</code>)添加以下内容（<code>按&quot;i&quot;进入编辑</code>）：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span> /etc/<span class="keyword">profile</span></span><br></pre></td></tr></table></figure><p>路径需与安装路径相符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib:$CLASSPATH</span><br><span class="line">export JAVA_PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;JRE_HOME&#125;/bin</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_PATH&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/qVoCeMf5izmF8Du.png"></p><p>按左上方<code>&quot;esc&quot;</code>键退出编辑模式，按<code>wq!</code>强制保存；再通过命令<code>source /etc/profile</code>重载profile文件，使其生效</p><ul><li>验证</li></ul><p>通过<code>javac</code>和<code>java -version</code>命令验证，如下图所示即为安装成功<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/dZQCTcVmGUeiH6n.png"></p><h3 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h3><p>用IDEA将Spring Boot项目打包，并部署到服务器上。进入项目jar包所在路径，执行启动命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar 包名称.jar</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/rhHDqNp2ML8Yuin.png"></p><blockquote><p>本项目log4j日志配置如下，<a href="https://www.goitman.cn/2021/12/06/Log4j2/">log4j基础教程</a></p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL</span></span><br><span class="line"><span class="comment">    Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出</span></span><br><span class="line"><span class="comment">    monitorInterval：Log4j2能够自动检测修改配置 文件和重新配置本身，设置间隔秒数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    注意：若使用Weblogic服务器，修改项目中的文件不会自动加载生效(monitorInterval失效)，必须重启服务加载配置；</span></span><br><span class="line"><span class="comment">    若在生产环境不能随便停止应用，但可通过编程方法来进行配置log4j2，从数据库中动态读取配置信息。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;60&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 变量配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [TRACEID:%X&#123;traceId&#125;] %-5p [%t] %c : %m%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志保存路径，以&quot;/&quot;开头为盘符下路径，无&quot;/&quot;开头为项目下路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;file_path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志输出到控制台--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志输出到文件，滚动分割日志文件，自动打包gz--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;File&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;file_path&#125;/app.log&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;file_path&#125;/archives/app-%d&#123;yyyy-MM-dd&#125;-%i.log.gz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;PATTERN&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--以标准时间每小时执行一次日志滚动分割--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span> <span class="attr">modulate</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--每当fileName日志文件超过指定大小，则按上述(app-%d&#123;yyyy-MM-dd&#125;-%i.log.gz)格式进行压缩存档至logs/archives/路径下--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;1 GB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--fileIndex：nomax为忽略min和max属性值，压缩文件编号(%i)每次递增1，无编号的限制--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">fileIndex</span>=<span class="string">&quot;nomax&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--删除配置，防止日志文件所在分区的磁盘空间被占满，独立配置与TimeBasedTriggeringPolicy属性无关</span></span><br><span class="line"><span class="comment">                maxDepth：指定扫描目录的最大层级（安全限制不能访问的情况除外）</span></span><br><span class="line"><span class="comment">                        0表示仅能访问基准目录</span></span><br><span class="line"><span class="comment">                        1(默认)表示仅扫描基准目录下的文件</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Delete</span> <span class="attr">basePath</span>=<span class="string">&quot;$&#123;file_path&#125;&quot;</span> <span class="attr">maxDepth</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--根据匹配格式删除文件--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">IfFileName</span> <span class="attr">glob</span>=<span class="string">&quot;*/app-*.log.gz&quot;</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--IfAny相当于OR逻辑，满足任意一个条件则执行删除--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">IfAny</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--文件总数大小上限值--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">IfAccumulatedFileSize</span> <span class="attr">exceeds</span>=<span class="string">&quot;29 GB&quot;</span>/&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--文件数上限值--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">IfAccumulatedFileCount</span> <span class="attr">exceeds</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--删除超过1天的文件--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">IfLastModified</span> <span class="attr">age</span>=<span class="string">&quot;1d&quot;</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">IfAny</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">IfFileName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Delete</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">DefaultRolloverStrategy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            添加自定义logger，一般用于区分包名的日志，不同包名不同的级别/appender</span></span><br><span class="line"><span class="comment">            additivity：默认true，禁止重复打印日志</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            打印sql执行语句到控制台和文件，</span></span><br><span class="line"><span class="comment">            需将mybatis配置中的sql打印修改为：&quot;log-impl: org.apache.ibatis.logging.log4j2.Log4j2Impl&quot;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;cn.goitman.dao&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;File&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--日志级别--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--测试环境--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--正式环境--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;File&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--过滤无用信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.zaxxer.hikari.HikariDataSource&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.catalina.core&quot;</span> <span class="attr">level</span>=<span class="string">&quot;WARN&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Logstash安装"><a href="#Logstash安装" class="headerlink" title="Logstash安装"></a>Logstash安装</h3><ul><li>解压安装</li></ul><p>将logstash安装包上传到服务器，进行解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf logstash-7.3.0.tar.gz</span><br></pre></td></tr></table></figure><ul><li>验证</li></ul><p>执行以下命令，验证是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd logstash-7.3.0</span><br><span class="line">bin/logstash -e &quot;input &#123; stdin &#123;&#125;&#125; output &#123; stdout &#123;&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><p>在控制台输入 HelloWorld ，看到如下效果代表 Logstash 安装成功<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/1wSDplWQXrz7JUT.png"><br>也可通过进程命令，检查logstash是否启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef|grep logstash</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/hi8rRGZ67VBXPCT.png"></p><h3 id="Elasticsearch安装"><a href="#Elasticsearch安装" class="headerlink" title="Elasticsearch安装"></a>Elasticsearch安装</h3><ul><li>解压安装</li></ul><p>将Elasticsearch安装包上传到服务器，进行解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf elasticsearch-7.3.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><ul><li>创建用户</li></ul><p><code>Elasticsearch不能用root用户启动</code>，创建一个用户(名称随意)，并赋予<code>此用户与root同组(因为用root用户解压的包)</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd nicky</span><br><span class="line">usermod -g root nicky</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><p>启动Elasticsearch，会遇到如下两个报错问题</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/n5URv13iYghAjBo.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/LOKFkadVzuPf3Zh.png"></p><p>elasticsearch需在<code>data目录</code>和<code>logs目录</code>中存放与修改数据文件，因此在安装目录下<code>创建data目录</code>，再<code>赋予data目录和logs目录及其子文件的读写权限</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir data</span><br><span class="line">chmod 777 -R logs/</span><br><span class="line">chmod 777 -R data/</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/nNjL9ERsXCWz168.png"></p><p>再次启动Elasticsearch，另起会话窗口执行 <code>curl http://localhost:9200 </code>命令，如出现如下效果，则 Elasticsearch 安装成功。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su - nicky</span><br><span class="line">cd elasticsearch-7.3.0</span><br><span class="line">bin/elasticsearch</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/tdM6UxmlbV5Ifhs.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/ZEhSr5sXepb9HLG.png"></p><h3 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a>Kibana安装</h3><ul><li>解压安装</li></ul><p>将Kibana安装包上传到服务器，进行解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf kibana-7.3.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><p>使用上述新建<code>nicky</code>用户启动 Kibana (<code>Kibana解压安装情况下，不能使用root用户启动</code>)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su - nicky</span><br><span class="line">cd kibana-7.3.0-linux-x86_64</span><br><span class="line">bin/kibana</span><br></pre></td></tr></table></figure><p>在浏览器中访问 <code>http://ip:5601</code>(可使用<code>hostname - I</code>命令查询IP)</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/hbuYtjIVlwgd6LH.png"><br>若出现以下界面，则表示 Kibana 安装成功<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/gRvG936cx82zPkt.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/EnwFB2GulZjCNJ6.png"></p><h3 id="filebeat安装"><a href="#filebeat安装" class="headerlink" title="filebeat安装"></a>filebeat安装</h3><ul><li>解压安装</li></ul><p>进入安装包所在位置，进行解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf filebeat-7.3.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><ul><li>添加filebeat命令</li></ul><p>先将filebeat命令加入到环境</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ln -s 安装路径/filebeat /usr/bin/</span><br><span class="line">ln -s /usr/local/filebeat-7.3.0-linux-x86_64/filebeat /usr/bin/</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd filebeat-7.3.0-linux-x86_64</span><br><span class="line">filebeat -e -c filebeat.yml</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/13/LvxthmY2ZUqBkXN.png"></p><h3 id="Supervisor安装"><a href="#Supervisor安装" class="headerlink" title="Supervisor安装"></a>Supervisor安装</h3><p>上述<code>ELK</code>的启动是在<code>前台启动</code>的，意味着如果关闭会话窗口，该组件就会停止导致整个 ELK 平台无法使用，至此使用<code>Supervisor</code>来<code>管理 ELK 的启停</code>。首先需要在服务器上安装 Supervisor (<a href="https://www.goitman.cn/2022/04/07/Supervisor%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/">安装教程</a>) 。安装成功后，还需要在 Supervisor 的配置文件中配置 ELK 三大组件（其配置文件默认为 <code>/etc/supervisor/supervisord.conf </code>文件）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[program:elasticsearch]</span><br><span class="line">environment=JAVA_HOME=&quot;/usr/local/java/&quot;</span><br><span class="line">directory=/usr/local/elasticsearch-7.3.0</span><br><span class="line">user=nicky</span><br><span class="line">command=/usr/local/elasticsearch-7.3.0/bin/elasticsearch</span><br><span class="line"></span><br><span class="line">[program:logstash]</span><br><span class="line">environment=JAVA_HOME=&quot;/usr/local/java/&quot;</span><br><span class="line">directory=/usr/local/logstash-7.3.0</span><br><span class="line">user=nicky</span><br><span class="line">command=/usr/local/logstash-7.3.0/bin/logstash -f /usr/local/logstash-7.3.0/config/elastic.conf</span><br><span class="line"></span><br><span class="line">[program:kibana]</span><br><span class="line">environment=LS_HEAP_SIZE=5000m</span><br><span class="line">directory=/usr/local/kibana-7.3.0</span><br><span class="line">user=nicky</span><br><span class="line">command=/usr/local/kibana-7.3.0/bin/kibana</span><br></pre></td></tr></table></figure><p>执行<code>sudo supervisorctl reload</code>即可完成整个 ELK 的启动，而且其<code>默认是开机后台自启</code>。当然，也可以使用<code>sudo supervisorctl start/stop program_name</code>来管理单独的应用.</p><h2 id="Logstash单服务部署"><a href="#Logstash单服务部署" class="headerlink" title="Logstash单服务部署"></a>Logstash单服务部署</h2><ul><li>修改Logstash配置</li></ul><p>在<code>config/</code>目录下创建配置文件(名称随意)，并使用<code>bin/logstash -f config/配置文件名.conf</code> 命令启动</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/07/jXniFZ6E98HGprt.png"></p><p>配置内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path =&gt; [</span><br><span class="line">            # 这里填写需要监控的文件</span><br><span class="line">            &quot;/usr/local/logs/app.log&quot;</span><br><span class="line">        ]</span><br><span class="line">        #设置多长时间检测文件是否修改</span><br><span class="line">        stat_interval =&gt; 1</span><br><span class="line">        #监听文件的起始位置，默认是end</span><br><span class="line">        start_position =&gt; beginning</span><br><span class="line">        #监听文件读取信息记录的位置</span><br><span class="line">        sincedb_path =&gt; &quot;/usr/local/logstash-7.3.0/test.txt&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;#输出源</span><br><span class="line">  #ES IP地址与端口</span><br><span class="line">  hosts =&gt; &quot;localhost:9200&quot; </span><br><span class="line">  #ES索引名称（自定义）</span><br><span class="line">  index =&gt; &quot;demo&quot;</span><br><span class="line">  #文档类型</span><br><span class="line">  document_type =&gt; &quot;article&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123;#控制台输出，便于查看；生产环境将注释，影响性能</span><br><span class="line">      #以JSON格式输出</span><br><span class="line">      codec =&gt; json_lines</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改Kibana配置</li></ul><p>修改配置文件 <code>config/kibana.yml ，指定 Elasticsearch 的信息</code> 。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/06/SW1ZazRyiX7VINh.png"></p><p>如果<code>elasticsearch没有设置密码</code>，密码配置可去掉；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">elasticsearch.hosts: &quot;http://localhost:9200&quot;</span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line">elasticsearch.username: &quot;nicky&quot;</span><br><span class="line">elasticsearch.password: &quot;nicky&quot;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/02/fVIHMkqEevO2BCG.png"></p><ul><li>测试</li></ul><p>Elasticsearch默认配置即可；ELK与项目启动后，登录Kibana的web界面，关联Elasticsearch索引</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/07/DWxYUvGdHJKTF8V.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/07/MsAiLJnxj4FONqV.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/07/KOtR6zLk7isqgQN.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/07/aIphoY6kH42VLw3.png"></p><p>使用Postman请求接口，查看日志（环境内没有安装数据库，让其报个错吧）</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/07/EUAxcTYmuOjqItn.png"></p><p>项目控制台输出日志<code>(如下三张截图，并非同一时期所截，不影响正常流程)</code></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/07/RLWj6Dhgl8JdACH.png"></p><p>logstash控制台输出日志</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/07/Qs5jykRubHNpDeg.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/07/L9yvscXwBVMfzJN.png"></p><h2 id="Beats部署"><a href="#Beats部署" class="headerlink" title="Beats部署"></a>Beats部署</h2><ul><li>修改filebeat配置</li></ul><p>filebeat安装目录下，修改<code>filebeat.yml</code>配置文件</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/13/WlLarosG2JHuv9Y.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/13/K1oMyZhankCfQVD.png"></p><ul><li>修改Logstash配置</li></ul><p>配置内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">beats &#123;</span><br><span class="line">        port =&gt; 5044</span><br><span class="line">        codec =&gt; plain &#123;</span><br><span class="line">          charset =&gt; &quot;UTF-8&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;#输出源</span><br><span class="line">  #ES IP地址与端口</span><br><span class="line">  hosts =&gt; &quot;localhost:9200&quot; </span><br><span class="line">  #ES索引名称（根据日期定义）</span><br><span class="line">  index =&gt; &quot;app-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">  #文档类型</span><br><span class="line">  document_type =&gt; &quot;article&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  stdout &#123;#控制台输出，便于查看；生产环境将注释，影响性能</span><br><span class="line">      #以JSON格式输出</span><br><span class="line">      codec =&gt; json_lines</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><p>ELK与项目启动后，关联Elasticsearch (Elasticsearch默认配置即可) 索引，查询结果如下</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/13/fIjxmiGzJyoQSpV.png"></p><h2 id="Nginx代理"><a href="#Nginx代理" class="headerlink" title="Nginx代理"></a>Nginx代理</h2><p>ELK配置完之后，有些情况下外网无法连接Kibana，则需要使用Nginx代理到Kibana进行访问</p><ul><li>安装nginx和http用户认证工具</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install nginx httpd-tools</span><br></pre></td></tr></table></figure><ul><li>修改nginx配置</li></ul><p>先备份nginx.conf文件，以防错改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak</span><br><span class="line">vi /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>将<code>location配置部分</code>，注释掉</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/14/ihlypgK7BIEd83T.jpg"></p><p>创建并编辑<code>kibana.conf配置文件</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /etc/nginx/conf.d/kibana.conf</span><br><span class="line">vim /etc/nginx/conf.d/kibana.conf</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8000; #修改端口为8000</span><br><span class="line"></span><br><span class="line">    server_name kibana;</span><br><span class="line"></span><br><span class="line">    #auth_basic &quot;Restricted Access&quot;;</span><br><span class="line">    #auth_basic_user_file /etc/nginx/kibana-user;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:5601; #代理转发到kibana</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &#x27;upgrade&#x27;;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_cache_bypass $http_upgrade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新加载配置文件，并重启服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl reload nginx</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p>在浏览器输入<code>http://nginx服务器ip:8000</code>, 就可以访问了kibana</p><h1 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h1><h2 id="Filebeat"><a href="#Filebeat" class="headerlink" title="Filebeat"></a>Filebeat</h2><h3 id="配置多个日志路径"><a href="#配置多个日志路径" class="headerlink" title="配置多个日志路径"></a>配置多个日志路径</h3><p>如需要获取<code>多个日志文件</code>路径(<code>如tomcat、nginx等等</code>)，只需修改<code>filebeat</code>和<code>logstash</code>配置文件即可</p><ul><li>修改filebeat配置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi 路径/filebeat.yml</span><br></pre></td></tr></table></figure><p>模版内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filebeat.prospectors:</span><br><span class="line"></span><br><span class="line">- type: log</span><br><span class="line">  # 启用输入配置</span><br><span class="line">  enabled: true</span><br><span class="line">  # 指定要监控的日志，可以指定文件(.../*.log或.../log.log)或者目录(.../logs/*)</span><br><span class="line">  paths:</span><br><span class="line">    - tomcat日志路径</span><br><span class="line">  </span><br><span class="line">  # multiline 用于在日志中，每一条日志占据多行的情况</span><br><span class="line">  # 多行日志，开始行的正则匹配规则，如下为：以&quot;年-月-日 时:分:秒,毫秒&quot;开头</span><br><span class="line">  multiline.pattern: &#x27;^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125; [0-9]&#123;2&#125;:[0-9]&#123;2&#125;:[0-9]&#123;2&#125;,[0-9]&#123;3&#125;&#x27;</span><br><span class="line">  # 是否需要对pattern条件转置使用，不翻转为true，反转为false</span><br><span class="line">  multiline.negate: true</span><br><span class="line">  # 匹配pattern后，与前面（before）还是后面（after）的内容合并为一条日志</span><br><span class="line">  multiline.match: after</span><br><span class="line"></span><br><span class="line">  fields:</span><br><span class="line">    # type为自定义标签，以便做索引判断</span><br><span class="line">    type: tomcat</span><br><span class="line"></span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    - nginx日志路径</span><br><span class="line"></span><br><span class="line">  multiline.pattern: &#x27;&#x27;</span><br><span class="line">  multiline.negate: true</span><br><span class="line">  multiline.match: after</span><br><span class="line"></span><br><span class="line">  fields:</span><br><span class="line">    type: nginx</span><br><span class="line"></span><br><span class="line">- type: log</span><br><span class="line">  enabled: true</span><br><span class="line">  paths:</span><br><span class="line">    - web日志路径</span><br><span class="line">  </span><br><span class="line">  multiline.pattern: &#x27;&#x27;</span><br><span class="line">  multiline.negate: true</span><br><span class="line">  multiline.match: after</span><br><span class="line"></span><br><span class="line">  fields:</span><br><span class="line">    type: web</span><br></pre></td></tr></table></figure><ul><li>修改logstash配置文件</li></ul><p>以elastic.conf配置文件为例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi 路径/elastic.conf</span><br></pre></td></tr></table></figure><p>模版内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">        port =&gt; 5044</span><br><span class="line">        codec =&gt; plain &#123;</span><br><span class="line">          charset =&gt; &quot;UTF-8&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 过滤，remove_field为移除filebeat中的多余字段</span><br><span class="line">filter&#123;</span><br><span class="line">    mutate&#123;</span><br><span class="line">        remove_field =&gt; &quot;beat.hostname&quot;</span><br><span class="line">        remove_field =&gt; &quot;beat.name&quot;</span><br><span class="line">        remove_field =&gt; &quot;@version&quot;</span><br><span class="line">        remove_field =&gt; &quot;source&quot;</span><br><span class="line">        remove_field =&gt; &quot;beat&quot;</span><br><span class="line">        remove_field =&gt; &quot;tags&quot;</span><br><span class="line">        remove_field =&gt; &quot;offset&quot;</span><br><span class="line">        remove_field =&gt; &quot;sort&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line">    # 索引判断，需与filebeat中的自定义标签一致</span><br><span class="line">    if [fields][tpye] == &quot;tomcat&quot;  &#123;</span><br><span class="line">        # 控制台输出，生产环境禁用，影响性能</span><br><span class="line">        stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">        elasticsearch &#123;</span><br><span class="line">            # ES服务器IP地址与端口</span><br><span class="line">            hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class="line">            # 以日期创建ES索引</span><br><span class="line">            index =&gt; &quot;tomcat-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if [fields][tpye] == &quot;nginx&quot;  &#123;</span><br><span class="line">        stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">        elasticsearch &#123;</span><br><span class="line">            hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class="line">            index =&gt; &quot;nginx-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if [fields][tpye] == &quot;web&quot;  &#123;</span><br><span class="line">        stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">        elasticsearch &#123;</span><br><span class="line">            hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class="line">            index =&gt; &quot;web-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h2><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>input模块支持从多个源收集数据，以下列举几个常用配置</p><h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        # path是file中唯一必需的参数。其他都是可选参数</span><br><span class="line">        # 单一文件</span><br><span class="line">        path =&gt; &quot;/usr/local/logs/app.log&quot; </span><br><span class="line">        # 监听文件的多个路径，多路径用&quot;,&quot;分割</span><br><span class="line">        # path =&gt; [&quot;/usr/local/logs/*.log&quot;,&quot;/usr/local/logs/app-*.log&quot;]</span><br><span class="line"></span><br><span class="line">        # 过滤不想监听的文件</span><br><span class="line">        exclude =&gt; &quot;1.log&quot;</span><br><span class="line"></span><br><span class="line">        # 监听文件的起始位置，默认是end</span><br><span class="line">        start_position =&gt; beginning</span><br><span class="line"></span><br><span class="line">        #监听文件读取信息记录的位置，配置此项，start_position将失效</span><br><span class="line">        sincedb_path =&gt; &quot;/usr/local/logstash-7.3.0/test.txt&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    file &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><h5 id="Redis-模式"><a href="#Redis-模式" class="headerlink" title="Redis 模式"></a>Redis 模式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    redis &#123;</span><br><span class="line">        # redis主机地址</span><br><span class="line">        host =&gt; &quot;IP&quot;</span><br><span class="line">        # redis端口号</span><br><span class="line">        port =&gt; 6379</span><br><span class="line">        # redis数据库编号 0 ~ 15</span><br><span class="line">        db =&gt; 8</span><br><span class="line">        # 可选值有 channel(发布/订阅通信模式)、list(队列数据结构)、pattern_channel(发布订阅通信组模式) ，pattern_channel少用；</span><br><span class="line">        # channel 相比 list 的好处是，解除了发布者和订阅者之间的耦合</span><br><span class="line">        data_type =&gt; &quot;channel&quot; </span><br><span class="line">        # 发布通道名称(KEY键)</span><br><span class="line">        key =&gt; &quot;&quot; </span><br><span class="line">        # 密码</span><br><span class="line">        password =&gt;</span><br><span class="line">        # 超时时间，单位秒</span><br><span class="line">        timeout =&gt;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    redis&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Kafka-模式"><a href="#Kafka-模式" class="headerlink" title="Kafka 模式"></a>Kafka 模式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    kafka &#123;</span><br><span class="line">        # kafka集群地址</span><br><span class="line">        bootstrap_servers =&gt; &quot;IP:PORT,IP:PORT,...&quot;</span><br><span class="line"></span><br><span class="line">        # 从哪个topic(主题)读取数据，支持多个topic</span><br><span class="line">        topics =&gt; [&quot;topic名字&quot;]</span><br><span class="line"></span><br><span class="line">        # 消费组者ID，默认值是“logstash”。kafka将消息发到每个消费者组中，同一组中消费者收到的数据不重复。</span><br><span class="line">        # 如有两个消费者组G1、G2，G1中有成员A、B，G2中有成员C、D。</span><br><span class="line">        # kafka从输入中收到了10条消息，会将这10条消息同时发送给G1和G2，A和B各会收到这10条消息中的一部分，收到消息的并集就是这10条消息，C和D同理  </span><br><span class="line">        group_id =&gt; &quot;group名字&quot;</span><br><span class="line"></span><br><span class="line">        # 由于beat传输数据给kafka集群的时候，会附加很多tag，默认情况下，logstash就会将这串tag也认为是message的一部分。</span><br><span class="line">        # 不利于后期数据处理。需要添加codec处理得到原本的message数据。</span><br><span class="line">        # codec =&gt; json</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    kafka｛</span><br><span class="line">        ...</span><br><span class="line">    ｝</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><h5 id="Rabbitmq-模式"><a href="#Rabbitmq-模式" class="headerlink" title="Rabbitmq 模式"></a>Rabbitmq 模式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    rabbitmq &#123;</span><br><span class="line">        # IP地址</span><br><span class="line">        host =&gt; &quot;ip&quot;</span><br><span class="line">        # 端口号</span><br><span class="line">        port =&gt; 5672</span><br><span class="line">        # 队列名称</span><br><span class="line">        queue =&gt; &quot;&quot;</span><br><span class="line">        # 虚拟主机</span><br><span class="line">        vhost =&gt; &quot;/vhost&quot;</span><br><span class="line">        prefetch_count =&gt; 1</span><br><span class="line">        # 用户名</span><br><span class="line">        user =&gt; &quot;&quot;</span><br><span class="line">        # 密码</span><br><span class="line">        password =&gt; &quot;&quot;</span><br><span class="line">        # 关键字匹配</span><br><span class="line">        key =&gt; &quot;routingkey.#&quot;</span><br><span class="line">        # 交换器名称</span><br><span class="line">        exchange =&gt; &quot;&quot;</span><br><span class="line">        # 是否持久化，跟队列配置一致</span><br><span class="line">        durable=&gt; true</span><br><span class="line">        # 可选格式有 plain、json</span><br><span class="line">        codec =&gt; &quot;json&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rabbitmq &#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MySQL数据库</span><br><span class="line">input &#123;</span><br><span class="line">  jdbc &#123;</span><br><span class="line">    # 数据库连接地址</span><br><span class="line">    jdbc_connection_string =&gt; &quot;jdbc:mysql://host:port/database&quot;</span><br><span class="line">    # jar驱动包地址</span><br><span class="line">    jdbc_driver_library =&gt; &quot;/路径/mysql-connector-java-X.X.XX-bin.jar&quot;</span><br><span class="line">    # mysql驱动类名</span><br><span class="line">    jdbc_driver_class =&gt; &quot;&quot;</span><br><span class="line">    # 用户相关配置</span><br><span class="line">    jdbc_user =&gt; &quot;&quot;</span><br><span class="line">    jdbc_password =&gt; &quot;&quot;</span><br><span class="line">    # 对应密码文件绝对路径</span><br><span class="line">    # jdbc_password_filepath =&gt; &quot;&quot;</span><br><span class="line">    # 抓取数据的SQL语句</span><br><span class="line">    statement =&gt; &quot;&quot;</span><br><span class="line">    # 对应sql执行文件绝对路径</span><br><span class="line">    # statement_filepath =&gt; &quot;&quot;</span><br><span class="line">    # 是否分页抓取</span><br><span class="line">    jdbc_paging_enabled =&gt; &quot;true&quot;</span><br><span class="line">    # 每页抓取的数量</span><br><span class="line">    jdbc_page_size =&gt; &quot;50000&quot;</span><br><span class="line">    # 定时任务（由左至右：分、时、天、月、年），全为&quot;*&quot;默认为每分钟都更新</span><br><span class="line">    schedule =&gt; &quot;* * * * *&quot;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter模块是<code>非必须</code>的，input接收到的数据如果需要<code>类型转换</code>、<code>过滤判断</code>、<code>增减字段</code>等操作就需要用到filter模块。如果input得到的数据<code>不需要二次加工可以不使用filter</code>，直接output到一个输出端。</p><blockquote><p><code>合理的拆分字段和字段的数据类型转换是制作统计图表的基础，统计图表的制作直接依赖filter处理所产生的字段</code>。</p></blockquote><p><code>正则处理插件grok</code>堪称Logstash中的神器组件，grok内置了丰富的预定义pattern，能够简单方便的匹配复杂的正则目标数据。</p><blockquote><p>grok内置正则表达式文件路径：<code>/logstash安装路径\vendor\bundle\jruby\x.x\gems\logstash-patterns-core-x.x.x\patterns\grok-patterns</code></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/31/kfUENFrxwpuYQ6n.png"></p><ul><li>基本语法</li></ul><p>用<code>%&#123;&#125; </code>表示一组<code>正则匹配规则</code>，<code>SYNTAX</code> 是指grok里已经<code>预定义好的正则表达式匹配别名</code>，<code>SEMANTIC</code> 是指匹配之后准备<code>输出的字段名称</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;SYNTAX:SEMANTIC&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义</li></ul><p>grok组件可以将多组复杂的pattern放到一个文件中，方便修改和管理，比如在<code>/usr/local/logstash-7.3.0/patterns/</code>目录下，创建一个为<code>test</code>(文件名随意)的文件。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/31/ofTtAsz7ElLgrJP.png"></p><p>以nginx日志为例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">23/May/2019:14:40:10 +0800,1558593610.753,1660,0.028,&quot;0.028&quot;,647,200,10.16.172.20-&quot;123.126.70.235&quot;,POST /330000/v6/feeds/detail/query HTTP/1.1,&quot;app_key_vs=2.6.0&amp;appid=330000&amp;feed_count=10&amp;feed_id=507297347911306752&amp;flyer=1558593610700&amp;idfa=A6719238-5AF6-4B57-B4B6-676B0905704D&amp;log_user_id=248137098937342464&amp;query_type=6&amp;sig=28d2c189144c5380113afff158ea257d&amp;since_time_comment=3000-01-01%2001%3A01%3A01.000&amp;since_time_pure=3000-01-01%2001%3A01%3A01.000&quot;,UPS/&quot;10.18.76.18:8080&quot;,&quot;sns/2.6.0 (com.sohu.sns; build:3; iOS 12.1.4) Alamofire/1.0&quot;,-,cs-ol.sns.sohu.com,&quot;01374622096363527552&quot;,&quot;248137098937342464&quot;,&quot;872289029629325312@sohu.com&quot;,&quot;110501&quot;</span><br></pre></td></tr></table></figure><p>nginx 配置的日志格式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log_format nginx_nobody_log &#x27;$time_local,$msec,$request_length,$request_time,&quot;$upstream_response_time&quot;,$body_bytes_sent,$status,$remote_addr-&quot;$http_x_forwarded_for&quot;,$request,&quot;$request_body&quot;,UPS/&quot;$upstream_addr&quot;,&quot;$http_user_agent&quot;,$http_referer,$host,&quot;$http_s_cid&quot;,&quot;$http_s_pid&quot;,&quot;$http_s_ppid&quot;,&quot;$http_p_appid&quot;&#x27;;</span><br></pre></td></tr></table></figure><p>编辑<code>test</code>文件如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SNS_NGINX_ACCESS %&#123;HTTPDATE:time_local&#125;,%&#123;NUMBER:msec&#125;,%&#123;INT:request_length&#125;,%&#123;BASE16FLOAT:request_time&#125;,&quot;(?:-|%&#123;BASE16FLOAT:upstream_response_time&#125;)(,%&#123;NUMBER:upstream_response_time2&#125;)?&quot;,%&#123;INT:body_bytes_sent&#125;,%&#123;INT:status&#125;,%&#123;IPORHOST:remote_addr&#125;-&quot;%&#123;DATA:http_x_forwarded_for&#125;(, %&#123;DATA:http_x_forwarded_for2&#125;)?&quot;,%&#123;WORD:method&#125; %&#123;URIPATH:interface&#125;(?:%&#123;DATA:uri_param&#125;)? HTTP/%&#123;NUMBER:http_version&#125;,&quot;%&#123;DATA:request_body&#125;&quot;,UPS/&quot;%&#123;DATA:upstream_addr&#125;(, %&#123;DATA:upstream_addr2&#125;)?&quot;,&quot;%&#123;DATA:http_user_agent&#125;&quot;,%&#123;DATA:http_referer&#125;,%&#123;IPORHOST:host&#125;,&quot;%&#123;DATA:http_s_cid&#125;&quot;,&quot;%&#123;DATA:http_s_pid&#125;&quot;,&quot;%&#123;DATA:http_s_ppid&#125;&quot;,&quot;%&#123;DATA:http_p_appid&#125;&quot;</span><br></pre></td></tr></table></figure><p>引用pattern文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># SNS_NGINX_ACCESS 自定义的pattern别名</span><br><span class="line">grok &#123;</span><br><span class="line">    patterns_dir =&gt; &quot;/usr/local/logstash-7.3.0/patterns&quot;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">        &quot;message&quot; =&gt; &quot;%&#123;SNS_NGINX_ACCESS&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>在线调试</code> <a href="https://grokdebug.herokuapp.com/">grok规则匹配地址</a></p></blockquote><p>从Kibana 6.4.0版本开始，<code>Dev Tools</code>自带了grok调试功能</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/31/aVUhZPlX975TeYs.png"></p><ul><li>其他配置</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    # filter模块内也提供了众多插件</span><br><span class="line">    # 常用修改，字段拆分、连接、大小写、字段改名、类型变换</span><br><span class="line">    mutate &#123;</span><br><span class="line">        # 将读到的数据用’,‘ 拆分</span><br><span class="line">        split =&gt; [&quot;message&quot;,&quot;,&quot;]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 日期类型的字段处理</span><br><span class="line">    # 日期插件有区别于其他的插件，默认会改写当前数据记录所代表的时间(@timestamp这个字段)，在通过kibana进行时间范围查询时会使用到@timestamp</span><br><span class="line">    date &#123;</span><br><span class="line">        match =&gt; [&quot;time&quot;, &quot;yyyy-MM-dd HH:mm:ss.SSS&quot;]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 正则处理插件</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123;</span><br><span class="line">            &quot;params&quot; =&gt; &quot;Method:%&#123;DATA:method&#125;,...TimeId:%&#123;INT:timeId&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # kv类型的字符串字段处理，如&quot;params=&quot;?app_key_vs=2.6.0&amp;appid=330000&amp;feed_count=10&amp;feed_id=xxx&quot;</span><br><span class="line">    kv &#123;</span><br><span class="line">        source =&gt; &quot;params&quot;</span><br><span class="line">        field_split =&gt; &quot;=&quot;</span><br><span class="line">        value_split =&gt; &quot;,&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 处理json字符串字段，如param=&quot;&#123;a:1,b:2&#125;&quot;</span><br><span class="line">    json &#123;</span><br><span class="line">        source =&gt; &quot;param&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 丢弃接收到的数据</span><br><span class="line">    drop &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>output内输出配置与input内输入配置大同小异，其他中间件配置在此不再累述</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">    # debug 调试使用，由于性能的关系，生产环境禁止使用</span><br><span class="line">    stdout&#123;codec =&gt; rubydebug&#125;</span><br><span class="line"></span><br><span class="line">    # 输出到Elasticsearch存储</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        # ES IP地址与端口，可多个</span><br><span class="line">        hosts =&gt; [&quot;ip:port&quot;,...]</span><br><span class="line">        # 按天命名的index</span><br><span class="line">        index =&gt; &quot;app-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">        # 文档类型</span><br><span class="line">        document_type =&gt; &quot;&quot;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file&#123;</span><br><span class="line">        # 按天命名输出文件</span><br><span class="line">        path =&gt; &quot;/usr/local/logs/app-%&#123;+YYYY-MM-dd&#125;.log&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><p>Elasticsearch提供了众多的api和丰富的功能；常用的API分为如下几类</p><blockquote><ul><li>Document APIs ：es的文档的CRUD操作相关API</li><li>Search APIs：查询检索相关的API</li><li>Indices APIs：索引管理相关API</li><li>cat APIs：集群健康状态、索引信息、分片信息等等，输出的是在命令行界面下更友好的制表信息</li><li>Cluster APIs：es集群查看和管理配置相关API</li></ul></blockquote><p>以下借助Kibana的<code>Dev Tools</code>工具来了解一下常用的API使用</p><h3 id="获取es信息"><a href="#获取es信息" class="headerlink" title="获取es信息"></a>获取es信息</h3><ul><li>查看es的基本信息(包括版本号、集群名称、lucene版本号等)</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/30/XrEoiaupxR5Fd3h.png"></p><ul><li>查看es对应index的aliases、mappings、settings信息</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/30/t6xI2j1PbhAq9ir.png"></p><h3 id="搜索-Search"><a href="#搜索-Search" class="headerlink" title="搜索(Search)"></a>搜索(Search)</h3><p>查询可以分别使用<code>URI search</code>和<code>Request body</code>两种查询方式</p><blockquote><p><code>URI search</code> 查询方式，语法参考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/search-uri-request.html">search-uri-request</a><br><code>request body</code> 查询方式，语法参考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/search-request-body.html">search-request-body</a></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/30/VaDqjW8KIFhUEck.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/30/9pJ6I7KZmnh1DbG.png"></p><p>上图返回结果中有一个 <code>_scroll_id</code> 字段，要<code>基于这个游标继续遍历</code>数据只需要像下面这样，调用 <code>/_search/scroll</code>接口，将前面返回结果的<code>_scroll_id作为scroll_id参数值</code>；<code>scroll:5m</code>表示将当前的scroll_id查询窗口<code>再次延长5分钟</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /_search/scroll</span><br><span class="line">&#123;</span><br><span class="line">    &quot;scroll&quot;:&quot;5m&quot;,</span><br><span class="line">    &quot;scroll_id&quot;:&quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAexUWX3ptTVA0aWRRRi1YMlBMZmN6a2ZDUQ&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>游标超过时间窗口会自动清理，也可以通过 <code>DELETE /_search/scroll</code> 来<code>清理一个游标</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /_search/scroll</span><br><span class="line">&#123;</span><br><span class="line">    &quot;scroll_id&quot; : &quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAexUWX3ptTVA0aWRRRi1YMlBMZmN6a2ZDUQ&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计-Count"><a href="#统计-Count" class="headerlink" title="统计(Count)"></a>统计(Count)</h3><p>统计数量可使用 Count；下右图<code>count</code>表示查询命中的数量</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/30/emrBS2pf4JIvia5.png"></p><blockquote><p><code>query</code>部分es提供了Query DSL查询语法，语法参考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.6/query-dsl.html">query-dsl</a></p></blockquote><h3 id="聚合-Aggregation"><a href="#聚合-Aggregation" class="headerlink" title="聚合(Aggregation)"></a>聚合(Aggregation)</h3><p>统计某索引每天(每小时)的数量、按照某个字段计数等，类似的查询就要用到aggregation聚合查询</p><ul><li>查询每天请求数量</li></ul><blockquote><ul><li><code>aggs</code>：表示聚合查询；</li><li><code>day_count</code>：自定义的一个聚合的名称（aggs可以有多个和多层，所以需要指定一个名称）；</li><li><code>date_histogram</code>：表示是一个日期分布器，是按照<code>&quot;@timestamp&quot;</code>这个日期字段按照<code>1d(1天)</code>的时间间隔进行分布的；</li><li><code>size:0</code>：表示不返回具体的记录，hits部分是空数组</li></ul></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/30/QPXzsWS4NOerFU2.png"></p><ul><li>查询日期范围</li></ul><p>查询的日期范围，并且只查询@version&#x3D;1的数量，可以在查询增加query部分，如下</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/30/Y64ARNDv8sGrXfq.png"></p><ul><li>查询一天内接口调用次数</li></ul><p>使用<code>terms</code>进行聚合，将aggs部分修改成如下，<code>interface.keyword</code> 就是接口路径(<code>这里的interface.keyword是经过grok插件过滤后的字段</code>)，size:5 表示只展示前面5个(默认是按照doc_count倒序排序)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;interface_count&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;interface.keyword&quot;,</span><br><span class="line">        &quot;size&quot;: 5</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;&quot;range&quot;: &#123;</span><br><span class="line">            &quot;@timestamp&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: &quot;2020-05-20&quot;,</span><br><span class="line">              &quot;lte&quot;: &quot;2020-05-21&quot;,</span><br><span class="line">              &quot;format&quot;: &quot;yyyy-MM-dd&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;status&quot;: 200</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/31/fbIR368jyzcWlwT.png"></p><ul><li>查询一天内每小时接口调用次数</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;interface_count&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;interface.keyword&quot;,</span><br><span class="line">        &quot;size&quot;: 5</span><br><span class="line">      &#125;</span><br><span class="line">      ,</span><br><span class="line">      &quot;aggs&quot; :&#123;</span><br><span class="line">        &quot;hours&quot; : &#123;</span><br><span class="line">          &quot;date_histogram&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;@timestamp&quot;,</span><br><span class="line">            &quot;interval&quot;: &quot;1h&quot; //按照1小时间隔分布</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/31/xo9OzZ5fKk6NMub.png"></p><h2 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h2><p>通过<code>grok匹配</code>存储在Elasticsearch中的字段，都是可以使用Kibana的 <code>Discover</code>菜单的中 “Add a filter” 进行查询</p><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><h4 id="两种过滤方式"><a href="#两种过滤方式" class="headerlink" title="两种过滤方式"></a>两种过滤方式</h4><blockquote><ul><li><code>&quot;字段名&quot;</code>：可以进行分词查询，如下图中interface字段存储的是<code>/330003/v7/feeds/profile/template</code>的内容，那么<code>每一个&quot;/&quot;</code>之间的字符串都可以单独查询，因为<code>&quot;/&quot;是一个默认的分词符号</code></li><li><code>&quot;字段名.keyword&quot;</code>：使用interface整体进行查询<code>不支持分词</code>，使用时Kibana时也会弹出下拉列表。</li></ul></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/31/ojzuIUA34rq6TYX.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/31/PZQe8xGrSkfKd3j.png"></p><h4 id="单字段多词查询"><a href="#单字段多词查询" class="headerlink" title="单字段多词查询"></a>单字段多词查询</h4><p>查询<code>一个字段的多个值</code>可以使用<code>“is one of”</code>或者<code> “is not one of”</code> ，用来表示要查询的分词在其中或者不在其中：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/31/HIoOhWz5gNFLCbi.png"></p><h4 id="多过滤条件查询"><a href="#多过滤条件查询" class="headerlink" title="多过滤条件查询"></a>多过滤条件查询</h4><p>进行多个字段查询之间的关系是 <code>and</code> 关系，如下 查询的是“interface包含feeds关键字的并且 appid&#x3D;330000 并且 status是200的 ”</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/31/BNoLluJr2YRsmFx.png"></p><h3 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h3><h4 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h4><p>直接搜索框输入查询内容：<code>content 或 &quot;$&#123;content&#125;&quot;</code>，如果<code>不写引号</code>，那么搜索内容将按照<code>分词处理</code>，不区分<code>内容顺序</code></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/xUOD579eqGkwzo8.png"></p><h4 id="字段搜索"><a href="#字段搜索" class="headerlink" title="字段搜索"></a>字段搜索</h4><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/31/CgMl7QTpWfmecvE.png"></p><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><blockquote><p><code>?</code>：匹配单个字符，如<code>app?d</code><br><code>*</code>：匹配0到多个字符，如<code>searc*h</code><br>通配符不能做为第一个字符，如<code>*test，?test</code></p></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/fqBAdVJyuSjEvnU.png"></p><h4 id="模糊搜索"><a href="#模糊搜索" class="headerlink" title="模糊搜索"></a>模糊搜索</h4><blockquote><p><code>~</code>：在单词后面加上<code>~</code>启用模糊搜索，可搜到近似单词；还可指定相似度<code>cromm~1</code>(默认2)，越大值越接近搜索的原始值</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/UwRWBec1NMXJ7lC.png"></p><h4 id="近似搜索"><a href="#近似搜索" class="headerlink" title="近似搜索"></a>近似搜索</h4><p>在<code>短语后加上~</code>，可以搜到被隔开或顺序不同的单词</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/iPepcNUg4WZBav8.png"></p><h4 id="逻辑操作"><a href="#逻辑操作" class="headerlink" title="逻辑操作"></a>逻辑操作</h4><blockquote><p><code>逻辑符 +、-</code></p><ul><li>+：搜索结果中必须包含此项</li><li>-：不能含有此项，如<code>+appid -s-ppid aaa bbb ccc</code> 结果中必须存在appid，不能有s-ppid，剩余部分尽量都匹配到</li></ul><p><code>逻辑符 AND、OR</code><br>((quick AND fox) OR (brown AND fox) OR fox) AND NOT news</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/S4VOsZMQviKIbET.png"></p><h4 id="范围搜索"><a href="#范围搜索" class="headerlink" title="范围搜索"></a>范围搜索</h4><p>有如下写法：</p><blockquote><ul><li>[1,5}，含1但不含5</li><li>age:&gt;10</li><li>age:&lt;&#x3D;10</li><li>age:(&gt;&#x3D;10 AND &lt;20)</li><li>age:(+&gt;&#x3D;10 +&lt;20)</li></ul></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/R2JlmkIe8sySNDb.png"></p><h4 id="转义特殊字符"><a href="#转义特殊字符" class="headerlink" title="转义特殊字符"></a>转义特殊字符</h4><p>以下字符搜索时需用<code>\</code>转义</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ - = &amp;&amp; || &gt; &lt; ! ( ) &#123; &#125; [ ] ^ &quot; ~ * ? : \ /</span><br></pre></td></tr></table></figure><h3 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h3><p>若想清楚某个接口最近1小时都有哪些用户和都来自哪些城市。这里就用到了<code>Kibana Visualize</code>。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/JsxiwOgyYSqMU1z.png"></p><p>选择 <code>Data Table</code> 数据表视图，它可以下载成csv格式的文件。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/rkXZpVe6NWbuj3t.png"></p><p>选择想要查询的索引</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/lSbhBp6P245Q1Ec.png"></p><blockquote><p><code>趋势图表</code>和<code>数据表</code>都分为 <code>Metrics</code>和<code>Buckets</code>两部分：</p><ul><li>Metrics：对Buckets里面的值做什么统计操作</li><li>Buckets：对值的设置</li></ul></blockquote><p>下图的DataTable为查询<code>接口</code>包含<code>&quot;repost&quot;</code>字段，最近15分钟内 前10个调用最多的用户id。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/NwMTBagbkGc59uA.png"></p><p>在<code>Bucket</code>上增加<code>http_s_pid.keyword</code>和<code>geoip.city_name</code>， 数据表 2 列是在 1 列的前提下查询出来的<code>城市名称</code></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/aYDULhpAQBVNqMX.png"></p><p>给每个metric和bucket<code>起别名</code>，然后<code>点击Raw</code>或者<code>Formatted</code>将查询到的<code>数据下载</code>成csv文件</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/hVn85KaFpre6RwX.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/EPlHQihJn7gpO9C.png"></p><h3 id="趋势图绘制"><a href="#趋势图绘制" class="headerlink" title="趋势图绘制"></a>趋势图绘制</h3><p>比如想要了解某些接口<code>平均响应时间</code>和50%，75%，95%的<code>响应时间走向</code>。就可以使用<code>Line视图</code></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/SZtnCvrh2ioqlz5.png"></p><blockquote><p>想要进行均值，最大，最小，百分比分布等这些统计，必须得有<code>Number类型</code>的字段，如果<code>前期logstash</code>没有进行合适的数据类型转换，就需要<code>在Kibana对应索引下</code>的<code>Script Field</code>来实现基于某个字段的类型转换(Script Field中需要编写Script语句，在此不做详解)</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/185sDJxiPa7XHEY.png"></p></blockquote><p>统计最近1小时包含timeline&#x2F;template的接口调用数量折线图。想要统计响应时间，就要先修改Metric的统计方式。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/JLdztXBD1OMwrvE.png"></p><p>增加两个<code>Y-Axis</code>的metric，分别是对 <code>request_time 求均值</code>和对 <code>request_time 求百分比</code>分布</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/cyIawVGzH3NpvRJ.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/04/01/l3JxP41jaVGfrnA.png"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> Logstash </tag>
            
            <tag> Kibana </tag>
            
            <tag> Filebeat </tag>
            
            <tag> 集中式日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用好SpringBoot内置工具类</title>
      <link href="/2022/03/22/%E7%94%A8%E5%A5%BDSpringBoot%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2022/03/22/%E7%94%A8%E5%A5%BDSpringBoot%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><ul><li>断言是一个逻辑判断，用于检查不应该发生的情况</li><li><code>Assert</code> 关键字在 JDK1.4 中引入，可通过 JVM 参数-enableassertions开启</li><li><code>SpringBoot</code> 中提供了 <code>Assert</code> 断言工具类，通常用于数据合法性检查</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要求参数 object 必须为非空（Not Null），否则抛出异常，不予放行</span></span><br><span class="line"><span class="comment">// 参数 message 参数用于定制异常信息。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">notNull</span><span class="params">(Object object, String message)</span></span><br><span class="line"><span class="comment">// 要求参数必须空（Null），否则抛出异常，不予『放行』。</span></span><br><span class="line"><span class="comment">// 和 notNull() 方法断言规则相反</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isNull</span><span class="params">(Object object, String message)</span></span><br><span class="line"><span class="comment">// 要求参数必须为真（True），否则抛出异常，不予『放行』。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isTrue</span><span class="params">(<span class="type">boolean</span> expression, String message)</span></span><br><span class="line"><span class="comment">// 要求参数（List/Set）必须非空（Not Empty），否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">notEmpty</span><span class="params">(Collection collection, String message)</span></span><br><span class="line"><span class="comment">// 要求参数（String）必须有长度（即，Not Empty），否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">hasLength</span><span class="params">(String text, String message)</span></span><br><span class="line"><span class="comment">// 要求参数（String）必须有内容（即，Not Blank），否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">hasText</span><span class="params">(String text, String message)</span></span><br><span class="line"><span class="comment">// 要求参数是指定类型的实例，否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isInstanceOf</span><span class="params">(Class type, Object obj, String message)</span></span><br><span class="line"><span class="comment">// 要求参数 `subType` 必须是参数 superType 的子类或实现类，否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isAssignable</span><span class="params">(Class superType, Class subType, String message)</span></span><br></pre></td></tr></table></figure><h1 id="对象、数组、集合"><a href="#对象、数组、集合" class="headerlink" title="对象、数组、集合"></a>对象、数组、集合</h1><h2 id="ObjectUtils"><a href="#ObjectUtils" class="headerlink" title="ObjectUtils"></a>ObjectUtils</h2><ul><li>获取对象的基本信息</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取对象的类名。参数为 null 时，返回字符串：&quot;null&quot;</span></span><br><span class="line">String <span class="title function_">nullSafeClassName</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 参数为 null 时，返回 0</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nullSafeHashCode</span><span class="params">(Object object)</span></span><br><span class="line"><span class="comment">// 参数为 null 时，返回字符串：&quot;null&quot;</span></span><br><span class="line">String <span class="title function_">nullSafeToString</span><span class="params">(<span class="type">boolean</span>[] array)</span></span><br><span class="line"><span class="comment">// 获取对象 HashCode（十六进制形式字符串）。参数为 null 时，返回 0</span></span><br><span class="line">String <span class="title function_">getIdentityHexString</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 获取对象的类名和 HashCode。参数为 null 时，返回字符串：&quot;&quot;</span></span><br><span class="line">String <span class="title function_">identityToString</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 相当于 toString()方法，但参数为 null 时，返回字符串：&quot;&quot;</span></span><br><span class="line">String <span class="title function_">getDisplayString</span><span class="params">(Object obj)</span></span><br></pre></td></tr></table></figure><ul><li>判断工具</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断数组是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object[] array)</span></span><br><span class="line"><span class="comment">// 判断参数对象是否是数组</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isArray</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 判断数组中是否包含指定元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsElement</span><span class="params">(Object[] array, Object element)</span></span><br><span class="line"><span class="comment">// 相等，或同为 null时，返回 true</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">nullSafeEquals</span><span class="params">(Object o1, Object o2)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">判断参数对象是否为空，判断标准为：</span></span><br><span class="line"><span class="comment">    Optional: Optional.empty()</span></span><br><span class="line"><span class="comment">       Array: length == 0</span></span><br><span class="line"><span class="comment">CharSequence: length == 0</span></span><br><span class="line"><span class="comment">  Collection: Collection.isEmpty()</span></span><br><span class="line"><span class="comment">         Map: Map.isEmpty()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object obj)</span></span><br></pre></td></tr></table></figure><ul><li>其他工具方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向参数数组的末尾追加新元素，并返回一个新数组</span></span><br><span class="line">&lt;A, O <span class="keyword">extends</span> <span class="title class_">A</span>&gt; A[] addObjectToArray(A[] array, O obj)</span><br><span class="line"><span class="comment">// 原生基础类型数组 --&gt; 包装类数组</span></span><br><span class="line">Object[] toObjectArray(Object source)</span><br></pre></td></tr></table></figure><h2 id="StringUtils"><a href="#StringUtils" class="headerlink" title="StringUtils"></a>StringUtils</h2><ul><li>字符串判断工具</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否为 null，或 &quot;&quot;。注意，包含空白符的字符串为非空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object str)</span></span><br><span class="line"><span class="comment">// 判断字符串是否是以指定内容结束。忽略大小写</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">endsWithIgnoreCase</span><span class="params">(String str, String suffix)</span></span><br><span class="line"><span class="comment">// 判断字符串是否已指定内容开头。忽略大小写</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">startsWithIgnoreCase</span><span class="params">(String str, String prefix)</span></span><br><span class="line"><span class="comment">// 是否包含空白符</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 判断字符串非空且长度不为 0，即，Not Empty</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasLength</span><span class="params">(CharSequence str)</span></span><br><span class="line"><span class="comment">// 判断字符串是否包含实际内容，即非仅包含空白符，也就是 Not Blank</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasText</span><span class="params">(CharSequence str)</span></span><br><span class="line"><span class="comment">// 判断字符串指定索引处是否包含一个子串。</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">substringMatch</span><span class="params">(CharSequence str, <span class="type">int</span> index, CharSequence substring)</span></span><br><span class="line"><span class="comment">// 计算一个字符串中指定子串的出现次数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">countOccurrencesOf</span><span class="params">(String str, String sub)</span></span><br></pre></td></tr></table></figure><ul><li>字符串操作工具</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查找并替换指定子串</span></span><br><span class="line">String <span class="title function_">replace</span><span class="params">(String inString, String oldPattern, String newPattern)</span></span><br><span class="line"><span class="comment">// 去除尾部的特定字符</span></span><br><span class="line">String <span class="title function_">trimTrailingCharacter</span><span class="params">(String str, <span class="type">char</span> trailingCharacter)</span></span><br><span class="line"><span class="comment">// 去除头部的特定字符</span></span><br><span class="line">String <span class="title function_">trimLeadingCharacter</span><span class="params">(String str, <span class="type">char</span> leadingCharacter)</span></span><br><span class="line"><span class="comment">// 去除头部的空白符</span></span><br><span class="line">String <span class="title function_">trimLeadingWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 去除头部的空白符</span></span><br><span class="line">String <span class="title function_">trimTrailingWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 去除头部和尾部的空白符</span></span><br><span class="line">String <span class="title function_">trimWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 删除开头、结尾和中间的空白符</span></span><br><span class="line">String <span class="title function_">trimAllWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 删除指定子串</span></span><br><span class="line">String <span class="title function_">delete</span><span class="params">(String inString, String pattern)</span></span><br><span class="line"><span class="comment">// 删除指定字符（可以是多个）</span></span><br><span class="line">String <span class="title function_">deleteAny</span><span class="params">(String inString, String charsToDelete)</span></span><br><span class="line"><span class="comment">// 对数组的每一项执行 trim() 方法</span></span><br><span class="line">String[] trimArrayElements(String[] array)</span><br><span class="line"><span class="comment">// 将 URL 字符串进行解码</span></span><br><span class="line">String <span class="title function_">uriDecode</span><span class="params">(String source, Charset charset)</span></span><br></pre></td></tr></table></figure><ul><li>路径相关工具方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析路径字符串，优化其中的 “..”</span></span><br><span class="line">String <span class="title function_">cleanPath</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 解析路径字符串，解析出文件名部分</span></span><br><span class="line">String <span class="title function_">getFilename</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 解析路径字符串，解析出文件后缀名</span></span><br><span class="line">String <span class="title function_">getFilenameExtension</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 比较两个两个字符串，判断是否是同一个路径。会自动处理路径中的 “..”</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">pathEquals</span><span class="params">(String path1, String path2)</span></span><br><span class="line"><span class="comment">// 删除文件路径名中的后缀部分</span></span><br><span class="line">String <span class="title function_">stripFilenameExtension</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 以 “. 作为分隔符，获取其最后一部分</span></span><br><span class="line">String <span class="title function_">unqualify</span><span class="params">(String qualifiedName)</span></span><br><span class="line"><span class="comment">// 以指定字符作为分隔符，获取其最后一部分</span></span><br><span class="line">String <span class="title function_">unqualify</span><span class="params">(String qualifiedName, <span class="type">char</span> separator)</span></span><br></pre></td></tr></table></figure><h2 id="CollectionUtils"><a href="#CollectionUtils" class="headerlink" title="CollectionUtils"></a>CollectionUtils</h2><ul><li>集合判断工具</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断 List/Set 是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Collection&lt;?&gt; collection)</span></span><br><span class="line"><span class="comment">// 判断 Map 是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Map&lt;?,?&gt; map)</span></span><br><span class="line"><span class="comment">// 判断 List/Set 中是否包含某个对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsInstance</span><span class="params">(Collection&lt;?&gt; collection, Object element)</span></span><br><span class="line"><span class="comment">// 以迭代器的方式，判断 List/Set 中是否包含某个对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Iterator&lt;?&gt; iterator, Object element)</span></span><br><span class="line"><span class="comment">// 判断 List/Set 是否包含某些对象中的任意一个</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsAny</span><span class="params">(Collection&lt;?&gt; source, Collection&lt;?&gt; candidates)</span></span><br><span class="line"><span class="comment">// 判断 List/Set 中的每个元素是否唯一。即 List/Set 中不存在重复元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasUniqueObject</span><span class="params">(Collection&lt;?&gt; collection)</span></span><br></pre></td></tr></table></figure><ul><li>集合操作工具</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 Array 中的元素都添加到 List/Set 中</span></span><br><span class="line">&lt;E&gt; <span class="keyword">void</span> <span class="title function_">mergeArrayIntoCollection</span><span class="params">(Object array, Collection&lt;E&gt; collection)</span></span><br><span class="line"><span class="comment">// 将 Properties 中的键值对都添加到 Map 中</span></span><br><span class="line">&lt;K,V&gt; <span class="keyword">void</span> <span class="title function_">mergePropertiesIntoMap</span><span class="params">(Properties props, Map&lt;K,V&gt; map)</span></span><br><span class="line"><span class="comment">// 返回 List 中最后一个元素</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">lastElement</span><span class="params">(List&lt;T&gt; list)</span></span><br><span class="line"><span class="comment">// 返回 Set 中最后一个元素</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">lastElement</span><span class="params">(Set&lt;T&gt; set)</span></span><br><span class="line"><span class="comment">// 返回参数 candidates 中第一个存在于参数 source 中的元素</span></span><br><span class="line">&lt;E&gt; E <span class="title function_">findFirstMatch</span><span class="params">(Collection&lt;?&gt; source, Collection&lt;E&gt; candidates)</span></span><br><span class="line"><span class="comment">// 返回 List/Set 中指定类型的元素。</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">findValueOfType</span><span class="params">(Collection&lt;?&gt; collection, Class&lt;T&gt; type)</span></span><br><span class="line"><span class="comment">// 返回 List/Set 中指定类型的元素。如果第一种类型未找到，则查找第二种类型，以此类推</span></span><br><span class="line">Object <span class="title function_">findValueOfType</span><span class="params">(Collection&lt;?&gt; collection, Class&lt;?&gt;[] types)</span></span><br><span class="line"><span class="comment">// 返回 List/Set 中元素的类型</span></span><br><span class="line">Class&lt;?&gt; findCommonElementType(Collection&lt;?&gt; collection)</span><br></pre></td></tr></table></figure><h1 id="文件、资源、IO-流"><a href="#文件、资源、IO-流" class="headerlink" title="文件、资源、IO 流"></a>文件、资源、IO 流</h1><h2 id="FileCopyUtils"><a href="#FileCopyUtils" class="headerlink" title="FileCopyUtils"></a>FileCopyUtils</h2><ul><li>输入</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从文件中读入到字节数组中</span></span><br><span class="line"><span class="type">byte</span>[] copyToByteArray(File in)</span><br><span class="line"><span class="comment">// 从输入流中读入到字节数组中</span></span><br><span class="line"><span class="type">byte</span>[] copyToByteArray(InputStream in)</span><br><span class="line"><span class="comment">// 从输入流中读入到字符串中</span></span><br><span class="line">String <span class="title function_">copyToString</span><span class="params">(Reader in)</span></span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从字节数组到文件</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(<span class="type">byte</span>[] in, File out)</span></span><br><span class="line"><span class="comment">// 从文件到文件</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(File in, File out)</span></span><br><span class="line"><span class="comment">// 从字节数组到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(<span class="type">byte</span>[] in, OutputStream out)</span></span><br><span class="line"><span class="comment">// 从输入流到输出流</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(InputStream in, OutputStream out)</span></span><br><span class="line"><span class="comment">// 从输入流到输出流</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(Reader in, Writer out)</span></span><br><span class="line"><span class="comment">// 从字符串到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(String in, Writer out)</span></span><br></pre></td></tr></table></figure><h2 id="ResourceUtils"><a href="#ResourceUtils" class="headerlink" title="ResourceUtils"></a>ResourceUtils</h2><ul><li>从资源路径获取文件</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否是一个合法的 URL 字符串。</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isUrl</span><span class="params">(String resourceLocation)</span></span><br><span class="line"><span class="comment">// 获取 URL</span></span><br><span class="line"><span class="keyword">static</span> URL <span class="title function_">getURL</span><span class="params">(String resourceLocation)</span></span><br><span class="line"><span class="comment">// 获取文件（在 JAR 包内无法正常使用，需要是一个独立的文件）</span></span><br><span class="line"><span class="keyword">static</span> File <span class="title function_">getFile</span><span class="params">(String resourceLocation)</span></span><br></pre></td></tr></table></figure><ul><li>Resource</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件系统资源 D:\...</span></span><br><span class="line">FileSystemResource</span><br><span class="line"><span class="comment">// URL 资源，如 file://... http://...</span></span><br><span class="line">UrlResource</span><br><span class="line"><span class="comment">// 类路径下的资源，classpth:...</span></span><br><span class="line">ClassPathResource</span><br><span class="line"><span class="comment">// Web 容器上下文中的资源（jar 包、war 包）</span></span><br><span class="line">ServletContextResource</span><br><span class="line"><span class="comment">// 判断资源是否存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从资源中获得 File 对象</span></span><br><span class="line">File <span class="title function_">getFile</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从资源中获得 URI 对象</span></span><br><span class="line">URI <span class="title function_">getURI</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从资源中获得 URI 对象</span></span><br><span class="line">URL <span class="title function_">getURL</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获得资源的 InputStream</span></span><br><span class="line">InputStream <span class="title function_">getInputStream</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获得资源的描述信息</span></span><br><span class="line">String <span class="title function_">getDescription</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h2 id="StreamUtils"><a href="#StreamUtils" class="headerlink" title="StreamUtils"></a>StreamUtils</h2><ul><li>输入</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(<span class="type">byte</span>[] in, OutputStream out)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(InputStream in, OutputStream out)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(String in, Charset charset, OutputStream out)</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">copyRange</span><span class="params">(InputStream in, OutputStream out, <span class="type">long</span> start, <span class="type">long</span> end)</span></span><br></pre></td></tr></table></figure><ul><li>输出</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] copyToByteArray(InputStream in)</span><br><span class="line">String <span class="title function_">copyToString</span><span class="params">(InputStream in, Charset charset)</span></span><br><span class="line"><span class="comment">// 舍弃输入流中的内容</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">drain</span><span class="params">(InputStream in)</span></span><br></pre></td></tr></table></figure><h1 id="反射、AOP"><a href="#反射、AOP" class="headerlink" title="反射、AOP"></a>反射、AOP</h1><h2 id="ReflectionUtils"><a href="#ReflectionUtils" class="headerlink" title="ReflectionUtils"></a>ReflectionUtils</h2><ul><li>获取方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在类中查找指定方法</span></span><br><span class="line">Method <span class="title function_">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name)</span></span><br><span class="line"><span class="comment">// 同上，额外提供方法参数类型作查找条件</span></span><br><span class="line">Method <span class="title function_">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt;... paramTypes)</span></span><br><span class="line"><span class="comment">// 获得类中所有方法，包括继承而来的</span></span><br><span class="line">Method[] getAllDeclaredMethods(Class&lt;?&gt; leafClass)</span><br><span class="line"><span class="comment">// 在类中查找指定构造方法</span></span><br><span class="line">Constructor&lt;T&gt; <span class="title function_">accessibleConstructor</span><span class="params">(Class&lt;T&gt; clazz, Class&lt;?&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment">// 是否是 equals() 方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEqualsMethod</span><span class="params">(Method method)</span></span><br><span class="line"><span class="comment">// 是否是 hashCode() 方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isHashCodeMethod</span><span class="params">(Method method)</span></span><br><span class="line"><span class="comment">// 是否是 toString() 方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isToStringMethod</span><span class="params">(Method method)</span></span><br><span class="line"><span class="comment">// 是否是从 Object 类继承而来的方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isObjectMethod</span><span class="params">(Method method)</span></span><br><span class="line"><span class="comment">// 检查一个方法是否声明抛出指定异常</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">declaresException</span><span class="params">(Method method, Class&lt;?&gt; exceptionType)</span></span><br></pre></td></tr></table></figure><ul><li>执行方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行方法</span></span><br><span class="line">Object <span class="title function_">invokeMethod</span><span class="params">(Method method, Object target)</span></span><br><span class="line"><span class="comment">// 同上，提供方法参数</span></span><br><span class="line">Object <span class="title function_">invokeMethod</span><span class="params">(Method method, Object target, Object... args)</span></span><br><span class="line"><span class="comment">// 取消 Java 权限检查。以便后续执行该私有方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(Method method)</span></span><br><span class="line"><span class="comment">// 取消 Java 权限检查。以便后续执行私有构造方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(Constructor&lt;?&gt; ctor)</span></span><br></pre></td></tr></table></figure><ul><li>获取字段</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在类中查找指定属性</span></span><br><span class="line">Field <span class="title function_">findField</span><span class="params">(Class&lt;?&gt; clazz, String name)</span></span><br><span class="line"><span class="comment">// 同上，多提供了属性的类型</span></span><br><span class="line">Field <span class="title function_">findField</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt; type)</span></span><br><span class="line"><span class="comment">// 是否为一个 &quot;public static final&quot; 属性</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isPublicStaticFinal</span><span class="params">(Field field)</span></span><br></pre></td></tr></table></figure><ul><li>设置字段</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 target 对象的 field 属性值</span></span><br><span class="line">Object <span class="title function_">getField</span><span class="params">(Field field, Object target)</span></span><br><span class="line"><span class="comment">// 设置 target 对象的 field 属性值，值为 value</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setField</span><span class="params">(Field field, Object target, Object value)</span></span><br><span class="line"><span class="comment">// 同类对象属性对等赋值</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">shallowCopyFieldState</span><span class="params">(Object src, Object dest)</span></span><br><span class="line"><span class="comment">// 取消 Java 的权限控制检查。以便后续读写该私有属性</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(Field field)</span></span><br><span class="line"><span class="comment">// 对类的每个属性执行 callback</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doWithFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc)</span></span><br><span class="line"><span class="comment">// 同上，多了个属性过滤功能。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doWithFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc,</span></span><br><span class="line"><span class="params">                  ReflectionUtils.FieldFilter ff)</span></span><br><span class="line"><span class="comment">// 同上，但不包括继承而来的属性</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doWithLocalFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc)</span></span><br></pre></td></tr></table></figure><h2 id="AopUtils"><a href="#AopUtils" class="headerlink" title="AopUtils"></a>AopUtils</h2><ul><li>判断代理类型</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是不是 Spring 代理对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isAopProxy</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 判断是不是 jdk 动态代理对象</span></span><br><span class="line">isJdkDynamicProxy()</span><br><span class="line"><span class="comment">// 判断是不是 CGLIB 代理对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isCglibProxy</span><span class="params">()</span></span><br></pre></td></tr></table></figure><ul><li>获取被代理对象的 class</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取被代理的目标 class</span></span><br><span class="line">Class&lt;?&gt; getTargetClass()</span><br></pre></td></tr></table></figure><h2 id="AopContext"><a href="#AopContext" class="headerlink" title="AopContext"></a>AopContext</h2><ul><li>获取当前对象的代理对象</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object <span class="title function_">currentProxy</span><span class="params">()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 断言 </tag>
            
            <tag> ObjectUtils </tag>
            
            <tag> CollectionUtils </tag>
            
            <tag> FileCopyUtils </tag>
            
            <tag> ReflectionUtils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>限流组件设计实战</title>
      <link href="/2022/03/21/%E9%99%90%E6%B5%81%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%AE%9E%E6%88%98/"/>
      <url>/2022/03/21/%E9%99%90%E6%B5%81%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要限流"><a href="#为什么要限流" class="headerlink" title="为什么要限流"></a>为什么要限流</h1><p>互联网系统通常都要面对<code>高并发</code>请求（如秒杀、抢购等），难免会对后端服务造成高压力，严重甚至会导致系统宕机。为避免这种问题通常会添加<code>限流</code>、<code>降级</code>、<code>熔断</code>等能力，从而使系统更为健壮。</p><blockquote><p>Java领域常见的开源组件有<code>Netflix</code>的<code>hystrix</code>，阿里系开源的<code>sentinel(以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性)</code>等，都是蛮不错的限流熔断框架。</p></blockquote><h1 id="限流维度"><a href="#限流维度" class="headerlink" title="限流维度"></a>限流维度</h1><h2 id="QPS和连接数控制"><a href="#QPS和连接数控制" class="headerlink" title="QPS和连接数控制"></a>QPS和连接数控制</h2><p>设定IP维度的限流，也可以设置基于单个服务器的限流。在真实环境中通常会设置多个维度的限流规则，比如设定同一个IP每秒访问频率小于10，连接数小于5，再设定每台机器QPS最高1000，连接数最大保持200。</p><blockquote><p>小知识：</p><ul><li><code>吞吐量（TPS）</code>：指系统在单位时间内处理请求的数量。</li><li><code>QPS 每秒查询率(Query Per Second)</code>：对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准(类似于TPS，只是应用于特定场景的吞吐量)。</li></ul></blockquote><h2 id="传输速率"><a href="#传输速率" class="headerlink" title="传输速率"></a>传输速率</h2><p>有的网站在这方面的限流逻辑做的更细致，比如普通注册用户下载速度为100k&#x2F;s，购买会员后是10M&#x2F;s，这背后就是基于用户组或者用户标签的限流逻辑。</p><h2 id="黑白名单"><a href="#黑白名单" class="headerlink" title="黑白名单"></a>黑白名单</h2><p>如果某个IP在一段时间的访问次数过于频繁，被系统识别为机器人用户或流量攻击，那么这个IP就会被加入到黑名单，从而限制其对系统资源的访问，这就是俗称的“封IP”。</p><p>比如爬虫程序爬知乎上的美女图片，或者爬券商系统的股票分时信息，这类爬虫程序都必须实现更换IP的功能，以防被加入黑名单。</p><p>有时发现公司的网络无法访问12306这类大型公共网站，这也是因为某些公司的出网IP是同一个地址，因此在访问量过高的情况下，这个IP地址就被对方系统识别，进而被添加到了黑名单。</p><p>白名单可以自由穿梭在各种限流规则里，畅行无阻。比如某些电商公司会将超大卖家的账号加入白名单，因为这类卖家往往有自己的一套运维系统，需要对接公司的IT系统做大量的商品发布、补货等等操作。</p><h2 id="分布式环境"><a href="#分布式环境" class="headerlink" title="分布式环境"></a>分布式环境</h2><p>分布式区别于单机限流的场景，它把整个分布式环境中所有服务器当做一个整体来考量。比如说针对IP的限流，限制1个IP每秒最多10个访问，不管来自这个IP的请求落在了哪台机器上，只要是访问了集群中的服务节点，那么都会受到限流规则的制约。</p><p>必须将限流信息保存在一个“中心化”的组件上，这样它就可获取到集群中所有机器的访问状态，目前有<code>两个比较主流的限流方案</code>：</p><blockquote><ol><li><code>网关层限流</code><br>将限流规则应用在所有流量的入口处</li><li><code>中间件限流</code><br>将限流信息存储在分布式环境中某个中间件里（比如Redis缓存），每个组件都可以从这里获取到当前时刻的流量统计，从而决定是拒绝服务还是放行流量</li></ol></blockquote><h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="固定窗口算法"><a href="#固定窗口算法" class="headerlink" title="固定窗口算法"></a>固定窗口算法</h2><p>固定窗口算法又叫计数器算法，是一种简单方便的限流算法。主要通过一个支持原子操作的计数器来累计 1 秒内的请求次数，当 1 秒内计数达到限流阈值时触发拒绝策略。每过 1 秒，计数器重置为 0 开始重新计数。</p><blockquote><p>如：使用<code> AomicInteger</code>来进行统计当前正在并发执行的次数，如果超过域值就直接拒绝请求，提示系统繁忙。</p></blockquote><p>但固定窗口算法存在问题，比如当遇到时间窗口的<code>临界突变</code>时，如 1s 中的后 500 ms 和第 2s 的前 500ms 时，虽然是加起来是 1s时间，却可以被请求 4 次。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/18/kIJYN3aV4qupUEf.png"></p><h2 id="滑动窗口算法"><a href="#滑动窗口算法" class="headerlink" title="滑动窗口算法"></a>滑动窗口算法</h2><p>滑动窗口算法是对固定窗口算法的改进。既然固定窗口算法在遇到时间窗口的临界突变时会有问题，那么在遇到下一个时间窗口前调整时间窗口是否可以？</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/21/Wg9o1Pki3TFDzY2.png"></p><p>每 500ms 滑动一次窗口，可以发现窗口滑动的<code>间隔越短</code>，时间窗口的<code>临界突变</code>问题发生的<code>概率也就越小</code>，不过只要有时间窗口的存在，还是有可能发生<code>时间窗口的临界突变问题</code>。</p><h2 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h2><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/10/oRspiEwKmqHaQJB.png" alt="1.png"></p><p>漏桶算法思路可把<code>水</code>比作是<code>请求</code>，<code>漏桶</code>比作是<code>系统处理能力</code>极限，水先进入到漏桶里，漏桶里的水按一定速率流出，当流出的速率小于流入的速率时，由于漏桶容量有限，后续进入的水直接溢出（拒绝请求），以此实现限流。</p><h2 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h2><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/10/I9qBHMcwdabp3V4.png" alt="2.png"></p><p><code>令牌桶算法</code>原理可以理解成医院的<code>挂号看病</code>，只有拿到号以后才可以进行诊病。</p><p>系统会维护一个<code>令牌（token）桶</code>，以一个<code>恒定的速度</code>往桶里<code>放入令牌</code>（token），这时如果有请求进来想要被处理，则需要<code>先从桶里获取一个令牌</code>（token），当桶里<code>没有令牌</code>（token）可取时，则该请求将被<code>拒绝服务</code>。令牌桶算法通过控制桶的容量、发放令牌的速率，来达到对请求的限制。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>窗口算法实现简单，逻辑清晰，可以很直观的得到当前的QPS情况，但是会有时间窗口的临界突变问题，而且不像桶一样有队列可以缓冲。</li><li>漏桶模式消费速率恒定，可以很好的保护自身系统，可以对流量进行整形，但是面对突发流量不能快速响应。</li><li>令牌桶模式可以面对突发流量，但是启动时会有缓慢加速的过程，不过常见的开源工具中已经对此优化。</li></ul><h1 id="RateLimiter-限流"><a href="#RateLimiter-限流" class="headerlink" title="RateLimiter 限流"></a>RateLimiter 限流</h1><p><code>Google</code>开源工具包<code>Guava</code>提供了限流<code>工具类RateLimiter</code>，该类基于令牌桶算法实现流量限制，使用十分方便，而且十分高效。</p><p>常用方法如下，其中<code>create()</code>与<code>tryAcquire()</code>是RateLimiter的2个核心方法</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>create(double permitsPerSecond)</td><td>根据<code>每秒</code>的<code>固定速率</code>进行放置permitsPerSecond个令牌来创建RateLimiter</td></tr><tr><td>create(double permitsPerSecond, long warmupPeriod, TimeUnit unit)</td><td>根据<code>每秒</code>的<code>固定速率</code>(permitsPerSecond)和<code>预热期</code>(warmupPeriod)来创建RateLimiter；在预热时间内，RateLimiter每秒分配的令牌数会<code>平稳增长</code>，直到预热期结束时达到其最大速率。</td></tr><tr><td>acquire()</td><td>获取一个令牌，改方法会阻塞直到获取到这一个令牌，返回值为<code>获取到这个令牌花费的时间</code></td></tr><tr><td>acquire(int permits)</td><td>获取<code>指定数量的令牌</code>，该方法也会阻塞，返回值为获取到这 N 个令牌花费的时间</td></tr><tr><td>tryAcquire()</td><td><code>判断是否能获取到令牌</code>，如果不能获取立即返回 false</td></tr><tr><td>tryAcquire(int permits)</td><td>获取<code>指定数量的令牌</code>，如果不能获取立即返回false</td></tr><tr><td>tryAcquire(long timeout, TimeUnit unit)</td><td><code>判断能否在指定时间内获取到令牌</code>，如果不能获取立即返回false</td></tr><tr><td>tryAcquire(int permits, long timeout, TimeUnit unit)</td><td>判断能否在<code>指定时间</code>内获取到<code>指定令牌</code>，如果不能获取立即返回false</td></tr></tbody></table><h2 id="平滑突发限流-SmoothBursty"><a href="#平滑突发限流-SmoothBursty" class="headerlink" title="平滑突发限流(SmoothBursty)"></a>平滑突发限流(SmoothBursty)</h2><p>使用 RateLimiter的静态方法创建一个限流器，比如设置<code>每秒放置的令牌数为5</code>个。返回的RateLimiter对象可以<code>保证1秒内不会给超过5个令牌</code>，并且以<code>固定速率进行放置</code>，达到平滑输出的效果。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RateLimiter</span> <span class="variable">r</span> <span class="operator">=</span> RateLimiter.create(<span class="number">5</span>);</span><br><span class="line">r.acquire();</span><br></pre></td></tr></table></figure><p>RateLimiter使用令牌桶算法，会进行<code>令牌的累积</code>，如果<code>获取令牌</code>的<code>频率比较低</code>，则<code>不会导致等待</code>，直接获取令牌。</p><h2 id="平滑预热限流-SmoothwarmingUp"><a href="#平滑预热限流-SmoothwarmingUp" class="headerlink" title="平滑预热限流(SmoothwarmingUp)"></a>平滑预热限流(SmoothwarmingUp)</h2><p>RateLimiter带有预热期的平滑限流，它启动后会有一段预热期，逐步将分发频率提升到配置的速率。</p><p>如下由于设置了<code>预热时间是3秒</code>，令牌桶一<code>开始并不会0.5秒发一个令牌</code>，而是随着频率越来越高，<code>在3秒钟之内达到原本设置的频率</code>，以后就以固定的频率输出。这种功能适合<code>系统刚启动</code>需要一点时间来“热身”的场景。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RateLimiter</span> <span class="variable">r</span> <span class="operator">=</span> RateLimiter.create(<span class="number">2</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">r.acquire();</span><br></pre></td></tr></table></figure><h2 id="预消费"><a href="#预消费" class="headerlink" title="预消费"></a>预消费</h2><p>RateLimiter由于会<code>累积令牌</code>，所以可以应对<code>突发流量</code>。每次请求，acquire获取令牌，但是acquire还有个<code>acquire(int permits)</code>的重载方法，即允许<code>每次获取多个令牌数</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRateLimiter2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RateLimiter</span> <span class="variable">rateLimiter</span> <span class="operator">=</span> RateLimiter.create(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="type">double</span> <span class="variable">cost</span> <span class="operator">=</span> rateLimiter.acquire(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;获取1个令牌&quot;</span> + <span class="string">&quot;, 耗时&quot;</span> + cost + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    cost = rateLimiter.acquire(<span class="number">5</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;获取5个令牌&quot;</span> + <span class="string">&quot;, 耗时&quot;</span> + cost + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    cost = rateLimiter.acquire(<span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;获取3个令牌&quot;</span> + <span class="string">&quot;, 耗时&quot;</span> + cost + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取1个令牌, 耗时0.0ms</span><br><span class="line"></span><br><span class="line">获取5个令牌, 耗时0.997237ms</span><br><span class="line"></span><br><span class="line">获取3个令牌, 耗时4.996529ms</span><br></pre></td></tr></table></figure><p>这就是预消费能力，<code>RateLimiter中允许一定程度突发流量的实现方式</code>。第二次需要获取5个令牌，指定的是<code>每秒放1个令牌</code>到桶中，实际上<code>并没有等5秒钟，等桶中积累了5个令牌</code>，才让acquire成功，而是直接等了1秒钟就成功了。逻辑如下：</p><blockquote><ul><li>第一次请求过来需要获取1个令牌，直接拿到</li><li>RateLimiter在<code>1秒钟后</code>放一个令牌，<code>还上</code>了第一次请求<code>预支</code>的1个令牌</li><li><code>1秒钟之后</code>第二次请求过来需要获得5个令牌，直接拿到</li><li>RateLimiter在<code>花了5秒钟放了5个令牌</code>，还上了第二次请求预支的5个令牌</li><li>第三次请求在<code>5秒钟之后</code>拿到3个令牌</li></ul></blockquote><p>前面的<code>请求</code>如果流量<code>大于``每秒放置令牌的数量</code>，<code>允许处理</code>，但是带来的结果就是<code>后面</code>的<code>请求延后处理</code>，从而在整体上达到一个<code>平衡整体处理速率</code>的效果。</p><blockquote><p><code>突发流量</code>的处理，在令牌桶算法中有两种方式：</p><ol><li>有足够令牌，才能消费</li><li>先消费后，还令牌</li></ol></blockquote><p>先让请求得到处理，再慢慢还上预支的令牌，用户体验得到提升，否则假设预支60个令牌，1分钟之后才能处理请求，不合理也不人性化。</p><h2 id="示范案例"><a href="#示范案例" class="headerlink" title="示范案例"></a>示范案例</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 切面编程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Google Guava 使用其中限流工具类 RateLimiter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>30.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Restrict</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 限流控制注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/3/16 15:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Restrict &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 业务标识；不同接口，不同流量控制</span></span><br><span class="line">    String <span class="title function_">key</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问限制数</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">limitedNumber</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取令牌最大等待时间</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">timeout</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大等待时间单位(毫秒)</span></span><br><span class="line">    TimeUnit <span class="title function_">timeunit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.MILLISECONDS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提示信息</span></span><br><span class="line">    String <span class="title function_">msg</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;活动火爆，请稍候再试！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.commandrunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.RateLimiter;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> StartRunner</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 预加载数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/3/16 16:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StartRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(StartRunner.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, RateLimiter&gt; rateLimiterMap = Maps.newConcurrentMap();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RateLimiter</span> <span class="variable">rateLimiter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可改造为读取数据库</span></span><br><span class="line">        Map&lt;String, Integer&gt; limitMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        limitMap.put(<span class="string">&quot;restrict1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        limitMap.put(<span class="string">&quot;restrict2&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = limitMap.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : entries) &#123;</span><br><span class="line">            rateLimiter = RateLimiter.create(entry.getValue());</span><br><span class="line">            log.info(<span class="string">&quot;创建令牌桶 : &#123;&#125;，大小为&#123;&#125;&quot;</span>, entry.getKey(), entry.getValue());</span><br><span class="line">            rateLimiterMap.put(entry.getKey(),rateLimiter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切面拦截"><a href="#切面拦截" class="headerlink" title="切面拦截"></a>切面拦截</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.annotation.Restrict;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.RateLimiter;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RestrictAspect</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 切面拦截</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/3/16 11:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestrictAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(RestrictAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, RateLimiter&gt; limitMap = Maps.newConcurrentMap();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(cn.goitman.annotation.Restrict)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="type">Restrict</span> <span class="variable">restrict</span> <span class="operator">=</span> method.getAnnotation(Restrict.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (restrict != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> restrict.key();</span><br><span class="line">            <span class="type">RateLimiter</span> <span class="variable">rateLimiter</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!limitMap.containsKey(key)) &#123;</span><br><span class="line">                    rateLimiter = RateLimiter.create(restrict.limitedNumber());</span><br><span class="line">                    log.info(<span class="string">&quot;创建令牌桶 : &#123;&#125;，大小为&#123;&#125;&quot;</span>, key, restrict.limitedNumber());</span><br><span class="line">                    limitMap.put(key, rateLimiter);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            rateLimiter = limitMap.get(key);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">acquire</span> <span class="operator">=</span> rateLimiter.tryAcquire(restrict.timeout(), restrict.timeunit());</span><br><span class="line">            <span class="keyword">if</span> (!acquire) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;&#123;&#125;：获取令牌失败&quot;</span>, key);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;令牌桶 : &#123;&#125;，获取令牌成功&quot;</span>, key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="限流接口"><a href="#限流接口" class="headerlink" title="限流接口"></a>限流接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.annotation.Restrict;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RestrictController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/3/16 10:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestrictController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/restrict1&quot;)</span></span><br><span class="line">    <span class="meta">@Restrict(key = &quot;restrict1&quot;, limitedNumber = 1, msg = &quot;当前排队人数较多，请稍后再试！&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">restrict1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/restrict2&quot;)</span></span><br><span class="line">    <span class="meta">@Restrict(key = &quot;restrict2&quot;, limitedNumber = 2)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">restrict2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并发测试"><a href="#并发测试" class="headerlink" title="并发测试"></a>并发测试</h3><p>模拟1秒内10个并发线程，依次请求restrict1、restrict2接口各一次，日志如下</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/14/71H3GKSWh5yvLif.png"></p><p>预加载日志：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-03-16 17:09:15.709 [TRACEID:] INFO  [main] cn.goitman.commandrunner.StartRunner : 创建令牌桶 : restrict2，大小为2</span><br><span class="line">2022-03-16 17:09:15.710 [TRACEID:] INFO  [main] cn.goitman.commandrunner.StartRunner : 创建令牌桶 : restrict1，大小为1</span><br></pre></td></tr></table></figure><p>restrict1接口日志：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-03-14 16:25:58.886 [TRACEID:] INFO  [http-nio-8080-exec-1] cn.goitman.aspect.RestrictAspect : 创建令牌桶 : restrict1，大小为1</span><br><span class="line">2022-03-14 16:25:58.900 [TRACEID:] INFO  [http-nio-8080-exec-1] cn.goitman.aspect.RestrictAspect : 令牌桶 : restrict1，获取令牌成功</span><br><span class="line">2022-03-14 16:25:58.900 [TRACEID:] ERROR [http-nio-8080-exec-2] cn.goitman.aspect.RestrictAspect : restrict1：获取令牌失败</span><br><span class="line">2022-03-14 16:25:58.900 [TRACEID:] ERROR [http-nio-8080-exec-6] cn.goitman.aspect.RestrictAspect : restrict1：获取令牌失败</span><br><span class="line">2022-03-14 16:25:58.901 [TRACEID:] ERROR [http-nio-8080-exec-4] cn.goitman.aspect.RestrictAspect : restrict1：获取令牌失败</span><br><span class="line">2022-03-14 16:25:58.901 [TRACEID:] ERROR [http-nio-8080-exec-5] cn.goitman.aspect.RestrictAspect : restrict1：获取令牌失败</span><br><span class="line">2022-03-14 16:25:58.902 [TRACEID:] ERROR [http-nio-8080-exec-3] cn.goitman.aspect.RestrictAspect : restrict1：获取令牌失败</span><br><span class="line">2022-03-14 16:25:58.934 [TRACEID:] ERROR [http-nio-8080-exec-7] cn.goitman.aspect.RestrictAspect : restrict1：获取令牌失败</span><br><span class="line">2022-03-14 16:25:59.038 [TRACEID:] ERROR [http-nio-8080-exec-9] cn.goitman.aspect.RestrictAspect : restrict1：获取令牌失败</span><br><span class="line">2022-03-14 16:25:59.136 [TRACEID:] ERROR [http-nio-8080-exec-10] cn.goitman.aspect.RestrictAspect : restrict1：获取令牌失败</span><br><span class="line">2022-03-14 16:25:59.277 [TRACEID:] ERROR [http-nio-8080-exec-5] cn.goitman.aspect.RestrictAspect : restrict1：获取令牌失败</span><br></pre></td></tr></table></figure><p>restrict2接口日志：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-03-14 16:46:02.434 [TRACEID:] INFO  [http-nio-8080-exec-1] cn.goitman.aspect.RestrictAspect : 创建令牌桶 : restrict2，大小为2</span><br><span class="line">2022-03-14 16:46:02.436 [TRACEID:] INFO  [http-nio-8080-exec-1] cn.goitman.aspect.RestrictAspect : 令牌桶 : restrict2，获取令牌成功</span><br><span class="line">2022-03-14 16:46:02.451 [TRACEID:] ERROR [http-nio-8080-exec-3] cn.goitman.aspect.RestrictAspect : restrict2：获取令牌失败</span><br><span class="line">2022-03-14 16:46:02.559 [TRACEID:] ERROR [http-nio-8080-exec-4] cn.goitman.aspect.RestrictAspect : restrict2：获取令牌失败</span><br><span class="line">2022-03-14 16:46:02.671 [TRACEID:] ERROR [http-nio-8080-exec-5] cn.goitman.aspect.RestrictAspect : restrict2：获取令牌失败</span><br><span class="line">2022-03-14 16:46:02.767 [TRACEID:] ERROR [http-nio-8080-exec-6] cn.goitman.aspect.RestrictAspect : restrict2：获取令牌失败</span><br><span class="line">2022-03-14 16:46:02.868 [TRACEID:] ERROR [http-nio-8080-exec-7] cn.goitman.aspect.RestrictAspect : restrict2：获取令牌失败</span><br><span class="line">2022-03-14 16:46:02.935 [TRACEID:] INFO  [http-nio-8080-exec-2] cn.goitman.aspect.RestrictAspect : 令牌桶 : restrict2，获取令牌成功</span><br><span class="line">2022-03-14 16:46:03.060 [TRACEID:] ERROR [http-nio-8080-exec-10] cn.goitman.aspect.RestrictAspect : restrict2：获取令牌失败</span><br><span class="line">2022-03-14 16:46:03.153 [TRACEID:] ERROR [http-nio-8080-exec-1] cn.goitman.aspect.RestrictAspect : restrict2：获取令牌失败</span><br><span class="line">2022-03-14 16:46:03.433 [TRACEID:] INFO  [http-nio-8080-exec-9] cn.goitman.aspect.RestrictAspect : 令牌桶 : restrict2，获取令牌成功</span><br></pre></td></tr></table></figure><p>从restrict1和restrict2接口日志可以看出，1秒钟内只有1次(restrict1)或2次(restrict2)获取令牌成功，其他都失败，说明已经成功给接口加上了限流功能。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-03-14 21:01:28.034 [TRACEID:] INFO  [http-nio-8080-exec-3] cn.goitman.aspect.RestrictAspect : 获取令牌成功</span><br><span class="line">2022-03-14 21:01:28.241 [TRACEID:] ERROR [http-nio-8080-exec-5] cn.goitman.aspect.RestrictAspect : 获取令牌失败</span><br><span class="line">2022-03-14 21:01:28.330 [TRACEID:] ERROR [http-nio-8080-exec-6] cn.goitman.aspect.RestrictAspect : 获取令牌失败</span><br><span class="line">2022-03-14 21:01:28.439 [TRACEID:] ERROR [http-nio-8080-exec-7] cn.goitman.aspect.RestrictAspect : 获取令牌失败</span><br><span class="line">2022-03-14 21:01:28.490 [TRACEID:] INFO  [http-nio-8080-exec-4] cn.goitman.aspect.RestrictAspect : 获取令牌成功</span><br><span class="line">2022-03-14 21:01:28.676 [TRACEID:] ERROR [http-nio-8080-exec-2] cn.goitman.aspect.RestrictAspect : 获取令牌失败</span><br><span class="line">2022-03-14 21:01:28.735 [TRACEID:] ERROR [http-nio-8080-exec-1] cn.goitman.aspect.RestrictAspect : 获取令牌失败</span><br><span class="line">2022-03-14 21:01:29.026 [TRACEID:] INFO  [http-nio-8080-exec-10] cn.goitman.aspect.RestrictAspect : 获取令牌成功</span><br></pre></td></tr></table></figure><h2 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h2><p>预加载只能在项目启动时加载一次，不够灵活；<code>有人说为什么不用Redis保存RateLimiter对象呢？</code>众所周知任何数据存储都需要序列化，而Redis不会主动去做这个事情，看看下图</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/16/5D9lxgORLibYGAM.png"></p><p>由图可知：</p><blockquote><ol><li>SmoothRateLimiter继承RateLimiter，两者都是<code>抽象类</code>(不能实例化)</li><li>SmoothRateLimiter有SmoothWarmingUp和SmoothBursty两个<code>默认修饰的匿名内部静态类</code>(外部无法调用)</li><li>只能依赖RateLimiter提供的静态方法来创建具体的子类实例</li></ol></blockquote><p>又有人说<code>Spring的redisTemplate默认会使用java serialization做序列化</code>，说的没错，但RateLimiter是抽象类，即使使用也会报如下错误</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 非法参数异常，默认的序列化器需要一个Serializable有效负载，但是接收到一个类型为[com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty]的对象</span><br><span class="line"></span><br><span class="line">java.lang.IllegalArgumentException: DefaultSerializer requires a Serializable payload but received an object of type [com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty]</span><br><span class="line">at org.springframework.core.serializer.DefaultSerializer.serialize(DefaultSerializer.java:43) ~[spring-core-5.2.8.RELEASE.jar:5.2.8.RELEASE]</span><br><span class="line">at org.springframework.core.serializer.Serializer.serializeToByteArray(Serializer.java:56) ~[spring-core-5.2.8.RELEASE.jar:5.2.8.RELEASE]</span><br><span class="line">at org.springframework.core.serializer.support.SerializingConverter.convert(SerializingConverter.java:60) ~[spring-core-5.2.8.RELEASE.jar:5.2.8.RELEASE]</span><br><span class="line">at org.springframework.core.serializer.support.SerializingConverter.convert(SerializingConverter.java:33) ~[spring-core-5.2.8.RELEASE.jar:5.2.8.RELEASE]</span><br><span class="line">at org.springframework.data.redis.serializer.JdkSerializationRedisSerializer.serialize(JdkSerializationRedisSerializer.java:94) ~[spring-data-redis-2.3.2.RELEASE.jar:2.3.2.RELEASE]</span><br><span class="line">at org.springframework.data.redis.core.AbstractOperations.rawValue(AbstractOperations.java:127) ~[spring-data-redis-2.3.2.RELEASE.jar:2.3.2.RELEASE]</span><br><span class="line">at org.springframework.data.redis.core.DefaultValueOperations.set(DefaultValueOperations.java:235) ~[spring-data-redis-2.3.2.RELEASE.jar:2.3.2.RELEASE]</span><br></pre></td></tr></table></figure><blockquote><p>结论：抽象类不能实例化，就不能序列化，自然Redis保存不了</p></blockquote><p>RateLimiter是<code>单机限流</code>，假设集群中部署了10台服务器，想要保证集群1000QPS的接口调用量，那么RateLimiter就不适用了；集群流控最常见的方法，还是Redis + Lua 限流。</p><h1 id="Redis-Lua-限流"><a href="#Redis-Lua-限流" class="headerlink" title="Redis + Lua 限流"></a>Redis + Lua 限流</h1><p>Redis内置了Lua解释器，实现分布式的令牌桶算法，能够很好的满足原子性、事务性的支持，免去了很多的异常逻辑处理：</p><blockquote><ol><li>减少网络开销: 不使用 Lua 的代码需要向 Redis 发送多次请求, 而脚本只需一次即可, 减少网络传输;</li><li>原子操作: Redis 将整个脚本作为一个原子执行, 无需担心并发, 也就无需事务;</li><li>复用: 脚本会永久保存 Redis 中, 其他客户端可继续使用。</li></ol></blockquote><h2 id="Lua脚本"><a href="#Lua脚本" class="headerlink" title="Lua脚本"></a>Lua脚本</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Lua是由标准的C语言编写的，源码部分不过2万多行C代码，甚至一个完整的Lua解释器也就200k的大小。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h3 id="Windows-环境"><a href="#Windows-环境" class="headerlink" title="Windows 环境"></a>Windows 环境</h3><p><a href="https://download.csdn.net/download/minkeyto/84998364">进入下载网址</a> 下载lua绿色压缩版</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/18/HPj5eSzWwqskiX6.png"></p><p>配置环境变量</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/18/JK57oven4sy2LBf.png"></p><p>win + R 快捷键进入cmd，验证是否安装配置成功</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/18/upzcD9mdwgCSlFj.png"></p><h3 id="Mac-环境"><a href="#Mac-环境" class="headerlink" title="Mac 环境"></a>Mac 环境</h3><p>建议用brew工具直接执行brew install lua就可以顺利安装，有关brew工具的安装可以参考 <a href="https://brew.sh/">https://brew.sh/</a> 网站，使用brew安装后的目录在<code>/usr/local/Cellar/lua/X.X.X_X</code></p><h3 id="linux-环境"><a href="#linux-环境" class="headerlink" title="linux 环境"></a>linux 环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//从官网下载安装包</span><br><span class="line">curl -R -O http://www.lua.org/ftp/lua-5.3.5.tar.gz</span><br><span class="line">//解压安装包</span><br><span class="line">tar zxf lua-5.3.5.tar.gz</span><br><span class="line">//进入文件夹中</span><br><span class="line"><span class="built_in">cd</span> lua-5.3.5</span><br><span class="line">//如果安装了readline，直接进行↓（若无安装会报错，解决方法看下方）</span><br><span class="line">make linux <span class="built_in">test</span></span><br><span class="line">//安装</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>如果在make Linux test处系统报错如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -std=gnu99 -O2 -Wall -Wextra -DLUA_COMPAT_5_2 -DLUA_USE_LINUX    -c -o lua.o lua.c</span><br><span class="line">lua.c:82:31: error: readline/readline.h: No such file or directory</span><br><span class="line">lua.c:83:30: error: readline/history.h: No such file or directory</span><br><span class="line">lua.c: In <span class="keyword">function</span> ‘pushline’:</span><br><span class="line">lua.c:312: warning: implicit declaration of <span class="keyword">function</span> ‘readline’</span><br><span class="line">lua.c:312: warning: assignment makes pointer from <span class="built_in">integer</span> without a cast</span><br><span class="line">lua.c: In <span class="keyword">function</span> ‘addreturn’:</span><br><span class="line">lua.c:339: warning: implicit declaration of <span class="keyword">function</span> ‘add_history’</span><br><span class="line">make[2]: *** [lua.o] Error 1</span><br><span class="line">make[2]: Leaving directory `/home/Workspace/lua-5.3.5/src<span class="string">&#x27;</span></span><br><span class="line"><span class="string">make[1]: *** [linux] Error 2</span></span><br><span class="line"><span class="string">make[1]: Leaving directory `/home/Workspace/lua-5.3.5/src&#x27;</span></span><br><span class="line">make: *** [linux] Error 2</span><br></pre></td></tr></table></figure><p>由于没有下载安装readline, 缺少libreadline-dev。打开终端输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libreadline-dev</span><br></pre></td></tr></table></figure><p>创建一个 HelloWorld.lua 文件，验证是否安装成功，代码如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行以下命令:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lua HelloWorld.lua</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h3 id="IDEA-插件安装"><a href="#IDEA-插件安装" class="headerlink" title="IDEA 插件安装"></a>IDEA 插件安装</h3><p><code>File -&gt; Settings -&gt; Plugins</code>，搜索<code>lua</code>，选中<code>EmmyLua</code>插件安装</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/18/RjvyelLB7QWw4xK.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/03/18/EcJwbRvkjtepYgI.png"></p><h2 id="示范案例-1"><a href="#示范案例-1" class="headerlink" title="示范案例"></a>示范案例</h2><h3 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h3><p>Redis单机简易配置如下，分布式配置可参考 <a href="https://www.goitman.cn/2020/08/17/Redis/">Redis 教程</a></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="自定义注解-1"><a href="#自定义注解-1" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>在<code>@Restrict</code>注解类，原基础上加多个<code>expire(过期时间)</code>属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Restrict</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 限流控制注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/3/16 15:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Restrict &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 业务标识；不同接口，不同流量控制</span></span><br><span class="line">    String <span class="title function_">key</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问限制数</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">limitedNumber</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过期时间，单位：秒</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">expire</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取令牌最大等待时间</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">timeout</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大等待时间单位(毫秒)</span></span><br><span class="line">    TimeUnit <span class="title function_">timeunit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.MILLISECONDS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提示信息</span></span><br><span class="line">    String <span class="title function_">msg</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;活动火爆，请稍候再试！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切面拦截-1"><a href="#切面拦截-1" class="headerlink" title="切面拦截"></a>切面拦截</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.annotation.Restrict;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Preconditions;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.script.DefaultRedisScript;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scripting.support.ResourceScriptSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RestrictAspect</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 切面拦截</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/3/16 11:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestrictAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(RestrictAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 因Lua脚本只接受String类型数据，使用RedisTemplate无法正确传参到Lua脚本，Lua脚本取值为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 先改变redisTemplate的序列化方式：redisTemplate.setKeySerializer(new StringRedisSerializer());</span></span><br><span class="line"><span class="comment">     * execute(RedisScript&lt;T&gt; script,List&lt;K&gt; keys,Object... args)方法中的args参数，Lua脚本取值同样为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultRedisScript&lt;Long&gt; script;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化DefaultRedisScript，并加载Lua脚本</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PostConstruct</span>修饰的方法会在服务器加载时运行，并且只会被执行一次。</span></span><br><span class="line"><span class="comment">     * PostConstruct在构造函数之后执行，init（）方法之前执行。</span></span><br><span class="line"><span class="comment">     * 该注解的方法在整个Bean初始化中的执行顺序：</span></span><br><span class="line"><span class="comment">     * Constructor(构造方法) -&gt; <span class="doctag">@Autowired</span>(依赖注入) -&gt; <span class="doctag">@PostConstruct</span>(注释的方法)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        script = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">        script.setResultType(Long.class);</span><br><span class="line">        <span class="comment">// 固定窗口限流</span></span><br><span class="line"><span class="comment">//        script.setScriptSource(new ResourceScriptSource(new ClassPathResource(&quot;fixedLimter.lua&quot;)));</span></span><br><span class="line">        <span class="comment">// 滑动窗口限流</span></span><br><span class="line">        script.setScriptSource(<span class="keyword">new</span> <span class="title class_">ResourceScriptSource</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;slidingLimter.lua&quot;</span>)));</span><br><span class="line">        log.info(<span class="string">&quot;Lua 脚本加载完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注解切点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(cn.goitman.annotation.Restrict)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restrict</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(restrict)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint, Restrict restrict)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 获取代理类，并判断是否属于MethodSignature</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">        <span class="keyword">if</span> (!(signature <span class="keyword">instanceof</span> MethodSignature)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;@Restrict 注解只能在方法上使用！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取注解参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> restrict.key();</span><br><span class="line">        <span class="comment">// 对key(业务标识)判空</span></span><br><span class="line">        Preconditions.checkNotNull(key);</span><br><span class="line">        <span class="comment">// 获取限流数和过期时间，并转换为String类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">limitTimes</span> <span class="operator">=</span> String.valueOf(restrict.limitedNumber());</span><br><span class="line">        <span class="type">String</span> <span class="variable">expireTime</span> <span class="operator">=</span> String.valueOf(restrict.expire());</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; keyList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        keyList.add(key);</span><br><span class="line">        <span class="comment">// redis调用Lua脚本（固定窗口限流）</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> (Long) stringRedisTemplate.execute(script, keyList, expireTime, limitTimes);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*        // redis调用Lua脚本（滑动窗口限流）</span></span><br><span class="line"><span class="comment">        long now = System.currentTimeMillis();</span></span><br><span class="line"><span class="comment">        String oldest = String.valueOf(now - 1_000);</span></span><br><span class="line"><span class="comment">        String score = String.valueOf(now);</span></span><br><span class="line"><span class="comment">        // 参数三：时间戳(时间窗口)；参数四：当前时间戳作为score；参数六：当前时间戳作为score的值</span></span><br><span class="line"><span class="comment">        Long result = (Long) stringRedisTemplate.execute(script, keyList, oldest, score, limitTimes, score);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">            log.error(restrict.msg());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;请求正常！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lua脚本-1"><a href="#Lua脚本-1" class="headerlink" title="Lua脚本"></a>Lua脚本</h3><p>在此例举<code>固定窗口限流</code>和<code>滑动窗口限流</code>两种Lua脚本，Redis的数据保存方式不同，任选其一。</p><h4 id="固定窗口限流"><a href="#固定窗口限流" class="headerlink" title="固定窗口限流"></a>固定窗口限流</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">--- Created by Nicky.</span><br><span class="line">--- blog：goitman.cn | blog.csdn.net/minkeyto</span><br><span class="line">--- DateTime: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">17</span> <span class="number">16</span>:<span class="number">20</span></span><br><span class="line">--- 固定窗口限流</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">--- 获取 execute(RedisScript&lt;T&gt; script,List&lt;K&gt; keys,Object... args)方法中的keys值</span><br><span class="line">local key1 = KEYS[<span class="number">1</span>]</span><br><span class="line">--- 使用 key 做自增操作，初始值为<span class="number">1</span></span><br><span class="line">local val = redis.call(<span class="string">&#x27;incr&#x27;</span>, key1)</span><br><span class="line">--- 查询key的过期时间(未设置过期时间，默认值为<span class="number">-1</span>)</span><br><span class="line">local ttl = redis.call(<span class="string">&#x27;ttl&#x27;</span>, key1)</span><br><span class="line">--- 获取execute(RedisScript&lt;T&gt; script,List&lt;K&gt; keys,Object... args)方法中args参数的第一个和第二个参数</span><br><span class="line">local expire = ARGV[<span class="number">1</span>]</span><br><span class="line">local number = ARGV[<span class="number">2</span>]</span><br><span class="line">--- 在redis控制台打印日志</span><br><span class="line">redis.<span class="built_in">log</span>(redis.LOG_NOTICE,tostring(number))</span><br><span class="line">redis.<span class="built_in">log</span>(redis.LOG_NOTICE,tostring(expire))</span><br><span class="line"></span><br><span class="line">redis.<span class="built_in">log</span>(redis.LOG_NOTICE, <span class="string">&quot;incr &quot;</span>..key1..<span class="string">&quot; &quot;</span>..val);</span><br><span class="line">--- 如果 key 值为<span class="number">1</span>，设置过期时间</span><br><span class="line"><span class="keyword">if</span> val == <span class="number">1</span> then</span><br><span class="line">    redis.call(<span class="string">&#x27;expire&#x27;</span>, key1, tonumber(expire))</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">--- 如果key已存在，并未设置过期时间的情况下，重新设置过期时间</span><br><span class="line">    <span class="keyword">if</span> ttl == <span class="number">-1</span> then</span><br><span class="line">        redis.call(<span class="string">&#x27;expire&#x27;</span>, key1, tonumber(expire))</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">--- 如果自增数大于限流数，触发限流</span><br><span class="line"><span class="keyword">if</span> val &gt; tonumber(number) then</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">end</span><br><span class="line">--- 未触发限流，正常请求，返回<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="滑动窗口限流"><a href="#滑动窗口限流" class="headerlink" title="滑动窗口限流"></a>滑动窗口限流</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">--- Created by Nicky.</span><br><span class="line">--- blog：goitman.cn | blog.csdn.net/minkeyto</span><br><span class="line">--- DateTime: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">17</span> <span class="number">17</span>:<span class="number">20</span></span><br><span class="line">--- 滑动窗口限流</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">--- 移除时间窗口之前的数据</span><br><span class="line">redis.call(<span class="string">&#x27;zremrangeByScore&#x27;</span>, KEYS[<span class="number">1</span>], <span class="number">0</span>, ARGV[<span class="number">1</span>])</span><br><span class="line">--- 统计当前元素数量</span><br><span class="line">local res = redis.call(<span class="string">&#x27;zcard&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line">--- 是否超过阈值，判断key是否存在，不存在则创建一个空的有序集并执行</span><br><span class="line"><span class="keyword">if</span> (res == nil) or (res &lt; tonumber(ARGV[<span class="number">3</span>])) then</span><br><span class="line">    redis.call(<span class="string">&#x27;zadd&#x27;</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">2</span>], ARGV[<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="并发测试-1"><a href="#并发测试-1" class="headerlink" title="并发测试"></a>并发测试</h3><p>用回上述限流接口测试并发(<code>限流注解中的过期时间默认为10秒</code>)，日志如下：<br>restrict1接口日志：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-03-17 20:27:26.812 [TRACEID:] INFO  [main] cn.goitman.aspect.RestrictAspect : Lua 脚本加载完成！</span><br><span class="line">2022-03-17 20:27:27.457 [TRACEID:] INFO  [main] org.apache.coyote.http11.Http11NioProtocol : Starting ProtocolHandler [&quot;http-nio-8080&quot;]</span><br><span class="line">2022-03-17 20:27:27.510 [TRACEID:] INFO  [main] cn.goitman.ThrottlingApplication : Started ThrottlingApplication in 3.755 seconds (JVM running for 7.728)</span><br><span class="line">2022-03-17 20:27:33.748 [TRACEID:] INFO  [http-nio-8080-exec-3] cn.goitman.aspect.RestrictAspect : 请求正常！</span><br><span class="line">2022-03-17 20:27:33.748 [TRACEID:] ERROR [http-nio-8080-exec-1] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:27:33.844 [TRACEID:] ERROR [http-nio-8080-exec-4] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:27:33.931 [TRACEID:] ERROR [http-nio-8080-exec-7] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:27:34.023 [TRACEID:] ERROR [http-nio-8080-exec-6] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:27:34.205 [TRACEID:] ERROR [http-nio-8080-exec-10] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:27:34.231 [TRACEID:] ERROR [http-nio-8080-exec-2] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:27:34.358 [TRACEID:] ERROR [http-nio-8080-exec-4] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:27:34.452 [TRACEID:] ERROR [http-nio-8080-exec-7] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br></pre></td></tr></table></figure><p>restrict2接口日志：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-03-17 20:28:43.691 [TRACEID:] INFO  [main] cn.goitman.aspect.RestrictAspect : Lua 脚本加载完成！</span><br><span class="line">2022-03-17 20:28:44.343 [TRACEID:] INFO  [main] org.apache.coyote.http11.Http11NioProtocol : Starting ProtocolHandler [&quot;http-nio-8080&quot;]</span><br><span class="line">2022-03-17 20:28:44.399 [TRACEID:] INFO  [main] cn.goitman.ThrottlingApplication : Started ThrottlingApplication in 4.176 seconds (JVM running for 9.37)</span><br><span class="line">2022-03-17 20:28:49.519 [TRACEID:] INFO  [http-nio-8080-exec-4] cn.goitman.aspect.RestrictAspect : 请求正常！</span><br><span class="line">2022-03-17 20:28:49.519 [TRACEID:] INFO  [http-nio-8080-exec-1] cn.goitman.aspect.RestrictAspect : 请求正常！</span><br><span class="line">2022-03-17 20:28:49.520 [TRACEID:] ERROR [http-nio-8080-exec-2] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:49.572 [TRACEID:] ERROR [http-nio-8080-exec-3] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:49.698 [TRACEID:] ERROR [http-nio-8080-exec-6] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:49.776 [TRACEID:] ERROR [http-nio-8080-exec-8] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:49.900 [TRACEID:] ERROR [http-nio-8080-exec-7] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:49.974 [TRACEID:] ERROR [http-nio-8080-exec-9] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:50.088 [TRACEID:] ERROR [http-nio-8080-exec-2] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:50.203 [TRACEID:] ERROR [http-nio-8080-exec-1] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:54.599 [TRACEID:] ERROR [http-nio-8080-exec-5] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:54.706 [TRACEID:] ERROR [http-nio-8080-exec-8] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:54.814 [TRACEID:] ERROR [http-nio-8080-exec-7] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:54.936 [TRACEID:] ERROR [http-nio-8080-exec-10] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:55.067 [TRACEID:] ERROR [http-nio-8080-exec-4] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:55.113 [TRACEID:] ERROR [http-nio-8080-exec-3] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:55.215 [TRACEID:] ERROR [http-nio-8080-exec-5] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:55.311 [TRACEID:] ERROR [http-nio-8080-exec-8] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:55.413 [TRACEID:] ERROR [http-nio-8080-exec-7] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:55.521 [TRACEID:] ERROR [http-nio-8080-exec-10] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:28:59.718 [TRACEID:] INFO  [http-nio-8080-exec-4] cn.goitman.aspect.RestrictAspect : 请求正常！</span><br><span class="line">2022-03-17 20:28:59.831 [TRACEID:] INFO  [http-nio-8080-exec-1] cn.goitman.aspect.RestrictAspect : 请求正常！</span><br><span class="line">2022-03-17 20:28:59.922 [TRACEID:] ERROR [http-nio-8080-exec-3] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br><span class="line">2022-03-17 20:29:00.028 [TRACEID:] ERROR [http-nio-8080-exec-6] cn.goitman.aspect.RestrictAspect : 活动火爆，请稍候再试！</span><br></pre></td></tr></table></figure><p>根据日志可看出，正常请求和正常触发限流，说明Lua脚本限流逻辑生效。</p><h1 id="Nginx-限流"><a href="#Nginx-限流" class="headerlink" title="Nginx 限流"></a>Nginx 限流</h1><blockquote><p>Windows环境 <a href="https://download.csdn.net/download/minkeyto/84999220">nginx 资源下载</a> </p></blockquote><h2 id="iP限流"><a href="#iP限流" class="headerlink" title="iP限流"></a>iP限流</h2><ul><li>修改host文件添加IP + 对应的域名：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1   www.goitman.cn</span><br></pre></td></tr></table></figure><blockquote><p>Windows 10 中 hosts 文件位置：<code>C:\Windows\System32\drivers\etc\hosts</code></p><p>Linux 中 hosts 文件位置：<code>/etc/hosts</code></p></blockquote><ul><li>修改nginx配置文件</li></ul><p>将上述域名，添加到路由规则当中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $binary_remote_addr：binary_目的是缩写内存占用，remote_addr表示通过IP地址来限流</span><br><span class="line"># zone=iplimit:20m：iplimit是一块内存区域（记录访问频率信息），20m是指这块内存区域的大小</span><br><span class="line"># rate=1r/s：每秒放行1个请求</span><br><span class="line">limit_req_zone $binary_remote_addr zone=iplimit:20m rate=1r/s;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    server_name www.goitman.cn;</span><br><span class="line">    location /limit/ &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080/;</span><br><span class="line">        </span><br><span class="line">        # zone=iplimit：引用limit_rep_zone中的zone变量</span><br><span class="line">        # burst=2：设置一个大小为2的缓冲区域，当大量请求到来，请求数量超过限流频率时，将其放入缓冲区域</span><br><span class="line">        # nodelay：缓冲区满了以后，直接返回503异常</span><br><span class="line">        limit_req zone=iplimit burst=2 nodelay;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试限流</li></ul><p>访问地址，测试是否限流</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www.goitman.cn/limit/restrict1</span><br></pre></td></tr></table></figure><h2 id="多维度限流"><a href="#多维度限流" class="headerlink" title="多维度限流"></a>多维度限流</h2><p>修改nginx.conf配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#根据IP地址限制速度</span><br><span class="line">limit_req_zone $binary_remote_addr zone=iplimit:20m rate=10r/s;</span><br><span class="line">#根据服务器级别做限流</span><br><span class="line">limit_req_zone $server_name zone=serverlimit:10m rate=1r/s;</span><br><span class="line">#根据ip地址的链接数量做限流</span><br><span class="line">limit_conn_zone $binary_remote_addr zone=perip:20m;</span><br><span class="line">#根据服务器的连接数做限流</span><br><span class="line">limit_conn_zone $server_name zone=perserver:20m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    server_name www.goitman.cn;</span><br><span class="line">    location /limit/ &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080/;</span><br><span class="line">        </span><br><span class="line">        #基于ip地址的限制</span><br><span class="line">        limit_req zone=iplimit burst=2 nodelay;</span><br><span class="line">        #基于服务器级别做限流</span><br><span class="line">        limit_req zone=serverlimit burst=2 nodelay;</span><br><span class="line">        #基于ip地址的链接数量做限流  最多保持100个链接</span><br><span class="line">        limit_conn zone=perip 100;</span><br><span class="line">        #基于服务器的连接数做限流 最多保持100个链接</span><br><span class="line">        limit_conn zone=perserver 1;</span><br><span class="line">        #配置request的异常返回504（默认为503）</span><br><span class="line">        limit_req_status 504;</span><br><span class="line">        limit_conn_status 504;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     location /download/ &#123;</span><br><span class="line">        #前100m不限制速度</span><br><span class="line">        limit_rate_affer 100m;</span><br><span class="line">        #限制速度为256k</span><br><span class="line">        limit_rate 256k;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h1><p>一般在系统上线时需要通过对系统压测，评估出系统的性能阀值，然后给接口加上合理的限流参数，防止出现大流量请求时直接压垮系统。</p><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/throttling-demo">https://github.com/wangdaicong/spring-boot-project/tree/master/throttling-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> lua脚本 </tag>
            
            <tag> 限流 </tag>
            
            <tag> 令牌算法 </tag>
            
            <tag> 漏桶算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Druid监控统计数据源</title>
      <link href="/2022/02/28/Druid%E7%9B%91%E6%8E%A7%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>/2022/02/28/Druid%E7%9B%91%E6%8E%A7%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Druid-简介"><a href="#Druid-简介" class="headerlink" title="Druid 简介"></a>Druid 简介</h1><p>Druid 首先是一个数据库连接池，但它不仅仅是一个数据库连接池，还包含了一个 ProxyDriver，一系列内置的 JDBC 组件库（可以让程序员实现一些特殊的需求），一个 SQL Parser。在 Java 的世界中 Druid 是监控做的最好的数据库连接池，在功能、性能、扩展性方面，也有不错的表现</p><blockquote><p><code>Druid 可以做什么？</code></p></blockquote><ul><li>数据库密码加密。直接把数据库密码写在配置文件中，这是不好的行为，容易导致安全问题，DruidDruiver 和 DruidDataSource 都支持 PasswordCallback。</li><li>替换其他 Java 连接池，Druid 提供了一个高效、功能强大、可扩展性好的数据库连接池。 可以监控数据库访问性能，Druid 内置提供了一个功能强大的 StatFilter 插件，能够详细统计 SQL 的执行性能，这对于线上分析数据库访问性能有很大帮助。</li><li>SQL 执行日志，Druid 提供了不同的 LogFilter，能够支持 Common-Logging、Log4j 和 JdkLog，可以按需要选择相应的 LogFilter，监控应用的数据库访问情况。</li><li>扩展 JDBC，如果你要对 JDBC 层有编程的需求，可以通过 Druid 提供的 Filter 机制，很方便编写 JDBC 层的扩展插件。</li></ul><h1 id="SpringBoot整合Druid"><a href="#SpringBoot整合Druid" class="headerlink" title="SpringBoot整合Druid"></a>SpringBoot整合Druid</h1><p>阿里为 Druid 也提供了 Spring Boot Starter 的支持。官网这样解释：Druid Spring Boot Starter 用于帮助你在 Spring Boot 项目中轻松集成 Druid 数据库连接池和监控。</p><h2 id="数据库密码加密"><a href="#数据库密码加密" class="headerlink" title="数据库密码加密"></a>数据库密码加密</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><blockquote><ol><li>配置 jdk 环境</li><li>准备 druid 的 jar 包</li></ol></blockquote><p>druid 的 jar 包在 maven 仓库即可寻得，如下</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/Z6t7Mex2dVNBmWK.png"></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/7Nv9gTxMoJwneiX.png"></p><h3 id="密码加密与配置的两种方式"><a href="#密码加密与配置的两种方式" class="headerlink" title="密码加密与配置的两种方式"></a>密码加密与配置的两种方式</h3><p>快捷键 <code>WIN + R</code>，输入 <code>cmd</code> 打开命令窗口</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/8gFitOwkdYuKDvE.png"></p><blockquote><p><strong><code>加密命令 </code></strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp 路径/druid-版本号.jar com.alibaba.druid.filter.config.ConfigTools 密码</span><br></pre></td></tr></table></figure><p>加密信息输出到文本命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp 路径/druid-版本号.jar com.alibaba.druid.filter.config.ConfigTools 密码 &gt;&gt; xxx.txt</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/3WNbeUYGSQCxTdm.png"></p><h4 id="1-0-16版本之前"><a href="#1-0-16版本之前" class="headerlink" title="1.0.16版本之前"></a>1.0.16版本之前</h4><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/OBkQgxwcmNqFdpI.png"></p><ul><li>application.yml配置</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/7SdHGYwNUu2MTxK.png"></p><h4 id="1-0-16版本之后"><a href="#1-0-16版本之后" class="headerlink" title="1.0.16版本之后"></a>1.0.16版本之后</h4><p>会分别生成加密的密码以及对应的公钥和私钥，<code>公钥需在application.yml配置中使用</code></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/MoVf3GhEkYa5ejL.png"></p><ul><li>application.yml配置</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/Sx1mEoGub9XFlef.png"></p><p><code>注：不设密文密码，而使用明文密码时，不需要配置connection-properties项</code></p><h2 id="引入依赖包"><a href="#引入依赖包" class="headerlink" title="引入依赖包"></a>引入依赖包</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- druid数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="application-配置"><a href="#application-配置" class="headerlink" title="application 配置"></a>application 配置</h2><p>Druid Spring Boot Starter 配置属性的名称完全遵照 Druid，可以通过 Spring Boot 配置文件来配置Druid数据库连接池和监控，如果没有配置则使用默认值。</p><h3 id="慢sql记录"><a href="#慢sql记录" class="headerlink" title="慢sql记录"></a>慢sql记录</h3><p>开启Druid的慢SQL记录功能，如果遇到执行慢的SQL，便会输出到日志中</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="comment"># 开启druiddatasource的状态监控</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">db-type:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="comment"># 开启慢sql监控，超过2s 就认为是慢sql，记录到日志中</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><h3 id="配置Druid数据源（连接池）"><a href="#配置Druid数据源（连接池）" class="headerlink" title="配置Druid数据源（连接池）"></a>配置Druid数据源（连接池）</h3><p>如同以前 c3p0、dbcp 数据源可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数等一样，Druid 数据源同理可以进行设置；</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">      <span class="comment"># 连接池的配置信息</span></span><br><span class="line">      <span class="comment"># 初始化时建立物理连接的个数</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 连接池最小连接数</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment"># 连接池最大连接数</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 获取连接时最大等待时间，单位毫秒</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line">      <span class="comment"># 并且testOnBorrow为false时，连接池也会判断连接是否处于空闲状态，如果是，则验证这条连接是否可用</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">2000</span></span><br><span class="line">      <span class="comment"># 既作为检测的间隔时间又作为testWhileIdel执行的依据</span></span><br><span class="line">      <span class="attr">time-between-connect-error-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">600000</span></span><br><span class="line">      <span class="attr">max-evictable-idle-time-millis:</span> <span class="number">900000</span></span><br><span class="line">      <span class="comment"># 用来检测连接是否有效的sql 必须是一个查询语句</span></span><br><span class="line">      <span class="comment"># mysql中为 select 1</span></span><br><span class="line">      <span class="comment"># oracle中为 select 1 from dual</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 默认是false，连接池会判断这条连接是否是可用的</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 默认false，当应用使用完连接，连接池回收连接的时候会判断该连接是否还可用</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 是否缓存preparedStatement（处理命令），PSCache（PS缓存）对支持游标的数据库性能提升巨大，比如说oracle；mysql5.5+建议开启</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true，</span></span><br><span class="line">      <span class="comment"># 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，</span></span><br><span class="line">      <span class="comment"># 可以把这个数值配置大一些，比如说100</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 连接池中的minIdle数量以内的连接，空闲时间超过min-evictable-idle-time-millis，则会执行keepAlive操作</span></span><br><span class="line">      <span class="attr">keepAlive:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#      keep-alive: true</span></span><br></pre></td></tr></table></figure><h3 id="spring-监控"><a href="#spring-监控" class="headerlink" title="spring 监控"></a>spring 监控</h3><p>需要导入SprngBoot的AOP的Starter</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 切面编程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Spring 监控，利用aop对指定接口的执行时间，jdbc数进行记录，配置多个英文逗号分隔</span></span><br><span class="line"><span class="attr">aop-patterns:</span> <span class="string">&quot;cn.goitman.dao.*&quot;</span></span><br></pre></td></tr></table></figure><h3 id="配置-Filter"><a href="#配置-Filter" class="headerlink" title="配置 Filter"></a>配置 Filter</h3><p>通过 spring.datasource.druid.filters&#x3D;stat,wall,log4j …的方式来启用相应的内置Filter。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用内置过滤器</span></span><br><span class="line"><span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span></span><br></pre></td></tr></table></figure><p>如果默认配置不能满足需求，可以放弃这种方式，通过配置文件来配置Filter：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置StatFilter</span><br><span class="line">spring.datasource.druid.filter.stat.enabled=true</span><br><span class="line">spring.datasource.druid.filter.stat.db-type=mysql</span><br><span class="line">spring.datasource.druid.filter.stat.log-slow-sql=true</span><br><span class="line">spring.datasource.druid.filter.stat.slow-sql-millis=2000</span><br><span class="line"></span><br><span class="line"># 配置WallFilter </span><br><span class="line">spring.datasource.druid.filter.wall.enabled=true</span><br><span class="line">spring.datasource.druid.filter.wall.db-type=mysql</span><br><span class="line">spring.datasource.druid.filter.wall.config.delete-allow=false</span><br><span class="line">spring.datasource.druid.filter.wall.config.drop-table-allow=false</span><br></pre></td></tr></table></figure><p>目前为以下 Filter 提供了配置支持，根据（spring.datasource.druid.filter.*）进行配置。</p><blockquote><ul><li>StatFilter</li><li>WallFilter</li><li>ConfigFilter</li><li>EncodingConvertFilter</li><li>Slf4jLogFilter</li><li>Log4jFilter</li><li>Log4j2Filter</li><li>CommonsLogFilter</li></ul></blockquote><p>不想使用内置的 Filters，要想使自定义 Filter 配置生效需要将对应 Filter 的 enabled 设置为 true ，<code>Druid Spring Boot Starter 默认禁用 StatFilter</code>，可以将其 enabled 设置为 true 来启用它。</p><h3 id="配置web监控-filter（WebStatFilter）"><a href="#配置web监控-filter（WebStatFilter）" class="headerlink" title="配置web监控 filter（WebStatFilter）"></a>配置web监控 filter（WebStatFilter）</h3><p>这个过滤器的作用就是统计 web 应用请求中所有的数据库信息，比如<code>发出的 sql 语句，sql 执行的时间、请求次数、请求的 url 地址、以及seesion 监控、数据库表的访问次数 </code>等等。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置WebStatFilter，用于采集web关联监控的数据</span></span><br><span class="line"><span class="attr">web-stat-filter:</span></span><br><span class="line">  <span class="comment"># 启动 StatFilter</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 过滤所有url</span></span><br><span class="line">  <span class="attr">url-pattern:</span> <span class="string">&#x27;/*&#x27;</span></span><br><span class="line">  <span class="comment"># 排除一些不必要的url</span></span><br><span class="line">  <span class="attr">exclusions:</span> <span class="string">&#x27;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置后台管理-Servlet（StatViewServlet）"><a href="#配置后台管理-Servlet（StatViewServlet）" class="headerlink" title="配置后台管理 Servlet（StatViewServlet）"></a>配置后台管理 Servlet（StatViewServlet）</h3><p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web 页面；需要设置 Druid 的后台管理页面的属性，比如 登录账号、密码 等；</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置StatViewServlet（监控页面），用于展示Druid的统计信息</span></span><br><span class="line"><span class="attr">stat-view-servlet:</span></span><br><span class="line">  <span class="comment"># 是否启用StatViewServlet（监控页面）默认值为false（考虑到安全问题默认并未启动，如需启用建议设置密码或白名单以保障安全）</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html</span></span><br><span class="line">  <span class="attr">url-pattern:</span> <span class="string">&#x27;/druid/*&#x27;</span></span><br><span class="line">  <span class="comment"># IP白名单(没有配置或者为空，则允许所有访问)，配置多个英文逗号分隔</span></span><br><span class="line">  <span class="attr">allow:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="comment"># IP黑名单 (deny优先于allow，如果在deny和allow列表中都存在，也会被拒绝)，配置多个英文逗号分隔</span></span><br><span class="line">  <span class="attr">deny:</span></span><br><span class="line">  <span class="comment"># 禁用HTML页面上的“Reset All”功能（清空统计数据，重新计算）</span></span><br><span class="line">  <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 登录名</span></span><br><span class="line">  <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">  <span class="comment"># 登录密码</span></span><br><span class="line">  <span class="attr">login-password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><h3 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># mysql-connector-java 6.x以上版本，不能使用&amp;amp;转义符替代&amp;</span></span><br><span class="line">    <span class="comment"># 使用了mysql-connector-java 6.x以上版本，会报(The server time zone value &#x27;�й���׼ʱ��&#x27; is unrecogni)时区错误</span></span><br><span class="line">    <span class="comment"># 必须在url上serverTimezone=UTC时区</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///数据库名?useSSL=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 不能使用data-username和data-password，会报Access denied for user &#x27;&#x27;@&#x27;localhost&#x27; (using password: NO)这个错误</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">帐号</span></span><br><span class="line"><span class="comment">#    password: 密码</span></span><br><span class="line">    <span class="comment"># 1.0.9 版本加密（原密码 1234）</span></span><br><span class="line"><span class="comment">#    password: Qc+lVOUSHDmrG3CWleTKQ05KnUce/7QFrsowits2sLUzO2idxdn4r3UXWaYmRNxSlX4H0gMMN89hLCt6WGyejg==</span></span><br><span class="line">    <span class="comment"># 1.0.27 版本加密（原密码 1234）</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">gWI1WLwMJ4ch2MuqcL2Ua+TzFtTA9MTKRDGUgYAUk4Sb+gve/kVAV2YEmxcvCz5TGVa8k+7jg+POBGkeAzNWnw==</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="comment"># 开启druiddatasource的状态监控</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">db-type:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="comment"># 开启慢sql监控，超过2s 就认为是慢sql，记录到日志中</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">2000</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 配合druid 1.0.16之前的加解密</span></span><br><span class="line"><span class="comment">#      connection-properties: config.decrypt=true</span></span><br><span class="line">      <span class="comment"># 配合druid 1.0.16之后的加解密</span></span><br><span class="line">      <span class="attr">connection-properties:</span> <span class="string">config.decrypt=true;config.decrypt.key=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIKdkhejQC9hvWWMcssB43bykaVM9tRBwoG3+ps5da5wcoqqvS92YfsB1+EBmZ/YNGw3DhTwhZ/QggJqyDzqhmcCAwEAAQ==</span></span><br><span class="line">      <span class="comment"># 连接池的配置信息</span></span><br><span class="line">      <span class="comment"># 初始化时建立物理连接的个数</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment"># 连接池最小连接数</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment"># 连接池最大连接数</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 获取连接时最大等待时间，单位毫秒</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line">      <span class="comment"># 并且testOnBorrow为false时，连接池也会判断连接是否处于空闲状态，如果是，则验证这条连接是否可用</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">2000</span></span><br><span class="line">      <span class="comment"># 既作为检测的间隔时间又作为testWhileIdel执行的依据</span></span><br><span class="line">      <span class="attr">time-between-connect-error-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">600000</span></span><br><span class="line">      <span class="attr">max-evictable-idle-time-millis:</span> <span class="number">900000</span></span><br><span class="line">      <span class="comment"># 用来检测连接是否有效的sql 必须是一个查询语句</span></span><br><span class="line">      <span class="comment"># mysql中为 select 1</span></span><br><span class="line">      <span class="comment"># oracle中为 select 1 from dual</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 默认是false，连接池会判断这条连接是否是可用的</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 默认false，当应用使用完连接，连接池回收连接的时候会判断该连接是否还可用</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 是否缓存preparedStatement（处理命令），PSCache（PS缓存）对支持游标的数据库性能提升巨大，比如说oracle；mysql5.5+建议开启</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true，</span></span><br><span class="line">      <span class="comment"># 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，</span></span><br><span class="line">      <span class="comment"># 可以把这个数值配置大一些，比如说100</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 连接池中的minIdle数量以内的连接，空闲时间超过min-evictable-idle-time-millis，则会执行keepAlive操作</span></span><br><span class="line">      <span class="attr">keepAlive:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#      keep-alive: true</span></span><br><span class="line">      <span class="comment"># Spring 监控，利用aop对指定接口的执行时间，jdbc数进行记录，配置多个英文逗号分隔</span></span><br><span class="line">      <span class="attr">aop-patterns:</span> <span class="string">&quot;cn.goitman.dao.*&quot;</span></span><br><span class="line">      <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br><span class="line">      <span class="attr">use-global-data-source-stat:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 启用内置过滤器</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,slf4j</span></span><br><span class="line">      <span class="comment"># 配置WebStatFilter，统计 web 应用请求中所有的数据库信息</span></span><br><span class="line">      <span class="comment"># 比如 发出的 sql 语句，sql 执行的时间、请求次数、请求的 url 地址、以及seesion 监控、数据库表的访问次数 等等</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="comment"># 启动 StatFilter</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 过滤所有url</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">&#x27;/*&#x27;</span></span><br><span class="line">        <span class="comment"># 排除一些不必要的url</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&#x27;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&#x27;</span></span><br><span class="line">      <span class="comment"># 配置StatViewServlet（监控页面），用于展示Druid的统计信息</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="comment"># 是否启用StatViewServlet（监控页面）默认值为false（考虑到安全问题默认并未启动，如需启用建议设置密码或白名单以保障安全）</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 访问内置监控页面的路径，内置监控页面的首页是/druid/index.html</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">&#x27;/druid/*&#x27;</span></span><br><span class="line">        <span class="comment"># IP白名单(没有配置或者为空，则允许所有访问)，配置多个英文逗号分隔</span></span><br><span class="line">        <span class="attr">allow:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="comment"># IP黑名单 (deny优先于allow，如果在deny和allow列表中都存在，也会被拒绝)，配置多个英文逗号分隔</span></span><br><span class="line">        <span class="attr">deny:</span></span><br><span class="line">        <span class="comment"># 禁用HTML页面上的“Reset All”功能（清空统计数据，重新计算）</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 登录名</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="comment"># 登录密码</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><h2 id="监控页面"><a href="#监控页面" class="headerlink" title="监控页面"></a>监控页面</h2><ul><li>首页</li></ul><p>访问<code>http://localhost:8080/druid/login.html</code> 或 <code>http://127.0.0.1:8080/druid/login.html</code>来到登录页面，输入用户名密码登录，进入首页</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/QZV8LR1Wrme7g5l.png"></p><p>首页会展示项目使用的 JDK 版本、数据库驱动、JVM 相关统计信息。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/ptv2FMlADCsq6yd.png"></p><ul><li>数据源页面</li></ul><p>当前DataSource配置的基本信息，上述配置的Filter可以在里面找到，如果没有配置Filter（一些信息会无法统计，例如“SQL监控”，会无法获取JDBC相关的SQL执行信息）</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/6FhZpdnvwSaHDG2.png"></p><ul><li>SQL监控页面</li></ul><p>SQL 监控会将项目中具体执行的 SQL 打印出来，展示此 SQL 执行了多少次、每次返回多少数据、执行的时间分布是什么。这些功能非常的实用，方便我们在实际生产中查找出慢 SQL，最后对 SQL 进行调优。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/DsBbzSadEv2jgOl.png"></p><ul><li>URL监控页面</li></ul><p>统计了所有Controller接口的访问以及执行情况</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/jIa3lyB7RqYQein.png"> </p><ul><li>Spring 监控页面</li></ul><p>利用aop 对指定接口的执行时间，jdbc数进行记录</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/Qvplhdj54NtqAPK.png"></p><ul><li>SQL防火墙页面</li></ul><p>druid提供了黑白名单的访问，可以清楚的看到sql防护情况。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/t9bzSQYUkxlL8ec.png"></p><ul><li>Session监控页面</li></ul><p>可以看到当前的session状况，创建时间、最后活跃时间、请求次数、请求时间等详细参数。</p><ul><li>JSONAPI 页面</li></ul><p>通过api的形式访问Druid的监控接口，api接口返回Json形式数据。</p><h2 id="去AD-广告）"><a href="#去AD-广告）" class="headerlink" title="去AD(广告）"></a>去AD(广告）</h2><p>访问监控页面的时候，你可能会在页面底部（footer）看到阿里巴巴的广告</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/yxVRv4raqOEQtcl.png"></p><p>原因：<code>maven引入的druid的jar包中的common.js(里面有一段js代码是给页面的footer追加广告的)</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- druid数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># common.js的位置：</span><br><span class="line">com/alibaba/druid/1.1.23/druid-1.1.23.jar!/support/http/resources/js/common.js</span><br></pre></td></tr></table></figure><p>如果想去掉，有两种方式：</p><h3 id="手动注释代码-推荐"><a href="#手动注释代码-推荐" class="headerlink" title="手动注释代码(推荐)"></a>手动注释代码(<code>推荐</code>)</h3><p>如果是使用Maven，直接到本地仓库中，查找这个jar包，要注释的代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this.buildFooter();</span></span><br></pre></td></tr></table></figure><p>先将<code>jar</code>包改成后缀为<code>rar</code>的压缩类型包，打开<code>common.js</code>文件修改，修改完成后改回<code>jar</code>后缀类型</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/LGYfdmDCw1iJRNb.png"></p><p>完美解决</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/26/FaHoPIELQW4pSwx.png"></p><h3 id="过滤器过滤"><a href="#过滤器过滤" class="headerlink" title="过滤器过滤"></a>过滤器过滤</h3><p>注册一个过滤器，过滤common.js的请求，使用正则表达式替换相关的广告内容</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(DruidDataSourceAutoConfigure.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.datasource.druid.stat-view-servlet.enabled&quot;,</span></span><br><span class="line"><span class="meta">havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoveDruidAdConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 方法名: removeDruidAdFilterRegistrationBean</span></span><br><span class="line"><span class="comment">    * 方法描述 除去页面底部的广告</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> properties com.alibaba.druid.spring.boot.autoconfigure.properties.DruidStatProperties</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> org.springframework.boot.web.servlet.FilterRegistrationBean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">removeDruidAdFilterRegistrationBean</span><span class="params">(DruidStatProperties properties)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取web监控页面的参数</span></span><br><span class="line">        DruidStatProperties.<span class="type">StatViewServlet</span> <span class="variable">config</span> <span class="operator">=</span> properties.getStatViewServlet();</span><br><span class="line">        <span class="comment">// 提取common.js的配置路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> config.getUrlPattern() != <span class="literal">null</span> ? config.getUrlPattern() : <span class="string">&quot;/druid/*&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">commonJsPattern</span> <span class="operator">=</span> pattern.replaceAll(<span class="string">&quot;\\*&quot;</span>, <span class="string">&quot;js/common.js&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;support/http/resources/js/common.js&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建filter进行过滤</span></span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">                <span class="comment">// 重置缓冲区，响应头不会被重置</span></span><br><span class="line">                response.resetBuffer();</span><br><span class="line">                <span class="comment">// 获取common.js</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> Utils.readFromResource(filePath);</span><br><span class="line">                <span class="comment">// 正则替换banner, 除去底部的广告信息</span></span><br><span class="line">                text = text.replaceAll(<span class="string">&quot;&lt;a.*?banner\&quot;&gt;&lt;/a&gt;&lt;br/&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                text = text.replaceAll(<span class="string">&quot;powered.*?shrek.wang&lt;/a&gt;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                response.getWriter().write(text);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        registrationBean.setFilter(filter);</span><br><span class="line">        registrationBean.addUrlPatterns(commonJsPattern);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>常见问题：<a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Druid </tag>
            
            <tag> SQL监控统计 </tag>
            
            <tag> 加密 </tag>
            
            <tag> 连接池 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几行事务代码，让我赔了16万</title>
      <link href="/2022/02/22/%E5%87%A0%E8%A1%8C%E4%BA%8B%E5%8A%A1%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%AE%A9%E6%88%91%E8%B5%94%E4%BA%8616%E4%B8%87/"/>
      <url>/2022/02/22/%E5%87%A0%E8%A1%8C%E4%BA%8B%E5%8A%A1%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%AE%A9%E6%88%91%E8%B5%94%E4%BA%8616%E4%B8%87/</url>
      
        <content type="html"><![CDATA[<p>前几天在某平台看到一个技术问题，很有意思啊。涉及到的两个技术点，大家平时开发使用的也比较多，但是属于一个小细节，深挖下去，还是有点意思的。</p><p>来，先带你看一下问题是什么，同时给你解读一下这个问题，首先，这位同学给出了一个代码片段：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/TOg4mylrCWZ2K68.jpg" alt="1.webp.jpg"></p><p>他说他有一个 func 方法，这个方法里面干了两件事：</p><blockquote><ul><li>1.先查询数据库里面的商品库存。</li><li>2.如果还有库存，那么对库存进行减一操作，模拟商品卖出。</li></ul></blockquote><p>对于第二件事，提问的同学其实写了两个操作在里面，所以我再细分一下：</p><blockquote><ul><li>2.1 对库存进行减一操作。</li><li>2.2 在订单表插入订单数据。</li></ul></blockquote><p>很显然，这两个操作都会对数据库进行操作，且应该是原子性的操作。所以，在方法上加了一个<code>@Transactional</code>注解。</p><p>接着，为了解决并发访问的问题，他用 lock 把整个代码包裹了起来，保证在单体结构下，同一时刻只有一个请求能去执行减少库存，生成订单的操作。非常的完美。</p><p>首先，先把大前提申明一下：<code>MySQL数据库的隔离机制使用的是可重复读级别</code>。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/MgbmIoa3UE59itV.jpg" alt="2.webp.jpg"></p><p>这个时候，问题就来了。</p><p>如果是<code>高并发的情况下</code>，假设真的就有多个线程同时调用func方法。要<code>保证一定不能出现超卖的情况</code>，那么就需要<code>事务的开启与提交能完整的包裹在 lock 与 unlock之间</code>。</p><p>显然事务的开启一定是在 lock 之后的。<code>故关键在于事务的提交是否一定在 unlock 之前？</code></p><p>如果事务的提交在unlock之前，没有问题。因为事务已经提交了，代表库存一定减下来了，而这个时候锁还没释放，所以，其他线程也进不来。</p><p>画个简单的示意图如下：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/xSjWXAaOYrwLKGf.jpg" alt="3.webp.jpg"></p><p>等 unlock 之后，再进来一个线程，执行查询数据库的操作，那么查询到的值一定是减去库存之后的值。但是，<code>如果事务的提交是在 unlock 之后</code>，那么有意思的事情就出现了，你很有可能发生超卖的情况。</p><p>上面的图就变成了这样的了，注意最后两个步骤调换了：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/dIm37tToOXGPael.jpg" alt="4.webp.jpg"></p><p>举个例子。</p><blockquote><p>假设现在库存就只有一个了。这个时候 A，B 两个线程来请求下单。<br>A 请求先拿到锁，然后查询出库存为一，可以下单，走了下单流程，把库存减为 0 了。但是由于 A 先执行了 unlock 操作，释放了锁。<br>B 线程看到后马上就冲过来拿到了锁，并执行了查询库存的操作。<br>注意了，这个时候 A 线程还没来得及提交事务，所以 B 读取到的库存还是 1，如果程序没有做好控制，也走了下单流程。</p></blockquote><p>哦豁，超卖了。所以，再次重申问题：</p><p>在上面的示例代码的情况下，如果事务的提交在 unlock 之前，是没有问题的。但是如果在 unlock 之后是会有问题的。</p><blockquote><p><code>那么事务的提交到底是在 unlock 之前还是之后呢？</code></p></blockquote><p>这个事情，先把问题听懂了。你可以简单的思考一下。我想先聊聊这句被我轻描淡写，一笔带过，你大概率没有注意到的话：</p><blockquote><p>显然事务的开启一定是在 lock 之后的。</p></blockquote><p>这句话，不是我说的，是提问的同学说的：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/7VqcpRyd43kXunz.jpg" alt="5.webp.jpg"></p><p>你有没有一丝丝疑问？怎么就显然了？哪里就显然了？为什么不是一进入方法就开启事务了？请给我证据。来吧，瞅一眼证据。</p><h1 id="事务开启时机"><a href="#事务开启时机" class="headerlink" title="事务开启时机"></a>事务开启时机</h1><p>证据，我们需要去源码里面找。</p><p>另外，我不得不多说一句 Spring 在事务这块的源码写的非常的清晰易懂，看起来基本上没有什么障碍。所以如果你不知道怎么去啃源码，那么事务这块源码，也许是你撕开源码的一个口子。</p><p>好了，不多说了，去找答案。答案就藏在这个方法里面的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.jdbc.datasource.DataSourceTransactionManager#doBegin</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/IH2wtx81Zo6LyTG.jpg" alt="6.webp.jpg"></p><p>先看我下面框起来的那一行日志：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Switching JDBC Connection [HikariProxyConnection@946359486 wrapping com.mysql.jdbc.JDBC4Connection@7a24806] to manual commit</span><br></pre></td></tr></table></figure><p>你知道的，我是个技术博主，偶尔教点单词。</p><blockquote><p>Switching，转换。<br>Connection，链接。<br>manual commit，手动提交。<br>Switching … to …，把什么转换为什么。</p></blockquote><p>没想到吧，这次学技术的同时不仅学了几个单词，还会了一个语法。所以，上面那句话翻译过来就非常简单了：</p><blockquote><p>把数据库连接切换为手动提交。</p></blockquote><p>然后，我们看一下打印这行日志的代码逻辑，也就是被框起来的代码部分。我单独拿出来：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/GyOmA4zD8bgChsq.jpg" alt="7.webp.jpg"></p><p>逻辑非常清晰，就是把连接的<code> AutoCommit 参数从 ture 修改为 false</code>。</p><blockquote><p><code>那么现在问题就来了，这个时候，事务启动了吗？</code></p></blockquote><p>我觉得没启动，只是就绪了而已。启动和就绪还是有一点点差异的，就绪是启动之前的步骤。</p><blockquote><p><code>那么事务的启动有哪些方式呢？</code></p></blockquote><ul><li><p>第一种：使用启动事务的语句，这种是显式的启动事务。比如 begin 或 start transaction 语句。与之配套的提交语句是 commit，回滚语句是 rollback。</p></li><li><p>第二种：autocommit 的值默认是 1，含义是事务的自动提交是开启的。如果我们执行 set autocommit&#x3D;0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接。</p></li></ul><p>很显然，在 <code>Spring 里面采用的是第二种方式</code>。而上面的代码 con.setAutoCommit(false) 只是把这个链接的自动提交关掉。</p><blockquote><p><code>事务真正启动的时机是什么时候呢？</code></p></blockquote><p><code>**前面说的 begin/start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才算是真正启动。**</code></p><p>如果你想要马上启动一个事务，可以使用<code>start transaction with consistent snapshot</code> 这个命令。需要<code>注意的是这个命令在读已提交的隔离级别（RC）下是没意义的，和直接使用 start transaction 一个效果</code>。</p><blockquote><p><code>什么时候才会执行第一个 SQL 语句？</code></p></blockquote><p>就是在 lock 代码之后。所以，显然事务的开启一定是在 lock 之后的。</p><p>这一个简单的“显然”，先给大家铺垫一下。接下来，给大家上个动图看一眼，更加直观。首先说一下这个 SQL：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from information_schema.innodb_trx;</span><br></pre></td></tr></table></figure><p>不多解释，你只要知道这是查询当前数据库有哪些事务正在执行的语句就行。</p><p>你就注意看下面的动图，是不是第 27 行查询语句执行完成之后，查询事务的语句才能查出数据，说明事务这才真正的开启：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/5gjUYe2DIk3Ea4H.gif" alt="8.gif"></p><p>最后，我们把目光转移到这个方法的注释上：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/2LZ49TadAF1cNQx.jpg" alt="9.webp.jpg"></p><p>写这么长一段注释，意思就是给你说，<code>这个参数我们默认是 ture，原因就是在某些 JDBC 的驱动中，切换为自动提交是一个很重的操作</code>。</p><blockquote><p><code>那么在哪设置的为 true 呢？</code></p></blockquote><p>没看到代码，我一般是不死心的。所以，一起去看一眼。</p><p>setAutoCommit 这个方法有好几个实现类，我也不知道具体会走哪一个：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/2i5b7dLVletDMnK.jpg" alt="10.webp.jpg"></p><p>所以，我们可以在下面这个接口打上一个断点：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.sql.Connection#setAutoCommit</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/RC5rT7vF6NMks1w.jpg" alt="11.webp.jpg"></p><p>然后重启程序，IDE 会自动帮你判断走那个实现类的：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/owYPgd4DmRJTkVW.jpg" alt="12.webp.jpg"></p><p>可以看到，默认确实是 true。</p><p>等等，你不会真的以为我是想让你看这个 true 吧？我是想让你知道这个调试技巧啊。</p><p>再说一个小细节，这一小节就收尾。</p><p>你再去看这小节的开头，我直接说答案藏在这个方法里面：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.jdbc.datasource.DataSourceTransactionManager#doBegin</span><br></pre></td></tr></table></figure><p>所以，我是怎么知道在这个地方打断点的呢？答案就是<code>调用栈</code>。</p><p>先给大家看一下我的代码：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/ryiPf3HOz86IW7Y.jpg" alt="13.webp.jpg"></p><p>啥也先不管，上来就先在 26 行，方法入口处打上断点，跑起来：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/WC4uf1XB6l7JOeL.jpg" alt="14.webp.jpg"></p><p>诶，你看这个调用栈，我框起来的这个地方：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/8lRsrB19xEgS45Z.jpg" alt="15.webp.jpg"></p><p>看这个名字，你就不好奇吗？就这样轻轻的一点，就到了这里：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.transaction.interceptor.TransactionAspectSupport#invokeWithinTransaction</span><br></pre></td></tr></table></figure><p>这里有个切面，可以理解为 try 里面就是在执行我们的业务代码逻辑：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/DmsTURqLScN3fYy.jpg" alt="16.webp.jpg"></p><p>而在 try 代码块，执行我们的业务代码之前，有这样的一行代码：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/MnwJI64HfrvTxyq.jpg" alt="17.webp.jpg"></p><p>找到这里了，你就在这一行代码之前，再轻轻的打个断点，然后调试进去，就能找到这一小节开始的时候，说的这个方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.jdbc.datasource.DataSourceTransactionManager#doBegin</span><br></pre></td></tr></table></figure><p>它们之间只隔了三个调用：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/pBeFPOQghEID4i8.jpg" alt="19.webp.jpg"></p><p>这样就找到答案了。调用栈，另一个调试源码小技巧，屡试不爽，送给你。</p><h1 id="之前还是之后"><a href="#之前还是之后" class="headerlink" title="之前还是之后"></a>之前还是之后</h1><p>还是拿前面的这份代码来说事，流程就是这样的：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/9uU5lbMidOhWVKt.jpg" alt="20.webp.jpg"></p><blockquote><p>1.先拿锁。<br>2.查询库存。<br>3.判断是否还有库存。<br>4.有库存则执行减库存,创建订单的逻辑。<br>5.没有库存则返回。<br>6.释放锁。</p></blockquote><p>所以代码是这样的：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/rbOGMcatdilASwW.png" alt="22.png"></p><p>完全符合我们之前的那份代码片段，有事务，也有锁：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/TOg4mylrCWZ2K68.jpg" alt="1.webp.jpg"></p><p>回到我们最开始抛出来的问题：</p><blockquote><p><code>在上面的示例代码的情况下那么事务的提交到底是在 unlock 之前还是之后呢？</code></p></blockquote><p>我们可以带入一个具体的场景。比如我数据库里面有 10 个顶配版的 iPad，原价 1.6w 元一台，现在单价 1w 一个，这个价格够秒杀吧？</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/VOAyrIXK7QiBqTw.jpg" alt="23.webp.jpg"></p><p>反正一共就 10 台，所以，我的数据库里面是这样的，</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/ct6LXR1EaJkB9md.jpg" alt="24.webp.jpg"></p><p>然后我搞 100 个人来抢东西，不过分吧？我这里用<code> CountDownLatch</code> 来模拟一下并发：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/MPKZCwV3sDbGgaB.jpg" alt="25.webp.jpg"></p><p>执行一下，先看结果，立马就见分晓：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/3V8q9JzmjtGMlFQ.gif" alt="26.gif"></p><p>动图右边的部分：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">上面是浏览器请求，触发 Controller 的代码。</span><br><span class="line"></span><br><span class="line">然后中间是产品表，有 10 个库存。</span><br><span class="line"></span><br><span class="line">最下面是订单表，没有一条数据。</span><br><span class="line"></span><br><span class="line">触发了代码之后，库存为 0 了，没有问题。</span><br><span class="line"></span><br><span class="line">但是，订单居然有 20 笔！</span><br><span class="line"></span><br><span class="line">也就是说超卖了 10 个ipad pro 顶配版！</span><br><span class="line"></span><br><span class="line">超卖的，可不在活动预算范围内啊！</span><br><span class="line"></span><br><span class="line">那可就是一个 1.6w 啊，10 个就是 16w 啊。</span><br><span class="line"></span><br><span class="line">就这么其貌不扬，人畜无害，甚至看起来猥猥琐琐的代码，居然让我亏了整整 16w 。</span><br></pre></td></tr></table></figure><p>其实，结果出现了，答案也就随之而来了。</p><p>在上面的示例代码的情况下，<code>事务的提交在 unlock 之后</code>。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/dIm37tToOXGPael.jpg" alt="4.webp.jpg"></p><p>其实你仔细分析后，猜也能猜出来，肯定是在 unlock 之后的。</p><p>而且上面的描述“unlock之后”其实是有一定的迷惑性的，因为释放锁是一个比较特别的操作。</p><p>换一个描述，就比较好理解了：</p><p>在上面的示例代码的情况下，事务的提交在方法运行结束之后。</p><p>你细品，这个描述是不是迷惑性就没有那么强了，甚至你还会恍然大悟：这不是常识吗？</p><p>为什么是方法结束之后，分析具体原因之前，我想先简单分析一下这样的代码写出来的原因。</p><p>我猜可能是这样的。最开始的代码结构是这样：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/fiFvEGIV1gW8haC.jpg" alt="27.webp.jpg"></p><p>然后，写着写着发现不对，并发的场景下，库存是一个共享的资源，这玩意得加锁啊。于是搞了这出：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/WzmUxbKgwjpCVu4.jpg" alt="28.webp.jpg"></p><p>后面再次审查代码的时候，发现：哟，这个第三步得是一个事务操作才行呀。于是代码就成了这样：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/46LcJBsOxaTFNUW.jpg" alt="29.webp.jpg"></p><p>演进路线非常合理，最终的代码看起来也简直毫无破绽。但是问题到底出在哪里了呢？</p><h1 id="找答案"><a href="#找答案" class="headerlink" title="找答案"></a>找答案</h1><p>答案还是在这个类里面：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.transaction.interceptor.TransactionAspectSupport#invokeWithinTransaction</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/nPxN93wUulvIXQc.jpg" alt="30.webp.jpg"></p><p>前面我们聊事务开启的时候，说的是第 382 行代码。然后 try 代码块里面执行的是我们的业务代码。</p><p>现在，我们要研究事务的提交了，所以主要看我框起来的地方。首先 catch 代码块里面，<code>392 行</code>，看方法名称已经非常的见名知意了：<code>completeTransactionAfterThrowing </code>在抛出异常之后完成事务的提交。</p><p>你看我的代码，只是用到了<code>@Transactional</code>注解，并没有指定异常。那么问题就来了：</p><blockquote><p><code>Spring 管理的事务，默认回滚的异常是什么呢？</code></p></blockquote><p>如果你不知道答案，就可以带着问题去看源码。如果你知道答案，但是没有亲眼看到对应的代码，那么也可以去寻找源码。如果你知道答案，也看过这部分源码，温故而知新。</p><p>先说答案：<code>默认回滚的异常是 RuntimeException 或者 Error。</code>我只需要在业务代码里面抛出一个 RuntimeException 的子类，比如这样的：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/AncJytWz5SQNabB.jpg" alt="31.webp.jpg"></p><p>然后在 392 行打上断点，开始调试就完事了：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/pNxzaMSbKj38Uor.jpg" alt="32.webp.jpg"></p><p>只需要往下调试几步，你就能走到这个方法来：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.transaction.interceptor.RuleBasedTransactionAttribute#rollbackOn</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/cK13PyjsSOubZLQ.jpg" alt="33.webp.jpg"></p><p>发现这个 winner 对象为空，接着走了这个逻辑：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return super.rollbackOn(ex);</span><br></pre></td></tr></table></figure><p>答案就藏着这行代码的背后：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/wsvANCR5eHSJIPc.jpg" alt="34.webp.jpg"></p><p>如果异常类型是 RuntimeException 或者 Error 的子类，那么就返回 true，即需要回滚，调用 rollback 方法：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/eqOzBTp3MXYhfIJ.jpg" alt="36.webp.jpg"></p><p>如果返回为 false，则表示不需要回滚，调用 commit 方法：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/9jLuG4dU8BNFcbQ.jpg" alt="37.webp.jpg"></p><p>那么怎么让它返回 false 呢？很简单嘛，这样一搞就好了：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/yBAWQbg6fL5DFX8.jpg" alt="39.webp.jpg"></p><p>框架给你留了口子，你就把它用起来。当我把代码改成上面那样，然后重新启动项目，再次访问代码。我们去寻找出现指定异常不回滚的具体的实现逻辑在哪。其实也在我们刚刚看到的方法里面：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/5YpbLlMeXHGwiD1.jpg" alt="40.webp.jpg"></p><p>你看，这个时候 winner 不为 null 了。它是一个 NoRollbackRuleAttribute 对象了。所以就走入这行代码，返回 false 了：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return !(winner instanceof NoRollbackRuleAttribute);</span><br></pre></td></tr></table></figure><p>于是，就成功走到了 else 分支里面，出了异常也 commit 了，你说神奇不神奇：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/c76KD45U3tHeTrE.jpg" alt="41.webp.jpg"></p><p>写到这里的时候，我突然想到了一个骚操作，甚至有可能变成一道沙雕面试题：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/c9Nz7ti1a5Go2bH.jpg" alt="42.webp.jpg"></p><p><code>这个操作骚不骚，到底会回滚呢还是不回滚呢？</code>如果你在项目里看到这样的代码肯定是要骂一句傻逼的。但是面试官就喜欢搞这些阴间的题目。</p><p>我想到这个问题的时候，我也不知道答案是什么，但是我知道答案还是在源码里面：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/Qf9eRWgYyVc3mJt.jpg"></p><p>首先，从结果上可以直观的看到，经过 for 循环之后， <code>winner </code>是 <code>RollbackRuleAttribute</code> 对象，所以下面的代码返回 true，需要回滚：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return !(winner instanceof NoRollbackRuleAttribute);</span><br></pre></td></tr></table></figure><blockquote><p><code>问题就变成了 winner 为什么经过 for 循环之后是 RollbackRuleAttribute？</code></p></blockquote><p>简单一句话：导致 winner 是 RollbackRuleAttribute 的原因，就是因为被循环的这个 list 是先把 RollbackRuleAttribute 对象 add 了进去。</p><blockquote><p><code>那么为什么 RollbackRuleAttribute 对象先加入到集合呢？</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.transaction.annotation.SpringTransactionAnnotationParser#parseTransactionAnnotation(org.springframework.core.annotation.AnnotationAttributes)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/1eB39mKTIC4bNXn.jpg" alt="44.webp.jpg"></p><p>别问，问就是因为代码是这样写的。为什么代码要这样写呢？我想可能设计这块代码的开发人员觉得 rollbackFor 的优先级比 noRollbackFor 高吧。</p><p>再来一个问题：</p><blockquote><p><code>Spring 源码怎么匹配当前这个异常是需要回滚的？</code></p></blockquote><p>别想那么复杂，大道至简，直接递归，然后一层层的找父类，对比名称就完事了。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/2LJ5AC6PeSN9ORW.jpg" alt="45.webp.jpg"></p><p>你注意截图里面的注释：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个是 Found it!</span><br></pre></td></tr></table></figure><p>表示找到了，匹配上了，用了感叹号表示很开心。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个是 If we&#x27;ve gone as far as we can go and haven&#x27;t found it...</span><br></pre></td></tr></table></figure><p>啥意思呢，这个 as far as 在英语里面是一个连词，表示“直到..为止..”的意思。引导的是状语从句，强调的是程度或范围。所以，上面这句话的意思就是：<code>如果我们已经走到我们能走的最远的地方，还没匹配上，代码就只能这样写了</code>。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/cMVKdzPDe9E5T3C.jpg" alt="46.webp.jpg"></p><p>异常类，最远的地方就是  Throwable.class。没匹配上，就返回 -1。</p><p>还是建议大家亲自去 Debug 一下，可太有意思了。然后我们接着聊正常场景下的提交。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/hC3HcY1ZiUpQfNz.jpg" alt="48.webp.jpg"></p><p>这个代码块里面，try 我们也聊了，catch 我们也聊了。就差个 finally 了。</p><p>我看网上有的文章说<code> finally 里面就是 commit 的地方</code>。错了啊，老弟。这里只是<code>把数据库连接给重置一下</code>。方法上已经给你说的很清楚了：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/NxPJiXMfnbsG4jT.jpg"></p><p><code>Spring 的事务是基于 ThreadLocal 来做的</code>。在当前的这个事务里面，可能有一些隔离级别、回滚类型、超时时间等等的个性化配置。</p><p><code>不管是这个事务正常返回还是出现异常，只要它完事了，就得给把这些个性化的配置全部恢复到默认配置。</code>所以，放到了 finally 代码块里面去执行了。真正的 commit 的地方是这行代码：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/f5GkORwhYqzlpBx.jpg" alt="50.webp.jpg"></p><p>那么问题又来了：</p><blockquote><p><code>走到这里来了，事务一定会提交吗？</code></p></blockquote><p>话可别说的那么绝对，兄弟，看代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.transaction.support.AbstractPlatformTransactionManager#commit</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/XDQ2oIlFrmvAkgM.jpg" alt="51.webp.jpg"></p><p>在 commit 之前还有两个判断，如果<code>事务被标记为 rollback-only 了，还是得回滚</code>。而且，你看日志。我这<code>事务还没提交呢，锁就被释放了？</code></p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/vtZikJCOVB7rHgT.jpg" alt="52.webp.jpg"></p><p>接着往下看 commit 相关的逻辑，我们就会遇到老朋友：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/NWvasnwizYlMXt9.jpg" alt="53.webp.jpg"></p><p>HikariCP，SpringBoot 2.0 之后的默认连接池，强得一比。关于事务的提交，就不大篇幅的介绍了。给大家指个路：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.mysql.cj.protocol.a.NativeProtocol#sendQueryString</span><br></pre></td></tr></table></figure><p>在这个方法的入口处打上断点：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/9aewLWVcrdvXz5l.jpg" alt="55.webp.jpg"></p><p>然后你会发现很多的 SQL 都会经过这个地方。所以，为了你顺利调试，你需要在断点上设置一下：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/ViXHOYq17dvIZ6J.jpg" alt="56.webp.jpg"></p><p>这样只有 SQL 语句是 commit 的时候才会停下来。又一个调试小细节，送给你，不客气。现在，我们知道原因了，那我现在把代码稍微变一下：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/h2SV5uPMGFiEOjy.jpg" alt="57.webp.jpg"></p><p>把 <code>ReentrantLock </code>换成了 <code>synchronized。</code></p><blockquote><p><code>那你说这个代码还会不会有问题？</code></p></blockquote><p>说没有问题的同学请好好反思一下。这个地方的原理和前面讲的东西是一模一样的呀，肯定也是有问题的。</p><p>这个加锁方式就是错误的。所以你记住了，以后面试官问你<code> @Transactional</code> 的时候，你把标准答案先背一遍之后，如果你对锁这块的知识点非常的熟悉，就可以在不经意间说一下结合锁用的时候的异常场景。别说你写的，就说你 review 代码的时候发现的，深藏功与名。</p><p>另外记得扩展一下，现在都是集群服务了，加锁得上分布式锁。但是原理还这个原理。既然都聊到分布式锁了，这和面试官又得大战几个回合。是你主动提起的，把面试官引到了你的主战场，拿几分，不过分吧。</p><p>一个面试小技巧，送给你，不客气。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="事务在锁工作范围内"><a href="#事务在锁工作范围内" class="headerlink" title="事务在锁工作范围内"></a>事务在锁工作范围内</h2><p>现在我们知道问题的原因了。解决方案其实都呼之欲出了嘛。正确的使用锁，把整个事务放在锁的工作范围之内：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/1z6EP3nYeuZCDsw.jpg" alt="58.webp.jpg"></p><blockquote><p><code>这样，就可以保证事务的提交一定是在 unlock 之前了。对不对？</code></p></blockquote><p>说对的同学，今天就先到这里，请回去等通知啊。别被带到沟里去了呀，朋友。</p><blockquote><p><code>你仔细想想这个事务会生效吗？</code></p></blockquote><p>提示到这里还没想明白的同学，赶紧去搜一下事务失效的几种场景。我这里说一个能正常使用的场景：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/W2mqaHJ5PFjdytT.jpg" alt="59.webp.jpg"></p><ul><li>只是这种自己注入自己的方式，我觉得很恶心。如果项目里面出现了这样的代码，一定是代码分层没有做好，项目结构极其混乱。不推荐。</li><li><code>还可以使用编程式事务的方式去写，自己去控制事务的开启、提交、回滚。</code>比直接使用 @Transactional 靠谱。</li><li>除此之外，还有一个骚一点的解决方案。其他地方都不动，就只改一下 @Transactional 这个地方.</li></ul><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/szWkoDCtXZclwqE.jpg" alt="60.webp.jpg"></p><p><code>把隔离级别串行化，再次跑测试用例，绝对不会出现超卖的情况。甚至都不需要加锁的逻辑。</code>你觉得好吗？</p><p>好啥啊？串行化性能跟不上啊！</p><p>这玩意太悲观了，对于同一行的数据，读和写的时候都会进行加锁操作。当读写锁出现冲突的时候，后面来的事务就排队等着。这个骚操作，知道就行了，别用。你就当是一个没啥卵用的知识点就行了。</p><p>但是，如果你们是一个不追求性能的场景，这个没有卵用的知识点就变成骚操作了。</p><h2 id="rollback-only"><a href="#rollback-only" class="headerlink" title="rollback-only"></a>rollback-only</h2><p>前面提到了这个 rollback-only，为了更好的行文，所以我一句话就带过了，其实它也是很有故事的，单独拿一节出来简单说一下，给大家模拟一下这个场景。以后你见到这个异常就会感觉很亲切。</p><blockquote><p><code>Spring 的事务传播级别默认是 REQUIRED</code>，含义是<code>如果当前没有事务，就新建一个事务，如果上下文中已经有一个事务，则共享这个事务</code>。</p></blockquote><p>直接上代码：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/3P7wTrOoidzMeFV.jpg" alt="62.webp.jpg"></p><p>这里有 <code>sellProduct、sellProductBiz 两个事务</code>，s<code>ellProductBiz 是内层事务</code>，它会抛出了异常。当执行整个逻辑的时候，会抛出这个异常：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Transaction rolled back because it has been marked as rollback-only</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/oRT4Eis3mKFYfxg.jpg" alt="62.webp (1).jpg"></p><p>根据这个异常的堆栈，可以找到这个地方，在前面出现过：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/vPyZlK2fN9GhJ7W.jpg" alt="63.webp.jpg"></p><p>所以，我们只需要分析这个 if 条件为什么满足了，就大概摸清楚脉络了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (!shouldCommitOnGlobalRollbackOnly() &amp;&amp; defStatus.isGlobalRollbackOnly())</span><br></pre></td></tr></table></figure><p>前面的 <code>shouldCommitOnGlobalRollbackOnly 默认为 false</code>：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/rjxS9FOoI82UYp6.jpg" alt="67.webp.jpg"></p><blockquote><p><code>问题就精简为了：defStatus.isGlobalRollbackOnly() 为什么是true？</code></p></blockquote><p>为什么？因为 <code>sellProductBiz</code> 抛出异常后，会调用 <code>completeTransactionAfterThrowing 方法执行回滚逻辑</code>。肯定是这个方法里面搞事情了啊。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.transaction.support.AbstractPlatformTransactionManager#processRollback</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/iNBKWx1SGF64lZV.jpg" alt="68.webp.jpg"></p><p>在这里，把链接的 rollbackOnly 置为了 true。所以，后面的事务想要 commit 的时候，一检查这个参数，哦豁，回滚吧。大概就是这样的：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/UOAq4dfiRCZp8nb.jpg" alt="69.webp.jpg"></p><blockquote><p><code>如果这不是你期望的异常，怎么解决呢？</code></p></blockquote><p>理解了事务的传播机制就简单的一比：</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/TC9jwf5HY7OxWza.jpg" alt="70.webp.jpg"></p><p>就这样，跑起来没毛病，互不干扰。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/22/qfFpJjwTCVcaed6.jpg" alt="71.webp.jpg"></p><p>完结撒花~！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Transactional </tag>
            
            <tag> lock </tag>
            
            <tag> unlock </tag>
            
            <tag> Spring </tag>
            
            <tag> rollbackOnly </tag>
            
            <tag> 事务机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 实现人脸识别功能</title>
      <link href="/2022/02/21/Java%20%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/02/21/Java%20%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>本地配置：</li></ul><ol><li>配置环境(推荐jdk8，mysql5.7，maven3，idea)</li><li>引擎库libarcsoft_face、libarcsoft_face_engine、libarcsoft_face_engine_jni。把dll或so文件拷贝到java.library.path所包含的路径下,注意区分X86和X64，和当前jdk版本一致。</li></ol><h1 id="人脸识别SDK"><a href="#人脸识别SDK" class="headerlink" title="人脸识别SDK"></a>人脸识别SDK</h1><p>人脸识别技术是很复杂的，自己用Java手撕一个识别算法有点不切实际，毕竟实力不允许我这么嚣张，还是借助三方的SDK吧！</p><p>找了一圈发现一个免费的人脸识别SDK：<code> ArcSoft</code>，地址：<code>https://ai.arcsoft.com.cn</code>。</p><p><code>官网首页 -&gt; 右上角开发者中心 -&gt; 选择“人脸识别” -&gt; 添加SDK</code>，会生成APPID、SDK KEY后续会用到，根据需要选择不同的环境（本文基于windows环境），然后下载SDK是一个压缩包。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/0e1240f6c09f4e6db44db27fa47b7483.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Z2I54aZ6Zuy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/871646dad0784bd8a1471b65c3c27ac2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Z2I54aZ6Zuy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/f982d21088d848459f42b12a96c03ee2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Z2I54aZ6Zuy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="Java项目搭建"><a href="#Java项目搭建" class="headerlink" title="Java项目搭建"></a>Java项目搭建</h1><ul><li>下载demo项目</li></ul><p>github地址：<code>https://github.com/xinzhfiu/ArcSoftFaceDemo</code>，本地搭建数据库，创建表:<code>user_face_info</code>。这个表主要用来存人像特征，其中主要的字段<code>face_feature</code>用二进制类型 blob 存放人脸特征。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for user_face_info</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `user_face_info`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_face_info` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分组id&#x27;</span>,</span><br><span class="line">  `face_id` <span class="type">varchar</span>(<span class="number">31</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;人脸唯一Id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">63</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;名字&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年纪&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱地址&#x27;</span>,</span><br><span class="line">  `gender` <span class="type">smallint</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别，1=男，2=女&#x27;</span>,</span><br><span class="line">  `phone_number` <span class="type">varchar</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;电话号码&#x27;</span>,</span><br><span class="line">  `face_feature` <span class="type">blob</span> COMMENT <span class="string">&#x27;人脸特征&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `fpath` <span class="type">varchar</span>(<span class="number">255</span>) COMMENT <span class="string">&#x27;照片路径&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  KEY `GROUP_ID` (`group_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span>;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>修改application.properties文件</li></ul><p>整个项目还是比较完整的，只需改一些配置即可启动，但有几点注意的地方，后边会重点说明。</p><ol><li><code>config.arcface-sdk.sdk-lib-path</code>：存放SDK压缩包中的三个.dll文件的路径</li><li><code>config.arcface-sdk.app-id </code>：开发者中心的APPID</li><li><code>config.arcface-sdk.sdk-key</code> ：开发者中心的SDK Key</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config.arcface-sdk.sdk-lib-path=d:/arcsoft_lib</span><br><span class="line">config.arcface-sdk.app-id=</span><br><span class="line">config.arcface-sdk.sdk-key=</span><br><span class="line"></span><br><span class="line"># druid  本地的数据库地址</span><br><span class="line">spring.datasource.druid.url=jdbc:mysql://127.0.0.1:3306/xin-master?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC</span><br><span class="line">spring.datasource.druid.username=junkang</span><br><span class="line">spring.datasource.druid.password=junkang</span><br></pre></td></tr></table></figure><ul><li>根目录创建lib文件夹</li></ul><p>在项目根目录创建文件夹 lib,将下载的SDK压缩包中的<code>arcsoft-sdk-face-3.0.0.0.jar</code>放入项目根目录</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/c9baa0a6432247b9888c04706af330d0.png" alt="在这里插入图片描述"></p><ul><li>引入arcsoft依赖包</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.arcsoft.face<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>arcsoft-sdk-face<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/lib/arcsoft-sdk-face-3.0.0.0.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>pom.xml</code>文件要配置<code>includeSystemScope</code>属性，否则可能会导致<code>arcsoft-sdk-face-3.0.0.0.jar</code>引用不到</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">includeSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeSystemScope</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动项目</li></ul><p>到此为止配置完成，<code>run Application</code>启动；测试一下：<code>http://127.0.0.1:8089/demo</code>，如下页面即启动成功</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/326e0150dd9948849cd5e4229b235032.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Z2I54aZ6Zuy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ul><li>录入人脸图像</li></ul><p>页面输入名称，点击摄像头注册调起本地摄像头，提交后将当前图像传入后台，识别提取当前人脸体征，保存至数据库。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/fc4b33e69cce4909a23eafc017c193fe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Z2I54aZ6Zuy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ul><li>人脸对比</li></ul><p>录入完人脸图像后测试一下能否识别成功，提交当前的图像，发现识别成功相似度92%。但是作为程序员对什么事情都要持怀疑的态度，这结果不是老铁在页面写死的吧？</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/8324abfb46604e2891ba2bc6d18438d3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Z2I54aZ6Zuy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>为了进一步验证，这回把脸挡住再试一下，发现提示“人脸不匹配”，证明真的有进行比对。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/e2ddbd507ee146679e7a54ed35f69a6f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Z2I54aZ6Zuy,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>简单看了一下项目源码，分析一下实现的过程：</p><ul><li>JS调起本地摄像头拍照，上传图片文件字符串</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">function</span> <span class="title function_">getMedia</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&quot;#mainDiv&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">        <span class="keyword">let</span> videoComp = <span class="string">&quot; &lt;video id=&#x27;video&#x27; width=&#x27;500px&#x27; height=&#x27;500px&#x27; autoplay=&#x27;autoplay&#x27; style=&#x27;margin-top: 20px&#x27;&gt;&lt;/video&gt;&lt;canvas id=&#x27;canvas&#x27; width=&#x27;500px&#x27; height=&#x27;500px&#x27; style=&#x27;display: none&#x27;&gt;&lt;/canvas&gt;&quot;</span>;</span><br><span class="line">        $(<span class="string">&quot;#mainDiv&quot;</span>).<span class="title function_">append</span>(videoComp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> constraints = &#123;</span><br><span class="line">            <span class="attr">video</span>: &#123;<span class="attr">width</span>: <span class="number">500</span>, <span class="attr">height</span>: <span class="number">500</span>&#125;,</span><br><span class="line">            <span class="attr">audio</span>: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//获得video摄像头区域</span></span><br><span class="line">        <span class="keyword">let</span> video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;video&quot;</span>);</span><br><span class="line">        <span class="comment">//这里介绍新的方法，返回一个 Promise对象</span></span><br><span class="line">        <span class="comment">// 这个Promise对象返回成功后的回调函数带一个 MediaStream 对象作为其参数</span></span><br><span class="line">        <span class="comment">// then()是Promise对象里的方法</span></span><br><span class="line">        <span class="comment">// then()方法是异步执行，当then()前的方法执行完后再执行then()内部的程序</span></span><br><span class="line">        <span class="comment">// 避免数据没有获取到</span></span><br><span class="line">        <span class="keyword">let</span> promise = navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(constraints);</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">MediaStream</span>) &#123;</span><br><span class="line">            video.<span class="property">srcObject</span> = <span class="title class_">MediaStream</span>;</span><br><span class="line">            video.<span class="title function_">play</span>();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// var t1 = window.setTimeout(function() &#123;</span></span><br><span class="line">        <span class="comment">//     takePhoto();</span></span><br><span class="line">        <span class="comment">// &#125;,2000)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//拍照事件</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">takePhoto</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> mainComp = $(<span class="string">&quot;#mainDiv&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(mainComp.<span class="title function_">has</span>(<span class="string">&#x27;video&#x27;</span>).<span class="property">length</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">let</span> userNameInput = $(<span class="string">&quot;#userName&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">            <span class="keyword">if</span>(userNameInput == <span class="string">&quot;&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;姓名不能为空!&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获得Canvas对象</span></span><br><span class="line">            <span class="keyword">let</span> video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;video&quot;</span>);</span><br><span class="line">            <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">            <span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">            ctx.<span class="title function_">drawImage</span>(video, <span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">            <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">            <span class="keyword">var</span> base64File = canvas.<span class="title function_">toDataURL</span>();</span><br><span class="line">            <span class="keyword">var</span> userName = $(<span class="string">&quot;#userName&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">            formData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span>, base64File);</span><br><span class="line">            formData.<span class="title function_">append</span>(<span class="string">&quot;name&quot;</span>, userName);</span><br><span class="line">            formData.<span class="title function_">append</span>(<span class="string">&quot;groupId&quot;</span>, <span class="string">&quot;101&quot;</span>);</span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&quot;/faceAdd&quot;</span>,</span><br><span class="line">                <span class="attr">data</span>: formData,</span><br><span class="line">                <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">text</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> res = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(text)</span><br><span class="line">                    <span class="keyword">if</span> (text.<span class="property">code</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="title function_">alert</span>(<span class="string">&quot;注册成功&quot;</span>)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">alert</span>(text.<span class="property">message</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(error))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">            <span class="keyword">let</span> userName = $(<span class="string">&quot;#userName&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">            formData.<span class="title function_">append</span>(<span class="string">&quot;groupId&quot;</span>, <span class="string">&quot;101&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> file = $(<span class="string">&quot;#file0&quot;</span>)[<span class="number">0</span>].<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">            reader.<span class="title function_">readAsDataURL</span>(file);</span><br><span class="line">            reader.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> base64 = reader.<span class="property">result</span>;</span><br><span class="line">            formData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span>, base64);</span><br><span class="line">            formData.<span class="title function_">append</span>(<span class="string">&quot;name&quot;</span>,userName);</span><br><span class="line">                $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">&quot;/faceAdd&quot;</span>,</span><br><span class="line">                    <span class="attr">data</span>: formData,</span><br><span class="line">                    <span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">text</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> res = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(text)</span><br><span class="line">                        <span class="keyword">if</span> (text.<span class="property">code</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="title function_">alert</span>(<span class="string">&quot;注册成功&quot;</span>)</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="title function_">alert</span>(text.<span class="property">message</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">                        <span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(error))</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                location.<span class="title function_">reload</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>后台解析图片，提取人像特征</li></ul><p>后台解析前端传过来的图片，提取人像特征存入数据库，人像特征的提取主要是靠FaceEngine引擎，顺着源码一路看下去，自己才疏学浅实在是没懂具体是个什么样的算法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">人脸添加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/faceAdd&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Object&gt; <span class="title function_">faceAdd</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> String file, <span class="meta">@RequestParam(&quot;groupId&quot;)</span> Integer groupId, <span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析图片</span></span><br><span class="line">        <span class="type">byte</span>[] decode = Base64.decode(base64Process(file));</span><br><span class="line">        <span class="type">ImageInfo</span> <span class="variable">imageInfo</span> <span class="operator">=</span> ImageFactory.getRGBData(decode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//人脸特征获取</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = faceEngineService.extractFaceFeature(imageInfo);</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Results.newFailedResult(ErrorCodeEnum.NO_FACE_DETECTED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">UserFaceInfo</span> <span class="variable">userFaceInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserFaceInfo</span>();</span><br><span class="line">        userFaceInfo.setName(name);</span><br><span class="line">        userFaceInfo.setGroupId(groupId);</span><br><span class="line">        userFaceInfo.setFaceFeature(bytes);</span><br><span class="line">        userFaceInfo.setFaceId(RandomUtil.randomString(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//人脸特征插入到数据库</span></span><br><span class="line">        userFaceInfoService.insertSelective(userFaceInfo);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;faceAdd:&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> Results.newSuccessResult(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Results.newFailedResult(ErrorCodeEnum.UNKNOWN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>人像特征对比</li></ul><p>人脸识别：将前端传入的图像经过人像特征提取后，和库中已存在的人像信息对比分析</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">人脸识别</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/faceSearch&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;FaceSearchResDto&gt; <span class="title function_">faceSearch</span><span class="params">(String file, Integer groupId)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">byte</span>[] decode = Base64.decode(base64Process(file));</span><br><span class="line">    <span class="type">BufferedImage</span> <span class="variable">bufImage</span> <span class="operator">=</span> ImageIO.read(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(decode));</span><br><span class="line">    <span class="type">ImageInfo</span> <span class="variable">imageInfo</span> <span class="operator">=</span> ImageFactory.bufferedImage2ImageInfo(bufImage);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//人脸特征获取</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = faceEngineService.extractFaceFeature(imageInfo);</span><br><span class="line">    <span class="keyword">if</span> (bytes == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Results.newFailedResult(ErrorCodeEnum.NO_FACE_DETECTED);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//人脸比对，获取比对结果</span></span><br><span class="line">    List&lt;FaceUserInfo&gt; userFaceInfoList = faceEngineService.compareFaceFeature(bytes, groupId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CollectionUtil.isNotEmpty(userFaceInfoList)) &#123;</span><br><span class="line">        <span class="type">FaceUserInfo</span> <span class="variable">faceUserInfo</span> <span class="operator">=</span> userFaceInfoList.get(<span class="number">0</span>);</span><br><span class="line">        <span class="type">FaceSearchResDto</span> <span class="variable">faceSearchResDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FaceSearchResDto</span>();</span><br><span class="line">        BeanUtil.copyProperties(faceUserInfo, faceSearchResDto);</span><br><span class="line">        List&lt;ProcessInfo&gt; processInfoList = faceEngineService.process(imageInfo);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtil.isNotEmpty(processInfoList)) &#123;</span><br><span class="line">            <span class="comment">//人脸检测</span></span><br><span class="line">            List&lt;FaceInfo&gt; faceInfoList = faceEngineService.detectFaces(imageInfo);</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> faceInfoList.get(<span class="number">0</span>).getRect().getLeft();</span><br><span class="line">            <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> faceInfoList.get(<span class="number">0</span>).getRect().getTop();</span><br><span class="line">            <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> faceInfoList.get(<span class="number">0</span>).getRect().getRight() - left;</span><br><span class="line">            <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> faceInfoList.get(<span class="number">0</span>).getRect().getBottom() - top;</span><br><span class="line"></span><br><span class="line">            <span class="type">Graphics2D</span> <span class="variable">graphics2D</span> <span class="operator">=</span> bufImage.createGraphics();</span><br><span class="line">            graphics2D.setColor(Color.RED);<span class="comment">//红色</span></span><br><span class="line">            <span class="type">BasicStroke</span> <span class="variable">stroke</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicStroke</span>(<span class="number">5f</span>);</span><br><span class="line">            graphics2D.setStroke(stroke);</span><br><span class="line">            graphics2D.drawRect(left, top, width, height);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            ImageIO.write(bufImage, <span class="string">&quot;jpg&quot;</span>, outputStream);</span><br><span class="line">            <span class="type">byte</span>[] bytes1 = outputStream.toByteArray();</span><br><span class="line">            faceSearchResDto.setImage(<span class="string">&quot;data:image/jpeg;base64,&quot;</span> + Base64Utils.encodeToString(bytes1));</span><br><span class="line">            faceSearchResDto.setAge(processInfoList.get(<span class="number">0</span>).getAge());</span><br><span class="line">            faceSearchResDto.setGender(processInfoList.get(<span class="number">0</span>).getGender().equals(<span class="number">1</span>) ? <span class="string">&quot;女&quot;</span> : <span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Results.newSuccessResult(faceSearchResDto);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Results.newFailedResult(ErrorCodeEnum.FACE_DOES_NOT_MATCH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个人脸识别功能的大致流程图如下：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/016378162bbee45ad0a7ccd2ab7666d0.png" alt="人脸流程.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人脸识别 </tag>
            
            <tag> 数据采集 </tag>
            
            <tag> 图像分析 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何校验两个文件内容是否相同</title>
      <link href="/2022/02/17/%E5%A6%82%E4%BD%95%E6%A0%A1%E9%AA%8C%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C/"/>
      <url>/2022/02/17/%E5%A6%82%E4%BD%95%E6%A0%A1%E9%AA%8C%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<p>今天做文件上传功能，需求要求文件内容相同不能重复上传。感觉这个需求挺简单的就交给了一位刚入行的新同学。等合并代码的时候发现这位同学居然用文件名称相同和文件大小相同作为两个文件相同的依据。这种条件判断可靠吗？</p><p>从概率上来说遇到两个文件名称和大小都一样的概率确实太小了。这种判断放在生产环境中也可以稳定的跑上一阵子，不过即使再低的可能性也是有可能的，如果能做到100%就好了。</p><p>文件摘要校验我相信同学们都下载过一些好心人开发的小工具，有些小工具会附带一个校验器让你校验附带提供的checksum值，防止有人恶意篡改小工具，保证小工具可以放心使用。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/02/17/mnrkEq4YeBNFdgD.png"></p><p>如果两个文件的内容相同，那么它们的摘要应该是相同的。这个原理能不能帮助我们鉴定两个文件是否相同呢？</p><h1 id="Java实现文件摘要"><a href="#Java实现文件摘要" class="headerlink" title="Java实现文件摘要"></a>Java实现文件摘要</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提取文件 checksum </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> path      文件全路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> algorithm  算法名 例如 MD5、SHA-1、SHA-256等</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  checksum</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchAlgorithmException the no such algorithm exception</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException              the io exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">extractChecksum</span><span class="params">(String path, String algorithm)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, IOException &#123;</span><br><span class="line">    <span class="comment">// 根据算法名称初始化摘要算法</span></span><br><span class="line">    <span class="type">MessageDigest</span> <span class="variable">digest</span> <span class="operator">=</span> MessageDigest.getInstance(algorithm);</span><br><span class="line">    <span class="comment">// 读取文件的所有比特</span></span><br><span class="line">    <span class="type">byte</span>[] fileBytes = Files.readAllBytes(Paths.get(path));</span><br><span class="line">    <span class="comment">// 摘要更新</span></span><br><span class="line">    digest.update(fileBytes);</span><br><span class="line">    <span class="comment">//完成哈希摘要计算并返回特征值</span></span><br><span class="line">    <span class="type">byte</span>[] digested = digest.digest();</span><br><span class="line">    <span class="comment">// 进行十六进制的输出</span></span><br><span class="line">    <span class="keyword">return</span> HexUtils.toHexString(digested);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内容不变"><a href="#内容不变" class="headerlink" title="内容不变"></a>内容不变</h1><p>首先要证明一个文件在内容不变的情况下摘要是否有变化，多次执行下面的代码，断言始终都是true。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\s1\\IdeaProjects\\demo\\src\\main\\resources\\application.yml&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">checksum</span> <span class="operator">=</span> extractChecksum(path, <span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="string">&quot;6bf4d6c101b4a7821226d3ec1f8d778a531bf265&quot;</span>;</span><br><span class="line">Assertions.assertEquals(hash,checksum);</span><br></pre></td></tr></table></figure><p>而且我把文件名改成<code>application-dev.yml</code>，甚至<code>application-dev.txt</code>摘要都是相同的。我又把yml文件的内容作了改动，断言就false了。这证明了单个文件的情况下，内容不变，hash是不变的。</p><h1 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h1><p>我把yml文件复制了一份，改了文件名称和类型，不改变内容并存到了另一个目录中，来测试一下它们的摘要是否有变化。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path1</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\s1\\IdeaProjects\\demo\\src\\main\\resources\\application.yml&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">path2</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\s1\\IdeaProjects\\demo\\src\\main\\resources\\templates\\application-dev.txt&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">checksum1</span> <span class="operator">=</span> extractChecksum(path1, <span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">checksum2</span> <span class="operator">=</span> extractChecksum(path2, <span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="string">&quot;6bf4d6c101b4a7821226d3ec1f8d778a531bf265&quot;</span>;</span><br><span class="line">Assertions.assertEquals(hash,checksum1);</span><br><span class="line">Assertions.assertEquals(hash,checksum2);</span><br></pre></td></tr></table></figure><p>结果断言通过，不过改变了其中一个文件的内容后断言就不通过了。</p><h1 id="新建空文件"><a href="#新建空文件" class="headerlink" title="新建空文件"></a>新建空文件</h1><p><code>这里的新建空文件指的是没有进行任何操作的新建的空文件。</code>新建的空文件会根据特定的算法返回一个<code>固定值</code>，比如<code>SHA-1</code>算法下的空文件值是:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">da39a3ee5e6b4b0d3255bfef95601890afd80709</span><br></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>通过实验证明了：</p><ul><li>在相同算法下，任何<code>新建空文件的摘要值都是固定的</code>。</li><li>任何<code>两个内容相同的文件的摘要值都是相同的</code>，和路径、文件名、文件类型无关。</li><li>文件的<code>摘要值会随着文件内容的改变而改变</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 十六进制 </tag>
            
            <tag> 哈希值 </tag>
            
            <tag> MD5 </tag>
            
            <tag> SHA-256 </tag>
            
            <tag> SHA-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>别再说不会解决 &quot;跨域&quot; 问题啦</title>
      <link href="/2022/01/10/%E5%88%AB%E5%86%8D%E8%AF%B4%E4%B8%8D%E4%BC%9A%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%95%A6/"/>
      <url>/2022/01/10/%E5%88%AB%E5%86%8D%E8%AF%B4%E4%B8%8D%E4%BC%9A%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%95%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是“跨源”"><a href="#什么是“跨源”" class="headerlink" title="什么是“跨源”"></a>什么是“跨源”</h1><p>其实我们平常说的跨域是一种狭义的请求场景，简单来说就是“跨“过<code>浏览器</code>的<code>同源策略</code>去请求资“源”，所以我们叫它“跨源”也没啥问题。那么“跨源”，<code>源是什么？</code> <code>浏览器的同源策略什么是同源？</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const url = &#x27;https://www.google.com:3000&#x27;  </span><br></pre></td></tr></table></figure><p>比如上面的这个 URL，协议是：<code>https</code>，域名是 <code>www.google.com</code>，端口是 <code>3000</code>。不同源了会怎么样？<code>会有很多限制</code>，比如：</p><blockquote><ul><li>Cookie，LocalStorage，IndexDB 等存储性内容无法读取</li><li>DOM 节点无法访问</li><li>Ajax 请求发出去了，但是响应被浏览器拦截了</li></ul></blockquote><p>为什么要搞个这么个东西来限制？<code>基于安全考虑</code>，没有它，可能会遇到：</p><blockquote><ul><li>Cookie劫持，被恶意网站窃取数据</li><li>更容易受到 XSS，CSRF 攻击</li><li>无法隔离潜在恶意文件</li><li>… …</li></ul></blockquote><p>所以得有。正是因为<code>浏览器同源策略</code>的存在，<code>Ajax请求有可能在发出去后就被拦截了</code>，它还会给你报个错：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">✘ Access to XMLHttpRequest at &#x27;xxx&#x27; from origin &#x27;xxx&#x27; has been block by CORS,  </span><br><span class="line">  policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource. </span><br></pre></td></tr></table></figure><p>这种发出去拿不到响应的感受，非常难受</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/01/07/QvdmEIHSaJxT63p.jpg"></p><p>接下来就来看看怎么用科学的方法解决跨域的问题。</p><h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h1><p>就是<code>前端利用了 &lt;script&gt; 标签的 src 属性没有跨域限制的漏洞</code>，可以得到从其他来源动态产生的 JSON 数据。<code>为什么叫 JSONP ？JSONP 是 JSON with Padding 的缩写</code>，具体实现思路大致分为以下步骤：</p><blockquote><ul><li>本站的脚本创建一个 元素，src 地址指向跨域请求数据的服务器</li><li>提供一个回调函数来接受数据，函数名可以通过地址参数传递进行约定</li><li>服务器收到请求后，返回一个包装了JSON数据的响应字符串，类似这样：callback({…})</li></ul></blockquote><p><code>浏览器接受响应后就会去执行回调函数 callback</code>，传递解析后的 JSON 对象作为参数，这样我们就可以在 callback 里处理数据了。实际开发中，会遇到回调函数名相同的情况，可以简单封装一个 JSONP 函数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">&#123; url, params, callback &#125;</span>) &#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;  </span><br><span class="line">    <span class="comment">// 创建一个临时的 script 标签用于发起请求  </span></span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);  </span><br><span class="line">    <span class="comment">// 将回调函数临时绑定到 window 对象，回调函数执行完成后，移除 script 标签  </span></span><br><span class="line">    <span class="variable language_">window</span>[callback] = <span class="function"><span class="params">data</span> =&gt;</span> &#123;  </span><br><span class="line">      <span class="title function_">resolve</span>(data);  </span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(script);  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="comment">// 构造 GET 请求参数，key=value&amp;callback=callback  </span></span><br><span class="line">    <span class="keyword">const</span> formatParams = &#123; ...params, callback &#125;;  </span><br><span class="line">    <span class="keyword">const</span> requestParams = <span class="title class_">Object</span>.<span class="title function_">keys</span>(formatParams)  </span><br><span class="line">      .<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> acc.<span class="title function_">concat</span>([<span class="string">`<span class="subst">$&#123;cur&#125;</span>=<span class="subst">$&#123;formatParams[cur]&#125;</span>`</span>]);  </span><br><span class="line">      &#125;, [])  </span><br><span class="line">   .<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>);  </span><br><span class="line"> <span class="comment">// 构造 GET 请求的 url 地址  </span></span><br><span class="line">    <span class="keyword">const</span> src = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;requestParams&#125;</span>`</span>;  </span><br><span class="line">    script.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, src);  </span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);  </span><br><span class="line">  &#125;);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 调用时  </span></span><br><span class="line"><span class="title function_">jsonp</span>(&#123;  </span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://xxx.xxx&#x27;</span>,  </span><br><span class="line">  <span class="attr">params</span>: &#123;...&#125;,  </span><br><span class="line">  <span class="attr">callback</span>: <span class="string">&#x27;func&#x27;</span>,  </span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure><p>Promise 封装了请求，使异步回调更加优雅，其实本质上就是：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://xxx.xxx.xx?key=value&amp;callback=xxx&#x27;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span></span></span><br></pre></td></tr></table></figure><p>JSONP 的<code>优点是简单而且兼容性很好</code>，但是<code>缺点也很明显，需要服务器支持而且只支持 GET 请求</code>，下面我们来看第二种方案，也是目前主流的跨域解决方案，划重点！</p><h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p><code>CORS（Cross-Origin Resource Sharing）的全称叫 跨域资源共享</code>，其实就是一种机制。浏览器不是有同源策略嘛，对于开发人员来说就不怎么友好了，因为可能经常需要发起一个跨域 HTTP 请求。之前说过，跨域的请求其实是发出去了的，只不过被浏览器给拦截了，因为不安全，说直白点儿就是，你想要从服务器哪儿拿个东西，但是没有经过人家允许啊。所以怎么样才安全 ？<code>服务器允许了不就安全了</code>，这就是 CORS 实现的<code>原理：使用额外的 HTTP 头来告诉浏览器，让运行在某一个起初上的 Web 应用允许访问来自不同源服务器上的指定的资源</code>。</p><ul><li>兼容性</li></ul><p>目前，所有的主流浏览器都支持 CORS，其中，<code>IE 浏览器的版本不能低于 10，IE 8 和 9 需要通过 XDomainRequest 来实现</code></p><ul><li>实现原理</li></ul><p><code>CORS 需要浏览器和服务器同时支持，整个 CORS 的通信过程，都是浏览器自动完成</code>。</p><blockquote><ul><li>怎么个自动法 ？</li></ul><p><code>浏览器</code>一旦发现请求是一个跨域请求，首先会判断请求的类型，如果是<code>简单请求</code>，会在<code>请求头中增加一个 Origin 字段</code>，表示这次请求是来自哪一个源。</p><p><code>服务器</code>接受到请求后，会返回一个响应，<code>响应头</code>中会包含一个叫 <code>Access-Control-Allow-Origin</code>的字段，它的值要么包含由 Origin 首部字段所指明的域名，要么是一个”*”，<code>表示接受任意域名的请求</code>。如果响应头中没有这个字段，就说明当前源不在服务器的许可范围内，浏览器就会报错.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cors HTTP/1.1  </span><br><span class="line">Origin: https://xxx.xx  </span><br><span class="line">Accept-Language: en-US  </span><br><span class="line">Connection: keep-alive  </span><br><span class="line">... ...  </span><br></pre></td></tr></table></figure><p>如果是<code>非简单请求</code>，会在正式通信之前，发送一个<code>预检请求（preflight）</code>，<code>目的在于询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段，只有得到肯定答复，浏览器才会发出正式的请求，否则就报错。</code>在日常的开发中，会看到很多使用<code>OPTION</code> 方法发起的请求，它其实就是一个预检请求：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OPTIONS /cors HTTP/1.1  </span><br><span class="line">Origin: http://xxx.xx  </span><br><span class="line">Access-Control-Request-Method: PUT  </span><br><span class="line">Accept-Language: en-US  </span><br><span class="line">... ...  </span><br></pre></td></tr></table></figure><blockquote><ul><li>到底哪些是简单请求，哪些是非简单请求 ？</li></ul><p><code>不会触发 CORS 预检的，就是简单请求</code>。哪些请求不会触发预检 ？使用以下方法之一：<code>GET, HEAD, POST</code>，并且<code>Content-Type</code> 的值仅限于下列三者之一：</p><ol><li>text&#x2F;plain</li><li>multipart&#x2F;form-data</li><li>application&#x2F;x-www-form-urlencoded</li></ol><p>相反，<code>不符合上述条件的就是非简单请求啦</code>。所以<code>实现 CORS 的关键是服务器，只要服务器实现了 CORS 的相关接口，就可以实现跨域</code>。CORS 与 JSONP相比，<code>优势</code>是支持所有的请求方法，<code>缺点</code>是兼容性上较 JSONP 差。</p></blockquote><p>除了 JSONP 和 CORS外，还有一种常用的跨域解决方案：PostMessage，它更多地用于窗口间的消息传递。</p><h1 id="PostMessage"><a href="#PostMessage" class="headerlink" title="PostMessage"></a>PostMessage</h1><p><code>PostMessage 是 Html5 XMLHttpRequest Level 2 中的 API，它可以实现跨文档通信（Cross-document messaging）</code>。<code>兼容性上，IE8+，Chrome，Firfox 等主流浏览器都支持</code>，</p><blockquote><ul><li>如何理解跨文档通信？</li></ul><p>可以<code>类比设计模式中的发布-订阅模式</code>，在这里，一个窗口发送消息，另一个窗口接受消息，之所以说类似发布-订阅模式，而不是观察者模式，是因为这里<code>两个窗口间没有直接通信，而是通过浏览器这个第三方平台</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">postMessage</span>(message, origin, [transfer])  </span><br></pre></td></tr></table></figure><p>postMessage 方法接收三个参数，要<code>发送的消息</code>、<code>接收消息的源</code>和一个<code>可选的 Transferable 对象</code>，如何接收消息 ？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="keyword">function</span> <span class="title function_">receiveMessage</span>(<span class="params">event</span>) &#123;&#125;, <span class="literal">false</span>); <span class="comment">// 推荐，兼容性更好  </span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onmessage</span> = <span class="keyword">function</span> <span class="title function_">receiveMessage</span>(<span class="params">event</span>) &#123;&#125; <span class="comment">// 不推荐，这是一个实验性的功能，兼容性不如上面的方法  </span></span><br></pre></td></tr></table></figure><p>接收到消息后，消息对象 event 中包含了三个属性：<code>source</code>、<code>origin</code>、<code>data</code>，其中 data 就是发送的 message。此外，<code>除了实现窗口通信，postMessage 还可以同 Web Worker 和 Service Work 进行通信</code>。</p><h1 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h1><p><code>Websocket 是 HTML5 的一个持久化的协议</code>，<code>实现了浏览器与服务器的全双工通信</code>，同时也是跨域的一种解决方案。</p><blockquote><ul><li>什么是全双工通信 ？</li></ul><p>就是<code>在建立连接之后，server 与 client 都能主动向对方发送或接收数据</code>。原生的 WebSocket API 使用起来不太方便，一般会选择自己封装一个 Websocket或者使用已有的第三方库。</p></blockquote><p>这里以第三方库 ws 为例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://www.host.com/path&#x27;</span>);  </span><br><span class="line">  </span><br><span class="line">ws.<span class="title function_">on</span>(<span class="string">&#x27;open&#x27;</span>, <span class="keyword">function</span> <span class="title function_">open</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  ws.<span class="title function_">send</span>(<span class="string">&#x27;something&#x27;</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line">ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span> <span class="title function_">incoming</span>(<span class="params">data</span>) &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  </span><br><span class="line">&#125;);  </span><br><span class="line">... ...  </span><br></pre></td></tr></table></figure><blockquote><p><code>注：Websocket 属于长连接，在一个页面建立多个 Websocket 连接可能会导致性能问题。</code></p></blockquote><h1 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h1><p>同源策略限制的是：浏览器向服务器发送跨域请求需要遵循的标准。</p><blockquote><ul><li>如果是服务器向服务器发送跨域请求呢？</li></ul><p>当然是<code>不受浏览器的同源策略限制</code>。利用这个思路，就可以<code>搭建一个代理服务器，接受客户端请求，然后将请求转发给服务器，代理服务器拿到响应后，再将响应转发给客户端</code>。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/01/10/YCpniExglJF2vuR.png" alt="Nginx 反向代理原理"></p><p>Nginx 反向代理只需要简单配置就可以实现跨域：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx.config  </span></span><br><span class="line"><span class="comment"># ...  </span></span><br><span class="line">server &#123;  </span><br><span class="line">  listen       80;  </span><br><span class="line">  server_name  www.domain1.com;  </span><br><span class="line">  location / &#123;  </span><br><span class="line">    proxy_pass   http://www.domain2.com:8080;  <span class="comment">#反向代理  </span></span><br><span class="line">    proxy_cookie_domain www.domain2.com www.domain1.com; <span class="comment">#修改cookie里域名  </span></span><br><span class="line">    index  index.html index.htm;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 当用 webpack-dev-server 等中间件代理接口访问 nignx 时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用  </span></span><br><span class="line">    add_header Access-Control-Allow-Origin *;  </span><br><span class="line">    add_header Access-Control-Allow-Credentials <span class="literal">true</span>;  </span><br><span class="line">    <span class="comment"># ...  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="Node-中间件代理"><a href="#Node-中间件代理" class="headerlink" title="Node 中间件代理"></a>Node 中间件代理</h1><p>实现的原理和前文提到的代理服务器原理如出一辙，只不过这里使用 Node 中间件做为代理。</p><blockquote><p>注：<code>浏览器向代理服务器请求时仍然遵循同源策略</code>，别忘了在 Node 层通过 CORS 做跨域处理。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>)  </span><br><span class="line"><span class="comment">// 接受客户端请求  </span></span><br><span class="line"><span class="keyword">const</span> sever = https.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  </span><br><span class="line">  ...  </span><br><span class="line">  <span class="keyword">const</span> &#123; method, headers &#125; = req  </span><br><span class="line">  <span class="comment">// 设置 CORS 允许跨域  </span></span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;  </span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>: <span class="string">&#x27;*&#x27;</span>,  </span><br><span class="line">    <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>: <span class="string">&#x27;Content-Type&#x27;</span>,  </span><br><span class="line">    ...  </span><br><span class="line">  &#125;)  </span><br><span class="line">  <span class="comment">// 请求服务器  </span></span><br><span class="line">  <span class="keyword">const</span> proxy = https.<span class="title function_">request</span>(&#123; <span class="attr">host</span>: <span class="string">&#x27;xxx&#x27;</span>, method, headers, ...&#125;, <span class="function"><span class="params">response</span> =&gt;</span> &#123;  </span><br><span class="line">    <span class="keyword">let</span> body = <span class="string">&#x27;&#x27;</span>  </span><br><span class="line">    response.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123; body = body + chunk &#125;)  </span><br><span class="line">    response.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;  </span><br><span class="line">      <span class="comment">// 响应结果转发给客户端  </span></span><br><span class="line">      res.<span class="title function_">end</span>(body)  </span><br><span class="line">    &#125;)  </span><br><span class="line">  &#125;)  </span><br><span class="line">  <span class="comment">// 结束请求  </span></span><br><span class="line">  proxy.<span class="title function_">end</span>()  </span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure><h1 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h1><p>二级域名相同的情况下，设置 document.domain 就可以实现跨域。</p><blockquote><ul><li>什么是二级域名 ？</li></ul><p>a.test.com 和 b.test.com 就属于二级域名，它们都是 test.com 的子域。</p></blockquote><p>如何实现跨域 ？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;test.com&#x27;</span> <span class="comment">// 设置 domain 相同  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 通过 iframe 嵌入跨域的页面  </span></span><br><span class="line"><span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>)  </span><br><span class="line">iframe.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;b.test.com/xxx.html&#x27;</span>)  </span><br><span class="line">iframe.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="comment">// 拿到 iframe 实例后就可以直接访问 iframe 中的数据  </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(iframe.<span class="property">contentWindow</span>.<span class="property">xxx</span>)  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">appendChild</span>(iframe)  </span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当然，除了上述的方案外，比较 Hack(侵入) 的还有：<code>window.name</code>、 <code>location.hash</code>，但是这些跨域的方式现在<code>已经不推荐</code>，为什么 ？因为相比之下有<code>更加安全和强大的 PostMessage 作为替代</code>。跨域的方案其实有很多，总结下来：</p><blockquote><ul><li>CORS 支持所有的 HTTP 请求，是<code>跨域最主流的方案</code></li><li>JSONP 只支持 GET 请求，但是可以<code>兼容老式浏览器</code></li><li>Node中间件和 Nginx反向代理都是利用了<code>服务器对服务器</code>没有同源策略限制</li><li>Websocket 也是一种跨域的解决方案</li><li>PostMessage 可以实现跨文档通信，更多地<code>用于窗口通信</code></li><li>document.domain、window.name、location.hash逐渐淡出历史舞台，作为替代 PostMessage是一种不错的方案</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 跨域 </tag>
            
            <tag> CORS </tag>
            
            <tag> JSONP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 定时备份数据库</title>
      <link href="/2021/12/10/MySQL%20%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2021/12/10/MySQL%20%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>在操作数据过程中，可能会导致数据错误，甚至数据库奔溃，而有效的定时备份能很好地保护数据库。</p><h1 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h1><p>mysqldump 是 MySQL 自带的逻辑备份工具。</p><p>它的备份原理是通过协议连接到MySQL数据库，将需要备份的数据查询出来，将查询出的数据转换成对应的insert语句，当我们需要还原这些数据时，只要执行这些 insert语句，即可将对应的数据还原。首先简单了解一下mysqldump命令格式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump [选项] 数据库名 [表名] &gt; 脚本名</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump [选项] --数据库名 [选项 表名] &gt; 脚本名</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump [选项] --all-databases [选项]  &gt; 脚本名</span><br></pre></td></tr></table></figure><p>可选项属性如下：</p><table><thead><tr><th>可选项</th><th align="center">缩写</th><th>含义</th></tr></thead><tbody><tr><td>–host</td><td align="center">-h</td><td>服务器IP地址</td></tr><tr><td>–port</td><td align="center">-P</td><td>服务器端口号</td></tr><tr><td>–user</td><td align="center">-u</td><td>MySQL 用户名</td></tr><tr><td>–pasword</td><td align="center">-p</td><td>MySQL 密码</td></tr><tr><td>–databases</td><td align="center"></td><td>指定要备份的数据库</td></tr><tr><td>–all-databases</td><td align="center"></td><td>备份mysql服务器上的所有数据库</td></tr><tr><td>–compact</td><td align="center"></td><td>压缩模式，产生更少的输出</td></tr><tr><td>–comments</td><td align="center"></td><td>添加注释信息</td></tr><tr><td>–complete-insert</td><td align="center"></td><td>输出完成的插入语句</td></tr><tr><td>–lock-tables</td><td align="center"></td><td>备份前，锁定所有数据库表</td></tr><tr><td>–no-create-db&#x2F;–no-create-info</td><td align="center"></td><td>禁止生成创建数据库语句</td></tr><tr><td>–force</td><td align="center"></td><td>当出现错误时仍然继续备份操作</td></tr><tr><td>–default-character-set</td><td align="center"></td><td>指定默认字符集</td></tr><tr><td>–add-locks</td><td align="center"></td><td>备份数据库表时锁定数据库表</td></tr></tbody></table><blockquote><p>注：mysqldump 是在操作系统(如：Windows cmd命令窗口)指令行下运行的。不是在mysql命令行下运行的(否则报<code>1064 语法错误</code>)，进入MySQL目录下的bin文件夹</p></blockquote><h1 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h1><ul><li>备份<code>全部</code>数据库的<code>数据和结构</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 -A &gt; /data/mysqlDump/mydb.sql</span><br></pre></td></tr></table></figure><ul><li>备份<code>全部</code>数据库的<code>结构</code>（加 -d 参数）</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 -A -d &gt; /data/mysqlDump/mydb.sql</span><br></pre></td></tr></table></figure><ul><li>备份<code>全部</code>数据库的<code>数据</code>(加 -t 参数)</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 -A -t &gt; /data/mysqlDump/mydb.sql</span><br></pre></td></tr></table></figure><ul><li>备份<code>单个</code>数据库的<code>数据和结构</code>(数据库名mydb)</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot-p123456 mydb &gt; /data/mysqlDump/mydb.sql</span><br></pre></td></tr></table></figure><ul><li>备份<code>单个</code>数据库的<code>结构</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 mydb -d &gt; /data/mysqlDump/mydb.sql</span><br></pre></td></tr></table></figure><ul><li>备份<code>单个</code>数据库的<code>数据</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 mydb -t &gt; /data/mysqlDump/mydb.sql</span><br></pre></td></tr></table></figure><ul><li>备份<code>多个表</code>的<code>数据和结构</code>（数据，结构的单独备份方法与上同）</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 mydb t1 t2 &gt; /data/mysqlDump/mydb.sql</span><br></pre></td></tr></table></figure><ul><li>一次备份<code>多个数据库</code></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123456 --databases db1 db2 &gt; /data/mysqlDump/mydb.sql</span><br></pre></td></tr></table></figure><h1 id="还原备份"><a href="#还原备份" class="headerlink" title="还原备份"></a>还原备份</h1><p>有两种方式还原，第一种是在MySQL命令行中，第二种是使用soure完成还原</p><ul><li>在系统命令行中，输入如下实现还原：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456 &lt; /data/mysqlDump/mydb.sql</span><br></pre></td></tr></table></figure><ul><li>在登录进入mysql系统中，通过source指令找到对应系统中的文件进行还原：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; source /data/mysqlDump/mydb.sql</span><br></pre></td></tr></table></figure><h1 id="Linux系统备份"><a href="#Linux系统备份" class="headerlink" title="Linux系统备份"></a>Linux系统备份</h1><p>在 Linux中，通常使用<code>BASH脚本</code>对需要执行的内容进行编写，加上<code>定时执行命令crontab</code>实现日志自动化生成。</p><h2 id="BASH脚本"><a href="#BASH脚本" class="headerlink" title="BASH脚本"></a>BASH脚本</h2><p>编写BASH维护固定数量备份文件，在Linux中，使用vi或者vim编写脚本内容并命名为：<code>mysql_dump_script.sh</code></p><p>以下代码功能就是针对mysql进行备份，配合crontab，实现备份的内容为近一个月（31天）内的每天的mysql数据库记录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置各项参数</span></span><br><span class="line"><span class="comment">#保存备份个数，备份31天数据</span></span><br><span class="line">number=31</span><br><span class="line"><span class="comment">#备份保存路径</span></span><br><span class="line">backup_dir=/root/mysqlbackup</span><br><span class="line"><span class="comment">#日期</span></span><br><span class="line"><span class="built_in">dd</span>=`<span class="built_in">date</span> +%Y-%m-%d-%H-%M-%S`</span><br><span class="line"><span class="comment">#备份工具</span></span><br><span class="line">tool=mysqldump</span><br><span class="line"><span class="comment">#用户名</span></span><br><span class="line">username=root</span><br><span class="line"><span class="comment">#密码</span></span><br><span class="line">password=TankB214</span><br><span class="line"><span class="comment">#将要备份的数据库</span></span><br><span class="line">database_name=edoctor</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果文件夹不存在则创建</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$backup_dir</span> ];</span><br><span class="line"><span class="keyword">then</span>     </span><br><span class="line">    <span class="built_in">mkdir</span> -p <span class="variable">$backup_dir</span>;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#简单写法 mysqldump -u root -p123456 users &gt; /root/mysqlbackup/users-$filename.sql</span></span><br><span class="line"><span class="variable">$tool</span> -u <span class="variable">$username</span> -p<span class="variable">$password</span> <span class="variable">$database_name</span> &gt; <span class="variable">$backup_dir</span>/<span class="variable">$database_name</span>-<span class="variable">$dd</span>.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建备份日志，将操作日志打印至同目录下的log.txt中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;create <span class="variable">$backup_dir</span>/<span class="variable">$database_name</span>-<span class="variable">$dd</span>.dupm&quot;</span> &gt;&gt; <span class="variable">$backup_dir</span>/log.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#找出需要删除的备份，通过ls命令获取第九列，即文件名列，再通过实现定义操作时间最晚的那个需要删除的文件</span></span><br><span class="line">delfile=`<span class="built_in">ls</span> -l -crt <span class="variable">$backup_dir</span>/*.sql | awk <span class="string">&#x27;&#123;print $9 &#125;&#x27;</span> | <span class="built_in">head</span> -1`</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断现在的备份数量是否大于$number，通过ls命令加上，统计以sql结尾的文件的行数</span></span><br><span class="line">count=`<span class="built_in">ls</span> -l -crt <span class="variable">$backup_dir</span>/*.sql | awk <span class="string">&#x27;&#123;print $9 &#125;&#x27;</span> | <span class="built_in">wc</span> -l`</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果文件超出限制大小，就删除最早创建的sql文件</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$count</span> -gt <span class="variable">$number</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="comment">#删除最早生成的备份，只保留number数量的备份</span></span><br><span class="line">  <span class="built_in">rm</span> <span class="variable">$delfile</span></span><br><span class="line">  <span class="comment">#写删除文件日志</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;delete <span class="variable">$delfile</span>&quot;</span> &gt;&gt; <span class="variable">$backup_dir</span>/log.txt</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="crontab脚本"><a href="#crontab脚本" class="headerlink" title="crontab脚本"></a>crontab脚本</h2><p>在 Linux 中，周期执行的任务一般由cron这个守护进程来处理[ps -ef|grep cron]。cron读取一个或多个配置文件，这些配置文件中包含了命令行及其调用时间。cron的配置文件称为“crontab”，是“cron table”的简写。</p><h3 id="cron服务"><a href="#cron服务" class="headerlink" title="cron服务"></a>cron服务</h3><p>cron是一个 Liunx 下的定时执行工具，可以在无需人工干预的情况下运行作业。</p><table><thead><tr><th align="center">命令</th><th>描述</th></tr></thead><tbody><tr><td align="center">service crond start</td><td>启动服务</td></tr><tr><td align="center">service crond stop</td><td>关闭服务</td></tr><tr><td align="center">service crond restart</td><td>重启服务</td></tr><tr><td align="center">service crond reload</td><td>重新载入配置</td></tr><tr><td align="center">service crond status</td><td>查看服务状态</td></tr></tbody></table><h3 id="crontab语法"><a href="#crontab语法" class="headerlink" title="crontab语法"></a>crontab语法</h3><p><code>crontab命令用于安装、删除或者列出用于驱动cron后台进程的表格</code>。用户把需要执行的命令序列放到crontab文件中以获得执行。<code>每个用户都可以有自己的crontab文件</code>。&#x2F;var&#x2F;spool&#x2F;cron下的crontab文件不可以直接创建或者直接修改。该<code>crontab文件是通过crontab命令创建的。</code></p><p>在crontab文件中如何输入需要执行的命令和时间。该<code>文件中每行都包括六个域，其中前五个域是指定命令被执行的时间，最后一个域是要被执行的命令</code>。每个<code>域之间使用空格或者制表符分隔</code>。</p><p>格式如下： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">minute hour day-of-month month-of-year day-of-week commands </span><br><span class="line"># 合法值 00-59 00-23 01-31 01-12 0-6 (0 is sunday) </span><br></pre></td></tr></table></figure><p>除了数字还有几个个特殊的符号就是<code>&quot;*&quot;、&quot;/&quot;和&quot;-&quot;、&quot;,&quot;</code>，</p><blockquote><ul><li>“*”  代表所有的取值范围内的数字</li><li>“&#x2F;“  代表每的意思，”&#x2F;5”表示每5个单位</li><li>“-“  代表从某个数字到某个数字</li><li>“,”  分开几个离散的数字</li></ul></blockquote><p>crontab常用指令：</p><table><thead><tr><th align="center">指令</th><th>描述</th></tr></thead><tbody><tr><td align="center">-l</td><td>在标准输出上<code>显示</code>当前的crontab。</td></tr><tr><td align="center">-r</td><td><code>删除</code>当前的crontab文件。</td></tr><tr><td align="center">-e</td><td>使用VISUAL或者EDITOR环境变量所指的<code>编辑</code>器编辑当前的crontab文件。当结束编辑离开时，编辑后的文件将自动安装。</td></tr></tbody></table><h3 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h3><ul><li>写cron脚本文件，命名为<code>mysqlRollBack.cron</code>。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 2 * * * /root/mysql_backup_script.sh</span><br></pre></td></tr></table></figure><ul><li>添加定时任务。执行命令</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab mysqlRollback.cron</span><br></pre></td></tr></table></figure><ul><li><code>&quot;crontab -l&quot;</code> 查看定时任务是否成功或者检测<code>/var/spool/cron</code>下是否生成对应cron脚本</li></ul><blockquote><p> <code>注：这操作是直接替换该用户下的crontab，而不是新增</code></p></blockquote><p>以下是我的测试每分钟的截图效果，其对应代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* * * * * /root/mysql_backup_script.sh</span><br></pre></td></tr></table></figure><p>效果截图：<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2021/12/10/Ck1TtQpem5UqE7i.png"></p><p>其中的log.txt记录备份的操作详细日志：<br><img src= "/img/loading.gif" data-src="https://s2.loli.net/2021/12/10/ljRg5ObGPhBo2vF.png"></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><ul><li>每天早上6点</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了</span><br><span class="line">0 6 * * * echo &quot;Good morning.&quot; &gt;&gt; /tmp/test.txt</span><br></pre></td></tr></table></figure><ul><li>每两个小时</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 */2 * * * echo &quot;Have a break now.&quot; &gt;&gt; /tmp/test.txt</span><br></pre></td></tr></table></figure><ul><li>晚上11点到早上8点之间每两个小时和早上八点</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 23-7/2，8 * * * echo &quot;Have a good dream&quot; &gt;&gt; /tmp/test.txt</span><br></pre></td></tr></table></figure><ul><li>每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 11 4 * 1-3 command line</span><br></pre></td></tr></table></figure><ul><li>1 月 1 日早上 4 点</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME=/</span><br><span class="line">0 4 1 1 * command line SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root</span><br></pre></td></tr></table></figure><ul><li>每小时执行&#x2F;etc&#x2F;cron.hourly内的脚本</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01 * * * * root run-parts /etc/cron.hourly</span><br></pre></td></tr></table></figure><ul><li>每天执行&#x2F;etc&#x2F;cron.daily内的脚本</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">02 4 * * * root run-parts /etc/cron.daily</span><br></pre></td></tr></table></figure><ul><li>每星期执行&#x2F;etc&#x2F;cron.weekly内的脚本</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">22 4 * * 0 root run-parts /etc/cron.weekly</span><br></pre></td></tr></table></figure><ul><li>每月去执行&#x2F;etc&#x2F;cron.monthly内的脚本</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 注： &quot;run-parts&quot;如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。</span><br><span class="line">42 4 1 * * root run-parts /etc/cron.monthly</span><br></pre></td></tr></table></figure><ul><li>每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5，15，25，35，45，55 16，17，18 * * * command</span><br></pre></td></tr></table></figure><ul><li>每周一，三，五的下午3：00系统进入维护状态，重新启动系统。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00 15 * * 1，3，5 shutdown -r +5</span><br></pre></td></tr></table></figure><ul><li>每小时的10分，40分执行用户目录下的innd&#x2F;bbslin这个指令：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10，40 * * * * innd/bbslink</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 定时备份 </tag>
            
            <tag> crontab脚本 </tag>
            
            <tag> bash脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux CPU使用率与负载过高解决思路</title>
      <link href="/2021/12/08/Linux%20CPU%E4%BD%BF%E7%94%A8%E7%8E%87%E4%B8%8E%E8%B4%9F%E8%BD%BD%E8%BF%87%E9%AB%98%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/"/>
      <url>/2021/12/08/Linux%20CPU%E4%BD%BF%E7%94%A8%E7%8E%87%E4%B8%8E%E8%B4%9F%E8%BD%BD%E8%BF%87%E9%AB%98%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="查看系统CPU负载及使用率"><a href="#查看系统CPU负载及使用率" class="headerlink" title="查看系统CPU负载及使用率"></a>查看系统CPU负载及使用率</h1><p>命令分别有：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看进程级别的cpu使用情况</span></span><br><span class="line">top</span><br><span class="line"><span class="comment"># 查看系统级别的cpu使用情况</span></span><br><span class="line">vmstat</span><br></pre></td></tr></table></figure><h2 id="top-命令"><a href="#top-命令" class="headerlink" title="top 命令"></a>top 命令</h2><p>可以查看进程的CPU、内存等资源的使用情况</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2021/12/08/V4Jdeh2cWsak83I.png"></p><p>在top命令运行过程中可以<code>通过top的内部命令做显示方式的控制</code>：  </p><table><thead><tr><th align="center">命  令</th><th>描  述</th></tr></thead><tbody><tr><td align="center">1</td><td>开启或关闭显示所有cpu使用详细情况</td></tr><tr><td align="center">l</td><td>关闭或开启第一部分<code>第一行</code> top 信息的表示</td></tr><tr><td align="center">t</td><td>关闭或开启第一部分<code>第二行</code> Tasks 和<code>第三行</code> Cpus 信息的表示</td></tr><tr><td align="center">m</td><td>关闭或开启第一部分<code>第四行</code> Mem 和 <code>第五行</code> Swap 信息的表示</td></tr><tr><td align="center">N</td><td>以 <code>PID 的大小</code>的顺序排列表示进程列表（第三部分后述）</td></tr><tr><td align="center">P</td><td>以 <code>CPU 占用率大小</code>的顺序排列进程列表 （第三部分后述）</td></tr><tr><td align="center">M</td><td>以<code>内存占用率大小</code>的顺序排列进程列表 （第三部分后述）</td></tr><tr><td align="center">h</td><td>显示帮助</td></tr><tr><td align="center">n</td><td>设置在进程列表所显示进程的数量</td></tr><tr><td align="center">q</td><td>退出 top</td></tr><tr><td align="center">s</td><td>改变画面更新频率（输入数字）</td></tr></tbody></table><h2 id="vmstat命令"><a href="#vmstat命令" class="headerlink" title="vmstat命令"></a>vmstat命令</h2><p>可以查看系统整体的cpu，内存的使用情况</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2021/12/08/2SxVKWCYdgsIJuG.png"></p><table><thead><tr><th align="center">属  性</th><th>描  述</th></tr></thead><tbody><tr><td align="center">r</td><td>表示<code>系统中 CPU 等待处理的线程</code>。由于 <code>CPU 每次只能处理一个线程，所以，该数值越大，通常表示系统运行越慢</code>。</td></tr><tr><td align="center">us</td><td><code>用户模式</code>消耗的 CPU 时间百分比。<code>该值较高时，说明用户进程消耗的 CPU 时间比较多</code>，比如，如果<code>该值长期超过 50%，则需要对程序算法或代码等进行优化</code>。</td></tr><tr><td align="center">sy</td><td><code>内核模式</code>消耗的 CPU 时间百分比。</td></tr><tr><td align="center">wa</td><td><code>IO 等待消耗</code>的 CPU 时间百分比。<code>该值较高时，说明 IO 等待比较严重，这可能磁盘大量作随机访问造成的，也可能是磁盘性能出现了瓶颈</code>。</td></tr><tr><td align="center">id</td><td><code>处于空闲状态</code>的 CPU 时间百分比。如果<code>该值持续为 0，同时 sy 是 us 的两倍，则通常说明系统则面临着 CPU 资源的短缺</code>。</td></tr></tbody></table><h1 id="操作进程CPU占用和负载较高"><a href="#操作进程CPU占用和负载较高" class="headerlink" title="操作进程CPU占用和负载较高"></a>操作进程CPU占用和负载较高</h1><h2 id="使用top直接终止cpu消耗大的进程"><a href="#使用top直接终止cpu消耗大的进程" class="headerlink" title="使用top直接终止cpu消耗大的进程"></a>使用top直接终止cpu消耗大的进程</h2><p>top命令查看对cpu消耗大的进程，直接输入<code>&quot;k&quot;</code>，然后<code>输入相应进程的PID号</code>即可终止该进程。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2021/12/08/KbDx3hSd8Rfzpri.png"></p><h2 id="通过top观察cpu很空闲，但是负载比较高的情况"><a href="#通过top观察cpu很空闲，但是负载比较高的情况" class="headerlink" title="通过top观察cpu很空闲，但是负载比较高的情况"></a>通过top观察cpu很空闲，但是负载比较高的情况</h2><p>load average 是对CPU负载的评估，<code>其值越高，说明其任务队列越长，处于等待执行的任务越多</code>。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2021/12/08/V4Jdeh2cWsak83I.png"></p><p>出现此种情况时，可能是由于僵死进程导致的。可以通过指令<code>ps -axjf </code> 查看<code>是否存在 D 状态进程</code>。</p><blockquote><p>D 状态：是指<code>不可中断的睡眠状态</code>。该状态的进程<code>无法被kill，也无法自行退出</code>。只能通过<code>恢复其依赖的资源</code>或者<code>重启系统</code>来解决。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 使用率 </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apifox自动化测试一体化协作平台</title>
      <link href="/2021/11/03/Apifox%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B8%80%E4%BD%93%E5%8C%96%E5%8D%8F%E4%BD%9C%E5%B9%B3%E5%8F%B0/"/>
      <url>/2021/11/03/Apifox%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%B8%80%E4%BD%93%E5%8C%96%E5%8D%8F%E4%BD%9C%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Apifox介绍"><a href="#Apifox介绍" class="header-anchor"></a> Apifox 介绍</h2><p>Apifox 是 API 文档、API 调试、API Mock、API 自动化测试一体化协作平台，定位 Postman + Swagger + Mock + JMeter。通过一套系统、一份数据，解决多个系统之间的数据同步问题。只要定义好 API 文档，API 调试、API 数据 Mock、API 自动化测试就可以直接使用，无需再次定义；API 文档和 API 开发调试使用同一个工具，API 调试完成后即可保证和 API 文档定义完全一致。高效、及时、准确！</p><h2 id="接口管理现状"><a href="#接口管理现状" class="header-anchor"></a> 接口管理现状</h2> <h3 id="常用解决方案"><a href="#常用解决方案" class="header-anchor"></a> 常用解决方案</h3> <ol><li>使用 Swagger 管理 API 文档</li> <li>使用 Postman 调试 API</li> <li>使用 RAP 等工具 Mock API 数据</li> <li>使用 JMeter 做 API 自动化测试</li></ol> <h3 id="存在的问题"><a href="#存在的问题" class="header-anchor"></a> 存在的问题</h3> <p>维护不同工具之间数据一致性非常困难、低效。并且这里不仅仅是工作量的问题，更大的问题是多个系统之间数据不一致，导致协作低效、频繁出问题，开发测试人员痛苦不堪。</p> <ol><li>开发人员在 Swagger 定义好文档后，接口调试的时候还需要去 Postman 再定义一遍。</li> <li>前端开发 Mock 数据的时候又要去 RAP 定义一遍，还需要手动设置 Mock 规则。</li> <li>测试人员需要去 JMeter 再定义一遍。</li> <li>前端根据 RAP Mock 出来的数据开发完，后端根据 Swagger 定义的接口文档开发完，各自都试测试通过了，本以为可以马上上线，结果一对接发现各种问题：<ul><li>开发过程中接口变更了，只修改了 Swagger，但是没有及时同步修改 RAP。</li> <li>后端开发的接口数据类型和文档不一致，肉眼难以发现问题。</li></ul></li> <li>同样，测试在 JMeter 写好的测试用例，真正运行的时候也会发现各种不一致。</li> <li>时间久了，各种不一致会越来越严重。</li></ol> <h2 id="apifox-解决方案"><a href="#apifox-解决方案" class="header-anchor"></a> Apifox 解决方案</h2> <h3 id="如何解决这些问题"><a href="#如何解决这些问题" class="header-anchor"></a> 如何解决这些问题</h3> <h4 id="_1、apifox-定位"><a href="#_1、apifox-定位" class="header-anchor"></a> 1、Apifox 定位</h4> <p><code>Apifox = Postman + Swagger + Mock + JMeter</code></p> <p>Apifox 是 API 文档、API 调试、API Mock、API 自动化测试一体化协作平台。</p> <p>通过一套系统、一份数据，解决多个系统之间的数据同步问题。只要定义好接口文档，接口调试、数据 Mock、接口测试就可以直接使用，无需再次定义；接口文档和接口开发调试使用同一个工具，接口调试完成后即可保证和接口文档定义完全一致。高效、及时、准确！</p> <h4 id="_2、apifox-功能"><a href="#_2、apifox-功能" class="header-anchor"></a> 2、Apifox 功能</h4> <ol><li><strong>接口设计</strong>：Apifox 接口文档遵循 <a href="https://www.openapis.org/" target="_blank" rel="noopener noreferrer">OpenApi</a> 3.0 (原 Swagger)、<a href="https://json-schema.org/" target="_blank" rel="noopener noreferrer">JSON Schema</a> 规范的同时，提供了非常好用的<code>可视化</code>文档管理功能，零学习成本，非常高效。并且支持在线分享接口文档。</li> <li><strong>数据模型</strong>：可复用的数据结构，定义接口<code>返回数据结构</code>及<code>请求参数数据结构</code>（仅 JSON 和 XML 模式）时可直接引用。支持模型直接嵌套引用，直接 JSON/XML 智能导入，支持 oneOf、allOf 等高级组合模式。</li> <li><strong>接口调试</strong>：Postman 有的功能，比如环境变量、前置/后置脚本、Cookie/Session 全局共享 等功能，Apifox 都有，并且比 Postman 更高效好用。接口运行完之后点击<code>保存为用例</code>按钮，即可生成<code>接口用例</code>，后续可直接运行接口用例，无需再输入参数，非常方便。自定义脚本 100% 兼容 Postman 语法，并且支持运行 javascript、java、python、php、js、BeanShell、go、shell、ruby、lua 等各种语言代码。</li> <li><strong>接口用例</strong>：通常一个接口会有多种情况用例，比如<code>参数正确</code>用例、<code>参数错误</code>用例、<code>数据为空</code>用例、<code>不同数据状态</code>用例等等。运行接口用例时会自动校验数据正确性，用接口用例来调试接口非常高效。</li> <li><strong>接口数据 Mock</strong>：内置 <a href="http://mockjs.com/" target="_blank" rel="noopener noreferrer">Mock.js</a> 规则引擎，非常方便 mock 出各种数据，并且可以在定义数据结构的同时写好 mock 规则。支持添加“期望”，根据请求参数返回不同 mock 数据。最重要的是 Apifox <code>零配置</code> 即可 Mock 出非常人性化的数据，具体在本文后面介绍。</li> <li><strong>数据库操作</strong>：支持读取数据库数据，作为接口请求参数使用。支持读取数据库数据，用来校验(断言)接口请求是否成功。</li> <li><strong>接口自动化测试</strong>：提供接口集合测试，可以通过选择接口（或接口用例）快速创建测试集。目前接口自动化测试更多功能还在开发中，敬请期待！目标是： JMeter 有的功能基本都会有，并且要更好用。</li> <li><strong>快捷调试</strong>：类似 Postman 的接口调试方式，主要用途为临时调试一些<code>无需文档化</code>的接口，无需提前定义接口即可快速调试。</li> <li><strong>代码生成</strong>：根据接口及数据数据模型定义，系统自动生成<code>接口请求代码</code>、<code>前端业务代码</code>及<code>后端业务代码</code>。</li> <li><strong>团队协作</strong>：Apifox 天生就是为团队协作而生的，接口云端实时同步更新，成熟的<code>团队/项目/成员权限</code>管理，满足各类企业的需求。</li></ol> <h3 id="apifox-做的不仅仅是数据打通"><a href="#apifox-做的不仅仅是数据打通" class="header-anchor"></a> Apifox 做的不仅仅是数据打通</h3> <p>如果你认为 <a href="https://www.apifox.cn/" target="_blank" rel="noopener noreferrer">Apifox</a> 只做了数据打通，来提升研发团队的效率，那就错了。Apifox 还做了非常多的创新，来提升开发人员的效率。</p> <h4 id="_1、接口支持-用例管理"><a href="#_1、接口支持-用例管理" class="header-anchor"></a> 1、接口支持“用例管理”</h4> <p>通常一个接口会有多种情况用例，比如 <code>正确用例</code> <code>参数错误用例</code> <code>数据为空用例</code> <code>不同数据状态用例</code>。定义接口的时候定义好这些不同状态的用例，接口调试的时候直接运行，非常高效。</p> <h4 id="_2、-数据模型-定义、引用"><a href="#_2、-数据模型-定义、引用" class="header-anchor"></a> 2、“数据模型”定义、引用</h4> <p>可以独立定义数据模型，接口定义时可以直接引用数据模型，数据模型之间也可以相互引用。同样的数据结构，只需要定义一次即可多处使用；修改的时候只需要修改一处，多处实时更新，避免不一致。</p> <h4 id="_3、调试时-自动校验-数据结构"><a href="#_3、调试时-自动校验-数据结构" class="header-anchor"></a> 3、调试时“自动校验”数据结构</h4> <p>使用 Apifox 调试接口的时候，系统会根据接口文档里的定义，自动校验返回的数据结构是否正确，无需通过肉眼识别，也无需手动写断言脚本检测，非常高效！</p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/auto-validation-response-schema.jpg" alt="Apifox 自动校验数据结构"></p> <h4 id="_4、-可视化-设置断言"><a href="#_4、-可视化-设置断言" class="header-anchor"></a> 4、“可视化”设置断言</h4> <p>设置断言：</p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/assertion-1.png" alt="Apifox 设置断言"></p> <p>运行后，查看断言结果：</p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/assertion-2.png" alt=""></p> <h4 id="_5、-可视化-设置提取变量"><a href="#_5、-可视化-设置提取变量" class="header-anchor"></a> 5、“可视化”设置提取变量</h4> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/extractor-1.png" alt=""></p> <h4 id="_6、支持数据库操作"><a href="#_6、支持数据库操作" class="header-anchor"></a> 6、支持数据库操作</h4> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/database-1.jpg" alt=""></p> <h4 id="_7、-零配置-mock-出非常人性化的数据"><a href="#_7、-零配置-mock-出非常人性化的数据" class="header-anchor"></a> 7、“零配置”Mock 出非常人性化的数据</h4> <p>先放一张图对比下 <a href="https://www.apifox.cn/" target="_blank" rel="noopener noreferrer">Apifox</a> 和其他同类工具 <code>零配置</code> mock 出来的数据效果：</p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/mock-result-compare.jpg" alt="Apifox Mock 数据结果对比同类工具"></p> <p>可以看出 Apifox <code>零配置</code> Mock 出来的数据和真实情况是非常接近的，前端开发可以直接使用，而无需再手动写 mock 规则。</p> <p><strong>Apifox 如何做到<code>高效率</code>、<code>零配置</code>生成非常人性化的 mock 数据</strong></p> <ol><li>Apifox 根据接口定义里的数据结构、数据类型，自动生成 mock 规则。</li> <li>Apifox 内置智能 mock 规则库，根据字段名、字段数据类型，智能优化自动生成的 mock 规则。如：名称包含字符串<code>image</code>的<code>string</code>类型字段，自动 mock 出一个图片地址 URL；包含字符串<code>time</code>的<code>string</code>类型字段，自动 mock 出一个时间字符串；包含字符串<code>city</code>的<code>string</code>类型字段，自动 mock 出一个城市名。</li> <li>Apifox 根据内置规则，可自动识别出图片、头像、用户名、手机号、网址、日期、时间、时间戳、邮箱、省份、城市、地址、IP 等字段，从而 Mock 出非常人性化的数据。</li> <li>除了内置 mock 规则，用户还可以自定义规则库，满足各种个性化需求。支持使用 <code>正则表达式</code>、<code>通配符</code> 来匹配字段名自定义 mock 规则。</li></ol> <h4 id="_8、生成在线接口文档"><a href="#_8、生成在线接口文档" class="header-anchor"></a> 8、生成在线接口文档</h4> <p>Apifox 项目可“在线分享” API 文档，分享出去的 API 文档可设置为公开或需要密码访问，非常方便与外部团队协作。</p> <p>体验地址：<a href="https://www.apipark.cn/s/ce387612-cfdb-478a-b604-b96d1dbc511b/http/5041285" target="_blank" rel="noopener noreferrer">https://www.apipark.cn/s/ce387612-cfdb-478a-b604-b96d1dbc511b/http/5041285</a></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/assets/image/article/main/shared-doc-1.png" alt=""></p> <h4 id="_9、代码自动生成"><a href="#_9、代码自动生成" class="header-anchor"></a> 9、代码自动生成</h4> <p>根据接口模型定义，自动生成各种语言/框架（如 TypeScript、Java、Go、Swift、ObjectiveC、Kotlin、Dart、C++、C#、Rust 等）的业务代码（如 Model、Controller、单元测试代码等）和接口请求代码。目前 Apifox 支持 130 种语言及框架的代码自动生成。</p> <p>更重要的是：你可以通过<code>自定义代码模板</code>来生成符合自己团队的架构规范的代码，满足各种个性化的需求。</p> <h4 id="_10、导入、导出"><a href="#_10、导入、导出" class="header-anchor"></a> 10、导入、导出</h4> <ol><li>支持导出 <code>OpenApi (Swagger)</code>、<code>Markdown</code>、<code>Html</code> 等数据格式，因为可以导出<code>OpenApi</code>格式数据，所以你可以利用 OpenApi (Swagger) 丰富的生态工具完成各种接口相关的事情。</li> <li>支持导入 <code>OpenApi (Swagger)</code>、<code>Postman</code>、<code>HAR</code>、<code>RAML</code>、<code>RAP2</code>、<code>YApi</code>、<code>Eolinker</code>、<code>NEI</code>、<code>DOClever</code>、<code>ApiPost</code> 、<code>Apizza</code> 、<code>ShowDoc</code>、<code>API Blueprint</code>、<code>I/O Docs</code>、<code>WADL</code>、<code>Google Discovery</code>等数据格式，方便旧项目迁移。</li></ol> <h3 id="后续功能规划"><a href="#后续功能规划" class="header-anchor"></a> 后续功能规划</h3> <ol><li>接口性能测试支持（类似 JMeter）。</li> <li>支持插件市场，可以自己开发插件。</li> <li>支持更多接口协议，如<code>GraphQL</code>、<code>websocket</code>等。</li> <li>支持离线使用，项目可选择在线同步（团队协作）还是仅本地存储（单机离线使用）。</li></ol> <h3 id="更多-apifox-功能截图"><a href="#更多-apifox-功能截图" class="header-anchor"></a> 更多 Apifox 功能截图</h3> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-api-case-1.png" alt="接口调试"></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-api-case-2.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-api-definition-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-schema-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-api-definition-2.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-test-case-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-test-case-2.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-test-case-3.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-test-case-4.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-mock-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-mock-2.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-mock-3.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-codegen-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-codegen-2.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-setting-import-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/dark-apifox-setting-export-1.png" alt=""></p> <p><img src= "/img/loading.gif" data-src="https://cdn.apifox.cn/www/screenshot/light-apifox-theme-1.png" alt="Apifox 多种主题色可选"></p> <h3 id="-apifox-下载地址"><a href="#-apifox-下载地址" class="header-anchor"></a>  Apifox 下载地址</h3> <p>请访问 Apifox 官网下载：<a href="https://www.apifox.cn/" target="_blank" rel="noopener noreferrer">https://www.apifox.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 敏捷开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apifox </tag>
            
            <tag> Mock </tag>
            
            <tag> JMeter </tag>
            
            <tag> Swagger </tag>
            
            <tag> Postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经纬度的Geohash算法与两点距离算法</title>
      <link href="/2021/11/02/%E7%BB%8F%E7%BA%AC%E5%BA%A6%E7%9A%84Geohash%E7%AE%97%E6%B3%95%E4%B8%8E%E4%B8%A4%E7%82%B9%E8%B7%9D%E7%A6%BB%E7%AE%97%E6%B3%95/"/>
      <url>/2021/11/02/%E7%BB%8F%E7%BA%AC%E5%BA%A6%E7%9A%84Geohash%E7%AE%97%E6%B3%95%E4%B8%8E%E4%B8%A4%E7%82%B9%E8%B7%9D%E7%A6%BB%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="获取经纬度"><a href="#获取经纬度" class="headerlink" title="获取经纬度"></a>获取经纬度</h1><p>百度地图提供了web开发、Android开发、IOS开发和服务端接口方面的对接方案，在此讲述服务端接口中的Web服务API。</p><blockquote><p>Web服务API为开发者提供http&#x2F;https接口，即开发者通过http&#x2F;https形式发起检索请求，获取返回json或xml格式的检索数据。可以基于JavaScript、C#、C++、Java等语言的地图应用开发。</p></blockquote><h2 id="获取密钥"><a href="#获取密钥" class="headerlink" title="获取密钥"></a>获取密钥</h2><blockquote><p>传送门：<a href="https://lbsyun.baidu.com/index.php?title=webapi">百度地图开放平台</a></p></blockquote><ul><li>登录百度地图开放平台在左侧导航栏中，点击”获取密钥”</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/YfeU6cbwFAJNsPv.png"></p><ul><li>登录并获得激活邮件后，点击邮件中的跳转链接，来到如下界面，点击<code>&quot;申请密钥&quot;</code></li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/uvSD5fkbP9Tqozh.png"></p><ul><li>来到”创建应用”界面，如下所述做配置后，按”提交”</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/KUob6ayND8VXinR.png"><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/tWU1FCXcViKaIH7.png"></p><p>点击复制密钥，供程序代码使用<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/NXUE1xojIWfpOlB.png"></p><blockquote><p>注：<code>百度地图api个人认证AK（免费），日配额限制6000个。使用达到上限需要第二天再用，或者更换AK（即密钥）。</code></p></blockquote><h2 id="示例代码一：地址获取"><a href="#示例代码一：地址获取" class="headerlink" title="示例代码一：地址获取"></a>示例代码一：地址获取</h2><p>用户可通过将结构化地址（<code>省/市/区/街道/门牌号</code>）解析为对应的位置坐标。<code>地址结构越完整，地址内容越准确，解析的坐标精度越高</code>。如：北京市海淀区上地十街十号。</p><blockquote><p>传送门：<a href="https://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-geocoding">接口参数文档</a>、<a href="https://lbsyun.baidu.com/index.php?title=androidsdk/guide/addition-func/errorcode">错误码对照表</a></p></blockquote><ul><li>调用链接，新用户使用3.0版本接口<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/m3dv2wN5bZAQFJ7.png"></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Geolocation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 地理位置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/28 10:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Geolocation</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 百度地图密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AK</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 百度地图API</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;https://api.map.baidu.com/geocoding/v3/?output=json&amp;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">    <span class="keyword">static</span> Map&lt;String, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;广州天河城&quot;</span>;</span><br><span class="line">        Map&lt;String, String&gt; msgMap = getCoordinate(address);</span><br><span class="line">        System.out.println(<span class="string">&quot;msgMap 数据：&quot;</span> + msgMap);</span><br><span class="line">        System.out.println(<span class="string">&quot;&#x27;&quot;</span> + address + <span class="string">&quot;&#x27;的经纬度为：&quot;</span> + msgMap.get(<span class="string">&quot;lng&quot;</span>) + <span class="string">&quot;，&quot;</span> + msgMap.get(<span class="string">&quot;lat&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据地址，获取相关信息</span></span><br><span class="line"><span class="comment">     * json数据格式</span></span><br><span class="line"><span class="comment">     * &#123;&quot;status&quot;:0,&quot;result&quot;:&#123;&quot;location&quot;:&#123;&quot;lng&quot;:113.009109696642,&quot;lat&quot;:28.192963234242119&#125;,&quot;precise&quot;:0,&quot;confidence&quot;:50,&quot;comprehension&quot;:0,&quot;level&quot;:&quot;NoClass&quot;&#125;&#125;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * status：成功返回0</span></span><br><span class="line"><span class="comment">     * lng：经度</span></span><br><span class="line"><span class="comment">     * lat：纬度</span></span><br><span class="line"><span class="comment">     * precise：1为精确查找、0为模糊打点</span></span><br><span class="line"><span class="comment">     * confidence：误差范围</span></span><br><span class="line"><span class="comment">     * comprehension：地址精确程度，分值范围0-100，分值越大，服务对地址精确程度越高</span></span><br><span class="line"><span class="comment">     * level：地址类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">getCoordinate</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; fieldMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (address != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(address)) &#123;</span><br><span class="line">            <span class="comment">// \s*为空字符串，如&#x27; &#x27;</span></span><br><span class="line">            address = address.replaceAll(<span class="string">&quot;\\s*&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;#&quot;</span>, <span class="string">&quot;栋&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> <span class="string">&quot;address=&quot;</span> + address + <span class="string">&quot;&amp;ak=&quot;</span> + AK;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> loadJSON(URL + param);</span><br><span class="line">            <span class="keyword">if</span> (json != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(json)) &#123;</span><br><span class="line">                map = JSON.parseObject(json, Map.class);</span><br><span class="line">                fieldMap = analyticalField(map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fieldMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json数据转化成Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">analyticalField</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        Set&lt;Map.Entry&lt;String, Object&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : entrySet) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;result&quot;</span>.equals(entry.getKey()) || <span class="string">&quot;location&quot;</span>.equals(entry.getKey())) &#123;</span><br><span class="line">                analyticalField(JSON.parseObject(entry.getValue().toString(), Map.class));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;lng&quot;</span>.equals(entry.getKey()) || <span class="string">&quot;lat&quot;</span>.equals(entry.getKey())) &#123;</span><br><span class="line">                    <span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.######&quot;</span>);</span><br><span class="line">                    hashMap.put(entry.getKey(), df.format(entry.getValue()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    hashMap.put(entry.getKey(), entry.getValue().toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求百度地图链接，获取相关信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">loadJSON</span><span class="params">(String urlStr)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputLine</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(urlStr);</span><br><span class="line">            <span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> url.openConnection();</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(urlConnection.getInputStream(), StandardCharsets.UTF_8));</span><br><span class="line">            <span class="keyword">while</span> ((inputLine = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                builder.append(inputLine);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">msgMap 数据：&#123;lng=<span class="number">113</span>.<span class="number">330431</span>, level=商圈, confidence=<span class="number">50</span>, precise=<span class="number">0</span>, comprehension=<span class="number">100</span>, lat=<span class="number">23</span>.<span class="number">138092</span>, status=<span class="number">0</span>&#125;</span><br><span class="line">&#x27;广州天河城&#x27;的经纬度为：<span class="number">113</span>.<span class="number">330431</span>，<span class="number">23</span>.<span class="number">138092</span></span><br></pre></td></tr></table></figure><p>在广州的一定知道，天河区、越秀区、番禺区都有”天河城”，那这个经纬度是哪个区的呢？</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&#x27;广州天河城&#x27;的经纬度为：   <span class="number">113</span>.<span class="number">330431</span>，<span class="number">23</span>.<span class="number">138092</span></span><br><span class="line">&#x27;广州天河天河城&#x27;的经纬度为：<span class="number">113</span>.<span class="number">330431</span>，<span class="number">23</span>.<span class="number">138092</span></span><br><span class="line">&#x27;广州越秀天河城&#x27;的经纬度为：<span class="number">113</span>.<span class="number">27646</span>，<span class="number">23</span>.<span class="number">125892</span></span><br><span class="line">&#x27;广州番禺天河城&#x27;的经纬度为：<span class="number">113</span>.<span class="number">354771</span>，<span class="number">23</span>.<span class="number">00962</span></span><br></pre></td></tr></table></figure><p>据上述结果可知<code>不指定区域</code>的话，定位到的经纬度是<code>天河区的天河城</code>，两种可能性：</p><blockquote><ol><li>用权重值来判断，毕竟天河区的天河城是最繁华的地段嘛！</li><li>关键字分词解析求交集，与elasticsearch搜索引擎同理<code>(倾向于此点）</code></li></ol></blockquote><h2 id="示例代码二：IP获取"><a href="#示例代码二：IP获取" class="headerlink" title="示例代码二：IP获取"></a>示例代码二：IP获取</h2><p>利用IP获取大致位置，调用API接口，返回请求参数中指定上网IP的大致位置信息（一般为城市级别），位置信息包括：经纬度、省、市等地址信息。<br><code>目前该服务同时支持IPv4和IPv6来获取位置信息。普通IP定位服务目前不支持海外场景</code>。<br>如果请求参数中未指定上网IP，则默认返回当前服务请求来源的IP所对应的大致位置信息。<br><code>注意：该服务所返回的经纬度信息只是一个大概的位置，一般为城市中心点。</code></p><blockquote><p>传送门：<a href="https://lbsyun.baidu.com/index.php?title=webapi/ip-api">接口参数文档</a></p></blockquote><p>拿示例代码一修改下<code>URL调用地址</code>和<code>analyticalField方法</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区域API</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;http://api.map.baidu.com/location/ip?&amp;coor=bd09ll&amp;&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * json数据转化成Map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">analyticalField</span><span class="params">(Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">Set&lt;Map.Entry&lt;String, Object&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : entrySet) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;content&quot;</span>.equals(entry.getKey()) || <span class="string">&quot;address_detail&quot;</span>.equals(entry.getKey())</span><br><span class="line">|| <span class="string">&quot;point&quot;</span>.equals(entry.getKey())) &#123;</span><br><span class="line">analyticalField(JSON.parseObject(entry.getValue().toString(), Map.class));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">hashMap.put(entry.getKey(), entry.getValue().toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hashMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="string">&quot;203.168.30.174&quot;</span>;</span><br><span class="line">Map&lt;String, String&gt; msgMap = getCoordinate(addr);</span><br><span class="line">System.out.println(<span class="string">&quot;msgMap 数据：&quot;</span> + msgMap);</span><br><span class="line">System.out.println(String.format(<span class="string">&quot;IP地址区域为：%s；经纬度为：%s&quot;</span>, StringUtils.isEmpty(msgMap.get(<span class="string">&quot;city&quot;</span>))?msgMap.get(<span class="string">&quot;address&quot;</span>):msgMap.get(<span class="string">&quot;city&quot;</span>),msgMap.get(<span class="string">&quot;x&quot;</span>)+<span class="string">&quot;，&quot;</span>+msgMap.get(<span class="string">&quot;y&quot;</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">msgMap 数据：&#123;address=广东省, province=广东省, adcode=<span class="number">440000</span>, city=, street=, district=, street_number=, x=<span class="number">113</span>.<span class="number">27143134</span>, city_code=, y=<span class="number">23</span>.<span class="number">13533631</span>, status=<span class="number">0</span>&#125;</span><br><span class="line">IP地址区域为：广东省；经纬度为：<span class="number">113</span>.<span class="number">27143134</span>，<span class="number">23</span>.<span class="number">13533631</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>注意：返回结果中有两个address键值对，因用HashMap封装数据可知，后者键值覆盖了前者键值</code></p><h2 id="后述"><a href="#后述" class="headerlink" title="后述"></a>后述</h2><p>在实际项目开发应用中，可批量处理多个地址信息获取到对应的经纬度，从而保存到数据库中。如果项目需要批量获取经纬度，下面代码需修改</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/29/URLtC6GD7WlK4AT.png"></p><p>loadJSON()方法每次都会新建URL对象，并开启一个openConnection()到远程目标的连接，数据量大的话肯定会造成内存溢出。</p><blockquote><p><code>解决方案：改用线程池，使用同一URL对象，每个线程预建一个openConnection()；线程启动都使用openConnection()得到同一URLConnection对象。</code></p></blockquote><h1 id="Geohash算法"><a href="#Geohash算法" class="headerlink" title="Geohash算法"></a>Geohash算法</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><blockquote><p><code>Geohashes是一种将经纬度坐标编码成一个字符串的方式</code></p></blockquote><p>经度范围是东经180到西经180，纬度范围是南纬90到北纬90，设定西经与南纬为负，所以地球上的经度范围就是[-180，180]，纬度范围就是[-90，90]。</p><p>如果以本初子午线(0经线)、赤道为界，纬度范围<code>(-90,0)用二进制0代表</code>，<code>（0,90)用二进制1代表</code>，<code>经度范围(-180,0)用二进制0代表</code>，<code>（0,180)用二进制1代表</code>，那么地球可以分成如下4个部分<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/pzW7r9m1IvX2j4q.png"></p><p>继续将<code>(-90,0)分成(-90,-45)、(-45,0)</code>；<code>(0,90)分成(0,45)、(45,90)</code>；<code>(-180,0)分成(-180,-90)、(-90,0)</code>；<code>(0,180)分成(0,90)、(90,180)</code>依次小块范围内递归对半划分<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/2mR1VLobkJy7GIS.png"></p><blockquote><p><code>Geohash算法通过将经纬度编码，地理位置分区，划分的次数越多，区域越多，区域面积越小了，精确度越高。</code></p></blockquote><h2 id="延伸问题"><a href="#延伸问题" class="headerlink" title="延伸问题"></a>延伸问题</h2><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/02/B5Ffl3ZhRCPULtk.jpg"></p><p>如图，如红点位置，区域内还有一个黄点。相邻区域内的绿点明显离红点更近。但因为黄点的编码和红点一样，最终找到的将是黄点。<br>问题来了，编码相近的两个点，真实距离并不一定很近，这需要实际计算出两个点的距离。要解决这个问题，首先要查找出<code>红点周边8个区域</code>，再根据Geohash筛选出附近点的经纬度，相互<code>计算得出哪个点离红点更近(示例代码三)</code>即可。</p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><h3 id="将经纬度变成二进制"><a href="#将经纬度变成二进制" class="headerlink" title="将经纬度变成二进制"></a>将经纬度变成二进制</h3><p>如（116.390705，39.923201）纬度的范围是（-90，90），其中间值为0。对于纬度39.923201，在区间（0，90）中，因此得到一个1；（0，90）区间的中间值为45度，纬度39.923201小于45，因此得到一个0，依次递归拆分20次计算，得到纬度的二进制表示，如下表：<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/A7tgX5JdTlf32k1.jpg"></p><p>得到纬度的二进制为：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">10111</span> <span class="number">00011</span> <span class="number">00011</span> <span class="number">11001</span></span><br></pre></td></tr></table></figure><p>同理得到经度116.390705的二进制为：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">11010</span> <span class="number">01011</span> <span class="number">00010</span> <span class="number">00100</span></span><br></pre></td></tr></table></figure><h3 id="将经纬度合并"><a href="#将经纬度合并" class="headerlink" title="将经纬度合并"></a>将经纬度合并</h3><p>经度占偶数位，纬度占奇数位，0也是偶数位。</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="number">11100</span> <span class="number">11101</span> <span class="number">00100</span> <span class="number">01111</span> <span class="number">00000</span> <span class="number">01101</span> <span class="number">01011</span> <span class="number">00001</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/NWgMVdpYrRfXlaP.png">  </p><h3 id="Base32进行编码"><a href="#Base32进行编码" class="headerlink" title="Base32进行编码"></a>Base32进行编码</h3><p>Geohashes把整个世界分为32个单元的格子(4行8列)，每一个格子都用一个字母或者数字标识。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/qijFkzvLyamItel.jpg"></p><p>Base32编码用上述32个格子值(<code>0-9、b-z</code>（去掉a,i,l,o）)进行编码。先将上一步合并后得到的<code>二进制转换为十进制</code>数据，然后对应生成Base32码。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/qToEJYRy3f9I8vA.png"></p><p>将<code>5个二进制位转换成一个base32码</code>。上例最终得到的值为</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">wx4g0ec1</span><br></pre></td></tr></table></figure><h3 id="示例代码三"><a href="#示例代码三" class="headerlink" title="示例代码三"></a>示例代码三</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> GeoHashUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> GeoHash编码类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/28 10:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeoHashUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大经度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">Max_Lng</span> <span class="operator">=</span> <span class="number">180</span>;</span><br><span class="line">    <span class="comment">// 最小经度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">Min_Lng</span> <span class="operator">=</span> -<span class="number">180</span>;</span><br><span class="line">    <span class="comment">// 最大纬度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">Max_Lat</span> <span class="operator">=</span> <span class="number">90</span>;</span><br><span class="line">    <span class="comment">// 最小纬度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">Min_Lat</span> <span class="operator">=</span> -<span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 经度或纬度二进制长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">lngUnit</span> <span class="operator">=</span> (Max_Lng - Min_Lng) / (<span class="number">1</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">latUnit</span> <span class="operator">=</span> (Max_Lat - Min_Lat) / (<span class="number">1</span> &lt;&lt; <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用0-9、b-z（去掉a, i, l, o，分别代表十进制数10 ~ 31）这32个字母进行编码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String[] base32Lookup =</span><br><span class="line">            &#123;<span class="string">&quot;0&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;s&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将经度或纬度转换为二进制编码，递归二分区间法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">convert</span><span class="params">(<span class="type">double</span> min, <span class="type">double</span> max, <span class="type">double</span> value, List&lt;Character&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt; (length - <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">mid</span> <span class="operator">=</span> (max + min) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (value &lt; mid) &#123;</span><br><span class="line">            <span class="comment">// 左区间</span></span><br><span class="line">            list.add(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            convert(min, mid, value, list);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 右区间</span></span><br><span class="line">            list.add(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">            convert(mid, max, value, list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base32编码长度为：经度和纬度二进制长度相加 lng + late = num，再除于5(5个二进制位转换成一个base32码)，如(20 + 20) / 5 = 8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">base32Encode</span><span class="params">(<span class="keyword">final</span> String str)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">unit</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>; start &lt; str.length(); start = start + <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="comment">// 截取5个二进制位</span></span><br><span class="line">            unit = str.substring(start, start + <span class="number">5</span>);</span><br><span class="line">            <span class="comment">// 根据十进制数，获取Base32编码表中对应值</span></span><br><span class="line">            sb.append(base32Lookup[convertToIndex(unit)]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将5个二进制位转化成十进制数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">convertToIndex</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; length; index++) &#123;</span><br><span class="line">            result += str.charAt(index) == <span class="string">&#x27;0&#x27;</span> ? <span class="number">0</span> : <span class="number">1</span> &lt;&lt; (length - <span class="number">1</span> - index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先合并经纬度的二进制编码（经度占偶数位，纬度占奇数位，0也是偶数位），后Base32编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(<span class="type">double</span> lng, <span class="type">double</span> lat)</span> &#123;</span><br><span class="line">        List&lt;Character&gt; lngList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Character&gt;();</span><br><span class="line">        List&lt;Character&gt; latList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Character&gt;();</span><br><span class="line">        convert(Min_Lng, Max_Lng, lng, lngList);</span><br><span class="line">        convert(Min_Lat, Max_Lat, lat, latList);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; latList.size(); index++) &#123;</span><br><span class="line">            sb.append(lngList.get(index)).append(latList.get(index));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> base32Encode(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 边界问题，根据经纬度计算出原点及周围8个区域的Geohash值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">around</span><span class="params">(<span class="type">double</span> lng, <span class="type">double</span> lat)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        list.add(encode(lng, lat + latUnit));</span><br><span class="line">        list.add(encode(lng, lat - latUnit));</span><br><span class="line">        list.add(encode(lng + lngUnit, lat));</span><br><span class="line">        list.add(encode(lng - lngUnit, lat));</span><br><span class="line">        <span class="comment">// 原点</span></span><br><span class="line">        list.add(encode(lng, lat));</span><br><span class="line">        list.add(encode(lng + lngUnit, lat + latUnit));</span><br><span class="line">        list.add(encode(lng - lngUnit, lat + latUnit));</span><br><span class="line">        list.add(encode(lng + lngUnit, lat - latUnit));</span><br><span class="line">        list.add(encode(lng - lngUnit, lat - latUnit));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">GeoHashUtil</span>().encode(<span class="number">116.3967</span>, <span class="number">44.9999</span>));</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">GeoHashUtil</span>().around(<span class="number">116.3967</span>, <span class="number">44.9999</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">wxfzbxvr</span><br><span class="line">[y84b08j2, wxfzbxvq, wxfzbxvx, wxfzbxvp, wxfzbxvr, y84b08j8, y84b08j0, wxfzbxvw, wxfzbxvn]</span><br></pre></td></tr></table></figure><blockquote><p>可到 <a href="http://geohash.co/">Geohash转换器</a> 校验代码生成的geohash编码是否有错</p></blockquote><h2 id="精确范围"><a href="#精确范围" class="headerlink" title="精确范围"></a>精确范围</h2><p>Geohash比直接用经纬度的高效很多，而且使用者可以发布地址编码，既能表明自己的位置，又不至于暴露自己的精确坐标，有助于隐私保护和如下特点：</p><blockquote><ol><li>GeoHash用一个字符串表示经度和纬度两个坐标。在<code>数据库中可以实现在一列上应用索引</code>（某些情况下无法在两列上同时应用索引）</li><li>GeoHash表示的并<code>不是一个点</code>，而<code>是一个矩形区域</code></li><li>GeoHash编码的<code>前缀可以表示更大的区域</code>。如wx4g0ec1，它的前缀wx4g0e表示包含编码wx4g0ec1在内的更大范围。这个特性可以用于附近地点搜索</li></ol></blockquote><p>编码越长，表示的范围越小，位置也越精确。因此我们就可以通过比较GeoHash<code>匹配的位数</code>来判断两个点之间的大概距离。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/01/cWAzMNTaSuLlbho.jpg"></p><p>看上图可知编码长度长度为8时，精度在19米左右，而当编码长度为12时，精度在0.0186米左右；</p><blockquote><p>例：<code>需要获取和(116.390705，39.923201)相距2km内的地址，只需要查找地址坐标对应的GeoHash编码前五位(如：wx4g0)即可</code>，可根据数据情况进行选择</p></blockquote><h1 id="两点距离算法"><a href="#两点距离算法" class="headerlink" title="两点距离算法"></a>两点距离算法</h1><p>现在还多APP都有一个距离排序功能，表明该家店距离当前的位置，这个距离是怎么计算出呢？这完全是一个数学问题</p><h2 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h2><ul><li>将两点经纬度转换为三维直角坐标</li></ul><p>假设地球<code>球心</code>为三维直角坐标系的<code>原点</code>，<code>球心</code>与赤道上<code>0经度</code>点的连线为<code>X轴</code>，<code>球心</code>与赤道上<code>东经90度</code>点的连线为<code>Y轴</code>，<code>球心</code>与<code>北极点</code>的连线为<code>Z轴</code>，则地面上点的<code>直角坐标</code>与其<code>经纬度</code>的<code>关系</code>为：<code>α为纬度，β为经度</code></p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">X = cos α × cos β</span><br><span class="line">Y = cos α × sin β</span><br><span class="line">Z = sinα</span><br></pre></td></tr></table></figure><ul><li>根据三维直角坐标求两点间的直线(弦长)距离</li></ul><p>如果两点的直角坐标分别为(x1,y1,z1)和(x2,y2,z2)，则它们之间的直线距离为：<code>L为直线距离</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/11/02/mlMVOtjBHfK3oDR.png" alt="勾股定理"></p><ul><li>根据弦长求两点间的弧长距离(实际距离)</li></ul><p>弧长与弦长的关系为：<code>上式中角的单位为度，1度＝π/180弧度，S为弧长， R为地球半径约6378.137KM</code></p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">S = R × π × <span class="number">2</span> × arcsin(<span class="number">0</span>.<span class="number">5</span> × L) / <span class="number">180</span></span><br></pre></td></tr></table></figure><h2 id="示例代码四"><a href="#示例代码四" class="headerlink" title="示例代码四"></a>示例代码四</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> GeoHashUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 两点距离类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/28 10:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistanceUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 地球半径，单位：KM</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">double</span> <span class="variable">Earth_Radius</span> <span class="operator">=</span> <span class="number">6378.137d</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">distance</span><span class="params">(<span class="type">double</span> lat1, <span class="type">double</span> lng1, <span class="type">double</span> lat2, <span class="type">double</span> lng2)</span> &#123;</span><br><span class="line">        <span class="comment">// 两点经纬度转换为三维直角坐标</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">x1</span> <span class="operator">=</span> Math.cos(lat1) * Math.cos(lng1);</span><br><span class="line">        <span class="type">double</span> <span class="variable">y1</span> <span class="operator">=</span> Math.cos(lat1) * Math.sin(lng1);</span><br><span class="line">        <span class="type">double</span> <span class="variable">z1</span> <span class="operator">=</span> Math.sin(lat1);</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">x2</span> <span class="operator">=</span> Math.cos(lat2) * Math.cos(lng2);</span><br><span class="line">        <span class="type">double</span> <span class="variable">y2</span> <span class="operator">=</span> Math.cos(lat2) * Math.sin(lng2);</span><br><span class="line">        <span class="type">double</span> <span class="variable">z2</span> <span class="operator">=</span> Math.sin(lat2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求两点间的弦长距离</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">chordLength</span> <span class="operator">=</span> Math.sqrt(Math.pow((x1 - x2), <span class="number">2</span>) + Math.pow((y1 - y2), <span class="number">2</span>) + Math.pow((z1 - z2), <span class="number">2</span>));</span><br><span class="line">        <span class="comment">// 由弦长求两点间的弧长距离</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">arcLength</span> <span class="operator">=</span> Earth_Radius * Math.PI * <span class="number">2</span> * Math.asin(<span class="number">0.5</span> * chordLength) / <span class="number">180</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arcLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">distance</span> <span class="operator">=</span> DistanceUtil.distance(<span class="number">44.9999</span>, <span class="number">116.3967</span>, <span class="number">45.0001</span>, <span class="number">116.3967</span>);</span><br><span class="line"></span><br><span class="line">        str = String.format(<span class="string">&quot;两点距离为 %f KM&quot;</span>, distance);</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        str = String.format(<span class="string">&quot;两点距离为 %s M&quot;</span>, Math.round(distance * <span class="number">1000</span>));</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">两点距离为 <span class="number">0.022264</span> KM</span><br><span class="line">两点距离为 <span class="number">22</span> M</span><br></pre></td></tr></table></figure><p><code>用到的数学函数如下：</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Math.pow(x,y)   <span class="comment">// 求x的y次方</span></span><br><span class="line">Math.sin        <span class="comment">// 正弦函数</span></span><br><span class="line">Math.cos        <span class="comment">// 余弦函数</span></span><br><span class="line">Math.sqrt       <span class="comment">// 求平方根函数</span></span><br><span class="line">Math.asin       <span class="comment">// 反正弦函数</span></span><br><span class="line">Math.round      <span class="comment">// 四舍五入</span></span><br></pre></td></tr></table></figure><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/latitudeAndLongitude-demo">https://github.com/wangdaicong/spring-boot-project/tree/master/latitudeAndLongitude-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Geohash </tag>
            
            <tag> 勾股定理 </tag>
            
            <tag> 经纬度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是进制？</title>
      <link href="/2021/10/27/%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%9B%E5%88%B6/"/>
      <url>/2021/10/27/%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%9B%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>进制也就是进位计数制，是人为定义的带进位的计数方法。对于任何一种进制如：X进制，就表示每一位上的数运算时都是逢X进一位。十进制是逢十进一，十六进制是逢十六进一，二进制就是逢二进一，以此类推，x进制就是逢x进位。</p><p>对于任何一个数，我们可以用不同的进位制来表示。比如：十进数57(10)，可以用二进制表示为111001(2)，也可以用五进制表示为212（5)，也可以用八进制表示为71(8)、用十六进制表示为39(16)，它们所代表的数值都是一样的。</p><h1 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h1><p>十进制编码几乎就是数值本身。数值本身是一个数学上的抽象概念。经过长期的演化、融合、选择、淘汰，系统简便、功能全面的十进制计数法成为人类文化中主流的计数方法。<br>十进制数的书写可以不加标注，或加<code>后缀D</code>，其中D是英文十进制Decimal的首字母D。</p><ul><li><code>十进制的基数为10，数码由0-9组成，计数规律逢十进一。</code></li></ul><h1 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h1><ul><li><code>二进制由两个数码0，1组成，运算规律是逢二进一。</code></li></ul><p>二进制数的书写通常在数的<code>右下方注上基数2</code>，或在<code>后缀加B</code>表示，其中B是英文二进制Binary的首字母。如：二进制数10110011可以写成（10110011）2，或写成10110011B。</p><p>计算机领域我们之所以采用二进制进行计数，是因为二进制具有以下优点：</p><ol><li>二进制数中只有两个数码0和1，可用具有两个不同稳定状态的元器件来表示一位数码。例如，电路中某一通路的电流的有无，某一节点电压的高低，晶体管的导通和截止等。</li><li>二进制数运算简单，大大简化了计算中运算部件的结构。二进制数的加法和乘法基本运算法则各有四条，如下：<blockquote><p>0+0&#x3D;0，0+1&#x3D;1，1+0&#x3D;1，1+1&#x3D;10<br>0×0&#x3D;0，0×1&#x3D;0，1×0&#x3D;0，1×1&#x3D;1</p></blockquote></li><li>二进制天然兼容逻辑运算。二进制计数在日常使用上有个不便之处，就是位数往往很长，读写不便，如：把十进制的100000D写成二进制就是11000011010100000B，所以<code>计算机领域我们实际采用的是十六进制</code>。二进制数转换为十六进制数时，长度缩减为原先的约四分之一，把十进制的100000写成八进制就是303240。<code>十六进制的一个数位可代表二进制的四个数位</code>。这样，十进制的100000写成十六进制就是186A0。</li></ol><h1 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h1><p>由于二进制数据的基数R较小，所以二进制数据的书写和阅读不方便，为此，在<code>小型机中引入了八进制</code>。八进制的基数R&#x3D;8&#x3D;2^3，有数码0、1、2、3、4、5、6、7组成，并且<code>每个数码正好对应三位二进制数</code>，所以八进制能很好地反映二进制。<br><code>八进制用下标8或数据后面加O表示</code>，如：二进制数据 (11 101 010 . 010 110 100)2 对应八进制数据 (352.264)8或352.264O。</p><h1 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h1><p>十六进制数由十六个数码：<code>数字0～9加上字母A-F组成（A-F分别表示十进制数10～15）</code>，十六进制数运算规律是逢十六进一，即基数R&#x3D;16&#x3D;2^4。<br>通常在表示时用<code>尾部标志H或下标16</code>以示区别，在c语言中用添加前缀0x以表示十六进制数。如：十六进制数4AC8可写成(4AC8)16，或写成4AC8H。</p><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><h2 id="二进制转换"><a href="#二进制转换" class="headerlink" title="二进制转换"></a>二进制转换</h2><h3 id="二进制转换八进制"><a href="#二进制转换八进制" class="headerlink" title="二进制转换八进制"></a>二进制转换八进制</h3><p><code>不足三位，用&#39;0&#39;补齐，正数部分往左补齐，小数部分往右补齐</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/Hg5Z3ql67YvInDM.jpg" alt="二进制转换八进制"></p><h3 id="二进制转换十进制"><a href="#二进制转换十进制" class="headerlink" title="二进制转换十进制"></a>二进制转换十进制</h3><p>幂取值以小数点为界<code>往左为正0 ~ n</code>，<code>往右为负-1 ~ -n</code>(如下图1&#x2F;2、0&#x2F;4、1&#x2F;8….)<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/RNU3pASjCEbThwI.jpg" alt="二进制转换十进制"></p><h3 id="二进制转换十六进制"><a href="#二进制转换十六进制" class="headerlink" title="二进制转换十六进制"></a>二进制转换十六进制</h3><p><code>不足四位，用&#39;0&#39;补齐，正数部分往左补齐，小数部分往右补齐</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/wuKYp2XFGdHVtob.jpg" alt="二进制转换十六进制"></p><h2 id="八进制转换"><a href="#八进制转换" class="headerlink" title="八进制转换"></a>八进制转换</h2><h3 id="八进制转换二进制"><a href="#八进制转换二进制" class="headerlink" title="八进制转换二进制"></a>八进制转换二进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/TuHa3gQrLKOAcVI.jpg" alt="八进制转换二进制"></p><h3 id="八进制转换十进制"><a href="#八进制转换十进制" class="headerlink" title="八进制转换十进制"></a>八进制转换十进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/2NjXRJiaWnELxbw.jpg" alt="八进制转换十进制"></p><h3 id="八进制转换十六进制"><a href="#八进制转换十六进制" class="headerlink" title="八进制转换十六进制"></a>八进制转换十六进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/TuHa3gQrLKOAcVI.jpg" alt="八进制转换二进制"></p><p><code>不足四位，用&#39;0&#39;补齐，正数部分往左补齐，小数部分往右补齐</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/4vgYShL6HQJNaUB.jpg" alt="八进制转换十六进制"></p><h2 id="十进制转换"><a href="#十进制转换" class="headerlink" title="十进制转换"></a>十进制转换</h2><p><code>正数除以X进制，商至&#39;0&#39;为止；小数乘以X进制为正数为止</code></p><h3 id="十进制转换二进制"><a href="#十进制转换二进制" class="headerlink" title="十进制转换二进制"></a>十进制转换二进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/4I8PQoKldaCX1E7.jpg" alt="十进制转换二进制"></p><h3 id="十进制转换八进制"><a href="#十进制转换八进制" class="headerlink" title="十进制转换八进制"></a>十进制转换八进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/DlKxuaq2jWcLyAg.jpg" alt="十进制转换八进制"></p><h3 id="十进制转换十六进制"><a href="#十进制转换十六进制" class="headerlink" title="十进制转换十六进制"></a>十进制转换十六进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/fLgAUWeBFZGqrzh.jpg" alt="十进制转换十六进制"></p><h2 id="十六进制转换"><a href="#十六进制转换" class="headerlink" title="十六进制转换"></a>十六进制转换</h2><h3 id="十六进制转换二进制"><a href="#十六进制转换二进制" class="headerlink" title="十六进制转换二进制"></a>十六进制转换二进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/hUQ2XvTuJ3AWCRK.png" alt="十六进制转换二进制"></p><h3 id="十六进制转换八进制"><a href="#十六进制转换八进制" class="headerlink" title="十六进制转换八进制"></a>十六进制转换八进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/7Cs2KgqRADy6J5T.jpg" alt="十六进制转换八进制"></p><h3 id="十六进制转换十进制"><a href="#十六进制转换十进制" class="headerlink" title="十六进制转换十进制"></a>十六进制转换十进制</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/27/io3wjV5lOg98nuc.jpg" alt="十六进制转换十进制"></p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul><li><code>十进制转八进制或者十六进制有两种方法</code></li></ul><blockquote><ol><li>间接法<br>把十进制转成二进制，然后再由二进制转成八进制或者十六进制。这里不再做图片用法解释。</li><li>直接法(本文使用方法)<br>把十进制转八进制或者十六进制按照除8或者16取余，直到商为0为止。</li></ol></blockquote><ul><li><code>八进制与十六进制之间的转换有两种方法</code></li></ul><blockquote><ol><li>以先转成二进制然后再相互转换(本文使用方法)。</li><li>先转成十进制然后再相互转换。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 十进制 </tag>
            
            <tag> 二进制 </tag>
            
            <tag> 进制转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel导入导出注解通用版</title>
      <link href="/2021/10/18/Excel%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%B3%A8%E8%A7%A3%E9%80%9A%E7%94%A8%E7%89%88/"/>
      <url>/2021/10/18/Excel%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%B3%A8%E8%A7%A3%E9%80%9A%E7%94%A8%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>日常开发中常会遇到Excel导入导出的需求，得空写个前后端通用版的Excel导入导出demo，供之后开发效率事半功倍</p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><p>初始数据<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/28/pc9UjdIrlZVmCyh.png" alt="student表初始数据"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `sno` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sname` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sage` <span class="type">varchar</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ssex` <span class="type">varchar</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`sno`)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p><code>注：字段全为字符类型，避免解析数据保存到数据库表时需过多的数据类型转换逻辑</code></p><h3 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.goitman<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-importAndExport-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Web 项目开发starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--进行数据解析Fastjson会自动处理对象中的泛型，将其解析成原来定义好的对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 引入poi，解析workbook视图 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--通用mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mysql数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///数据库?characterEncoding=utf8&amp;amp;useUnicode=true</span></span><br><span class="line">    <span class="attr">username:</span> </span><br><span class="line">    <span class="attr">password:</span> </span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># xml文件地址</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment"># 打印mybatis的执行sql语句</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment"># 开启驼峰自动转换</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件保存地址</span></span><br><span class="line"><span class="attr">file:</span></span><br><span class="line">  <span class="attr">filePath:</span> <span class="string">E:/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> PoiApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 启动类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 10:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.goitman.mapper&quot;)</span> <span class="comment">// 指定扫描的Mapper类的包的路径，在每个Mapper类上添加注解@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcelApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ExcelApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四个自定义注解"><a href="#四个自定义注解" class="headerlink" title="四个自定义注解"></a>四个自定义注解</h3><h4 id="EnableExport-允许导出类注解"><a href="#EnableExport-允许导出类注解" class="headerlink" title="EnableExport(允许导出类注解)"></a>EnableExport(允许导出类注解)</h4><p>实体类上必须定义此注解，因工具类会判断当前类是否为允许导出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.enums.ColorEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> EnableExport</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 允许导出类注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 10:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span> <span class="comment">// 用于类</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableExport &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标题/文件名</span></span><br><span class="line">    String <span class="title function_">fileName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 背景颜色，默认蓝色</span></span><br><span class="line">    ColorEnum <span class="title function_">cellColor</span><span class="params">()</span> <span class="keyword">default</span> ColorEnum.BLUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="EnableExportField-允许导出字段注解"><a href="#EnableExportField-允许导出字段注解" class="headerlink" title="EnableExportField(允许导出字段注解)"></a>EnableExportField(允许导出字段注解)</h4><p>在实体类上，需导出数据的字段上定义此注解，可选</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.enums.ColorEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> EnableExportField</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 允许导出字段注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 11:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span>  <span class="comment">// 用于字段上</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableExportField &#123;</span><br><span class="line">    <span class="comment">// 设置宽度，默认100像素</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">colWidth</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 列名称</span></span><br><span class="line">    String <span class="title function_">colName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导出设置get方法</span></span><br><span class="line">    String <span class="title function_">useGetMethod</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 背景颜色，默认蓝色</span></span><br><span class="line">    ColorEnum <span class="title function_">cellColor</span><span class="params">()</span> <span class="keyword">default</span> ColorEnum.BLUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="ImportIndex-导入字段注解"><a href="#ImportIndex-导入字段注解" class="headerlink" title="ImportIndex(导入字段注解)"></a>ImportIndex(导入字段注解)</h4><p>必须在实体类上需导入数据的字段上定义此注解；定义字段索引属性时，必须与数据库相应字段的索引一致；实体类字段名必须与数据库字段名称一致，在本实例中未做转换逻辑</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ImportIndex</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 导入字段注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 15:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span> <span class="comment">// 用于字段</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ImportIndex &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 索引，从0开始</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">index</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导入设置set方法</span></span><br><span class="line">    String <span class="title function_">useSetMethodName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="EnableSelectList-下拉列表注解"><a href="#EnableSelectList-下拉列表注解" class="headerlink" title="EnableSelectList(下拉列表注解)"></a>EnableSelectList(下拉列表注解)</h4><p>在有下拉列表数据的字段定义此注解，可选</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> EnableSelectList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 下拉列表注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 14:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span> <span class="comment">// 用于字段</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableSelectList &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.util.HSSFColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ColorEnum</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 设置颜色枚举</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 16:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ColorEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    RED(<span class="string">&quot;红色&quot;</span>, HSSFColor.RED.index),</span><br><span class="line">    GREEN(<span class="string">&quot;绿色&quot;</span>, HSSFColor.GREEN.index),</span><br><span class="line">    BLANK(<span class="string">&quot;白色&quot;</span>, HSSFColor.BLACK.index),</span><br><span class="line">    YELLOW(<span class="string">&quot;黄色&quot;</span>, HSSFColor.YELLOW.index),</span><br><span class="line">    BLUE(<span class="string">&quot;蓝色&quot;</span>, HSSFColor.BLUE.index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Short index;</span><br><span class="line"></span><br><span class="line">    ColorEnum(String name, Short index) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Short <span class="title function_">getIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIndex</span><span class="params">(Short index)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.MySqlMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> PoiMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 数据层，继承MySqlMapper，获取批量插入方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 11:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ExcelMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Student&gt;, MySqlMapper&lt;Student&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件工具类"><a href="#文件工具类" class="headerlink" title="文件工具类"></a>文件工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ExcelService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 文件工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/22 16:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 注入容器，获取配置文件数据</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;file.filePath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFilePath</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        FileUtil.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存文件到本地， 保存后的文件路径（绝对路径）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">saveFileToLocal</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;yyyMM&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按年月分文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath + sdf.format(date) + File.separator);</span><br><span class="line">        <span class="keyword">if</span> (!file1.exists()) &#123;</span><br><span class="line">            file1.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 获取文件后缀名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffixFileName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> file1.getPath() + File.separator + uuid + suffixFileName;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(path));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实例测试"><a href="#实例测试" class="headerlink" title="实例测试"></a>实例测试</h2><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/nemgYS6whsDPqTI.png"></p><h3 id="常规导入"><a href="#常规导入" class="headerlink" title="常规导入"></a>常规导入</h3><ul><li><p>前端请求<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/rO3XCuzB75W9FEb.png"></p></li><li><p>实体类</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableExport(fileName = &quot;学生表&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ImportIndex(index = 0)</span></span><br><span class="line">    <span class="keyword">private</span> String sno;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnableExportField(colName = &quot;姓名&quot;, colWidth = 90)</span></span><br><span class="line">    <span class="meta">@ImportIndex(index = 1)</span></span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnableExportField(colName = &quot;年龄&quot;, colWidth = 90, cellColor = ColorEnum.YELLOW)</span></span><br><span class="line">    <span class="meta">@ImportIndex(index = 2)</span></span><br><span class="line">    <span class="keyword">private</span> String sage;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnableExportField(colName = &quot;性别&quot;, colWidth = 90)</span></span><br><span class="line">    <span class="meta">@ImportIndex(index = 3)</span></span><br><span class="line">    <span class="keyword">private</span> String ssex;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>接口调用：<code>入参名称必须与前端传参名称一致</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  uploadFile</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 常规导入</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  [file]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  boolean</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(&quot;fileName&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> excelService.uploadFile(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>逻辑层：parseExcelToList方法，没有校验@EnableSelectList注解和ImportIndex注解中的useSetMethodName属性</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">uploadFile</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> FileUtil.saveFileToLocal(file);</span><br><span class="line">        <span class="type">File</span> <span class="variable">fileDirPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students = (List&lt;Student&gt;) ExcelUtils.parseExcelToList(fileDirPath, Student.class);</span><br><span class="line">        <span class="keyword">return</span> excelMapper.insertList(students) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>ExcelUtils工具类方法<br>此时实体类没有定义ImportIndex注解的useSetMethodName属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [excel 文件, clazz pojo类型]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;?&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> parseExcelToList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 导入，将Excel数据转换为集合对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;?&gt; parseExcelToList(File excel, Class clazz) &#123;</span><br><span class="line">    List&lt;Object&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 创建工作表</span></span><br><span class="line">    <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        is = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(excel.getAbsolutePath());</span><br><span class="line">        <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建工作簿</span></span><br><span class="line">            <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> WorkbookFactory.create(is);</span><br><span class="line">            <span class="comment">// 获取第一个工作表</span></span><br><span class="line">            sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (sheet != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                String values[];</span><br><span class="line">                <span class="comment">// 获取第二行数据，第一行为标题</span></span><br><span class="line">                <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(i);</span><br><span class="line">                <span class="keyword">while</span> (row != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 获取总列数</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">cellNum</span> <span class="operator">=</span> row.getPhysicalNumberOfCells();</span><br><span class="line">                    values = <span class="keyword">new</span> <span class="title class_">String</span>[cellNum];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= cellNum; j++) &#123;</span><br><span class="line">                        <span class="comment">// 获取单元格数据</span></span><br><span class="line">                        <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(j);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">if</span> (cell != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// 将单元格数据类型设置为字符串</span></span><br><span class="line">                            cell.setCellType(Cell.CELL_TYPE_STRING);</span><br><span class="line">                            value = cell.getStringCellValue() == <span class="literal">null</span> ? <span class="literal">null</span> : cell.getStringCellValue();</span><br><span class="line">                            values[j] = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 反射获取类中所有声明字段</span></span><br><span class="line">                    Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                    <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">                        <span class="comment">// 判断ImportIndex注解是否在此字段上，true为存在</span></span><br><span class="line">                        <span class="keyword">if</span> (f.isAnnotationPresent(ImportIndex.class)) &#123;</span><br><span class="line">                            <span class="type">ImportIndex</span> <span class="variable">annotation</span> <span class="operator">=</span> f.getAnnotation(ImportIndex.class);</span><br><span class="line">                            <span class="comment">// 获取索引值</span></span><br><span class="line">                            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> annotation.index();</span><br><span class="line">                            <span class="comment">// 获取方法名</span></span><br><span class="line">                            <span class="type">String</span> <span class="variable">useSetMethodName</span> <span class="operator">=</span> annotation.useSetMethodName();</span><br><span class="line">                            <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(useSetMethodName)) &#123;</span><br><span class="line">                                <span class="comment">// fastjson TypeUtils工具类，实现常用数据类型和对象间的相互转换</span></span><br><span class="line">                                <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> TypeUtils.cast(values[index], f.getType(), <span class="literal">null</span>);</span><br><span class="line">                                <span class="comment">// 取消Java语言访问检查</span></span><br><span class="line">                                f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                <span class="comment">// 参数一：方法名，参数二：方法参数数组</span></span><br><span class="line">                                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(useSetMethodName, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;f.getType()&#125;);</span><br><span class="line">                                <span class="comment">// 暴力访问</span></span><br><span class="line">                                method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                <span class="comment">// 返回值是Object接收，参数一：对象是谁，参数二：调用该方法的实际参数</span></span><br><span class="line">                                method.invoke(obj, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;val&#125;);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> TypeUtils.cast(values[index], f.getType(), <span class="literal">null</span>);</span><br><span class="line">                                <span class="comment">// 将指定对象上此 Field字段设置为新值。参数一：指定对象，参数二：新值</span></span><br><span class="line">                                f.set(obj, val);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 将对象数据保存至集合</span></span><br><span class="line">                    res.add(obj);</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="comment">// 遍历下一行数据</span></span><br><span class="line">                    row = sheet.getRow(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行结果</p></li></ul><p>控制台信息<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/yxuYN5X9lWCPIvU.png"></p><p>数据库数据<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/8hYNSOAI3xG2KCb.png"></p><h4 id="下拉列表注解的数据转化"><a href="#下拉列表注解的数据转化" class="headerlink" title="下拉列表注解的数据转化"></a>下拉列表注解的数据转化</h4><ul><li><p>前端请求<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/mdOCZ5yze7paBIg.png"></p></li><li><p>以实体类中性别字段为例</p></li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/hgOtNE5u4PjHWrz.png"></p><ul><li><p>接口调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  uploadFileSelectList</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 演示EnableSelectList注解、ImportIndex注解useSetMethodName属性的使用</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  [file]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  boolean</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/uploadFileSelectList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">uploadFileSelectList</span><span class="params">(<span class="meta">@RequestParam(&quot;fileName&quot;)</span> MultipartFile file)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> excelService.uploadFileSelectList(file);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>逻辑层：此处的ALL_SELECT_LIST_MAP预存数据硬编码不灵活，改善的方式很多，在此不衍生讨论啦</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> cn.goitman.utils.ExcelUtils.ALL_SELECT_LIST_MAP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">uploadFileSelectList</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 预存数据，配合EnableSelectList注解使用</span></span><br><span class="line">        Map&lt;String, String&gt; selsctList = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        selsctList.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        selsctList.put(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line">        ALL_SELECT_LIST_MAP.put(<span class="number">3</span>,selsctList);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> FileUtil.saveFileToLocal(file);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students = (List&lt;Student&gt;) ExcelUtils.parseExcelToList(inputStream, Student.class);</span><br><span class="line">        <span class="keyword">return</span> excelMapper.insertList(students) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>ExcelUtils工具类方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [excel 文件输入流, clazz pojo类型]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> java.util.List&lt;?&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> parseExcelToList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 导入，将Excel数据转换为集合对象，另校验EnableSelectList注解或ImportIndex注解useSetMethodName属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;?&gt; parseExcelToList(InputStream excel, Class clazz) &#123;</span><br><span class="line">    List&lt;Object&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        is = excel;</span><br><span class="line">        <span class="keyword">if</span> (is != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> WorkbookFactory.create(is);</span><br><span class="line">            sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (sheet != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                String values[];</span><br><span class="line">                <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(i);</span><br><span class="line">                <span class="keyword">while</span> (row != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">cellNum</span> <span class="operator">=</span> row.getPhysicalNumberOfCells();</span><br><span class="line">                    values = <span class="keyword">new</span> <span class="title class_">String</span>[cellNum];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; cellNum; j++) &#123;</span><br><span class="line">                        <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(j);</span><br><span class="line">                        <span class="keyword">if</span> (cell != <span class="literal">null</span>) &#123;</span><br><span class="line">                            cell.setCellType(Cell.CELL_TYPE_STRING);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cell.getStringCellValue() == <span class="literal">null</span> ? <span class="literal">null</span> : cell.getStringCellValue();</span><br><span class="line">                            values[j] = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">                    <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (f.isAnnotationPresent((ImportIndex.class))) &#123;</span><br><span class="line">                            <span class="type">ImportIndex</span> <span class="variable">annotation</span> <span class="operator">=</span> f.getAnnotation(ImportIndex.class);</span><br><span class="line">                            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> annotation.index();</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> values[index];</span><br><span class="line">                            <span class="comment">// 判断EnableSelectList注解是否在此字段上，true为存在</span></span><br><span class="line">                            <span class="keyword">if</span> (f.isAnnotationPresent(EnableSelectList.class)) &#123;</span><br><span class="line">                                <span class="comment">// 根据索引获取下拉列表值</span></span><br><span class="line">                                value = getKeyByValue(ALL_SELECT_LIST_MAP.get(index), String.valueOf(value));</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">useSetMethodName</span> <span class="operator">=</span> annotation.useSetMethodName();</span><br><span class="line">                            <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(useSetMethodName)) &#123;</span><br><span class="line">                                <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> TypeUtils.cast(value, f.getType(), <span class="literal">null</span>);</span><br><span class="line">                                f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(useSetMethodName, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;f.getType()&#125;);</span><br><span class="line">                                method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                method.invoke(obj, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;val&#125;);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> TypeUtils.cast(value, f.getType(), <span class="literal">null</span>);</span><br><span class="line">                                f.set(obj, val);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    res.add(obj);</span><br><span class="line">                    i++;</span><br><span class="line">                    row = sheet.getRow(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行结果</p></li></ul><p>数据表还原回初始数据，此代码段将性别字段数据做了转化处理<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/tmeLzYBn4gcaACv.png"></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/vicVuQBUbLhAM4Z.png"></p><p>控制台信息<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/6LC78Og4mH5VIKq.png"></p><p>数据库数据<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/cwdzGmyupHLixEf.png"></p><h4 id="useSetMethodName属性的数据转化"><a href="#useSetMethodName属性的数据转化" class="headerlink" title="useSetMethodName属性的数据转化"></a>useSetMethodName属性的数据转化</h4><p><code>前端请求、接口调用和ExcelUtils工具类方法与上述下拉列表注解的数据转化相同</code></p><ul><li><p>还是以实体类中性别字段为例，注销EnableSelectList注解，setSex方法将性别数据做了转化<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/1GOlaXWKvmARpwQ.png"></p></li><li><p>逻辑层：注销预存数据ALL_SELECT_LIST_MAP代码块<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/4Lnky2opKWs1ER3.png"></p></li><li><p>执行结果</p></li></ul><p>还原回初始数据，此反射代码解析useSetMethodName属性<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/Cd2O6w3JMyPZTL5.png"></p><p>控制台信息<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/H47Y5ufBRliwqjs.png"></p><p>数据库数据<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/sNgv3WUSFyJqIAn.png"></p><h3 id="常规导出"><a href="#常规导出" class="headerlink" title="常规导出"></a>常规导出</h3><ul><li><p>前端请求：此链接为本地测试链接<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/fEmvjPKFb93RQqp.png"></p></li><li><p>实体类：以导出姓名、年龄、性别三个字段数据为例<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/GkCEJAYoX7nHeum.png"> </p></li><li><p>接口调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  downloadFile</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 常规导出</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  [response]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/downloadFile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    excelService.downloadFile(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>逻辑层</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    List&lt;Student&gt; students = excelMapper.selectAll();</span><br><span class="line">    ExcelUtils.exportExcel(response, students, Student.class, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>ExcelUtils工具类方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [outputStream 输出流, dataList 导出的数据, clazz 导出数据的pojo类型, selectMap 下拉列表的列, exportTitle 标题]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> exportExcel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 导出Excel</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exportExcel</span><span class="params">(HttpServletResponse response, List dataList, Class clazz, Map&lt;Integer, Map&lt;String, String&gt;&gt; selectMap, String exportTitle)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建工作簿</span></span><br><span class="line">    <span class="type">HSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>();</span><br><span class="line">    <span class="comment">// 创建工作表</span></span><br><span class="line">    <span class="type">HSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet();</span><br><span class="line">    <span class="comment">// 设置工作表行的默认高度</span></span><br><span class="line">    sheet.setDefaultRowHeight((<span class="type">short</span>) (<span class="number">20</span> * <span class="number">20</span>));</span><br><span class="line">    <span class="comment">// 判断当前类是否允许导出</span></span><br><span class="line">    <span class="keyword">if</span> (clazz.isAnnotationPresent(EnableExport.class)) &#123;</span><br><span class="line">        <span class="type">EnableExport</span> <span class="variable">export</span> <span class="operator">=</span> (EnableExport) clazz.getAnnotation(EnableExport.class);</span><br><span class="line">        <span class="comment">// 所有列标题名称</span></span><br><span class="line">        List&lt;String&gt; colNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 所有列标题背景颜色</span></span><br><span class="line">        List&lt;ColorEnum&gt; colors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 允许导出的字段</span></span><br><span class="line">        List&lt;Field&gt; fieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Field field : clazz.getDeclaredFields()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(EnableExportField.class)) &#123;</span><br><span class="line">                <span class="type">EnableExportField</span> <span class="variable">enableExportField</span> <span class="operator">=</span> field.getAnnotation(EnableExportField.class);</span><br><span class="line">                colNames.add(enableExportField.colName());</span><br><span class="line">                colors.add(enableExportField.cellColor());</span><br><span class="line">                fieldList.add(field);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置每列的宽度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fieldList.size(); i++) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> fieldList.get(i);</span><br><span class="line">            sheet.setColumnWidth(i, field.getAnnotation(EnableExportField.class).colWidth() * <span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HSSFRow</span> <span class="variable">hssfRow</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 表行</span></span><br><span class="line">        <span class="type">HSSFCell</span> <span class="variable">hssfCell</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 单元格</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置列标题</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> export.fileName();</span><br><span class="line">        <span class="keyword">if</span> (exportTitle != <span class="literal">null</span>) &#123;</span><br><span class="line">            fileName = exportTitle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 绘制标题，可选</span></span><br><span class="line">        createTitle(workbook, hssfRow, hssfCell, sheet, colNames.size() - <span class="number">1</span>, fileName, export.cellColor());</span><br><span class="line">        <span class="comment">// 创建表头列名</span></span><br><span class="line">        createHeadRow(workbook, hssfRow, hssfCell, sheet, colNames, colors);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 绘制单元格样式</span></span><br><span class="line">            <span class="type">HSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> getBasicCellStyle(workbook);</span><br><span class="line">            <span class="comment">// 插入数据</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Object obj : dataList) &#123;</span><br><span class="line">                <span class="comment">// 表头标题和列名已创建，所以从第三行开始</span></span><br><span class="line">                hssfRow = sheet.createRow(i + <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; fieldList.size(); j++) &#123;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> fieldList.get(j);</span><br><span class="line">                    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">                    <span class="type">EnableExportField</span> <span class="variable">enableExportField</span> <span class="operator">=</span> field.getAnnotation(EnableExportField.class);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">getMethodName</span> <span class="operator">=</span> enableExportField.useGetMethod();</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(getMethodName)) &#123;</span><br><span class="line">                        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(getMethodName, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;field.getType()&#125;);</span><br><span class="line">                        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        method.invoke(obj, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;value&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (field.isAnnotationPresent(EnableSelectList.class)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (selectMap != <span class="literal">null</span> &amp;&amp; selectMap.get(j) != <span class="literal">null</span>) &#123;</span><br><span class="line">                            value = selectMap.get(j).get(value);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    setCellValue(value, hssfCell, hssfRow, cellStyle, j);</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 提供下载框，并设置文件名</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;octets/stream&quot;</span>);</span><br><span class="line">            <span class="comment">// 防止中文文件名称乱码，需encode，并设置字符集</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> +  java.net.URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>) + <span class="string">&quot;.xls&quot;</span>);</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 获取响应流</span></span><br><span class="line">            outputStream = response.getOutputStream();</span><br><span class="line">            workbook.write(outputStream);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>执行结果</p></li></ul><p>控制台信息<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/tUwoGhIQ3DFdBnM.png"></p><p>导出的excel数据<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/YFk6hNbJMnQU3XD.png"></p><p>如果不需要标题，即可<code>注释createTitle方法</code>，同时需在插入数据时修改行数值为<code>i+1</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/10/18/R6ioFs8djewrl42.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>下拉列表注解和useSetMethodName属性的玩法，当然不止数据转化这一种，在此不延伸啦，<code>在评论区写下你的构思一起学习吧！</code></p><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/poi-importAndExport-demo">https://github.com/wangdaicong/spring-boot-project/tree/master/poi-importAndExport-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 导入导出 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poi </tag>
            
            <tag> 注解 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keycloak认证授权框架</title>
      <link href="/2021/09/29/Keycloak%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E6%A1%86%E6%9E%B6/"/>
      <url>/2021/09/29/Keycloak%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在学习Oauth2的时候，需要通过写代码来实现认证授权服务。最近发现一款可视化的安全框架Keycloak，只需几个命令就可以快速搭建认证授权服务，无需自行开发。原生支持SpringBoot，使用起来非常简单！</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Keycloak是一款开源的认证授权平台，在Github上已有9.4k+Star。Keycloak功能众多，可实现用户注册、社会化登录、单点登录、双重认证、LDAP集成等功能。</p><blockquote><p>Keycloak官方文档：<a href="https://www.keycloak.org/documentation">https://www.keycloak.org/documentation</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>使用Docker搭建Keycloak服务非常简单，两个命令就完事了，我们将采用此种方式。</p></blockquote><ul><li>首先下载Keycloak的Docker镜像，注意使用<code>jboss</code>的镜像，官方镜像不在DockerHub中；<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull jboss/keycloak:14.0.0</span><br></pre></td></tr></table></figure></li><li>使用如下命令运行Keycloak服务：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8080:8080 --name keycloak \</span><br><span class="line">-e KEYCLOAK_USER=admin \</span><br><span class="line">-e KEYCLOAK_PASSWORD=admin \</span><br><span class="line">-d jboss/keycloak:14.0.0</span><br></pre></td></tr></table></figure></li><li>运行成功后可以通过如下地址访问Keycloak服务，点击圈出来的地方可以访问管理控制台，访问地址：<a href="http://192.168.7.142:8080/">http://192.168.7.142:8080</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/ln1Zok8KCvBhfJI.png"></li></ul><h2 id="控制台使用"><a href="#控制台使用" class="headerlink" title="控制台使用"></a>控制台使用</h2><blockquote><p>接下来我们来体验下Keycloak的管理控制台，看看这个可视化安全框架有什么神奇的地方。</p></blockquote><ul><li><p>首先输入我们的账号密码<code>admin:admin</code>进行登录；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/WclRqj8V2APpytU.png"></p></li><li><p>登录成功后进入管理控制台，我们可以发现Keycloak是英文界面，良心的是它还支持多国语言（包括中文），只要将<code>Themes-&gt;Default Locale</code>改为<code>zh-CN</code>即可切换为中文；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/Gh2wlbRxK13C9Sr.png"></p></li><li><p>修改完成后保存并刷新页面，Keycloak控制台就变成中文界面了；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/3jTqBIpyshZ6aNQ.png"></p></li><li><p>Keycloak非常良心的给很多属性都添加了解释，而且还是中文的，基本看下解释就可以知道如何使用了；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/KDgJX59Iq6YiZ3N.png"></p></li><li><p>在我们开始使用Keycloak保护应用安全之前，我们得先创建一个领域（realm），领域相当于租户的概念，不同租户之间数据相互隔离，这里我们创建一个<code>macrozheng</code>的领域；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/tGQcuJUyRneP53g.png"></p></li><li><p>接下来我们可以在<code>macrozheng</code>领域中去创建用户，创建一个<code>macro</code>用户；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/HkDtPNgxUTw17nE.png"></p></li><li><p>之后我们编辑用户的信息，在<code>凭据</code>下设置<code>密码</code>；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/nLOQbVfjgkUIZdq.png"></p></li><li><p>创建完用户之后，就可以登录了，用户和管理员的登录地址并不相同，我们可以在<code>客户端</code>页面中查看到地址；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/eC42zhEiwRWqKra.png"></p></li><li><p>访问该地址后即可登录，访问地址：<a href="http://192.168.7.142:8080/auth/realms/macrozheng/account">http://192.168.7.142:8080/auth/realms/macrozheng/account</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/NEMhOklPcjubRKw.png"> </p></li><li><p>用户登录成功后即可查看并修改个人信息。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/aLOZEA9odH2wPqx.png"></p></li></ul><h2 id="结合Oauth2使用"><a href="#结合Oauth2使用" class="headerlink" title="结合Oauth2使用"></a>结合Oauth2使用</h2><p>OAuth 2.0是用于授权的行业标准协议，当然Keycloak也是支持的，下面我们通过调用接口的方式来体验下<code>密码模式</code>。先回顾下两种常用的Oauth2授权模式。</p><h3 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/yol3j5t7UQuSWKd.png"></p><ol><li>客户端将用户导向认证服务器；</li><li>用户在认证服务器进行登录并授权；</li><li>认证服务器返回授权码给客户端；</li><li>客户端通过授权码和跳转地址向认证服务器获取访问令牌；</li><li>认证服务器发放访问令牌（有需要带上刷新令牌）。</li></ol><h3 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/N4JEVzwKgfXY38h.png"></p><ol><li>客户端从用户获取用户名和密码；</li><li>客户端通过用户的用户名和密码访问认证服务器；</li><li>认证服务器返回访问令牌（有需要带上刷新令牌）。</li></ol><h3 id="密码模式体验"><a href="#密码模式体验" class="headerlink" title="密码模式体验"></a>密码模式体验</h3><ul><li><p>首先需要在Keycloak中创建客户端<code>mall-tiny-keycloak</code>；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/xVyegzD84p26CFj.png"></p></li><li><p>然后创建一个角色<code>mall-tiny</code>；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/RiDT56HbNBqase2.png"></p></li><li><p>然后将角色分配给macro用户；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/V47zlZaqEWL6YnS.png"></p></li><li><p>一切准备就绪，在Postman中使用Oauth2的方式调用接口就可以获取到Token了，获取token的地址：<a href="http://192.168.7.142:8080/auth/realms/macrozheng/protocol/openid-connect/token">http://192.168.7.142:8080/auth/realms/macrozheng/protocol/openid-connect/token</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/BeIso12xuUYEKGm.png"></p></li></ul><h2 id="结合SpringBoot使用"><a href="#结合SpringBoot使用" class="headerlink" title="结合SpringBoot使用"></a>结合SpringBoot使用</h2><blockquote><p>接下来我们体验下使用Keycloak保护SpringBoot应用的安全。由于Keycloak原生支持SpringBoot，所以使用起来还是很简单的。</p></blockquote><ul><li>由于我们的SpringBoot应用将运行在<code>localhost:8088</code>上面，我们需要对Keycloak的客户端的<code>有效的重定向URI</code>进行配置；</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/wEBWOosYQ3aR8Dm.png"></p><ul><li>接下来我们需要修改应用的<code>pom.xml</code>，集成Keycloak；<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--集成Keycloak--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.keycloak<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>keycloak-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>14.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>再修改应用的配置文件<code>application.yml</code>，具体属性参考注释即可，需要注意的是给路径绑定好可以访问的角色；<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Keycloak相关配置</span></span><br><span class="line"><span class="attr">keycloak:</span></span><br><span class="line">  <span class="comment"># 设置客户端所在领域</span></span><br><span class="line">  <span class="attr">realm:</span> <span class="string">macrozheng</span></span><br><span class="line">  <span class="comment"># 设置Keycloak认证服务访问路径</span></span><br><span class="line">  <span class="attr">auth-server-url:</span> <span class="string">http://192.168.7.142:8080/auth</span></span><br><span class="line">  <span class="comment"># 设置客户端ID</span></span><br><span class="line">  <span class="attr">resource:</span> <span class="string">mall-tiny-keycloak</span></span><br><span class="line">  <span class="comment"># 设置为公开客户端，不需要秘钥即可访问</span></span><br><span class="line">  <span class="attr">public-client:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 配置角色与可访问路径的对应关系</span></span><br><span class="line">  <span class="attr">security-constraints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">auth-roles:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">mall-tiny</span></span><br><span class="line">      <span class="attr">security-collections:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">patterns:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;/brand/*&#x27;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;/swagger-ui/*&#x27;</span></span><br></pre></td></tr></table></figure></li><li>接下来访问下应用的Swagger页面，访问的时候会跳转到Keycloak的控制台去登录，访问地址：<a href="http://localhost:8088/swagger-ui/">http://localhost:8088/swagger-ui/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/WgUmMXnzoCBskaf.png"></p><ul><li>登录成功后，即可访问被保护的Swagger页面和API接口，一个很标准的Oauth2的授权码模式，流程参考授权码模式的说明即可。</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/29/ptCuYeLWBackqPM.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Keycloak是一款非常不错的可视化安全框架，让我们无需搭建认证服务即可完成认证和授权功能。原生支持SpringBoot，基本无需修改代码即可集成，不愧为现代化的安全框架！</p><blockquote><p>原文：<a href="https://mp.weixin.qq.com/s/yXSVbgkYIcJWPe4n2hSeUA">https://mp.weixin.qq.com/s/yXSVbgkYIcJWPe4n2hSeUA</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 敏捷开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oauth2 </tag>
            
            <tag> 认证授权 </tag>
            
            <tag> 单点登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库存IP地址，用什么数据类型？</title>
      <link href="/2021/09/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98IP%E5%9C%B0%E5%9D%80%EF%BC%8C%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/09/22/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98IP%E5%9C%B0%E5%9D%80%EF%BC%8C%E7%94%A8%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><p>在看高性能MySQL第3版（4.1.7节）时，作者建议<code>当存储IPv4地址时，应该使用32位的无符号整数（UNSIGNED INT）来存储IP地址，而不是使用字符串</code>。 </p><p>相对字符串存储，使用无符号整数来存储有如下的<code>好处</code>：</p><blockquote><ol><li>节省空间，不管是数据存储空间，还是索引存储空间</li><li>便于使用范围查询（BETWEEN…AND），且效率更高</li></ol></blockquote><ul><li>通常，在保存IPv4地址时，一个IPv4最小需要7个字符，最大需要15个字符，所以，使用<code>VARCHAR(15)</code>即可。</li><li>MySQL在保存<code>变长的字符串</code>时，还需要<code>额外的一个字节来保存</code>此字符串的长度。而如果使用<code>无符号整数</code>来存储，只需要<code>4个字节</code>即可。</li><li>另外还可以使用4个字段分别存储IPv4中的各部分，但是通常这不管是存储空间和查询效率应该都不是很高（可能有的场景适合使用这种方式存储）。</li></ul><p>使用无符号整数来存储也有<code>缺点</code>：</p><blockquote><ol><li>不便于阅读</li><li>需要手动转换</li></ol></blockquote><p>对于转换来说，MySQL提供了相应的函数来把<code>字符串格式的IP转换成整数</code>的<code>INET_ATON</code>，以及把<code>整数格式的IP转换成字符串</code>的<code>INET_NTOA</code>。<br>如下所示：</p><h3 id="INET-ATON"><a href="#INET-ATON" class="headerlink" title="INET_ATON"></a>INET_ATON</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> inet_aton(<span class="string">&#x27;192.168.0.1&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+</span></span><br><span class="line"><span class="operator">|</span> inet_aton(<span class="string">&#x27;192.168.0.1&#x27;</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+</span></span><br><span class="line"><span class="operator">|</span>               <span class="number">3232235521</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="INET-NTOA"><a href="#INET-NTOA" class="headerlink" title="INET_NTOA"></a>INET_NTOA</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> inet_ntoa(<span class="number">3232235521</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> inet_ntoa(<span class="number">3232235521</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>对于<code>IPv6</code>来说，使用VARBINARY同样可获得相同的好处，同时MySQL也提供了相应的转换函数，即<code>INET6_ATON</code>和<code>INET6_NTOA</code>。</p><h2 id="ORACLE数据库"><a href="#ORACLE数据库" class="headerlink" title="ORACLE数据库"></a>ORACLE数据库</h2><p>ORACLE模拟MySQL中inet_aton函数、inet_ntoa函数</p><h3 id="INET-ATON-1"><a href="#INET-ATON-1" class="headerlink" title="INET_ATON"></a>INET_ATON</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> inet_aton( f_address <span class="keyword">IN</span> varchar2 ) <span class="keyword">RETURN</span> number </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line">    o_address_number number;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">      to_number(regexp_replace(f_address, <span class="string">&#x27;([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)&#x27;</span>, <span class="string">&#x27;\1&#x27;</span>)) <span class="operator">*</span> <span class="number">16777216</span> <span class="operator">+</span></span><br><span class="line">      to_number(regexp_replace(f_address, <span class="string">&#x27;([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)&#x27;</span>, <span class="string">&#x27;\2&#x27;</span>)) <span class="operator">*</span> <span class="number">65536</span> <span class="operator">+</span></span><br><span class="line">      to_number(regexp_replace(f_address, <span class="string">&#x27;([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)&#x27;</span>, <span class="string">&#x27;\3&#x27;</span>)) <span class="operator">*</span> <span class="number">256</span> <span class="operator">+</span></span><br><span class="line">      to_number(regexp_replace(f_address, <span class="string">&#x27;([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)\.([0-9]&#123;1,3&#125;)&#x27;</span>, <span class="string">&#x27;\4&#x27;</span>)) <span class="keyword">INTO</span> o_address_number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RETURN</span> o_address_number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> inet_aton;</span><br></pre></td></tr></table></figure><h3 id="INET-NTOA-1"><a href="#INET-NTOA-1" class="headerlink" title="INET_NTOA"></a>INET_NTOA</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> inet_ntoa( f_address_number <span class="keyword">IN</span> number ) <span class="keyword">RETURN</span> varchar2 </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line">    o_address varchar2;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> trunc ( f_address_number <span class="operator">/</span> <span class="number">16777216</span> ) <span class="operator">||</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">||</span> trunc ( <span class="built_in">MOD</span> ( f_address_number, <span class="number">16777216</span> ) <span class="operator">/</span> <span class="number">65536</span> ) <span class="operator">||</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">||</span> trunc ( <span class="built_in">MOD</span> ( f_address_number, <span class="number">65536</span> ) <span class="operator">/</span> <span class="number">256</span> ) <span class="operator">||</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">||</span> trunc ( <span class="built_in">MOD</span> ( f_address_number, <span class="number">256</span> ) ) <span class="keyword">INTO</span> o_address;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RETURN</span> o_address;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> inet_ntoa;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="代码转换"><a href="#代码转换" class="headerlink" title="代码转换"></a>代码转换</h2><p>对于转换字符串IPv4和数值类型，可以放在应用层，下面是使用java代码来对二者转换：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mikan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mikan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IpLongUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把字符串IP转换成long</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ipStr 字符串IP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> IP对应的long值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">ip2Long</span><span class="params">(String ipStr)</span> &#123;</span><br><span class="line">        String[] ip = ipStr.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (Long.valueOf(ip[<span class="number">0</span>]) &lt;&lt; <span class="number">24</span>) + (Long.valueOf(ip[<span class="number">1</span>]) &lt;&lt; <span class="number">16</span>)</span><br><span class="line">                + (Long.valueOf(ip[<span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) + Long.valueOf(ip[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把IP的long值转换成字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ipLong IP的long值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long值对应的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">long2Ip</span><span class="params">(<span class="type">long</span> ipLong)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        ip.append(ipLong &gt;&gt;&gt; <span class="number">24</span>).append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        ip.append((ipLong &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>).append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        ip.append((ipLong &gt;&gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>).append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        ip.append(ipLong &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="keyword">return</span> ip.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(ip2Long(<span class="string">&quot;192.168.0.1&quot;</span>));</span><br><span class="line">        System.out.println(long2Ip(<span class="number">3232235521L</span>));</span><br><span class="line">        System.out.println(ip2Long(<span class="string">&quot;10.0.0.1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3232235521</span><br><span class="line">192.168.0.1</span><br><span class="line">167772161</span><br></pre></td></tr></table></figure><blockquote><p>原文：<br><a href="https://blog.csdn.net/mhmyqn/article/details/48653157">https://blog.csdn.net/mhmyqn/article/details/48653157</a><br><a href="https://blog.csdn.net/weixin_44158741/article/details/110469648">https://blog.csdn.net/weixin_44158741/article/details/110469648</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> oracle </tag>
            
            <tag> ip地址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Erupt全栈类框架</title>
      <link href="/2021/09/18/Erupt%E5%85%A8%E6%A0%88%E7%B1%BB%E6%A1%86%E6%9E%B6/"/>
      <url>/2021/09/18/Erupt%E5%85%A8%E6%A0%88%E7%B1%BB%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>一个管理系统，往往需要后端+前端一起实现。单表CRUD操作往往都差不多，我们可以使用代码生成器来实现。有时候我们的管理系统只需要一些简单的CRUD页面，有没有什么框架能做到不写前端代码，纯Java撸个管理系统呢？这里推荐一个全栈类框架Erupt，希望对大家有所帮助！</p><h2 id="Erupt简介"><a href="#Erupt简介" class="headerlink" title="Erupt简介"></a>Erupt简介</h2><p>Erupt是一个低代码全栈类框架，它使用Java注解动态生成页面以及增、删、改、查、权限控制等后台功能。零前端代码、零CURD、自动建表，仅需一个类文件 + 简洁的注解配置，快速开发企业级后台管理系统。</p><blockquote><p>官方文档：<a href="https://www.yuque.com/erupts/erupt">传送门</a></p></blockquote><h2 id="SpringBoot整合Erupt"><a href="#SpringBoot整合Erupt" class="headerlink" title="SpringBoot整合Erupt"></a>SpringBoot整合Erupt</h2><p>我们首先来波实战，以商品品牌管理为例，来熟悉下Erupt结合SpringBoot的基本使用！</p><blockquote><p>由于Erupt原生支持SpringBoot，所以整合还是很方便的！</p></blockquote><ul><li>为了方便管理Erupt版本，我们先在pom.xml中添加Erupt的版本属性；</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">erupt.version</span>&gt;</span>1.6.13<span class="tag">&lt;/<span class="name">erupt.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>之后在<code>pom.xml</code>中添加<code>Erupt</code>的<code>权限管理</code>、<code>数据安全</code>、<code>后台WEB界面</code>及<code>MySQL驱动依赖</code>；</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用户权限管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-upms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--接口数据安全--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后台WEB界面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Mysql数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改项目的<code>application.yml</code>文件，添加<code>数据源</code>和<code>JPA配置</code>；</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/erupt?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">generate-ddl:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><p>注：<code>serverTimezone=Asia/Shanghai</code>服务器时区不能改动</p><ul><li>在项目的<code>resources</code>目录下创建如下配置文件</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/oHd3Lyt1vZp5JPg.png"></p><p>app.css</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 例：调整顶栏颜色 */</span></span><br><span class="line"><span class="selector-class">.alain-default__header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#607D8B</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例：修改登录页样式 */</span></span><br><span class="line">layout-passport &gt; <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: center <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: cover <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://www.erupt.xyz/demo/login-bg.svg</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">layout-passport <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Courier New, Menlo, Monaco, Consolas, monospace <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">layout-passport <span class="selector-tag">form</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">26px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">8px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">190</span>, <span class="number">184</span>, <span class="number">184</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">eruptSiteConfig</span> = &#123;</span><br><span class="line">    <span class="comment">//erupt接口地址，在前后端分离时指定</span></span><br><span class="line">    <span class="attr">domain</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="comment">//附件地址，一般情况下不需要指定，如果自定义对象存储空间，则需在此指定附件资源访问地址</span></span><br><span class="line">    <span class="attr">fileDomain</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Erupt Framework&quot;</span>,</span><br><span class="line">    <span class="comment">//描述</span></span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&quot;通用数据管理框架&quot;</span>,</span><br><span class="line">    <span class="comment">//高德地图api key,使用地图组件须指定此属性，amapKey获取地址：https://lbs.amap.com (服务平台为：Web端(JS API))</span></span><br><span class="line">    <span class="attr">amapKey</span>: <span class="string">&quot;6ba79a8d&quot;</span>,</span><br><span class="line">    <span class="comment">//logo路径</span></span><br><span class="line">    <span class="attr">logoPath</span>: <span class="string">&quot;erupt.svg&quot;</span>,</span><br><span class="line">    <span class="comment">//logo文字</span></span><br><span class="line">    <span class="attr">logoText</span>: <span class="string">&quot;erupt&quot;</span>,</span><br><span class="line">    <span class="comment">//是否展示版权信息（1.6.10及以后版本支持）</span></span><br><span class="line">    <span class="attr">copyright</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//自定义导航栏按钮，配置后将会出现在页面右上角</span></span><br><span class="line">    <span class="attr">r_tools</span>: [&#123;</span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;自定义功能按钮&quot;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&quot;fa-eercast&quot;</span>,</span><br><span class="line">        <span class="attr">mobileHidden</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">click</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;Function button&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//路由回调函数</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">eruptRouterEvent</span> = &#123;</span><br><span class="line">    <span class="comment">//key表示要监听的路由切换地址，为url hash地址最后一段</span></span><br><span class="line">    <span class="comment">//例如：http://www.erupt.xyz:9999/#/build/table/demo中demo为回调key</span></span><br><span class="line">    <span class="attr">demo</span>: &#123;</span><br><span class="line">        <span class="comment">//路由载入事件</span></span><br><span class="line">        <span class="attr">load</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//路由退出事件</span></span><br><span class="line">        <span class="attr">unload</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//$ 为全路径通配符，在任何路由切换时都会执行load与unload事件</span></span><br><span class="line">    <span class="attr">$</span>: &#123;</span><br><span class="line">        <span class="attr">load</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">unload</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//erupt生命周期函数</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">eruptEvent</span> = &#123;</span><br><span class="line">    <span class="comment">//页面加载完成后回调</span></span><br><span class="line">    <span class="attr">startup</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>home.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加Erupt的Java配置类<code>EruptConfig</code>，<code>以启动类的包为准</code>，配置包扫码路径；</li></ul><p><code>注：&quot;需扫描的包路径&quot;配置同一路径即可</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;xyz.erupt&quot;,&quot;需扫描的包路径&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EntityScan(&#123;&quot;xyz.erupt&quot;,&quot;需扫描的包路径&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EruptScan(&#123;&quot;xyz.erupt&quot;,&quot;需扫描的包路径&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EruptConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在<code>MySQL</code>中创建<code>erupt数据库</code>，之后使用启动类运行该项目，在erupt数据库中会<code>自动创建</code>如下表；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/ZyvtXDLbQFie1Wp.png"></p></li><li><p>项目启动成功后，可以直接访登录页，默认账号密码都是<code>erupt</code>，项目访问地址：<code>http://localhost:8080/</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/TuFnZ3O92pk1hJ6.png"></p></li><li><p>登录成功后会跳转到项目主页，我们可以发现没有写一行前端代码，却拥有了完整的权限管理和字典管理功能，是不是很棒！<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/Xu47QPRntHiwoyT.png"></p></li></ul><h2 id="实现单表-CRUD"><a href="#实现单表-CRUD" class="headerlink" title="实现单表 CRUD"></a>实现单表 CRUD</h2><blockquote><p>使用核心注解<code>@Erupt</code>和<code>@EruptField</code>定义一个实体类即可快速完成CRUD操作，让我们以商品品牌管理为例试试吧。</p></blockquote><ul><li><p>不需要<code>Controller、Service、Dao</code>，仅仅一个实体类即可完成CRUD，首先我们创建实体类<code>PmsBrand</code>；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Erupt(name = &quot;商品品牌&quot;)</span></span><br><span class="line"><span class="meta">@Table(name = &quot;pms_brand&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PmsBrand</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(generator = &quot;generator&quot;)</span></span><br><span class="line">    <span class="meta">@GenericGenerator(name = &quot;generator&quot;, strategy = &quot;native&quot;)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@EruptField</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;品牌名称&quot;),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;品牌名称&quot;,notNull=true,search = @Search(vague = true))</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;品牌首字母&quot;),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;品牌首字母&quot;,notNull=true)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> String firstLetter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;品牌LOGO&quot;),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;品牌LOGO&quot;, type = EditType.ATTACHMENT,</span></span><br><span class="line"><span class="meta">                    attachmentType = @AttachmentType(type = AttachmentType.Type.IMAGE))</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> String logo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;品牌专区大图&quot;),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;品牌专区大图&quot;, type = EditType.ATTACHMENT,</span></span><br><span class="line"><span class="meta">                    attachmentType = @AttachmentType(type = AttachmentType.Type.IMAGE))</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> String bigPic;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;品牌故事&quot;),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;品牌故事&quot;)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> String brandStory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;排序&quot;),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;排序&quot;)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;是否显示&quot;),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;是否显示&quot;)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> Boolean showStatus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;品牌制造商&quot;),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;品牌制造商&quot;)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> Boolean factoryStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer productCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer productCommentCount;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建成功后重启项目，在<code>菜单维护</code>中添加一个叫<code>商品</code>的一级菜单；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/pd4WEx785TAnYkJ.png"></p></li><li><p>然后再添加一个叫<code>品牌管理</code>的二级菜单，注意选择好<code>菜单类</code>型和<code>上级菜单</code>，输入类型值为实体类的类名称<code>PmsBrand</code>；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/Gc1rjgtH94EIUFl.png"></p></li><li><p>菜单添加成功后，刷新页面，完整的品牌管理功能就出现了，来试下新增；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/t5Awhcs9K763dof.png"></p></li><li><p>再看下查询列表页面，可以发现我们通过<code>@Edit</code>注解，将实体类的字段转换成了不同的输入控件，比如文本框、图片上传框、单选框和数值框。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/GNHmLFcwsnA5dPb.png"></p></li></ul><h2 id="核心注解说明"><a href="#核心注解说明" class="headerlink" title="核心注解说明"></a>核心注解说明</h2><p>几个Erupt的核心注解，对照PmsBrand中的代码学习即可！</p><h3 id="Erupt"><a href="#Erupt" class="headerlink" title="@Erupt"></a>@Erupt</h3><blockquote><p>name：功能名称<br>desc：功能描述</p></blockquote><h3 id="EruptField"><a href="#EruptField" class="headerlink" title="@EruptField"></a>@EruptField</h3><blockquote><p>views：表格展示配置<br>edit：编辑项配置<br>sort：前端展示顺序，数字越小越靠前</p></blockquote><h3 id="View"><a href="#View" class="headerlink" title="@View"></a>@View</h3><blockquote><p>title：表格列名称<br>desc：表格列描述<br>type：数据展示形式，默认为AUTO，可以根据属性类型自行推断<br>show：是否显示</p></blockquote><h3 id="Edit"><a href="#Edit" class="headerlink" title="@Edit"></a>@Edit</h3><blockquote><p>title：表格列名称<br>desc：表格列描述<br>type：编辑类型，默认为AUTO，可以根据属性类型自行推断<br>show：是否显示<br>notNull：是否为必填项<br>search：是否支持搜索，search &#x3D; @Search(vague &#x3D; true)会启用高级查询策略</p></blockquote><h2 id="扩展模块"><a href="#扩展模块" class="headerlink" title="扩展模块"></a>扩展模块</h2><blockquote><p>当然Erupt的功能远不止于此，还集成了很多实用的系统功能，截止1.8.x版本包括定时任务、代码生成器、系统监控及NoSQL支持等。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/xISbjCfPBcZkFd3.png"></p><h3 id="定时任务erupt-job"><a href="#定时任务erupt-job" class="headerlink" title="定时任务erupt-job"></a>定时任务erupt-job</h3><blockquote><p>通过定时任务功能，我们可以在代码中定义好定时任务，然后在图形化界面中操作任务</p></blockquote><ul><li><p>首先我们需要在<code>pom.xml</code>中添加<code>erupt-job相关依赖</code>；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定时任务erupt-job--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-job<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>之后在<code>application.yml</code>中添加邮件配置（否则启动会报错）；</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xxxxxx@qq.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.exmail.qq.com</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail.smtp.ssl.auth:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">mail.smtp.ssl.enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">mail.smtp.ssl.required:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>之后创建一个定时任务实现类<code>JobHandlerImpl</code>，在exec方法中添加定时任务执行代码；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">EruptJobHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">exec</span><span class="params">(String code, String param)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时任务已经执行，code:&#123;&#125;,param:&#123;&#125;&quot;</span>,code,param);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>之后重新启动应用，在任务维护中添加一个定时任务，每5秒(<code>Cron表达式</code>)执行一次；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/EyR7oZNGrid4mSt.png"></p></li><li><p>添加成功后，定时任务开始执行，点击任务列表中的<code>日志</code>按钮即可查看执行日志。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/t1eIbwAHZOxjCa6.png"></p></li></ul><h3 id="代码生成器erupt-generator"><a href="#代码生成器erupt-generator" class="headerlink" title="代码生成器erupt-generator"></a>代码生成器erupt-generator</h3><blockquote><p>如果你觉得手写实体类比较麻烦的话，还可以用用Erupt中的<code>代码生成器</code>。</p></blockquote><ul><li><p>在<code>pom.xml</code>中添加<code>erupt-generator相关依赖</code>；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 代码生成器 erupt-generator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>代码生成</code>菜单中我们可以像在Navicat中一样，直接添加表和字段，从而生成实体类代码；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/q6Qky24v5VFOeYX.png"></p></li><li><p>我们在添加过程中可以发现，Erupt支持的<code>编辑类型</code>还挺多的，<code>多达30种</code>；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/9VxGmNUIzAnd4Bk.png"></p></li><li><p>添加成功后，点击列表项的代码预览按钮可以直接生成代码，复制到自己项目下即可。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/ELzJul2v5HPRtYS.png"></p></li></ul><h3 id="系统监控erupt-monitor"><a href="#系统监控erupt-monitor" class="headerlink" title="系统监控erupt-monitor"></a>系统监控erupt-monitor</h3><blockquote><p>通过使用Erupt的系统监控功能，我们可以查看服务器的配置、Redis的缓存使用情况和在线用户信息。</p></blockquote><ul><li>在<code>pom.xml</code>中添加<code>erupt-monitor</code>相关依赖；<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务器监控 erupt-monitor--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-monitor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>由于需要使用到Redis，所以要在<code>application.yml</code>中添加<code>Redis</code>配置，并<code>开启Session</code>的Redis存储功能；</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span> <span class="comment"># Redis服务器地址</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span> <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span> <span class="comment"># Redis服务器连接端口</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span> <span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">3000ms</span> <span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="attr">erupt:</span></span><br><span class="line">  <span class="comment"># 开启redis方式存储session，默认false，开启后需在配置文件中添加redis配置</span></span><br><span class="line">  <span class="attr">redisSession:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>通过<code>服务监控</code>菜单，可以查看到服务器的CPU、内存和Java虚拟机信息；</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/PAFbqaZ5rI7CvBQ.png"></p><ul><li><p>通过<code>缓存监控</code>菜单，可以查看到Redis信息、命令统计和Redis Key统计；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/5SEwVyCNuL1hcl9.png"></p></li><li><p>通过<code>在线用户</code>菜单，可以查看到在线用户信息，还可以让用户<code>强行退出！</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/mybDWpLwz4if5rk.png"></p></li></ul><h3 id="NoSQL数据源erupt-mongodb"><a href="#NoSQL数据源erupt-mongodb" class="headerlink" title="NoSQL数据源erupt-mongodb"></a>NoSQL数据源erupt-mongodb</h3><p>Erupt支持多种数据源，包括：MySQL、Oracle、PostgreSQL、H2，甚至支持 MongoDB。下面我们来体验下MongoDB的支持功能。</p><ul><li>在<code>pom.xml</code>中添加<code>erupt-mongodb相关依赖</code>；<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--NoSQL数据源 erupt-mongodb--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>由于需要使用到<code>MongoDB</code>，所以要在<code>application.yml</code>中添加MongoDB配置；</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span> <span class="comment"># mongodb的连接地址</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">27017</span> <span class="comment"># mongodb的连接端口号</span></span><br><span class="line">      <span class="attr">database:</span> <span class="string">erupt</span> <span class="comment"># mongodb的连接的数据库</span></span><br></pre></td></tr></table></figure><ul><li>以一个简化版的商品管理为例，还是熟悉的套路，添加一个<code>PmsProduct</code>实体类；<blockquote><p>与之前操作MySQL的区别是通过<code>@EruptDataProcessor</code>注解指定用MongoDB来存储数据，<code>@Table</code>注解改为使用<code>@Document</code>注解；</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.Document;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EruptDataProcessor(EruptMongodbImpl.MONGODB_PROCESS)</span>  <span class="comment">//此注解表示使用MongoDB来存储数据</span></span><br><span class="line"><span class="meta">@Document(collection = &quot;product&quot;)</span></span><br><span class="line"><span class="meta">@Erupt(</span></span><br><span class="line"><span class="meta">        name = &quot;商品管理&quot;,</span></span><br><span class="line"><span class="meta">        orderBy = &quot;sort&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PmsProduct</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@EruptField</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;商品名称&quot;, sortable = true),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;商品名称&quot;, search = @Search(vague = true))</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;副标题&quot;, sortable = true),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;副标题&quot;, search = @Search(vague = true))</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> String subTitle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;价格&quot;, sortable = true),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;价格&quot;)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;商品图片&quot;),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;商品图片&quot;, type = EditType.ATTACHMENT,</span></span><br><span class="line"><span class="meta">                    attachmentType = @AttachmentType(type = AttachmentType.Type.IMAGE))</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;状态&quot;, sortable = true),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;状态&quot;,</span></span><br><span class="line"><span class="meta">                    boolType = @BoolType(trueText = &quot;上架&quot;, falseText = &quot;下架&quot;),</span></span><br><span class="line"><span class="meta">                    search = @Search)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> Boolean publishStatus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EruptField(</span></span><br><span class="line"><span class="meta">            views = @View(title = &quot;创建时间&quot;, sortable = true),</span></span><br><span class="line"><span class="meta">            edit = @Edit(title = &quot;创建时间&quot;, search = @Search(vague = true))</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接下来就是在<code>菜单维护</code>里面添加一个<code>商品管理</code>的菜单，刷新一下就可以看到该功能了。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/aGfbIlzdxXykP1A.png"></li></ul><h3 id="在线接口开发erupt-magic-api"><a href="#在线接口开发erupt-magic-api" class="headerlink" title="在线接口开发erupt-magic-api"></a>在线接口开发erupt-magic-api</h3><blockquote><p>最后再介绍一个神奇的功能，直接通过UI界面来开发接口，无需定义Controller、Service、Dao、Mapper、XML、VO等Java对象！</p></blockquote><ul><li><p>在<code>pom.xml</code>中添加<code>erupt-magic-api相关依赖</code>；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在线接口开发 erupt-magic-api--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.erupt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>erupt-magic-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;erupt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>application.yml</code>中添加<code>magic-api相关配置</code>；</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">erupt:</span></span><br><span class="line">  <span class="comment"># 设置具体哪些包被jackson消息转化而不是gson</span></span><br><span class="line">  <span class="attr">jacksonHttpMessageConvertersPackages:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">org.ssssssss......</span></span><br><span class="line"></span><br><span class="line"><span class="attr">magic-api:</span></span><br><span class="line">  <span class="attr">web:</span> <span class="string">/magic/web</span></span><br><span class="line">  <span class="comment"># 接口配置文件存放路径，如下：</span></span><br><span class="line">  <span class="attr">resource.location:</span> <span class="string">D:/erupt/magic-script</span></span><br></pre></td></tr></table></figure></li><li><p>我们可以直接通过<code>magic-api</code>自己定义的脚本来实现查询，比如下面这个脚本，用于查询全部品牌；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from pms_brand&quot;</span>;    </span><br><span class="line"><span class="keyword">return</span> db.select(sql);</span><br></pre></td></tr></table></figure></li><li><p>在<code>接口配置</code>菜单中直接添加该脚本即可实现品牌列表查询接口，无需额外编写代码；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/SyYx2vDIOdCNXPo.png"></p></li><li><p>在浏览器中直接访问接口，发现已经自动生成接口，是不是很棒！<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/18/sypFMJiS8KgTP9v.png"></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果你的需求是搭建一个业务并不复杂的后台管理系统，Erupt是一个很好的选择！它能让你不写前端代码！但是如果你的需求方对界面有很多要求，而你的业务逻辑又比较复杂的话那就要自己实现前端了!</p><blockquote><p>原文：<a href="https://mp.weixin.qq.com/s/jZ44i8nJRPKwewohoq59Jw">https://mp.weixin.qq.com/s/jZ44i8nJRPKwewohoq59Jw</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 敏捷开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码生成 </tag>
            
            <tag> Erupt </tag>
            
            <tag> 权限管理 </tag>
            
            <tag> 数据安全 </tag>
            
            <tag> 定时任务 </tag>
            
            <tag> 系统监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中那18把&quot;金刚&quot;锁</title>
      <link href="/2021/09/16/Java%E4%B8%AD%E9%82%A318%E6%8A%8A%E9%87%91%E5%88%9A%E9%94%81/"/>
      <url>/2021/09/16/Java%E4%B8%AD%E9%82%A318%E6%8A%8A%E9%87%91%E5%88%9A%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h2><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p><code>悲观锁</code>对应于生活中悲观的人，悲观的人总是想着事情往坏的方向发展。</p><blockquote><p>举个生活中的例子，假设厕所只有一个坑位了，悲观锁上厕所会第一时间把门反锁上，这样其他人上厕所只能在门外等候，这种状态就是「阻塞」了。</p></blockquote><p>回到代码世界中，一个<code>共享数据加了悲观锁，那线程每次想操作这个数据前都会假设其他线程也可能会操作这个数据，所以每次操作前都会上锁，这样其他线程想操作这个数据拿不到锁只能阻塞了。</code></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/6pej8roC7FS5OfM.jpg" alt="悲观锁"></p><ul><li>在Java语言中<code>synchronized</code>和<code>ReentrantLock</code>等就是典型的悲观锁，还有一些使用了synchronized关键字的容器类如<code>HashTable</code>等也是悲观锁的应用。</li></ul><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p><code>乐观锁</code>对应于生活中乐观的人，乐观的人总是想着事情往好的方向发展。</p><blockquote><p>举个生活中的例子，假设厕所只有一个坑位了，乐观锁认为：这荒郊野外的，又没有什么人，不会有人抢我坑位的，每次关门上锁多浪费时间，还是不加锁好了。你看乐观锁就是天生乐观！</p></blockquote><p>回到代码世界中，<code>乐观锁操作数据时不会上锁，在更新的时候会判断一下在此期间是否有其他线程去更新这个数据。</code></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/921e5WbPZhjLuSd.jpg" alt="乐观锁"></p><ul><li>乐观锁可以使用<code>版本号机制</code>和<code>CAS算法</code>实现。在 Java 语言中 <code>java.util.concurrent.atomic</code>包下的<code>原子类就是使用CAS 乐观锁实现</code>的。</li></ul><h3 id="两种锁的使用场景"><a href="#两种锁的使用场景" class="headerlink" title="两种锁的使用场景"></a>两种锁的使用场景</h3><ul><li>悲观锁和乐观锁没有孰优孰劣，有其各自适应的场景。</li><li><code>乐观锁</code>适用于<code>写比较少（冲突比较小）</code>的场景，因为不用上锁、释放锁，省去了锁的开销，从而提升了吞吐量。</li><li><code>悲观锁</code>适用于<code>写多读少</code>的场景，即冲突比较严重，线程间竞争激励的场景，如果使用乐观锁就是导致线程不断进行重试，这样可能还降低了性能。</li></ul><h2 id="独占锁和共享锁"><a href="#独占锁和共享锁" class="headerlink" title="独占锁和共享锁"></a>独占锁和共享锁</h2><h3 id="独占锁-排他锁、写锁"><a href="#独占锁-排他锁、写锁" class="headerlink" title="独占锁(排他锁、写锁)"></a>独占锁(排他锁、写锁)</h3><p><code>独占锁</code>是指<code>锁一次只能被一个线程所持有</code>。如果一个线程对数据加上排他锁后，那么其他线程不能再对该数据加任何类型的锁。获得独占锁的线程<code>即能读数据又能修改数据</code>。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/nMObw7uKoQV9mH6.jpg" alt="独占锁(排他锁、写锁)"></p><ul><li>JDK中的<code>synchronized</code>和<code>java.util.concurrent(JUC)</code>包中<code>Lock的实现类</code>就是独占锁。</li></ul><p><code>注：独占锁(排他锁)和悲观锁的设计概念一致</code></p><h3 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h3><p><code>共享锁</code>是指<code>锁可被多个线程所持有</code>。如果一个线程对数据加上共享锁后，那么其他线程只能对数据再加共享锁，不能加独占锁。获得共享锁的线程<code>只能读数据，不能修改数据</code>。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/xYg7lmEUOhrb2uI.jpg" alt="共享锁"></p><ul><li>在 JDK 中 <code>ReentrantReadWriteLock</code> 就是一种共享锁。</li></ul><h2 id="互斥锁和读写锁"><a href="#互斥锁和读写锁" class="headerlink" title="互斥锁和读写锁"></a>互斥锁和读写锁</h2><h3 id="互斥锁-独占锁的常规实现"><a href="#互斥锁-独占锁的常规实现" class="headerlink" title="互斥锁(独占锁的常规实现)"></a>互斥锁(独占锁的常规实现)</h3><p><code>互斥锁</code>是<code>独占锁的</code>一种<code>常规实现</code>，是指<code>某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性</code>。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/Qh8XtKSPj6lm5TN.jpg" alt="互斥锁"></p><ul><li>互斥锁一次只能一个线程拥有互斥锁，其他线程只有等待。</li></ul><h3 id="读写锁-共享锁的具体实现"><a href="#读写锁-共享锁的具体实现" class="headerlink" title="读写锁(共享锁的具体实现)"></a>读写锁(共享锁的具体实现)</h3><p><code>读写锁</code>是<code>共享</code>锁的一种<code>具体实现</code>。<code>读写锁管理一组锁，一个是只读的锁，一个是写锁</code>。</p><blockquote><p>读锁可以<code>在没有写锁的时候被多个线程同时持有</code>，而写锁是独占的。<code>写锁的优先级要高于读锁</code>，一个获得了读锁的线程必须能看到前一个释放的写锁所更新的内容。</p></blockquote><ul><li>读写锁相比于互斥锁并发程度更高，<code>每次只有一个写线程</code>，但是同时可以有多个线程并发读。</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/Fxy9hlP38vCHVtR.jpg" alt="读写锁"></p><p>在 JDK 中定义了一个读写锁的接口：<code>ReadWriteLock</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReadWriteLock</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取读锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Lock <span class="title function_">readLock</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取写锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Lock <span class="title function_">writeLock</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ReentrantReadWriteLock</code>实现了ReadWriteLock接口</li></ul><h2 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><h3 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h3><p><code>公平锁</code>是指<code>多个线程按照申请锁的顺序来获取锁</code>，这里类似排队买票，先来的人先买，后来的人在队尾排着，这是公平的。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/wqoKifLesDhYTMv.jpg" alt="公平锁"><br>在 java 中可以通过构造函数初始化公平锁</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建一个可重入锁，true 表示公平锁，false 表示非公平锁。默认非公平锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h3><p><code>非公平锁</code>是指<code>多个线程获取锁的顺序并不是按照申请锁的顺序</code>，有可能后申请的线程比先申请的线程优先获取锁，在高并发环境下，有可能造成优先级翻转，或者饥饿的状态（某个线程一直得不到锁）。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/HnE8wlaM5VYCemd.jpg" alt="非公平锁"><br>在 java 中<code>synchronized</code>关键字是非公平锁，<code>ReentrantLock默认</code>也是非公平锁。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建一个可重入锁，true 表示公平锁，false 表示非公平锁。默认非公平锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="可重入锁-递归锁"><a href="#可重入锁-递归锁" class="headerlink" title="可重入锁(递归锁)"></a>可重入锁(递归锁)</h2><p>可重入锁又称之为递归锁，是指<code>同一个线程在外层方法获取了锁，在进入内层方法会自动获取锁</code>。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/kFcuHdJtrg4fATV.jpg" alt="可重入锁(递归锁)"><br>对于Java <code>ReentrantLock</code>和<code>Synchronized</code>都是一个可重入锁。</p><blockquote><p><code>敲黑板：可重入锁的一个好处是可一定程度避免死锁。</code></p></blockquote><p>以 synchronized 为例，看一下下面的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">mehtodA</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> <span class="comment">// Do some magic tings</span></span><br><span class="line"> mehtodB();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">mehtodB</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> <span class="comment">// Do some magic tings</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中methodA调用methodB，如果<code>一个线程调用methodA已经获取了锁再去调用methodB就不需要再次获取锁了</code>，这就是可重入锁的特性。如果不是可重入锁的话，mehtodB 可能不会被当前线程执行，可能造成死锁。</p><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p><code>自旋锁</code>是指<code>线程在没有获得锁时不是被直接挂起，而是执行一个忙循环</code>，这个忙循环就是所谓的自旋。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/6WF5Ko8T9jU2srS.jpg" alt="自旋锁"></p><ul><li>自旋锁的目的是为了<code>减少线程被挂起的几率</code>，因为线程的挂起和唤醒也都是耗资源的操作。</li><li>如果锁被另一个线程占用的时间比较长，即使自旋了之后当前线程还是会被挂起，忙循环就会变成浪费系统资源的操作，反而降低了整体性能。因此<code>自旋锁是不适应锁占用时间长的并发情况的</code>。</li></ul><p>在 Java 中，<code>AtomicInteger</code>类有自旋的操作，我们看一下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        v = getIntVolatile(o, offset);</span><br><span class="line">    <span class="comment">// CAS 操作如果失败就会一直循环获取当前 value 值然后重试。</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!compareAndSwapInt(o, offset, v, v + delta));</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>JDK1.6又引入了自适应自旋</code>，这个就比较智能了，<code>自旋时间不再固定，由前一次在同一个锁上的自旋时间以及锁的拥有者的状态来决定</code>。如果虚拟机认为这次自旋也很有可能再次成功那就会自旋较多的时间，如果自旋很少成功，那以后可能就直接省略掉自旋过程，避免浪费处理器资源。</p><h2 id="分段锁-锁设计"><a href="#分段锁-锁设计" class="headerlink" title="分段锁(锁设计)"></a>分段锁(锁设计)</h2><p><code>分段锁</code>是一种<code>锁的设计</code>，并<code>不是具体的一种锁</code>。</p><blockquote><p>分段锁设计目的是<code>将锁的粒度进一步细化</code>，当操作不需要更新整个数组的时候，就仅仅针对数组中的一项进行加锁操作。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/xv7NRAgBVwrkOoe.jpg" alt="分段锁(锁设计)"></p><ul><li>在 Java 语言中<code>CurrentHashMap</code>底层就用了分段锁，使用Segment，就可以进行并发使用了。</li></ul><h2 id="锁升级（无锁-偏向锁-轻量级锁-重量级锁）"><a href="#锁升级（无锁-偏向锁-轻量级锁-重量级锁）" class="headerlink" title="锁升级（无锁|偏向锁|轻量级锁|重量级锁）"></a>锁升级（无锁|偏向锁|轻量级锁|重量级锁）</h2><p><code>JDK1.6 为了提升性能减少获得锁和释放锁所带来的消耗</code>，引入了4种<code>锁的状态</code>：<code>无锁</code>、<code>偏向锁</code>、<code>轻量级锁</code>和<code>重量级锁</code>，它会<code>随着多线程的竞争情况逐渐升级，但不能降级</code>。</p><h3 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a>无锁</h3><p><code>无锁状态</code>其实就是上面讲的<code>乐观锁</code>，这里不再赘述。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p><code>偏向锁(Biased Locking)</code>是指<code>它会偏向于第一个访问锁的线程</code>，如果在运行过程中，只有一个线程访问加锁的资源，不存在多线程竞争的情况，那么线程是不需要重复获取锁的，这种情况下，就会给线程加一个偏向锁。</p><p>偏向锁的实现是<code>通过控制对象Mark Word的标志位来实现的</code>，如果当前是可偏向状态，需要进一步判断对象头存储的线程 ID 是否与当前线程 ID 一致，如果一致直接进入。</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p><code>当线程竞争变得比较激烈时，偏向锁就会升级为轻量级锁</code>，轻量级锁认为虽然竞争是存在的，但是理想情况下竞争的程度很低，通过自旋方式等待上一个线程释放锁。</p><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>如果线程并发进一步加剧，线程的自旋超过了一定次数，或者一个线程持有锁，一个线程在自旋，又来了第三个线程访问时（反正就是竞争继续加大了），轻量级锁就会膨胀为重量级锁，重量级锁会使除了此时拥有锁的线程以外的线程都阻塞。</p><blockquote><p><code>升级到重量级锁</code>其实就是<code>互斥锁</code>了，一个线程拿到锁，其余线程都会处于阻塞等待状态。</p></blockquote><ul><li>在 Java 中，<code>synchronized</code>关键字内部实现原理就是锁升级的过程：<code>无锁 --&gt; 偏向锁 --&gt; 轻量级锁 --&gt; 重量级锁</code>。</li></ul><h2 id="锁优化技术（锁粗化、锁消除）"><a href="#锁优化技术（锁粗化、锁消除）" class="headerlink" title="锁优化技术（锁粗化、锁消除）"></a>锁优化技术（锁粗化、锁消除）</h2><h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p><code>锁粗化</code>就是将多个同步块的数量减少，并将单个同步块的作用范围扩大，本质上就是<code>将多次上锁、解锁的请求合并为一次同步请求</code>。</p><p>举个例子，一个循环体中有一个代码同步块，每次循环都会执行加锁解锁操作。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">LOCK</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(LOCK)&#123;</span><br><span class="line">        <span class="comment">// do some magic things</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过锁粗化后就变成下面这个样子了：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">synchronized</span>(LOCK)&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// do some magic things</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p><code>锁消除</code>是指<code>虚拟机编译器在运行时检测到了共享数据没有竞争的锁，从而将这些锁进行消除</code>。</p><p>举个例子让大家更好理解。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String s1, String s2)</span>&#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">    stringBuffer.append(s1);</span><br><span class="line">    stringBuffer.append(s2);</span><br><span class="line">    <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中有一个 test 方法，主要作用是将字符串s1和字符串s2串联起来。</p><blockquote><ol><li>test方法中三个变量s1,s2,stringBuffer，它们都是局部变量，局部变量是在栈上的，栈是线程私有的，所以就算有多个线程访问test方法也是线程安全的。</li><li>StringBuffer是线程安全的类，append方法是同步方法，但是test方法本来就是线程安全的，为了提升效率，虚拟机帮我们消除了这些同步锁，这个过程就被称为锁消除。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer.class</span><br><span class="line"></span><br><span class="line"><span class="comment">// append 是同步方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    toStringCache = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">super</span>.append(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>前面讲了 Java 语言中各种各种的锁，最后再通过六个问题统一总结一下：<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/16/GBz4PsidtJZ1UVk.jpg" alt="总结"></p><blockquote><p>原文：<a href="https://mp.weixin.qq.com/s/2jxzNnyGWDFol4Q9R2a_Yg">https://mp.weixin.qq.com/s/2jxzNnyGWDFol4Q9R2a_Yg</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁机制 </tag>
            
            <tag> 乐观锁 </tag>
            
            <tag> 悲观锁 </tag>
            
            <tag> 排他锁 </tag>
            
            <tag> 共享锁 </tag>
            
            <tag> 互斥锁 </tag>
            
            <tag> 公平锁 </tag>
            
            <tag> 可重入锁 </tag>
            
            <tag> 自旋锁 </tag>
            
            <tag> 轻量级锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 提高代码效率小技巧</title>
      <link href="/2021/09/15/Java%20%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E6%95%88%E7%8E%87%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2021/09/15/Java%20%E6%8F%90%E9%AB%98%E4%BB%A3%E7%A0%81%E6%95%88%E7%8E%87%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>代码优化 ，一个很重要的课题。可能有些人觉得没用，一些细小的地方有什么好修改的，改与不改对于代码的运行效率有什么影响呢？这个问题我是这么考虑的，就像大海里面的鲸鱼一样，它吃一条小虾米有用吗？没用，但是，吃的小虾米一多之后，鲸鱼就被喂饱了。</p><p>代码优化也是一样，如果项目着眼于尽快无BUG上线，那么此时可以抓大放小，代码的细节可以不精打细磨；但是如果有足够的时间开发、维护代码，这时候就必须考虑每个可以优化的细节了，一个一个细小的优化点累积起来，对于代码的运行效率绝对是有提升的。</p><p><code>代码优化的目标是：</code></p><ul><li>减小代码的体积</li><li>提高代码运行的效率</li></ul><h2 id="优化细节"><a href="#优化细节" class="headerlink" title="优化细节"></a>优化细节</h2><h3 id="不要创建和导入不使用的对象或不使用的类"><a href="#不要创建和导入不使用的对象或不使用的类" class="headerlink" title="不要创建和导入不使用的对象或不使用的类"></a>不要创建和导入不使用的对象或不使用的类</h3><p>如果代码中出现“The value of the local variable i is not used”、“The import java.util is never used”，那么请删除这些无用的内容。</p><h3 id="尽量指定类、方法的final修饰符"><a href="#尽量指定类、方法的final修饰符" class="headerlink" title="尽量指定类、方法的final修饰符"></a>尽量指定类、方法的final修饰符</h3><ul><li>带有 final 修饰符的类是不可派生的。</li><li>在 Java 核心 API中，有许多应用final的例子，例如java.lang.String，整个类都是 final 的。</li><li>为类指定 final 修饰符可以让类不可以被继承，为方法指定final修饰符可以让方法不可以被重写。如果指定了一个类为final，则该类所有的方法都是 final 的。</li><li>Java 编译器会寻找机会内联所有的final方法，内联对于提升Java运行效率作用重大。<code>如果一个方法体本身就很大，这样的优势就小了很多了</code>。</li></ul><p><code>注：在最近的java设计中，虚拟机（特别是hotspot技术）可以自己去根据具体情况自动优化选择是否进行内联，因此和final关键字就无关了。</code></p><h3 id="尽量重用对象"><a href="#尽量重用对象" class="headerlink" title="尽量重用对象"></a>尽量重用对象</h3><p>特别是 String 对象的使用，出现字符串连接时应该使用StringBuilder&#x2F;StringBuffer 代替。由于Java虚拟机不仅要花时间生成对象，以后可能还需要花时间对这些对象进行垃圾回收和处理，因此，生成过多的对象将会给程序的性能带来很大的影响。</p><h3 id="尽可能使用局部变量"><a href="#尽可能使用局部变量" class="headerlink" title="尽可能使用局部变量"></a>尽可能使用局部变量</h3><p>调用方法时传递的参数以及在调用中创建的临时变量都保存在栈中速度较快，其他变量，如静态变量、实例变量等，都在堆中创建，速度较慢。另外，栈中创建的变量，随着方法的运行结束，这些内容就没了，不需要额外的垃圾回收。</p><h3 id="尽量避免随意使用静态变量"><a href="#尽量避免随意使用静态变量" class="headerlink" title="尽量避免随意使用静态变量"></a>尽量避免随意使用静态变量</h3><p>要知道，当某个对象被定义为static的变量所引用，那么GC通常是不会回收这个对象所占有的堆内存的，如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>此时静态变量 b 的生命周期与 A 类相同，如果 A 类不被卸载，那么引用 B 指向的 B 对象会常驻内存，直到程序终止。</code></p><h3 id="将常量声明为static-final，并以大写命名"><a href="#将常量声明为static-final，并以大写命名" class="headerlink" title="将常量声明为static final，并以大写命名"></a>将常量声明为static final，并以大写命名</h3><p>这样在编译期间就可以把这些内容放入常量池中，避免运行期间计算生成常量的值。另外，将常量的名字以大写命名也可以方便区分出常量与变量</p><h3 id="不要让public方法中有太多的形参"><a href="#不要让public方法中有太多的形参" class="headerlink" title="不要让public方法中有太多的形参"></a>不要让public方法中有太多的形参</h3><p>public 方法即对外提供的方法，如果给这些方法太多形参的话主要有两点坏处：</p><ul><li>违反了面向对象的编程思想，Java讲求一切都是对象，太多的形参，和面向对象的编程思想并不契合</li><li>参数太多势必导致方法调用的出错概率增加</li></ul><p>至于这个“太多”指的是多少个，<code>3、4个</code>吧。比如我们用 JDBC 写一个 insertStudentInfo() 方法，有10个学生信息字段要插入 Student 表中，可以把这10个参数封装在一个实体类中，作为 insert() 方法的形参。</p><h3 id="不要对超出范围的基本数据类型做向下强制转型"><a href="#不要对超出范围的基本数据类型做向下强制转型" class="headerlink" title="不要对超出范围的基本数据类型做向下强制转型"></a>不要对超出范围的基本数据类型做向下强制转型</h3><p>这绝不会得到想要的结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">12345678901234L</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>) l;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可能期望得到其中的某几位，但是结果却是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1942892530</span><br></pre></td></tr></table></figure><p>解释一下。Java 中 long是8个字节64位的，所以12345678901234在计算机中的表示应该是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000 0000 0000 0000 0000 1011 0011 1010 0111 0011 1100 1110 0010 1111 1111 0010</span><br></pre></td></tr></table></figure><p>一个 int 型数据是4个字节32位的，从低位取出上面这串二进制数据的前32位是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0111 0011 1100 1110 0010 1111 1111 0010</span><br></pre></td></tr></table></figure><p>这串二进制表示为十进制1942892530，所以就是我们上面的控制台上输出的内容。从这个例子上还能顺便得到两个结论：</p><ul><li>整型默认的数据类型是int，longl&#x3D;12345678901234L，这个数字已经超出了int的范围了，所以最后有一个L，表示这是一个long型数。顺便，浮点型的默认类型是 double，所以定义 float 的时候要写成float f &#x3D; 3.5f</li><li>接下来再写一句 int ii &#x3D; l + i; 会报错，因为 long + int 是一个long，不能赋值给 int</li></ul><h3 id="尽量采用懒加载的策略"><a href="#尽量采用懒加载的策略" class="headerlink" title="尽量采用懒加载的策略"></a>尽量采用懒加载的策略</h3><p>即在需要的时候才创建，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">    list.add(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议替换为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    list.add(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尽量在合适的场合使用单例"><a href="#尽量在合适的场合使用单例" class="headerlink" title="尽量在合适的场合使用单例"></a>尽量在合适的场合使用单例</h3><p>使用单例可以减轻加载的负担、缩短加载的时间、提高加载的效率，但并不是所有地方都适用于单例，简单来说，单例主要适用于以下三个方面：</p><ul><li>控制资源的使用，通过线程同步来控制资源的并发访问</li><li>控制实例的产生，以达到节约资源的目的</li><li>控制数据的共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信</li></ul><h3 id="慎用异常"><a href="#慎用异常" class="headerlink" title="慎用异常"></a>慎用异常</h3><ul><li>异常对性能不利。</li><li>抛出异常首先要创建一个新的对象，Throwable接口的构造函数调用名为fillInStackTrace()的本地同步方法，fillInStackTrace()方法检查堆栈，收集调用跟踪信息。</li><li>只要有异常被抛出，Java虚拟机就必须调整调用堆栈，因为在处理过程中创建了一个新的对象。</li><li>异常只能用于错误处理，不应该用来控制程序流程。</li></ul><h3 id="不要在循环中使用try…catch…"><a href="#不要在循环中使用try…catch…" class="headerlink" title="不要在循环中使用try…catch…"></a>不要在循环中使用try…catch…</h3><p>应该把其放在最外层，除非不得已。如果毫无理由地这么写了，只要你的领导资深一点、有强迫症一点，八成就要骂你为什么写出这种垃圾代码来了。</p><h3 id="及时关闭流"><a href="#及时关闭流" class="headerlink" title="及时关闭流"></a>及时关闭流</h3><p>Java 编程过程中，进行数据库连接、I&#x2F;O流操作时务必小心，在使用完毕后，及时关闭以释放资源。因为对这些大对象的操作会造成系统大的开销，稍有不慎，将会导致严重的后果。</p><h3 id="对资源的close-建议分开操作"><a href="#对资源的close-建议分开操作" class="headerlink" title="对资源的close()建议分开操作"></a>对资源的close()建议分开操作</h3><p>意思是，比如我有这么一段代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    XXX.close();</span><br><span class="line">    YYY.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议修改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    XXX.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    YYY.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可避免资源泄露。万一 XXX.close() 抛异常，进入了 catch 块中，YYY.close()不会执行，资源不会回收，一直占用，可能引起资源泄露的。而改为上面的写法之后，就保证了无论如何 XXX 和 YYY 都会被 close 掉。</p><h3 id="尽量减少对变量的重复计算"><a href="#尽量减少对变量的重复计算" class="headerlink" title="尽量减少对变量的重复计算"></a>尽量减少对变量的重复计算</h3><p>明确一个概念，对方法的调用，即使方法中只有一句语句，也是有消耗的，包括创建栈帧、调用方法时保护现场、调用方法完毕时恢复现场等。所以例如下面的操作：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议替换为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> list.size(); i &lt; length; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，在 list.size() 很大的时候，就减少了很多的消耗。</p><h3 id="为底层以数组方式实现的集合、工具类指定初始长度"><a href="#为底层以数组方式实现的集合、工具类指定初始长度" class="headerlink" title="为底层以数组方式实现的集合、工具类指定初始长度"></a>为底层以数组方式实现的集合、工具类指定初始长度</h3><p>如果能估计到待添加的内容长度，比如ArrayList、LinkedLlist、StringBuilder、StringBuffer、HashMap、HashSet等等，以 StringBuilder 为例：</p><ul><li>StringBuilder() &#x2F;&#x2F; 默认分配16个字符的空间</li><li>StringBuilder(int size) &#x2F;&#x2F; 默认分配size个字符的空间</li><li>StringBuilder(String str) &#x2F;&#x2F; 默认分配16个字符+str.length()个字符空间</li></ul><p>可以通过类的来设定它的初始化容量，这样可以明显地提升性能。<br>比如<code>当StringBuilder达到最大容量的时候，它会将自身容量增加到当前的2倍再加2，无论何时只要StringBuilder达到它的最大容量，它就不得不创建一个新的字符数组然后将旧的字符数组内容拷贝到新字符数组中，这是十分耗费性能的一个操作</code>。<br>试想，如果能预估到字符数组中大概要存放5000个字符而不指定长度，最接近5000的2次幂是4096，每次扩容加的2不管，那么：</p><blockquote><p>在4096的基础上，再申请8194个大小的字符数组，加起来相当于一次申请了12290个大小的字符数组，如果一开始能指定5000个大小的字符数组，就节省了一倍以上的空间；把原来的4096个字符拷贝到新的的字符数组中去。</p></blockquote><p>这样，既浪费内存空间又降低代码运行效率。所以，给底层以数组实现的集合、工具类设置一个合理的初始化容量是错不了的，这会带来立竿见影的效果。<br><code>注：像 HashMap 这种是以数组+链表实现的集合，别把初始大小和你估计的大小设置得一样，因为一个table上只连接一个对象的可能性几乎为0。初始大小建议设置为2的N次幂，如果能估计到有2000个元素，设置成 new HashMap(128)、new HashMap(256) 都可以。</code></p><h3 id="当复制大量数据时"><a href="#当复制大量数据时" class="headerlink" title="当复制大量数据时"></a>当复制大量数据时</h3><p>使用System.arraycopy()方法</p><h3 id="乘法和除法使用移位操作"><a href="#乘法和除法使用移位操作" class="headerlink" title="乘法和除法使用移位操作"></a>乘法和除法使用移位操作</h3><p>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (val = <span class="number">0</span>; val &lt; <span class="number">100000</span>; val += <span class="number">5</span>) &#123;</span><br><span class="line">    a = val * <span class="number">8</span>;</span><br><span class="line">    b = val / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用移位操作可以极大地提高性能，因为在计算机底层，对位的操作是最方便、最快的，因此建议修改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (val = <span class="number">0</span>; val &lt; <span class="number">100000</span>; val += <span class="number">5</span>) &#123;</span><br><span class="line">    a = val &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    b = val &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移位操作虽然快，但是可能会使代码不太好理解，因此最好加上相应的注释。</p><h3 id="循环内不要不断创建对象引用"><a href="#循环内不要不断创建对象引用" class="headerlink" title="循环内不要不断创建对象引用"></a>循环内不要不断创建对象引用</h3><p>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= count; i++) &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种做法会导致内存中有count份Object对象引用存在，count很大的话，就耗费内存了，建议为改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= count; i++) &#123;</span><br><span class="line">    obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，<code>内存中只有一份Object对象引用，每次new Object()的时候，Object对象引用指向不同的Object罢了，但是内存中只有一份</code>，这样就大大节省了内存空间了。</p><h3 id="把一个基本数据类型转为字符串"><a href="#把一个基本数据类型转为字符串" class="headerlink" title="把一个基本数据类型转为字符串"></a>把一个基本数据类型转为字符串</h3><ul><li>基本数据类型.toString()：最快<br>Integer.toString() 直接调用</li><li>String.valueOf(数据)：次之<br>String.valueOf() 方法底层调用了Integer.toString()方法，但是会在调用前做空判断</li><li>数据+：最慢<br>i + “”底层使用了 StringBuilder 实现，先用 append() 方法拼接，再用 toString() 方法获取字符串</li></ul><h3 id="字符串变量和字符串常量equals"><a href="#字符串变量和字符串常量equals" class="headerlink" title="字符串变量和字符串常量equals"></a>字符串变量和字符串常量equals</h3><p>将字符串常量写在前面，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">&quot;123&quot;</span>)) &#123;</span><br><span class="line">   ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建议修改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;123&quot;</span>.equals(str))  &#123;</span><br><span class="line">    ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么做<code>主要是可以避免空指针异常</code>。</p><h3 id="不要对数组使用toString-方法"><a href="#不要对数组使用toString-方法" class="headerlink" title="不要对数组使用toString()方法"></a>不要对数组使用toString()方法</h3><p>数组使用toString()打印出来的是什么：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] is = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    System.out.println(is.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[I@18a992f</span><br></pre></td></tr></table></figure><p>本意是想打印出数组内容，却有<code>可能因为数组引用is为空而导致空指针异常</code>。但是对集合toString()是可以打印出集合里面的内容的，因为<code>集合的父类 AbstractCollections 重写了 Object 的 toString() 方法</code>。</p><h3 id="基于效率和类型检查的考虑"><a href="#基于效率和类型检查的考虑" class="headerlink" title="基于效率和类型检查的考虑"></a>基于效率和类型检查的考虑</h3><p>应该尽可能使用array，无法确定数组大小时才使用ArrayList</p><h3 id="尽量使用HashMap、ArrayList、StringBuilder"><a href="#尽量使用HashMap、ArrayList、StringBuilder" class="headerlink" title="尽量使用HashMap、ArrayList、StringBuilder"></a>尽量使用HashMap、ArrayList、StringBuilder</h3><p>除非线程安全需要，否则不推荐使用Hashtable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销</p><h3 id="不要将数组声明为public-static-final"><a href="#不要将数组声明为public-static-final" class="headerlink" title="不要将数组声明为public static final"></a>不要将数组声明为public static final</h3><p>因为这毫无意义，这样<code>只是定义了引用为static final，数组的内容还是可以随意改变的</code>，<code>将数组声明为public更是一个安全漏洞，这意味着这个数组可以被外部类所改变</code>。</p><h3 id="ArrayList和LinkedList的选择"><a href="#ArrayList和LinkedList的选择" class="headerlink" title="ArrayList和LinkedList的选择"></a>ArrayList和LinkedList的选择</h3><p>顺序插入和随机访问比较多的场景使用ArrayList，元素删除和中间插入比较多的场景使用LinkedList这个，理解ArrayList和LinkedList的原理就知道了</p><h3 id="公用集合中不使用的数据必须及时remove"><a href="#公用集合中不使用的数据必须及时remove" class="headerlink" title="公用集合中不使用的数据必须及时remove"></a>公用集合中不使用的数据必须及时remove</h3><p>如果一个集合类是公用的（也就是说不是方法里面的属性），那么这个集合里面的元素是不会自动释放的，因为始终有引用指向它们。所以，如果公用集合里面的某些数据不使用而不去remove掉它们，那么将会造成这个公用集合不断增大，使得系统有内存泄露的隐患。</p><h3 id="实现RandomAccess接口的集合"><a href="#实现RandomAccess接口的集合" class="headerlink" title="实现RandomAccess接口的集合"></a>实现RandomAccess接口的集合</h3><p>比如ArrayList，应当使用最普通的for循环而不是foreach循环来遍历，这是 JDK 推荐给用户的。<br>JDK API 对于 RandomAccess接口的解释是：实现RandomAccess接口用来表明其支持快速随机访问，此接口的主要目的是允许一般的算法更改其行为，从而将其应用到随机或连续访问列表时能提供良好的性能。<br>实际经验表明，<code>实现RandomAccess接口的类实例，假如是随机访问的，使用普通 for 循环效率将高于使用foreach循环</code>；反过来，<code>如果是顺序访问的，则使用 Iterator 会效率更高</code>。<br><code>参见Java语法糖1：可变长度参数以及 foreach 循环原理。</code></p><h3 id="使用最有效率的方式去遍历Map"><a href="#使用最有效率的方式去遍历Map" class="headerlink" title="使用最有效率的方式去遍历Map"></a>使用最有效率的方式去遍历Map</h3><p>遍历 Map 的方式有很多，通常场景下我们需要的是遍历 Map 中的 Key 和 Value，那么推荐使用的、效率最高的方式是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>);</span><br><span class="line">    Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iter = entrySet.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">        Map.Entry&lt;String, String&gt; entry = iter.next();</span><br><span class="line">        System.out.println(entry.getKey() + <span class="string">&quot;    &quot;</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>只是想遍历一下这个 Map的 key 值，那用 Set keySet = map.keySet(); 会比较合适一些</code></p><h3 id="使用同步代码块替代同步方法"><a href="#使用同步代码块替代同步方法" class="headerlink" title="使用同步代码块替代同步方法"></a>使用同步代码块替代同步方法</h3><p>除非能确定一整个方法都是需要进行同步的，否则尽量使用同步代码块，避免对那些不需要进行同步的代码也进行了同步，影响了代码执行效率。</p><h3 id="使用带缓冲的输入输出流进行IO操作"><a href="#使用带缓冲的输入输出流进行IO操作" class="headerlink" title="使用带缓冲的输入输出流进行IO操作"></a>使用带缓冲的输入输出流进行IO操作</h3><p>带缓冲的输入输出流，即 BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream，这可以极大地提升 IO 效率。</p><h3 id="程序运行过程中避免使用反射"><a href="#程序运行过程中避免使用反射" class="headerlink" title="程序运行过程中避免使用反射"></a>程序运行过程中避免使用反射</h3><p>反射是 Java 提供给用户一个很强大的功能，功能强大往往意味着效率不高。<br>不建议在程序运行过程中使用尤其是频繁使用反射机制，特别是 Method 的 invoke() 方法，如果确实有必要，一种建议性的做法是<code>将那些需要通过反射加载的类在项目启动的时候通过反射实例化出一个对象并放入内存</code>，用户只关心和对端交互的时候获取最快的响应速度，并不关心项目启动花多久时间。</p><h3 id="使用数据库连接池和线程池"><a href="#使用数据库连接池和线程池" class="headerlink" title="使用数据库连接池和线程池"></a>使用数据库连接池和线程池</h3><p>这两个池都是用于重用对象的，<code>前者可以避免频繁地打开和关闭连接</code>，<code>后者可以避免频繁地创建和销毁线程</code>。</p><h3 id="及时清除不再需要的会话"><a href="#及时清除不再需要的会话" class="headerlink" title="及时清除不再需要的会话"></a>及时清除不再需要的会话</h3><p>为了清除不再活动的会话，许多应用服务器都有默认的会话超时时间，一般为30分钟。当应用服务器需要保存更多的会话时，如果内存不足，那么操作系统会把部分数据转移到磁盘，应用服务器也可能根据MRU（最近最频繁使用）算法把部分不活跃的会话转储到磁盘，甚至可能抛出内存不足的异常。如果会话要被转储到磁盘，那么必须要先被序列化，在大规模集群中，对对象进行序列化的代价是很昂贵的。因此，当会话不再需要时，应当及时调用 HttpSession 的 invalidate() 方法清除会话。</p><blockquote><p>原文：<a href="https://mp.weixin.qq.com/s/RgpEaHrVnFOuLVQ-qfMfIw">https://mp.weixin.qq.com/s/RgpEaHrVnFOuLVQ-qfMfIw</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的for循环优化方式</title>
      <link href="/2021/09/07/%E5%B8%B8%E8%A7%81%E7%9A%84for%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
      <url>/2021/09/07/%E5%B8%B8%E8%A7%81%E7%9A%84for%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们都经常使用一些循环耗时计算的操作，特别是for循环，它是一种重复计算的操作，如果处理不好，耗时就比较大，如果处理书写得当将大大提高效率，下面总结几条for循环的常见优化方式。</p><p>首先，我们初始化一个集合 list，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure><h2 id="方法一：最常规的不加思考的写法"><a href="#方法一：最常规的不加思考的写法" class="headerlink" title="方法一：最常规的不加思考的写法"></a>方法一：最常规的不加思考的写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：较常见，易于理解<br><code>缺点：每次都要计算list.size()</code></p><h2 id="方法二：数组长度提取出来"><a href="#方法二：数组长度提取出来" class="headerlink" title="方法二：数组长度提取出来"></a>方法二：数组长度提取出来</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> list.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：不必每次都计算<br><code>缺点：</code></p><ol><li>m的作用域不够小，违反了最小作用域原则</li><li>不能在for循环中操作list的大小，比如除去或新加一个元素</li></ol><h2 id="方法三：数组长度提取出来"><a href="#方法三：数组长度提取出来" class="headerlink" title="方法三：数组长度提取出来"></a>方法三：数组长度提取出来</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, n = list.size(); i &lt; n; i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：不必每次都计算 ，变量的作用域遵循最小范围原则<br><code>缺点：</code></p><ol><li>m的作用域不够小，违反了最小作用域原则</li><li>不能在for循环中操作list的大小，比如除去或新加一个元素</li></ol><h2 id="方法四：采用倒序的写法"><a href="#方法四：采用倒序的写法" class="headerlink" title="方法四：采用倒序的写法"></a>方法四：采用倒序的写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> list.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：不必每次都计算 ，变量的作用域遵循最小范围原则<br><code>缺点：</code></p><ol><li>结果的顺序会反</li><li>看起来不习惯，不易读懂</li></ol><p>适用场合：与显示结果顺序无关的地方：比如保存之前数据的校验</p><h2 id="方法五：Iterator-遍历"><a href="#方法五：Iterator-遍历" class="headerlink" title="方法五：Iterator 遍历"></a>方法五：Iterator 遍历</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Iterator&lt;String&gt; it = list.iterator(); it.hasNext();) &#123;</span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：简洁</p><h2 id="方法六：jdk1-5后的写法"><a href="#方法六：jdk1-5后的写法" class="headerlink" title="方法六：jdk1.5后的写法"></a>方法六：jdk1.5后的写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">    System.out.println(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：简洁结合泛型使用更简洁<br><code>缺点：jdk1.4向下不兼容</code></p><h2 id="方法七：循环嵌套外小内大原则"><a href="#方法七：循环嵌套外小内大原则" class="headerlink" title="方法七：循环嵌套外小内大原则"></a>方法七：循环嵌套外小内大原则</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/09/07/1PauCrfipgtOmhc.png"></p><h2 id="方法八：循环嵌套提取不需要循环的逻辑"><a href="#方法八：循环嵌套提取不需要循环的逻辑" class="headerlink" title="方法八：循环嵌套提取不需要循环的逻辑"></a>方法八：循环嵌套提取不需要循环的逻辑</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前：</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>, b = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    i = i * a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后：</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a * b;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    i = i * c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法九：异常处理写在循环外面"><a href="#方法九：异常处理写在循环外面" class="headerlink" title="方法九：异常处理写在循环外面"></a>方法九：异常处理写在循环外面</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反例</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正例</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原文：<a href="https://blog.csdn.net/csdn_aiyang/article/details/75162134">https://blog.csdn.net/csdn_aiyang/article/details/75162134</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码优化 </tag>
            
            <tag> 循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接池到底应该设多大？颠覆你的认知</title>
      <link href="/2021/08/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E8%AE%BE%E5%A4%9A%E5%A4%A7%EF%BC%9F%E9%A2%A0%E8%A6%86%E4%BD%A0%E7%9A%84%E8%AE%A4%E7%9F%A5/"/>
      <url>/2021/08/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%88%B0%E5%BA%95%E5%BA%94%E8%AF%A5%E8%AE%BE%E5%A4%9A%E5%A4%A7%EF%BC%9F%E9%A2%A0%E8%A6%86%E4%BD%A0%E7%9A%84%E8%AE%A4%E7%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>我在研究HikariCP（一个数据库连接池）时无意间在HikariCP的Github wiki上看到了一篇文章（即前面给出的链接），这篇文章有力地消除了我一直以来的疑虑，看完之后感觉神清气爽。故在此做译文分享。</p><p>数据库连接池的配置是开发者们常常搞出坑的地方，在配置数据库连接池时，有几个可以说是和直觉背道而驰的原则需要明确。</p><h2 id="1万并发用户访问"><a href="#1万并发用户访问" class="headerlink" title="1万并发用户访问"></a>1万并发用户访问</h2><p>想象你有一个网站，压力虽然还没到Facebook那个级别，但也有个1万上下的并发访问——也就是说差不多2万左右的TPS。那么这个网站的数据库连接池应该设置成多大呢？结果可能会让你惊讶，因为这个问题的正确问法是：</p><blockquote><p>“这个网站的数据库连接池应该设置成多小呢？”</p></blockquote><p>下面这个视频是Oracle Real World Performance Group发布的，请先看完：</p><blockquote><p><a href="http://www.dailymotion.com/video/x2s8uec">http://www.dailymotion.com/video/x2s8uec</a></p></blockquote><p>（因为这视频是英文解说且没有字幕，我替大家做一下简单的概括：）<br><code>视频中对Oracle数据库进行压力测试，9600并发线程进行数据库操作，每两次访问数据库的操作之间sleep 550ms，一开始设置的中间件线程池大小为2048：</code></p><blockquote><p><code>初始的配置</code></p></blockquote><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTMwNjZkMjdhY2M4MTVjZGEucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMzc0L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png"></p><p>压测跑起来之后是这个样子的：</p><blockquote><p><code>2048连接时的性能数据</code></p></blockquote><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTI5MWZmMTQzMGEwNGM1MGIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMzkzL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png"></p><p><code>每个请求要在连接池队列里等待33ms，获得连接后执行SQL需要77ms</code></p><p>此时数据库的等待事件是这个熊样的：<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTRkODNlZjFhNTA1M2RkMmIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMzkzL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png"></p><p>各种buffer busy waits，数据库CPU在95%左右（这张图里没截到CPU）</p><p><code>接下来，把中间件连接池减到1024（并发什么的都不变），性能数据变成了这样：</code><br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTRjZDczYzNjYzA1YTg2ZDcucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMzk2L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png"></p><p><code>获取链接等待时长没怎么变，但是执行SQL的耗时减少了。</code><br>下面这张图，上半部分是wait，下半部分是吞吐量<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTNhY2EzMGIwODVlNGM1MjUucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMTc1L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png"></p><p>能看到，<code>中间件连接池从2048减半之后，吐吞量没变，但wait事件减少了一半。</code></p><p>接下来，<code>把数据库连接池减到96，并发线程数仍然是9600不变。</code></p><blockquote><p><code>96个连接时的性能数据</code><br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTM1MDUzYTVjODVjODVkZjQucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvNTIyL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png"></p></blockquote><p>队列平均等待1ms，执行SQL平均耗时2ms。<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTAzOWJiNzZlYWY2NGNkMzIucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvMjE4L2Zvcm1hdC93ZWJw?x-oss-process=image/format,png"></p><p>&#96;wait事件几乎没了，吞吐量上升。</p><p>没有调整任何其他东西，仅仅只是缩小了中间件层的数据库连接池，就把请求响应时间从100ms左右缩短到了3ms。&#96;</p><h2 id="But-why"><a href="#But-why" class="headerlink" title="But why?"></a>But why?</h2><p>为什么nginx只用4个线程发挥出的性能就大大超越了100个进程的Apache HTTPD？回想一下计算机科学的基础知识，答案其实是很明显的。</p><blockquote><p>即使是单核CPU的计算机也能“同时”运行数百个线程。但我们都[应该]知道这只不过是操作系统用时间分片玩的一个小把戏。一颗CPU核心同一时刻只能执行一个线程，然后操作系统切换上下文，核心开始执行另一个线程的代码，以此类推。给定一颗CPU核心，其顺序执行A和B永远比通过时间分片“同时”执行A和B要快，这是一条计算机科学的基本法则。一旦线程的数量超过了CPU核心的数量，再增加线程数系统就只会更慢，而不是更快。</p></blockquote><p>这几乎就是真理了……</p><h2 id="有限的资源"><a href="#有限的资源" class="headerlink" title="有限的资源"></a>有限的资源</h2><p>上面的说法只能说是接近真理，但还并没有这么简单，有一些其他的因素需要加入。<code>当我们寻找数据库的性能瓶颈时，总是可以将其归为三类：CPU、磁盘、网络。</code>把内存加进来也没有错，但比起磁盘和网络，内存的带宽要高出好几个数量级，所以就先不加了。</p><blockquote><p>如果我们无视磁盘和网络，那么结论就非常简单。在一个8核的服务器上，设定连接&#x2F;线程数为8能够提供最优的性能，再增加连接数就会因上下文切换的损耗导致性能下降。数据库通常把数据存储在磁盘上，磁盘又通常是由一些旋转着的金属碟片和一个装在步进马达上的读写头组成的。读&#x2F;写头同一时刻只能出现在一个地方，然后它必须“寻址”到另外一个位置来执行另一次读写操作。所以就有了寻址的耗时，此外还有旋回耗时，读写头需要等待碟片上的目标数据“旋转到位”才能进行操作。使用缓存当然是能够提升性能的，但上述原理仍然成立。</p></blockquote><p>在这一时间段（即”I&#x2F;O等待”）内，线程是在“阻塞”着等待磁盘，此时操作系统可以将那个空闲的CPU核心用于服务其他线程。所以，由于线程总是在I&#x2F;O上阻塞，我们可以让线程&#x2F;连接数比CPU核心多一些，这样能够在同样的时间内完成更多的工作。</p><blockquote><p><code>那么应该多多少呢？</code>这要取决于磁盘。较新型的SSD不需要寻址，也没有旋转的碟片。可别想当然地认为“SSD速度更快，所以我们应该增加线程数”，恰恰相反，<code>无需寻址和没有旋回耗时意味着更少的阻塞</code>，所以更少的线程[更接近于CPU核心数]会发挥出更高的性能。只有当阻塞创造了更多的执行机会时，更多的线程数才能发挥出更好的性能。</p></blockquote><p><code>网络和磁盘类似。通过以太网接口读写数据时也会形成阻塞，10G带宽会比1G带宽的阻塞少一些，1G带宽又会比100M带宽的阻塞少一些。</code>不过网络通常是放在第三位考虑的，有些人会在性能计算中忽略它们。<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy80ODQwNTE0LTY5NDI5ZDNkOWE2ZDkyNjEucG5nP2ltYWdlTW9ncjIvYXV0by1vcmllbnQvc3RyaXB8aW1hZ2VWaWV3Mi8yL3cvNjQzL2Zvcm1hdC93ZWJw?x-oss-process=image/format,png"></p><p>上图是PostgreSQL的benchmark数据，可以看到TPS增长率从50个连接数开始变缓。<code>在上面Oracle的视频中，他们把连接数从2048降到了96，实际上96都太高了，除非服务器有16或32颗核心。</code></p><h2 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h2><p>下面的公式是由PostgreSQL提供的，不过我们认为可以广泛地应用于大多数数据库产品。你应该模拟预期的访问量，并从这一公式开始测试你的应用，寻找最合适的连接数值。</p><blockquote><p><code>连接数 = ((核心数 * 2) + 有效磁盘数)</code></p></blockquote><br>>核心数不应包含超线程(hyper thread)，即使打开了hyperthreading也是。如果活跃数据全部被缓存了，那么有效磁盘数是0，随着缓存命中率的下降，有效磁盘数逐渐趋近于实际的磁盘数。这一公式作用于SSD时的效果如何尚未有分析。<p><code>按这个公式，你的4核i7数据库服务器的连接池大小应该为((4 * 2) + 1) = 9。</code>取个整就算是是10吧。是不是觉得太小了？跑个性能测试试一下，我们保证它能轻松搞定3000用户以6000TPS的速率并发执行简单查询的场景。如果连接池大小超过10，你会看到响应时长开始增加，TPS开始下降。</p><blockquote><p>笔者注：<br><code>这一公式其实不仅适用于数据库连接池的计算，大部分涉及计算和I/O的程序，线程数的设置都可以参考这一公式。我之前在对一个使用Netty编写的消息收发服务进行压力测试时，最终测出的最佳线程数就刚好是CPU核心数的一倍。</code></p></blockquote><p><strong>公理：</strong><code>你需要一个小连接池，和一个充满了等待连接的线程的队列</code><br>如果你有10000个并发用户，设置一个10000的连接池基本等于失了智。1000仍然很恐怖。即是100也太多了。你需要一个10来个连接的小连接池，然后让剩下的业务线程都在队列里等待。连接池中的连接数量应该等于你的数据库能够有效同时进行的查询任务数（通常不会高于2*CPU核心数）。</p><p>我们经常见到一些小规模的web应用，应付着大约十来个的并发用户，却使用着一个100连接数的连接池。这会对你的数据库造成极其不必要的负担。</p><p><strong>请注意</strong><br>连接池的大小最终与系统特性相关。</p><p>比如一个混合了长事务和短事务的系统，通常是任何连接池都难以进行调优的。<code>最好的办法是创建两个连接池，一个服务于长事务，一个服务于短事务。</code></p><p>再例如一个系统执行一个任务队列，只允许一定数量的任务同时执行，此时并发任务数应该去适应连接池连接数，而不是反过来。</p><blockquote><p>原文：<a href="https://www.jianshu.com/p/a8f653fc0c54">https://www.jianshu.com/p/a8f653fc0c54</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何把Java的Jar包做成exe？超详细教程来了！</title>
      <link href="/2021/08/05/%E5%A6%82%E4%BD%95%E6%8A%8AJava%E7%9A%84Jar%E5%8C%85%E5%81%9A%E6%88%90exe/"/>
      <url>/2021/08/05/%E5%A6%82%E4%BD%95%E6%8A%8AJava%E7%9A%84Jar%E5%8C%85%E5%81%9A%E6%88%90exe/</url>
      
        <content type="html"><![CDATA[<p>近期做了一个前后端合并的spring boot项目，但是要求达成exe文件，提供给不懂电脑的小白安装使用，就去研究了半天，踩了很多坑，写这篇文章，是想看到这篇文章的人，按照我的步骤走，能少踩坑。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><ol><li>一个jar包，没有bug能正常启动的jar包</li><li>exe4j，一个将jar转换成exe的工具，百度链接：<a href="https://pan.baidu.com/s/1J30uUMJcYnqWCJSr6gkM5w%EF%BC%8C%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9A6esr%EF%BC%8C%E6%B3%A8%E5%86%8C%E7%A0%81%EF%BC%9AL-g782dn2d-1f1yqxx1rv1sqd">https://pan.baidu.com/s/1J30uUMJcYnqWCJSr6gkM5w，提取码：6esr，注册码：L-g782dn2d-1f1yqxx1rv1sqd</a></li><li>inno setup，一个将依赖和exe一起打成一个安装程序的工具，链接：<a href="https://pan.baidu.com/s/1DgFo1ceM_8Bqx_b-veibbQ%EF%BC%8C%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9Ag9jd">https://pan.baidu.com/s/1DgFo1ceM_8Bqx_b-veibbQ，提取码：g9jd</a></li></ol></blockquote><h2 id="制作步骤"><a href="#制作步骤" class="headerlink" title="制作步骤"></a>制作步骤</h2><h3 id="exe4j"><a href="#exe4j" class="headerlink" title="exe4j"></a>exe4j</h3><ul><li>将jar包放在了桌面</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002244748.png"></p><ul><li>打开安装好的exe4j</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002452495.png"></p><ul><li>直接下一步进入界面，选择JAVA转EXE</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002540751.png"></p><ul><li>然后点下一步，输入名称和输出路径</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002646584.png"></p><ul><li>继续点击下一步，选择启动模式</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204002904461.png"></p><ul><li>下方有个选项，需要设置打包后的程序兼容32和64位系统</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020020400300477.png"></p><ul><li>进来后勾选上</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003036476.png"></p><ul><li>然后一直下一步，一直出现如下界面，开始选择jar包以及配置在VM参数配置的地方加上：-Dfile.encoding&#x3D;utf-8</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003457499.png"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003530510.png"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003646323.png"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003700634.png"></p><ul><li>点击下一步，配置JRE</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003848260.png"></p><ul><li>下拉框点击后进入如下界面</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204003959383.png"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004026684.png"></p><ul><li>照着这个样子写的目的是，最终会把本地jre目录和exe一起打包，让exe文件自己去根据路径去查找一起打包的jre，可不用再安装jdk</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004122719.png"></p><ul><li>接着下一步，选择Client VM</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004404491.png"></p><ul><li>然后一直下一步，最终出现如下界面</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004451130.png"></p><h3 id="inno-setup"><a href="#inno-setup" class="headerlink" title="inno setup"></a>inno setup</h3><ul><li>这个时候你会发现桌面多了一个demo.exe文件，这个时候先别着急点开，接下来就是将jre和exe文件再打个包合并，达到在没有jdk电脑环境下也能运行打开inno setup，左上角File - New</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004721363.png"></p><ul><li>直接点下一步，填写配置，应用名称，版本等，随意</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204004828569.png"></p><ul><li>然后点击下一步，这个地方默认就行，直接下一步</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020020400490086.png"></p><ul><li>接着选择生成好的exe文件</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005035248.png"></p><ul><li>然后下一步，进入这个界面保持默认，直接下一步</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005136140.png"></p><ul><li>依旧下一步，不用管</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005143994.png"></p><ul><li>继续下一步，这里是选择语言</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005211217.png"></p><ul><li>然后就是选择输出路径和填写安装程序的名字了</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005320116.png"></p><ul><li>然后下一步，直接点Next，然后结束，配置到最后一步了，脚本文件，到这里会弹出问你是否马上编译，选择否，先把脚本写好再自己编译</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005441574.png"></p><ul><li>然后到了最后一步了，把本地的JRE写进脚本</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005653781.png"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005804780.png"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204005919893.png"></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/08/05/oO3HIbjr6ESL2C1.png"></p><ul><li>然后直接编译就好了，会提示保存当前脚本，随便起个名字，下个还可以继续用</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010100205.png"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010143208.png"></p><ul><li>然后等待绿色滚动条结束</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010154655.png"></p><ul><li>当绿色滚动条结束后，桌面会多了一个setup.exe文件</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010504973.png"></p><ul><li>也同时会跳出一个安装的，因为程序帮你自动启动生成的安装程序了，安装就可以了，安装的时候记得勾选创建快捷方式</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200204010605563.png"></p><ul><li>这个就是最后的程序了，双击运行就可以看到结果了，把setup.exe文件给别人安装，就都可以看到自己的程序了</li></ul><blockquote><p>原文：<a href="https://blog.csdn.net/m0_37701381/article/details/104163877">https://blog.csdn.net/m0_37701381/article/details/104163877</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jar </tag>
            
            <tag> exe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>compileflow 淘宝工作流引擎</title>
      <link href="/2021/07/22/compileflow%20%E6%B7%98%E5%AE%9D%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/"/>
      <url>/2021/07/22/compileflow%20%E6%B7%98%E5%AE%9D%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="compileflow是什么"><a href="#compileflow是什么" class="headerlink" title="compileflow是什么"></a>compileflow是什么</h2><p>compileflow是一个非常轻量、高性能、可集成、可扩展的流程引擎。</p><p>compileflow Process引擎是淘宝工作流TBBPM引擎之一，是专注于纯内存执行，无状态的流程引擎，通过将流程文件转换生成java代码编译执行，简洁高效。当前是阿里业务中台交易等多个核心系统的流程引擎。</p><p>compileflow能让开发人员通过流程编辑器设计自己的业务流程，将复杂的业务逻辑可视化，为业务设计人员与开发工程师架起了一座桥梁。</p><blockquote><p><a href="https://github.com/compileflow/compileflow-designer-upgrade">最新插件安装包下载</a> </p></blockquote><h2 id="设计意图"><a href="#设计意图" class="headerlink" title="设计意图"></a>设计意图</h2><ol><li>希望为业务开发提供端至端，从设计至实现的业务流程解决方案。</li><li>提供多种流程引擎，实现从战略至商业能力，商业能力至业务流程，业务流程至系统，并最终实现业务的可视化全局架构。</li><li>设计高效的执行引擎，实现对服务的快速组合或扩展，提升idea(构思)至value(价值)的研发响应与交互速度。</li></ol><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><ol><li>高性能：通过将流程文件转换生成java代码编译执行<code>(爽啊，Activiti可没这功能)</code>，简洁高效。</li><li>丰富的应用场景：在阿里巴巴中台解决方案中广泛使用，支撑了导购、交易、履约、资金等多个业务场景。</li><li>可集成：轻量、简洁的设计使得可以极其方便地集成到各个解决方案和业务场景中。</li><li>完善的插件支持：流程设计目前有IntelliJ IDEA、Eclipse插件支持，可以在流程设计中实时动态生成java代码并预览，所见即所得。</li><li>支持流程设计图导出svg文件和单元测试代码。</li></ol><h2 id="IntelliJ-IDEA安装插件"><a href="#IntelliJ-IDEA安装插件" class="headerlink" title="IntelliJ IDEA安装插件"></a>IntelliJ IDEA安装插件</h2><blockquote><p><code>注意: compileflow仅支持JDK 1.8及以上版本。</code></p></blockquote><p>以IntelliJ IDEA 2019版本为例，下载最新包到本地</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/C1USc8xzsgHoyAT.png" alt="微信图片_20210722112025.png"></p><p>使用本地安装的方式安装，注意安装整个zip不用手动解压 </p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/WbBXhDQMPUfrwoK.png" alt="微信图片_20210722113354.png"></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/yAnptbmq6PrvUeQ.png" alt="微信图片_20210722113123.png"></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/o6Q8luLqvBGIeUc.png" alt="微信图片_20210722113159.png"></p><p>重启IntelliJ IDEA就会生效</p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><p>如果Maven项目，需引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.compileflow<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>compileflow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><h4 id="新建BPM文件"><a href="#新建BPM文件" class="headerlink" title="新建BPM文件"></a>新建BPM文件</h4><ul><li><p>可在resources目录下创建，选中resources目录右键点击【Create New Bpm<br>File】。例如我这边创建在resources的bpm目录下。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/M5rhKWqGlnoQsBj.png"></p></li><li><p>输入文件名，例如：我这里的hello<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/vzokpQNTjqbZlPd.png"></p></li><li><p>插件默认会生成了hello.bpm文件，是一个简单的开平方根demo流程，如下图<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/4S8xPMGQrznsu7W.png"></p></li></ul><h4 id="可视化编辑"><a href="#可视化编辑" class="headerlink" title="可视化编辑"></a>可视化编辑</h4><ul><li><p>你可以选择下方【process-flow】进行可视化编辑，从左侧拖入节点到画布，或者选中节点拖动。<br> <img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/pNi38WaMHI5xon2.png"></p></li><li><p>双击空白处可编辑全局参数<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/oBctevwJzYUg4q5.png"></p></li><li><p>双击节点可以编辑节点参数（拖拽可调整节点位置）<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/Sey9Xr1TJcbdasz.png"></p></li></ul><h4 id="Java代码预览"><a href="#Java代码预览" class="headerlink" title="Java代码预览"></a>Java代码预览</h4><ul><li>可以选择下方【java code】进行Java代码预览。<br> <img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/z1RWMcSvdkB4ugV.png"></li></ul><h4 id="创建测试代码"><a href="#创建测试代码" class="headerlink" title="创建测试代码"></a>创建测试代码</h4><ul><li><p>选中文件右键，点击【Create New Bpm JUnit Test】可自动生成测试类<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/yb2NYWcHoJzgVaT.png"></p></li><li><p>到指定路径查看生成的测试类（修改入参数运行整个demo就完成了）<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/22/nRAm1NB8DIZgk3S.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> compileflow </tag>
            
            <tag> Activiti </tag>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rabbitmq 消息延迟推送(插件模式)</title>
      <link href="/2021/07/13/Rabbitmq%20%E6%B6%88%E6%81%AF%E5%BB%B6%E8%BF%9F%E6%8E%A8%E9%80%81(%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%BC%8F)/"/>
      <url>/2021/07/13/Rabbitmq%20%E6%B6%88%E6%81%AF%E5%BB%B6%E8%BF%9F%E6%8E%A8%E9%80%81(%E6%8F%92%E4%BB%B6%E6%A8%A1%E5%BC%8F)/</url>
      
        <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>目前常见的应用软件都有消息的延迟推送的影子，应用也极为广泛，例如：</p><ul><li>淘宝七天自动确认收货。在签收商品后，物流系统会在七天后延时发送一个消息给支付系统，通知支付系统将款打给商家，这个过程持续七天，就是使用了消息中间件的延迟推送功能。</li><li>12306 购票支付确认页面。在选好票点击确定跳转的页面中往往都会有倒计时，代表着 30分钟内订单不确认的话将会自动取消订单。其实在下订单那一刻开始购票业务系统就会发送一个延时消息给订单系统，延时30分钟，告诉订单系统订单未完成，如果我们在30分钟内完成了订单，则可以通过逻辑代码判断来忽略掉收到的消息。</li></ul><p>在上面两种场景中，如果使用下面两种传统解决方案无疑大大降低了系统的整体性能和吞吐量：</p><ul><li>使用 redis 给订单设置过期时间，最后通过判断 redis中是否还有该订单来决定订单是否已经完成。这种解决方案相较于消息的延迟推送性能较低，因为我们知道redis都是存储于内存中，我们遇到恶意下单或者刷单的将会给内存带来巨大压力。</li><li>使用传统的数据库轮询来判断数据库表中订单的状态，这无疑增加了IO次数，性能极低。</li><li>使用 jvm 原生的 DelayQueue，也是大量占用内存，而且没有持久化策略，系统宕机或者重启都会丢失订单信息。</li></ul><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>消息从生产端到消费端消费要经过3个步骤：</p><blockquote><ol><li>生产端发送消息到RabbitMQ；</li><li>RabbitMQ发送消息到消费端；</li><li>消费端消费这条消息；</li></ol></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/01/11/QFmyTU45rXK9zVk.png"></p><p>这3个步骤中的每一步都有可能导致消息丢失，所以要有一些措施来保证系统的可靠性。磁盘损坏，机房爆炸等等都能导致数据丢失，当然这种都是极小概率发生，能做到99.999999%消息不丢失，就是可靠的了。</p><h3 id="生产端可靠性投递"><a href="#生产端可靠性投递" class="headerlink" title="生产端可靠性投递"></a>生产端可靠性投递</h3><p>比如消息在网络传输的过程中发生网络故障消息丢失，或者消息投递到RabbitMQ时RabbitMQ挂了，那消息也可能丢失。针对以上情况，RabbitMQ本身提供了一些机制。</p><h4 id="事务消息机制"><a href="#事务消息机制" class="headerlink" title="事务消息机制"></a>事务消息机制</h4><p><code>事务消息机制由于会严重降低性能</code>，所以一般不采用这种方法，在此不扩展了，而采用另一种轻量级的解决方案——<code>confirm消息确认机制</code>。</p><h4 id="confirm消息确认机制"><a href="#confirm消息确认机制" class="headerlink" title="confirm消息确认机制"></a>confirm消息确认机制</h4><blockquote><p>什么是confirm消息确认机制？</p><p>就是生产端投递的消息一旦投递到RabbitMQ后，RabbitMQ就会发送一个确认消息给生产端，让生产端知道已经收到消息了，否则这条消息就可能已经丢失了，需要生产端重新发送消息了。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/01/11/dqwNOF6ofhbZx7U.png"></p><h3 id="RabbitMQ消息处理"><a href="#RabbitMQ消息处理" class="headerlink" title="RabbitMQ消息处理"></a>RabbitMQ消息处理</h3><h4 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h4><blockquote><p>什么是消息持久化呢？</p><p>RabbitMQ收到消息后将这个消息暂时存在了内存中，如果RabbitMQ挂了，那重启后数据就丢失了，所以相关的数据应该持久化到硬盘中，这样就算RabbitMQ重启后也可以到硬盘中取数据恢复。</p></blockquote><blockquote><p>如何持久化呢？</p></blockquote><p>message消息到达RabbitMQ后先是到exchange交换机中，然后路由给queue队列，最后发送给消费端。所有需要给exchange、queue和message都进行持久化，这样，如果RabbitMQ收到消息后挂了，重启后会自行恢复消息。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/01/11/CO8ywn2JLfPHcix.png"></p><h4 id="消息入库"><a href="#消息入库" class="headerlink" title="消息入库"></a>消息入库</h4><p>前面提到了会有极端情况，比如<code>RabbitMQ收到消息还没来得及将消息持久化到硬盘时，RabbitMQ挂了</code>，这样消息还是丢失了，或者<code>RabbitMQ在发送确认消息给生产端的过程中，由于网络故障而导致生产端没有收到确认消息</code>，这样生产端就不知道RabbitMQ到底有没有收到消息，就不好做接下来的处理。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/01/11/DtfyeIXomYK1aAT.png"></p><p>所以除了RabbitMQ提供的一些机制外，也要做一些消息补偿机制，以应对一些极端情况。</p><p><code>消息入库，就是将要发送的消息保存到数据库中</code>。</p><p>首先发送消息前先将消息保存到数据库中，有一个状态字段<code>status=0，表示生产端将消息发送给了RabbitMQ但还没收到确认</code>；在<code>生产端收到确认后将status设为1，表示RabbitMQ已收到消息</code>。这里有可能会出现上面说的两种情况，所以生产端这边开一个<code>定时器</code>，定时检索消息表，将status&#x3D;0并且超过<code>固定时间</code>后，还没收到确认的消息取出重发（第二种情况下这里会造成消息重复，<code>消费者端要做幂等性</code>），可能重发还会失败，所以可以做一个最大重发次数，超过就做另外的处理。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/01/11/YH1AyFSa9PM3NfI.png"></p><p>这样消息就可以可靠性投递到RabbitMQ中了，而生产端也可以感知到了。</p><blockquote><p><code>注：本文案例没实现消息入库方案，可自行加逻辑，不难</code></p></blockquote><h3 id="消费端消息不丢失"><a href="#消费端消息不丢失" class="headerlink" title="消费端消息不丢失"></a>消费端消息不丢失</h3><p>默认情况下，以下3种情况会导致消息丢失：</p><blockquote><ul><li>在RabbitMQ将消息发出后，消费端还没接收到消息之前，发生网络故障，消费端与RabbitMQ断开连接，此时消息会丢失；</li><li>在RabbitMQ将消息发出后，消费端还没接收到消息之前，消费端挂了，此时消息会丢失；</li><li>消费端正确接收到消息，但在处理消息的过程中发生异常或宕机了，消息也会丢失。</li></ul></blockquote><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/01/11/6XfSOKDn8BwReVb.png"></p><p>其实，上述3中情况导致消息丢失归根结底是因为<code>RabbitMQ的自动ack机制</code>，即默认RabbitMQ在消息发出后就立即将这条消息删除，而不管消费端是否接收到，是否处理完，导致消费端消息丢失时RabbitMQ自己又没有这条消息了。</p><p><img src= "/img/loading.gif" data-src="https://s2.loli.net/2022/01/11/MWk78DUZFK6mTwv.png"></p><p>所以就需要将自动ack机制改为手动ack机制。</p><p>对于RabbitMQ服务端而言，队列中的消息分成了两个部分：<code>一部分是等待投递给消费端的消息</code>；<code>一部分是已经投递给消费端，但是还没有收到消费端确认信号的消息</code>。如果RabbitMQ一直没有收到消费端的确认信号，并且消费此消息的消费端已经断开连接或宕机（RabbitMQ会自己感知到），则RabbitMQ会安排该消息重新进入队列（放在队列头部），等待投递给下一个消费者，当然也有能还是原来的那个消费端，当然<code>消费端也需要确保幂等性</code>。</p><p><code>之前一般采用死信队列+TTL过期时间来实现延迟队列，现在RabbitMQ 官方提供了延迟队列的插件，这个插件是实验性的，但相当稳定，废话不多说开整</code></p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><blockquote><p>注：<code>延迟插件 rabbitmq-delayed-message-exchange 是在 RabbitMQ 3.5.7 及以上的版本才支持的，依赖 Erlang/OPT 18.0 及以上运行环境。</code></p></blockquote><ul><li><p>此插件需要 Erlang 23.2 或更高版本。<a href="https://www.erlang.org/downloads">Erlang windows下载</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/ixcSFRsLmgYr6Ip.png"></p></li><li><p>最新版本针对 RabbitMQ3.8.x，较早的系列已不受支持。<a href="https://www.rabbitmq.com/install-windows.html">RabbitMQ下载</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/rXgpzQeiwhuft19.png"></p></li><li><p>RabbitMQ 官方提供的延迟队列插件，下载放置到 RabbitMQ 根目录下的 plugins 内。<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases">延迟队列插件下载</a><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/BLk7eUylAROVp9C.png"></p></li><li><p>进入RabbitMQ安装目录的sbin目录下，在cmd窗口使用命令启用延迟插件</p></li></ul><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/GqDQIAdZ45herik.png"></p><ul><li>禁用插件，使用如下命令，<code>但请注意，所有尚未交付的延迟消息都将丢失</code>。</li></ul><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins disable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/12/fLWb2iS6mF4wJMa.png"></p><p><code>注：本demo在windows环境下模拟，插件采用rabbitmq-delayed-message-exchange v3.8.x版本；插件启用或禁用时，若Rabbitmq服务一直是启用状态的话，需重启使其生效</code></p><h2 id="实现延迟推送信息"><a href="#实现延迟推送信息" class="headerlink" title="实现延迟推送信息"></a>实现延迟推送信息</h2><h3 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.goitman<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rabbitmq-delayed-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Web 项目开发starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 消息队列依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- log4j日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- fastJson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>一般来说消息生产和消费是两个独立的项目，配置应该分开，这里为了方便就整合在一块啦</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="comment"># 连接超时，单位毫秒，0表示无穷大，不超时</span></span><br><span class="line">    <span class="attr">connection-timeout:</span> <span class="number">15000</span></span><br><span class="line">    <span class="comment"># 开启confirm确认机制</span></span><br><span class="line">    <span class="comment">#publisher-confirms: true</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">    <span class="comment"># 开启return确认机制</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 设置为true后，路由不到队列的消息不会被自动删除，从而被return消息模式监听到</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">mandatory:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">listener:</span></span><br><span class="line">    <span class="attr">simple:</span></span><br><span class="line">      <span class="comment"># 表示消息确认方式，其有三种配置方式，分别是none(不确认)、manual(手动确认)和auto(自动确认)；默认auto</span></span><br><span class="line">      <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line">      <span class="comment"># 最小消费者数量</span></span><br><span class="line">      <span class="attr">concurrency:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment"># 最大消费者数量</span></span><br><span class="line">      <span class="attr">max-concurrency:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment"># 在单个请求中处理的消息个数，必须大于等于transaction(事务)数量.</span></span><br><span class="line">      <span class="attr">prefetch:</span> <span class="number">2</span></span><br><span class="line">      <span class="comment"># 当ack模式为auto时，一个事务（ack间）处理的消息数量</span></span><br><span class="line">      <span class="comment">#transaction-size:</span></span><br></pre></td></tr></table></figure><ol><li>在RabbitMQ中可以虚拟消息服务器VirtualHost，每个VirtualHost相当月一个相对独立的RabbitMQ服务器，每个VirtualHost之间是相互隔离的。exchange、queue、message不能互通。</li><li>在springboot2.2.0.RELEASE版本之前是amqp正式支持的属性，用来配置消息发送到交换器之后是否触发回调方法，在2.2.0及之后该属性过期使用spring.rabbitmq.publisher-confirm-type属性配置代替，用来配置更多的确认类型；</li></ol><ul><li>NONE值是禁用发布确认模式，是默认值</li><li>CORRELATED值是发布消息成功到交换器后会触发回调方法</li><li>SIMPLE值经测试有两种效果，其一效果和CORRELATED值一样会触发回调方法，其二在发布消息成功后使用rabbitTemplate调用waitForConfirms或waitForConfirmsOrDie方法等待broker节点返回发送结果，根据返回结果来判定下一步的逻辑，要注意的点是waitForConfirmsOrDie方法如果返回false则会关闭channel，则接下来无法发送消息到broker;</li></ul><h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RabbitmqApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 引导类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 17:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RabbitmqApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>模拟一个订单对象，发送、接收对象信息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Order</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 订单对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 15:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订单ID</span></span><br><span class="line">    <span class="keyword">public</span> String orderId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订单状态，0：投递中、1：消费中、2：消费成功</span></span><br><span class="line">    <span class="keyword">public</span> String orderStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">(String orderId, String orderStatus)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">        <span class="built_in">this</span>.orderStatus = orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOrderId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderId</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getOrderStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderStatus</span><span class="params">(String orderStatus)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderStatus = orderStatus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.listener.RabbitListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RabbitmqConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 配置类，创建交换机、路由键、队列和之间的关联绑定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 17:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(RabbitmqConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELAYED_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;delayedExchange&quot;</span>;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELAYED_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;delayedQueue&quot;</span>;</span><br><span class="line">    <span class="comment">// 路由键，#匹配一个或多个词</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELAYED_KEY</span> <span class="operator">=</span> <span class="string">&quot;delayed.#&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建主题模式交换机，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">delayedExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 参数一：交换机名称；参数二：数据是否持久化；参数三：数据是否自动删除</span></span><br><span class="line">        <span class="type">TopicExchange</span> <span class="variable">exchange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(DELAYED_EXCHANGE, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 开启延迟队列</span></span><br><span class="line">        exchange.setDelayed(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> exchange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建队列</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">delayedQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 参数一：队列名称；参数二：数据是否持久化</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(DELAYED_QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定交换机和队列之间的联系，并配置路由键字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">delayedBinding</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue()).to(delayedExchange()).with(DELAYED_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * 消费者JSON数据反序列化</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory)&#123;</span><br><span class="line">        <span class="type">SimpleRabbitListenerContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRabbitListenerContainerFactory</span>();</span><br><span class="line">        factory.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">/* 不设置手动确认，将会报错：</span></span><br><span class="line"><span class="comment">         * Channel shutdown: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=406, reply-text=PRECONDITION_FAILED - unknown delivery tag 1, class-id=60, method-id=80)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">        factory.setMessageConverter(<span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.config.RabbitmqConfig;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.AmqpException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageDeliveryMode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ProducerSender</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 消息生产者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 16:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerSender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ProducerSender.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息发送确认回调方法，确保消息是否发送到交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> RabbitTemplate.<span class="type">ConfirmCallback</span> <span class="variable">confirmCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * correlationData：SpringBoot提供的业务标识对象，封装业务ID信息，需要在发送消息时传入此参数，这里才能接收到，否则是null</span></span><br><span class="line"><span class="comment">         * ack：消息发送的结果状态，成功是true，失败是false</span></span><br><span class="line"><span class="comment">         * cause：发送失败的描述信息，如果发送成功是null。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;correlationData:&#123;&#125;,ack:&#123;&#125;,cause:&#123;&#125;&quot;</span>,correlationData.toString(), ack, cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息发送失败回调方法，可能是队列或路由键不存在等等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> RabbitTemplate.<span class="type">ReturnCallback</span> <span class="variable">returnCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnCallback() &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * message：发送的信息内容</span></span><br><span class="line"><span class="comment">         * replyCode：状态码，200为成功</span></span><br><span class="line"><span class="comment">         * replyText：失败信息</span></span><br><span class="line"><span class="comment">         * exchange：交换机名称</span></span><br><span class="line"><span class="comment">         * routingKey：路由键</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(Message message, <span class="type">int</span> replyCode, String replyText, String exchange, String routingKey)</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;returnedMessage:&#123;&#125;,replyCode:&#123;&#125;,replyText:&#123;&#125;,exchange:&#123;&#125;,routingKey:&#123;&#125;&quot;</span>,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()), replyCode, replyText, exchange, routingKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 消息发送，一般定时任务配合</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(Object message)</span> &#123;</span><br><span class="line">        <span class="comment">// 消息发送确认，处理消息到交换机之间的逻辑</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(confirmCallback);</span><br><span class="line">        <span class="comment">// 设为true，消息不会自动删除，而被return消息模式监听</span></span><br><span class="line">        rabbitTemplate.setMandatory(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 消息失败监听，处理交换机到队列之间的逻辑</span></span><br><span class="line">        rabbitTemplate.setReturnCallback(returnCallback);</span><br><span class="line">        <span class="comment">// 生产者JSON数据序列化</span></span><br><span class="line">        rabbitTemplate.setMessageConverter(<span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消息发送，标准发送信息和延时发送差异在于MessagePostProcessor</span></span><br><span class="line">        <span class="comment">// rabbitTemplate.convertAndSend(RabbitmqConfig.DELAYED_EXCHANGE,&quot;delayed.boot&quot;,message,new CorrelationData(UUID.randomUUID().toString().replace(&quot;-&quot;,&quot;&quot;)));</span></span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConfig.DELAYED_EXCHANGE, <span class="string">&quot;delayed.boot&quot;</span>, message, <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">                <span class="comment">// 设置消息持久化</span></span><br><span class="line">                message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);</span><br><span class="line">                <span class="comment">// 设置消息延迟发送时间，单位毫秒ms</span></span><br><span class="line">                message.getMessageProperties().setDelay(<span class="number">6000</span>);</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 消息唯一ID</span></span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ConsumerReceiver</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 消息消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 16:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ConsumerReceiver.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ·<span class="doctag">@RabbitListener</span>可以标注在类上，当在类上时需<span class="doctag">@RabbitHandler</span>配合使用，</span></span><br><span class="line"><span class="comment">     * 如有多个<span class="doctag">@RabbitHandler</span>，根据MessageConverter转换后的对象来匹配哪个方法处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ·<span class="doctag">@RabbitListener</span>(queues = &quot;delayedQueue&quot;,containerFactory = &quot;&quot;)</span></span><br><span class="line"><span class="comment">     * ·containerFactory：可指定一个RabbitListenerContainerFactory的bean，默认为rabbitListenerContainerFactory的实例</span></span><br><span class="line"><span class="comment">     *  也可在rabbitListenerContainerFactory实例上的<span class="doctag">@Bean</span>注解中标记名称如：<span class="doctag">@Bean</span>(&quot;rabbitListenerContainerFactory2&quot;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;delayedQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiverMessage</span><span class="params">(Message msg , Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 应避免脏数据的接收，若数据一直消费失败而退回队列，队列又一直发送数据给消费者，将造成无限循环，导致内存溢出系统崩溃</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> JSONObject.parseObject(<span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody(),<span class="string">&quot;UTF-8&quot;</span>), Order.class);</span><br><span class="line">        logger.info(<span class="string">&quot;order:&#123;&#125;&quot;</span>,order.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取消息数量，可和批量确认一起使用</span></span><br><span class="line">        <span class="comment">// channel.basicQos(10);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// boolean flag = ****(); 在此做逻辑，返回boolean类型决定消息是走确认机制，还是退回机制</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 确认机制，参数一：消息唯一标识；参数二：是否批量确认，false为不开启</span></span><br><span class="line"><span class="comment">            * 若开启批量确认，最后一条确认的ID，会把之前未确认的消息一并确认</span></span><br><span class="line"><span class="comment">            * 开启批量后需做好幂等性处理，若消息在未确认之前，连接中断会造成重复消费</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            channel.basicAck(msg.getMessageProperties().getDeliveryTag(),<span class="literal">false</span>);</span><br><span class="line">            logger.info(<span class="string">&quot;消费成功，ID:&#123;&#125;&quot;</span>,msg.getMessageProperties().getDeliveryTag());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 退回机制，参数一：唯一标识符；参数二：是否批量退回，false为单条退回；参数三：是否把消息退回队列中，false为废弃消息</span></span><br><span class="line"><span class="comment">            * 若有多个消费者需做好幂等性处理，避免消息重复消费</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            channel.basicNack(msg.getMessageProperties().getDeliveryTag(),<span class="literal">false</span>,<span class="literal">true</span>);</span><br><span class="line">            logger.info(<span class="string">&quot;消费失败，ID:&#123;&#125;&quot;</span>,msg.getMessageProperties().getDeliveryTag());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>当然也可以写个测试方法，这里就这样啦</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.component.ProducerSender;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> MessageSendTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/9 17:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageSendTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProducerSender producerSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/delayedSend&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delayedSend</span><span class="params">(<span class="meta">@RequestBody</span> Order order)</span>&#123;</span><br><span class="line">        producerSender.sendMessage(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/13/zrKMZP7a25FkVpI.png"></p><h3 id="绑定交换机和队列之间的联系，并配置路由键字符"><a href="#绑定交换机和队列之间的联系，并配置路由键字符" class="headerlink" title="绑定交换机和队列之间的联系，并配置路由键字符"></a>绑定交换机和队列之间的联系，并配置路由键字符</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/13/dhOLK3kyl8SB5Dn.png"></p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/13/B8p5dejZLf9Miyt.png"></p><h3 id="6秒后交换机将数据发送到队列，队列即时发送给消费端消费数据"><a href="#6秒后交换机将数据发送到队列，队列即时发送给消费端消费数据" class="headerlink" title="6秒后交换机将数据发送到队列，队列即时发送给消费端消费数据"></a>6秒后交换机将数据发送到队列，队列即时发送给消费端消费数据</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/07/13/c3jmVPazAlunKrW.png"></p><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/rabbitmq-delayed-demo">https://github.com/wangdaicong/spring-boot-project/tree/master/rabbitmq-delayed-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> 延迟推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>60岁开发者的建议，尝试改变一下吧！</title>
      <link href="/2021/07/01/60%E5%B2%81%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E5%BB%BA%E8%AE%AE%EF%BC%8C%E5%B0%9D%E8%AF%95%E6%94%B9%E5%8F%98%E4%B8%80%E4%B8%8B%E5%90%A7/"/>
      <url>/2021/07/01/60%E5%B2%81%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E5%BB%BA%E8%AE%AE%EF%BC%8C%E5%B0%9D%E8%AF%95%E6%94%B9%E5%8F%98%E4%B8%80%E4%B8%8B%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/e2cf29614c116b67ec89e99f352c232e.png"></p><p><code>35岁焦虑</code>是程序员间讨论最多的话题之一。</p><p>是不是一直以为这个话题只有我们国内开发者会讨论？</p><p>最近，在国外的reddit上出现了这样一个热门贴：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/77da0dc1a199c8808b29fbc3741e59d2.png"></p><p>当程序员老了会怎么样？对于45-50岁之间的程序员，你有什么故事和建议吗？对于职业规划方面有什么好的建议吗？</p><p>这些问题相信也是很多开发者想了解的。从这个帖子中，我们发现了很多高年龄程序员的建议，下面跟着小编一起看看有哪些高赞回复吧！</p><h3 id="60多岁的开发者-dhjdhj"><a href="#60多岁的开发者-dhjdhj" class="headerlink" title="60多岁的开发者 @dhjdhj"></a>60多岁的开发者 @dhjdhj</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/0361b348fb1dd6e121dac4a4a997b0a0.png"></p><p>他给出的建议是：<code>“不惧怕改变，才能长期保持自己的价值”</code>。</p><p>他还分享了自己的职业经历：</p><p>30多岁的时候，他任职于一家大型研究机构，与很多世界著名科学家共事。在一次具有很大挑战的事情上，为了快速解决问题，很多人都被要求参与进去。这里面就有很多人无法适应这样的变化，最终离开了。</p><p>因为这件事的发生，给了他很大的触动，他认为这样的根源是由于那些人无法应对变化的环境导致的（也就是我们常说的）。因此，自从这件事之后，他就开始坚持这两件事：</p><ol><li><code>经常换工具</code>，包括编辑器等各种基础工具。因为如果一直坚守自己已经会的东西，会让自己僵化，甚至对它们产生宗教版的迷恋</li><li><code>关注最新的开发趋势</code>，评估新技术的重要性，选择你认为有价值的东西学习起来</li></ol><h3 id="50多岁的开发者-gilbertron"><a href="#50多岁的开发者-gilbertron" class="headerlink" title="50多岁的开发者 @gilbertron"></a>50多岁的开发者 @gilbertron</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/701d83fb301d5b07fd05a19928f8678e.png"></p><p> @gilbertron 在 @dhjdhj 回复下的评论也表达了一个值得大家思考的观点，他表示：现在很多人抱怨一些新技术只是在重复发明老技术，人们不会利用那些优秀的老技术。但是，不要去固执的判断某个技术的好坏，好不好应该由行业来判断。开发者要做的就是<code>不断学习，不一定要做第一个使用新技术的人，但绝不要做因为拒绝使用新技术而被淘汰的人！</code></p><h3 id="62岁的开发者-kintotal"><a href="#62岁的开发者-kintotal" class="headerlink" title="62岁的开发者 @kintotal"></a>62岁的开发者 @kintotal</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/img_convert/2680eb0b714c424926df39fd50418088.png"></p><p>@kintotal 表示：他一直都在为自己投资教育，先后获得了3个学位，平时还通过各种平台学习课程。他的职业计划是66岁退休，70岁以后还计划以某种身份参与编程或从事咨询的工作。对于45-50岁这个阶段，他认为这依然还是程序员生涯的黄金时期，只要自己能够保持不断学习的状态，那么你就会慢慢好起来！</p><p>对于这些高龄开发者的故事与建议。我们可以发现一个共同点，那就是：<code>持续学习，投资自己，拥抱变化！</code>说白了，就是要紧跟技术的发展，保持个人的技术价值！那么，你觉得这些建议是不是现在焦虑的原因呢？你觉得自己的程序员生涯可以做到多少岁呢？留言说说你的观点吧！</p><blockquote><p>原文：<a href="https://www.reddit.com/r/programming/comments/nytzaz/what_happens_to_a_programmers_career_as_he_gets/">https://www.reddit.com/r/programming/comments/nytzaz/what_happens_to_a_programmers_career_as_he_gets/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举，你了解它吗？</title>
      <link href="/2021/04/30/%E6%9E%9A%E4%B8%BE%EF%BC%8C%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%AE%83%E5%90%97/"/>
      <url>/2021/04/30/%E6%9E%9A%E4%B8%BE%EF%BC%8C%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%AE%83%E5%90%97/</url>
      
        <content type="html"><![CDATA[<p>枚举是 JDK 1.5 新增的数据类型，使用枚举我们可以很好的描述一些特定的业务场景，比如一年中的春、夏、秋、冬，还有每周的周一到周天，还有各种颜色，以及可以用它来描述一些状态信息，比如错误码等。</p><p>枚举类型不止存在在 Java 语言中，在其它语言中也都能找到它的身影，例如 C# 和 Python 等，但我发现在实际的项目中使用枚举的人很少，所以本文就来聊一聊枚举的相关内容，好让朋友们对枚举有一个大概的印象，这样在编程时起码还能想到有“枚举”这样一个类型。</p><p>本文的结构目录如下：<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/04/30/hILQroPBSkVuM7q.jpg"></p><h1 id="枚举的-7-种使用方法"><a href="#枚举的-7-种使用方法" class="headerlink" title="枚举的 7 种使用方法"></a>枚举的 7 种使用方法</h1><p>很多人不使用枚举的一个重要的原因是对枚举不够熟悉，那么我们就先从枚举的 7 种使用方法说起。</p><h2 id="用法一：常量"><a href="#用法一：常量" class="headerlink" title="用法一：常量"></a>用法一：常量</h2><p>在 JDK 1.5 之前，我们定义常量都是 public static final… ，但有了枚举，我们就可以把这些常量定义成一个枚举类了，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ColorEnum</span> &#123;  </span><br><span class="line">  RED, GREEN, BLANK, YELLOW  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="用法二：switch"><a href="#用法二：switch" class="headerlink" title="用法二：switch"></a>用法二：switch</h2><p>将枚举用在 switch 判断中，使得代码可读性更高了，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">ColorEnum</span> &#123;</span><br><span class="line">    GREEN, YELLOW, RED</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ColorTest</span> &#123;</span><br><span class="line">    <span class="type">ColorEnum</span> <span class="variable">color</span> <span class="operator">=</span> ColorEnum.RED;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">            <span class="keyword">case</span> RED:</span><br><span class="line">                color = ColorEnum.GREEN;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> YELLOW:</span><br><span class="line">                color = ColorEnum.RED;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> GREEN:</span><br><span class="line">                color = ColorEnum.YELLOW;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用法三：枚举中增加方法"><a href="#用法三：枚举中增加方法" class="headerlink" title="用法三：枚举中增加方法"></a>用法三：枚举中增加方法</h2><p>我们可以在枚举中增加一些方法，让枚举具备更多的特性，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">ErrorCodeEnum</span> &#123;</span><br><span class="line">    SUCCESS(<span class="number">1000</span>, <span class="string">&quot;success&quot;</span>),</span><br><span class="line">    PARAM_ERROR(<span class="number">1001</span>, <span class="string">&quot;parameter error&quot;</span>),</span><br><span class="line">    SYS_ERROR(<span class="number">1003</span>, <span class="string">&quot;system error&quot;</span>),</span><br><span class="line">    NAMESPACE_NOT_FOUND(<span class="number">2001</span>, <span class="string">&quot;namespace not found&quot;</span>),</span><br><span class="line">    NODE_NOT_EXIST(<span class="number">3002</span>, <span class="string">&quot;node not exist&quot;</span>),</span><br><span class="line">    NODE_ALREADY_EXIST(<span class="number">3003</span>, <span class="string">&quot;node already exist&quot;</span>),</span><br><span class="line">    UNKNOWN_ERROR(<span class="number">9999</span>, <span class="string">&quot;unknown error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    ErrorCodeEnum(<span class="type">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">msg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ErrorCodeEnum <span class="title function_">getErrorCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ErrorCodeEnum it : ErrorCodeEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it.code() == code) &#123;</span><br><span class="line">                <span class="keyword">return</span> it;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ErrorCodeEnum</span> <span class="variable">errorCode</span> <span class="operator">=</span> ErrorCodeEnum.SUCCESS;</span><br><span class="line">        System.out.println(<span class="string">&quot;状态码：&quot;</span> + errorCode.code() + </span><br><span class="line">                           <span class="string">&quot; 状态信息：&quot;</span> + errorCode.msg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>状态码：1000 状态信息：success</p></blockquote><h2 id="用法四：覆盖枚举方法"><a href="#用法四：覆盖枚举方法" class="headerlink" title="用法四：覆盖枚举方法"></a>用法四：覆盖枚举方法</h2><p>我们可以覆盖一些枚举中的方法用于实现自己的业务，比如我们可以覆盖 toString() 方法，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">ColorEnum</span> &#123;</span><br><span class="line">    RED(<span class="string">&quot;红色&quot;</span>, <span class="number">1</span>), GREEN(<span class="string">&quot;绿色&quot;</span>, <span class="number">2</span>), BLANK(<span class="string">&quot;白色&quot;</span>, <span class="number">3</span>), YELLOW(<span class="string">&quot;黄色&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="comment">//  成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ColorEnum</span><span class="params">(String name, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//覆盖方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.index + <span class="string">&quot;：&quot;</span> + <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ColorEnum</span> <span class="variable">colorEnum</span> <span class="operator">=</span> ColorEnum.RED;</span><br><span class="line">        System.out.println(colorEnum.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1：红色</p></blockquote><h2 id="用法五：实现接口"><a href="#用法五：实现接口" class="headerlink" title="用法五：实现接口"></a>用法五：实现接口</h2><p>枚举类可以用来实现接口，但不能用于继承类，因为枚举默认继承了 java.lang.Enum 类，在 Java 语言中允许实现多接口，但不能继承多个父类，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Behaviour</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">ColorEnum</span> <span class="keyword">implements</span> <span class="title class_">Behaviour</span> &#123;</span><br><span class="line">    RED(<span class="string">&quot;红色&quot;</span>, <span class="number">1</span>), GREEN(<span class="string">&quot;绿色&quot;</span>, <span class="number">2</span>), BLANK(<span class="string">&quot;白色&quot;</span>, <span class="number">3</span>), YELLOW(<span class="string">&quot;黄色&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ColorEnum</span><span class="params">(String name, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.index + <span class="string">&quot;：&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ColorEnum</span> <span class="variable">colorEnum</span> <span class="operator">=</span> ColorEnum.RED;</span><br><span class="line">        colorEnum.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;颜色：&quot;</span> + colorEnum.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1：红色<br>颜色：红色</p></blockquote><h2 id="用法六：在接口中组织枚举类"><a href="#用法六：在接口中组织枚举类" class="headerlink" title="用法六：在接口中组织枚举类"></a>用法六：在接口中组织枚举类</h2><p>我们可以在一个接口中创建多个枚举类，用它可以很好的实现“多态”，也就是说我们可以将拥有相同特性，但又有细微实现差别的枚举类聚集在一个接口中，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ColorInterface</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">ColorEnum</span> <span class="keyword">implements</span> <span class="title class_">ColorInterface</span> &#123;</span><br><span class="line">        GREEN, YELLOW, RED</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">NewColorEnum</span> <span class="keyword">implements</span> <span class="title class_">ColorInterface</span> &#123;</span><br><span class="line">        NEW_GREEN, NEW_YELLOW, NEW_RED</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 赋值第一个枚举类</span></span><br><span class="line">        <span class="type">ColorInterface</span> <span class="variable">colorEnum</span> <span class="operator">=</span> ColorInterface.ColorEnum.RED;</span><br><span class="line">        System.out.println(colorEnum);</span><br><span class="line">        <span class="comment">// 赋值第二个枚举类</span></span><br><span class="line">        colorEnum = ColorInterface.NewColorEnum.NEW_RED;</span><br><span class="line">        System.out.println(colorEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>RED<br>NEW_RED</p></blockquote><h2 id="用法七：使用枚举集合"><a href="#用法七：使用枚举集合" class="headerlink" title="用法七：使用枚举集合"></a>用法七：使用枚举集合</h2><p>在 Java 语言中和枚举类相关的，还有两个枚举集合类 java.util.EnumSet 和 java.util.EnumMap，使用它们可以实现更多的功能。</p><p>使用 EnumSet 可以保证元素不重复，并且能获取指定范围内的元素，示例代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">ColorEnum</span> &#123;</span><br><span class="line">    RED(<span class="string">&quot;红色&quot;</span>, <span class="number">1</span>), GREEN(<span class="string">&quot;绿色&quot;</span>, <span class="number">2</span>), BLANK(<span class="string">&quot;白色&quot;</span>, <span class="number">3</span>), YELLOW(<span class="string">&quot;黄色&quot;</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ColorEnum</span><span class="params">(String name, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">ErrorCodeEnum</span> &#123;</span><br><span class="line">    SUCCESS(<span class="number">1000</span>, <span class="string">&quot;success&quot;</span>),</span><br><span class="line">    ERROR(<span class="number">2001</span>, <span class="string">&quot;parameter error&quot;</span>),</span><br><span class="line">    SYS_ERROR(<span class="number">2002</span>, <span class="string">&quot;system error&quot;</span>),</span><br><span class="line">    NAMESPACE_NOT_FOUND(<span class="number">2003</span>, <span class="string">&quot;namespace not found&quot;</span>),</span><br><span class="line">    NODE_NOT_EXIST(<span class="number">3002</span>, <span class="string">&quot;node not exist&quot;</span>),</span><br><span class="line">    NODE_ALREADY_EXIST(<span class="number">3003</span>, <span class="string">&quot;node already exist&quot;</span>),</span><br><span class="line">    UNKNOWN_ERROR(<span class="number">9999</span>, <span class="string">&quot;unknown error&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ErrorCodeEnum</span><span class="params">(<span class="type">int</span> code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">code</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">msg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;ColorEnum&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ColorEnum&gt;();</span><br><span class="line">        list.add(ColorEnum.RED);</span><br><span class="line">        list.add(ColorEnum.RED);  <span class="comment">// 重复元素</span></span><br><span class="line">        list.add(ColorEnum.YELLOW);</span><br><span class="line">        list.add(ColorEnum.GREEN);</span><br><span class="line">        <span class="comment">// 去掉重复数据</span></span><br><span class="line">        EnumSet&lt;ColorEnum&gt; enumSet = EnumSet.copyOf(list);</span><br><span class="line">        System.out.println(<span class="string">&quot;去重：&quot;</span> + enumSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定范围的枚举（获取所有的失败状态）</span></span><br><span class="line">        <span class="comment">// range():创建一个枚举集，并在给定的st(开始位置)和en(结束位置)范围内获取元素。</span></span><br><span class="line">        EnumSet&lt;ErrorCodeEnum&gt; errorCodeEnums = EnumSet.range(ErrorCodeEnum.ERROR, ErrorCodeEnum.UNKNOWN_ERROR);</span><br><span class="line">        System.out.println(<span class="string">&quot;所有失败状态：&quot;</span> + errorCodeEnums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>去重：[RED, GREEN, YELLOW]<br>所有失败状态：[ERROR, SYS_ERROR, NAMESPACE_NOT_FOUND, NODE_NOT_EXIST, NODE_ALREADY_EXIST, UNKNOWN_ERROR]</p></blockquote><p><code>EnumMap 与 HashMap 类似，不过它是一个专门为枚举设计的 Map 集合，相比 HashMap 来说它的性能更高，因为它内部放弃使用链表和红黑树的结构，采用数组作为数据存储的结构。</code></p><p>EnumMap 基本使用示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">ColorEnum</span> &#123;</span><br><span class="line">    RED, GREEN, BLANK, YELLOW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.EnumMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        EnumMap&lt;ColorEnum, String&gt; enumMap = <span class="keyword">new</span> <span class="title class_">EnumMap</span>&lt;&gt;(ColorEnum.class);</span><br><span class="line">        enumMap.put(ColorEnum.RED, <span class="string">&quot;红色&quot;</span>);</span><br><span class="line">        enumMap.put(ColorEnum.GREEN, <span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">        enumMap.put(ColorEnum.BLANK, <span class="string">&quot;白色&quot;</span>);</span><br><span class="line">        enumMap.put(ColorEnum.YELLOW, <span class="string">&quot;黄色&quot;</span>);</span><br><span class="line">        System.out.println(ColorEnum.RED + <span class="string">&quot;:&quot;</span> + enumMap.get(ColorEnum.RED));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>RED:红色</p></blockquote><h1 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h1><p>阿里《Java开发手册》对枚举的相关规定如下，我们在使用时需要稍微注意一下。</p><blockquote><p>【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。<br>【参考】枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br>说明：枚举其实就是特殊的常量类，<code>且构造方法被默认强制是私有</code>。<br>正例：枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS &#x2F; UNKNOWN_REASON。</p></blockquote><h1 id="假如不使用枚举"><a href="#假如不使用枚举" class="headerlink" title="假如不使用枚举"></a>假如不使用枚举</h1><p>在枚举没有诞生之前，也就是 JDK 1.5 版本之前，我们通常会使用 int 常量来表示枚举，实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COLOR_RED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COLOR_BLUE</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COLOR_GREEN</span> <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>但是使用 int 类型可能存在两个问题：</p><blockquote><ol><li>int 类型本身并不具备安全性，假如某个程序员在定义 int 时少些了一个 final关键字，那么就会存在被其他人修改的风险，而反观枚举类，它“天然”就是一个常量类，不存在被修改的风险（原因详见下半部分）；</li><li>使用 int 类型的语义不够明确，比如我们在控制台打印时如果只输出 1…2…3这样的数字，我们肯定不知道它代表的是什么含义。</li></ol></blockquote><p>那有人就说了，那就使用常量字符呗，这总不会还不知道语义吧？实现示例代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COLOR_RED</span> <span class="operator">=</span> <span class="string">&quot;RED&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COLOR_BLUE</span> <span class="operator">=</span> <span class="string">&quot;BLUE&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COLOR_GREEN</span> <span class="operator">=</span> <span class="string">&quot;GREEN&quot;</span>;</span><br></pre></td></tr></table></figure><p>但是这样同样存在一个问题，有些初级程序员会不按套路出牌，他们可能会直接使用字符串的值进行比较，而不是直接使用枚举的字段，实现示例代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COLOR_RED</span> <span class="operator">=</span> <span class="string">&quot;RED&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COLOR_BLUE</span> <span class="operator">=</span> <span class="string">&quot;BLUE&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COLOR_GREEN</span> <span class="operator">=</span> <span class="string">&quot;GREEN&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">color</span> <span class="operator">=</span> <span class="string">&quot;BLUE&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;BLUE&quot;</span>.equals(color)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样当我们修改了枚举中的值，那程序就凉凉了。</p><h1 id="枚举使用场景"><a href="#枚举使用场景" class="headerlink" title="枚举使用场景"></a>枚举使用场景</h1><p>枚举的常见使用场景是<code>单例</code>，它的完整实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 枚举类型是线程安全的，并且只会装载一次</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">SingletonEnum</span> &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 声明单例对象</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Singleton instance;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 实例化</span></span><br><span class="line">        SingletonEnum() &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取实例（单例对象）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonEnum.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hi,Java.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        singleton.sayHi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为枚举只会在类加载时装载一次，所以它是线程安全的，这也是《Effective Java》作者极力推荐使用枚举来实现单例的主要原因。</p><h1 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h1><h2 id="枚举为什么是线程安全的？"><a href="#枚举为什么是线程安全的？" class="headerlink" title="枚举为什么是线程安全的？"></a>枚举为什么是线程安全的？</h2><p>这一点要从枚举最终生成的字节码说起，首先我们先来定义一个简单的枚举类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ColorEnumTest</span> &#123;</span><br><span class="line">    RED, GREEN, BLANK, YELLOW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们再将上面的那段代码编译为字节码，具体内容如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ColorEnumTest</span> <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Enum&lt;ColorEnumTest&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ColorEnumTest RED;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ColorEnumTest GREEN;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ColorEnumTest BLANK;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ColorEnumTest YELLOW;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ColorEnumTest[] values();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> ColorEnumTest <span class="title function_">valueOf</span><span class="params">(java.lang.String)</span>;</span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述结果可以看出<code>枚举类最终会被编译为被 final 修饰的普通类，它的所有属性也都会被 static 和 final 关键字修饰，所以枚举类在项目启动时就会被 JVM 加载并初始化，而这个执行过程是线程安全的，所以枚举类也是线程安全的类。</code></p><blockquote><p>小贴士：代码反编译的过程是先用 javac 命令将 java 代码编译字节码（.class），再使用 javap 命令查看编译的字节码。</p></blockquote><h2 id="枚举比较小技巧"><a href="#枚举比较小技巧" class="headerlink" title="枚举比较小技巧"></a>枚举比较小技巧</h2><p>我们在枚举比较时使用 &#x3D;&#x3D; 就够了，因为枚举类是在程序加载时就创建了（它并不是 new 出来的），并且枚举类不允许在外部直接使用 new 关键字来创建枚举实例，所以我们在使用枚举类时本质上只有一个对象，因此在枚举比较时使用 &#x3D;&#x3D; 就够了。</p><p>并且我们在查看枚举的 equlas() 源码会发现，它的内部其实还是直接调用了 &#x3D;&#x3D; 方法，源码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object other)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>==other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文我们介绍了枚举类的 7 种使用方法：常量、switch、枚举中添加方法、覆盖枚举方法、实现接口、在接口中组织枚举类和使用枚举集合等，然后讲了如果不使用枚举类使用 int 类型和 String 类型存在的一些弊端：语义不够清晰、容易被修改、存在被误用的风险，所以我们在适合的环境下应该尽量使用枚举类。并且我们还讲了枚举类的使用场景–单例，以及枚举类为什么是安全的，最后我们讲了枚举比较的小技巧，希望本文对你有帮助。</p><blockquote><p>原文：<a href="https://mp.weixin.qq.com/s/HDotguLpNgtwK-Jz2UsODQ">https://mp.weixin.qq.com/s/HDotguLpNgtwK-Jz2UsODQ</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非对称加密RSA与对称加密AES项目应用</title>
      <link href="/2021/04/13/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86RSA%E4%B8%8E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86AES%E9%A1%B9%E7%9B%AE%E5%BA%94%E7%94%A8/"/>
      <url>/2021/04/13/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86RSA%E4%B8%8E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86AES%E9%A1%B9%E7%9B%AE%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在项目中，为了保证数据的安全，我们常常会对传递的数据进行加密。常用的加密算法有对称加密（AES）和非对称加密（RSA）。</p><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><h3 id="AES加密算法"><a href="#AES加密算法" class="headerlink" title="AES加密算法"></a>AES加密算法</h3><p>对称加密就是指，加密和解密使用同一个密钥的加密方式；加密计算量小、速度块，适合对大量数据进行加密的场景。AES取代DES成为加密标准<code>(微信小程序加密传输就是用这个加密算法的)</code>。</p><h3 id="AES加密的五个关键词"><a href="#AES加密的五个关键词" class="headerlink" title="AES加密的五个关键词"></a>AES加密的五个关键词</h3><ul><li>分组密码体制</li></ul><blockquote><p>AES采用分组密码体制，即AES加密会首先把明文切成一段一段的，而且每段数据的长度要求必须是128位16个字节，如果最后一段不够16个字节了，就需要用Padding来把这段数据填满16个字节，然后分别对每段数据进行加密，最后再把每段加密数据拼起来形成最终的密文。</p></blockquote><ul><li>Padding</li></ul><blockquote><p>Padding就是用来把不满16个字节的分组数据填满16个字节用的，它有三种模式PKCS5、PKCS7和NOPADDING。解密端需要使用和加密端同样的Padding模式，才能准确的识别有效数据和填充数据。开发通常采用PKCS7 Padding模式。</p></blockquote><ul><li>初始向量IV</li></ul><blockquote><p>初始向量IV的作用是使加密更加安全可靠，我们使用AES加密时需要主动提供初始向量，而且只需要提供一个初始向量就够了，后面每段数据的加密向量都是前面一段的密文。初始向量IV的长度规定为128位16个字节，初始向量的来源为随机生成。</p></blockquote><ul><li>密钥</li></ul><blockquote><p>开发通常采用128位16个字节的密钥，我们使用AES加密时需要主动提供密钥，而且只需要提供一个密钥就够了，每段数据加密使用的都是这一个密钥，密钥来源为随机生成。</p></blockquote><ul><li>四种加密模式</li></ul><blockquote><p>AES一共有四种加密模式，分别是ECB（电子密码本模式）、CBC（密码分组链接模式）、CFB、OFB，一般使用的是ECB、CBC模式</p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>服务端和我们客户端必须使用一样的密钥和初始向量IV。</li><li>服务端和我们客户端必须使用一样的加密模式。</li><li>服务端和我们客户端必须使用一样的Padding模式。<br><code>以上三条有一个不满足，双方就无法完成互相加解密。</code></li></ol><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><h3 id="RSA加密算法"><a href="#RSA加密算法" class="headerlink" title="RSA加密算法"></a>RSA加密算法</h3><p>RSA加密是一种非对称加密。可以在不直接传递密钥的情况下，完成解密。这能够确保信息的安全性，避免了直接传递密钥所造成的被破解的风险。<br>RSA是由一对密钥来进行加解密的过程，分别称为公钥和私钥。两者之间有数学相关，该加密算法的原理就是对一极大整数做因数分解的困难性来保证安全性。通常个人保存私钥，公钥是公开的（可能同时多人持有）。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20201108110852897.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmtleXRv,size_16,color_FFFFFF,t_70"></p><h3 id="RSA签名"><a href="#RSA签名" class="headerlink" title="RSA签名"></a>RSA签名</h3><p>加密和签名都是为了安全性考虑，但略有不同。常有人问加密和签名是用私钥还是公钥？其实都是对加密和签名的作用有所混淆。简单的说，<code>加密是为了防止信息被泄露，而签名是为了防止信息被篡改</code>。这里举2个例子说明。</p><h4 id="第一个场景"><a href="#第一个场景" class="headerlink" title="第一个场景"></a>第一个场景</h4><p>B<code>(客户端)</code>要给A<code>(服务器)</code>传递一条重要消息。</p><p>RSA的加密过程如下：</p><blockquote><ol><li>A生成一对密钥（公钥和私钥），私钥不公开，A自己保留。公钥为公开的，任何人可以获取。</li><li>A传递自己的公钥给B，B用A的公钥对消息进行加密。</li><li>A接收到B加密的消息，利用A自己的私钥对消息进行解密。</li></ol></blockquote><p>在整个过程中，只有2次传递过程，第一次是A传递公钥给B，第二次是B用公钥加密消息传递给A，即使都被敌方截获，也没有危险性，因为<code>只有A的私钥才能对消息进行解密</code>，防止了消息内容的泄露。</p><h4 id="第二个场景"><a href="#第二个场景" class="headerlink" title="第二个场景"></a>第二个场景</h4><p>A<code>(服务器)</code>收到B<code>(客户端)</code>发的消息后，需要进行<code>回复“收到”</code>。</p><p>RSA签名的过程如下：</p><blockquote><ol><li>A生成一对密钥（公钥和私钥），私钥不公开，A自己保留。公钥为公开的，任何人可以获取。</li><li>A用自己的私钥对消息加签，形成签名，并将加签的消息和消息<code>(加密后的信息)</code>本身一起传递给B。</li><li>B收到消息后，在获取A的公钥进行验签，如果验签出来的内容与消息本身一致，证明消息是A回复的。</li></ol></blockquote><p>在整个过程中，只有2次传递过程，第一次是A传递加签的消息和消息<code>(加密后的信息)</code>本身给B，第二次是B获取A的公钥，即使都被敌方截获，也没有危险性，因为只有A的私钥才能对消息进行签名；即使知道了消息内容<code>(加密后的信息)</code>，也无法伪造带签名的回复给B，防止了消息内容的篡改。</p><h3 id="存在的缺陷"><a href="#存在的缺陷" class="headerlink" title="存在的缺陷"></a>存在的缺陷</h3><p>综合两个场景你会发现：</p><blockquote><ol><li>第一个场景虽然被截获的消息没有泄露，但是黑客可以利用截获的公钥，将假信息进行加密，然后传递给A。</li><li>第二个场景虽然截获的消息不能被篡改，但是消息的内容可以利用公钥解密来获得，并不能防止泄露。</li></ol></blockquote><p>所以在实际应用中，要根据情况灵活使用，可以同时使用加密和签名，也可以A和B都有一套自己的公钥和私钥(<code>这里的A、B指服务端，前端的话不安全</code>)，当A要给B发送消息时，先用B的公钥对消息加密，再对加密的消息使用A的私钥来加签名，达到既不泄露也不被篡改，更能保证消息的安全性。</p><h2 id="项目详情"><a href="#项目详情" class="headerlink" title="项目详情"></a>项目详情</h2><h3 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.goitman<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rsa-encrypt-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Web 项目开发starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--RSA加解密依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.shuibo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rsa-encrypt-body-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok 简化插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rsa:</span></span><br><span class="line">  <span class="attr">encrypt:</span></span><br><span class="line">    <span class="attr">open:</span> <span class="literal">true</span> <span class="comment"># 是否开启加密 true  or  false</span></span><br><span class="line">    <span class="attr">showLog:</span> <span class="literal">true</span> <span class="comment"># 是否打印加解密log true  or  false</span></span><br><span class="line">    <span class="comment"># RSA公钥 java生成</span></span><br><span class="line">    <span class="attr">publicKey:</span> </span><br><span class="line">    <span class="comment"># RSA私钥 java生成</span></span><br><span class="line">    <span class="attr">privateKey:</span> </span><br></pre></td></tr></table></figure><p><code>RSA公私钥生成工具在后续工具类中</code></p><h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.shuibo.annotation.EnableSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RsaEncryptApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 启动引导类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/2 16:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableSecurity</span> <span class="comment">// 启用加解密注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RsaEncryptApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RsaEncryptApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Consumer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/2 16:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> CreateRsaSecrteKeyUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 生成RSA公钥私钥，RSA与AES加解密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/2 15:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateRsaSecrteKeyUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">&quot;RSAPublicKey&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PRIVATE_KEY</span> <span class="operator">=</span> <span class="string">&quot;RSAPrivateKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA算法名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RSA_ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;RSA&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA填充算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RSA_PADDING_ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;RSA/ECB/PKCS1Padding&quot;</span>;</span><br><span class="line"><span class="comment">//    public static final String RSA_PADDING_ALGORITHM = &quot;RSA/CBC/PKCS1Padding&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA加签算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SIGNATURE_ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;MD5withRSA&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA最大加密明文大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ENCRYPT_BLOCK</span> <span class="operator">=</span> <span class="number">117</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RSA最大解密密文大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_DECRYPT_BLOCK</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编码方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UTF_8</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AES算法名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AES_ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;AES&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AES填充算法</span></span><br><span class="line"><span class="comment">//    public static final String AES_PADDING_ALGORITHM = &quot;AES/ECB/PKCS5Padding&quot;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AES_PADDING_ALGORITHM</span> <span class="operator">=</span> <span class="string">&quot;AES/CBC/PKCS5Padding&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     只有在填充算法模式为CBC时才使用</span></span><br><span class="line"><span class="comment">     初始向量，不可以为32位，只能为数字或字母</span></span><br><span class="line"><span class="comment">     否则异常java.security.InvalidAlgorithmParameterException: Wrong IV length: must be 16 bytes long</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">iv</span> <span class="operator">=</span> <span class="string">&quot;初始向量&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * map对象中存放公私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">initKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获得对象 KeyPairGenerator 参数 RSA</span></span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">keyPairGen</span> <span class="operator">=</span> KeyPairGenerator.getInstance(RSA_ALGORITHM);</span><br><span class="line">        <span class="comment">// keysize：表示的是生成key的长度，单位字节(bits，64的整数倍,最小512位)</span></span><br><span class="line">        <span class="comment">// 如果采用2048，上面最大加密和最大解密则为:245、256</span></span><br><span class="line">        keyPairGen.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//通过对象 KeyPairGenerator 获取对象KeyPair</span></span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGen.generateKeyPair();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过对象 KeyPair 获取RSA公私钥对象RSAPublicKey RSAPrivateKey</span></span><br><span class="line">        <span class="type">RSAPublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">        <span class="type">RSAPrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line">        <span class="comment">//公私钥对象存入map中</span></span><br><span class="line">        Map&lt;String, Object&gt; keyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;(<span class="number">2</span>);</span><br><span class="line">        keyMap.put(PUBLIC_KEY, publicKey);</span><br><span class="line">        keyMap.put(PRIVATE_KEY, privateKey);</span><br><span class="line">        <span class="keyword">return</span> keyMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPublicKey</span><span class="params">(Map&lt;String, Object&gt; keyMap)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获得map中的公钥对象 转为key对象</span></span><br><span class="line">        <span class="type">Key</span> <span class="variable">key</span> <span class="operator">=</span> (Key) keyMap.get(PUBLIC_KEY);</span><br><span class="line">        <span class="keyword">return</span> encryptBASE64(key.getEncoded());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPrivateKey</span><span class="params">(Map&lt;String, Object&gt; keyMap)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获得map中的私钥对象 转为key对象</span></span><br><span class="line">        <span class="type">Key</span> <span class="variable">key</span> <span class="operator">=</span> (Key) keyMap.get(PRIVATE_KEY);</span><br><span class="line">        <span class="keyword">return</span> encryptBASE64(key.getEncoded());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [key 字符串]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> byte[]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> decryptBASE64</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> BASE64字符串解码为二进制数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] decryptBASE64(String key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">BASE64Decoder</span>()).decodeBuffer(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [key 字节数组]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> encryptBASE64</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 二进制数据编码为BASE64字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptBASE64</span><span class="params">(<span class="type">byte</span>[] key)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>()).encodeBuffer(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [data 需加密数据, publicKey 公钥]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> encryptRSADatePub</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 分段公钥加密数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptRSADate</span><span class="params">(String data, String publicKey)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] dataByte = data.getBytes();</span><br><span class="line">            <span class="type">byte</span>[] keyBytes = decryptBASE64(publicKey);</span><br><span class="line">            <span class="type">X509EncodedKeySpec</span> <span class="variable">x509KeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(keyBytes);</span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(RSA_ALGORITHM);</span><br><span class="line">            <span class="type">Key</span> <span class="variable">publicK</span> <span class="operator">=</span> keyFactory.generatePublic(x509KeySpec);</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(RSA_PADDING_ALGORITHM);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, publicK);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            IvParameterSpec ivp = new IvParameterSpec(iv.getBytes());</span></span><br><span class="line"><span class="comment">//            cipher.init(Cipher.ENCRYPT_MODE, publicK, ivp);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分段加密</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">inputLen</span> <span class="operator">=</span> dataByte.length;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">offSet</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] cache;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段加密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) &#123;</span><br><span class="line">                    cache = cipher.doFinal(dataByte, offSet, MAX_ENCRYPT_BLOCK);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cache = cipher.doFinal(dataByte, offSet, inputLen - offSet);</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_ENCRYPT_BLOCK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] encryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="keyword">return</span> encryptBASE64(encryptedData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [data 需解密数据, privateKey 私钥]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> decryptRSADate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 分段解密数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decryptRSADate</span><span class="params">(String data, String privateKey)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] dataByte = decryptBASE64(data);</span><br><span class="line">            <span class="type">byte</span>[] keyBytes = decryptBASE64(privateKey);</span><br><span class="line">            <span class="type">PKCS8EncodedKeySpec</span> <span class="variable">pkcs8KeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(keyBytes);</span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(RSA_ALGORITHM);</span><br><span class="line">            <span class="type">Key</span> <span class="variable">privateK</span> <span class="operator">=</span> keyFactory.generatePrivate(pkcs8KeySpec);</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(RSA_PADDING_ALGORITHM);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, privateK);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            IvParameterSpec ivp = new IvParameterSpec(iv.getBytes());</span></span><br><span class="line"><span class="comment">//            cipher.init(Cipher.DECRYPT_MODE, privateK, ivp);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分段解密</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">inputLen</span> <span class="operator">=</span> dataByte.length;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">offSet</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] cache;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段解密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) &#123;</span><br><span class="line">                    cache = cipher</span><br><span class="line">                            .doFinal(dataByte, offSet, MAX_DECRYPT_BLOCK);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cache = cipher</span><br><span class="line">                            .doFinal(dataByte, offSet, inputLen - offSet);</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_DECRYPT_BLOCK;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] decryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(decryptedData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [data 签名数据, privateKey 私钥]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> sign</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sign</span><span class="params">(String data, String privateKey)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// String转私钥对象</span></span><br><span class="line">            <span class="type">byte</span>[] keyBytes = decryptBASE64(privateKey);</span><br><span class="line">            <span class="type">PKCS8EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(keyBytes);</span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(RSA_ALGORITHM);</span><br><span class="line">            <span class="type">PrivateKey</span> <span class="variable">privateK</span> <span class="operator">=</span> keyFactory.generatePrivate(keySpec);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取加签对象</span></span><br><span class="line">            <span class="type">Signature</span> <span class="variable">sig</span> <span class="operator">=</span> Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class="line">            sig.initSign(privateK);</span><br><span class="line">            sig.update(data.getBytes(UTF_8));</span><br><span class="line">            <span class="keyword">return</span> encryptBASE64(sig.sign());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [data 验签数据, sign 签名, publicKey 公钥]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> verify</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 验签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String data, String sign, String publicKey)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// String转公钥对象</span></span><br><span class="line">            <span class="type">byte</span>[] keyBytes = decryptBASE64(publicKey);</span><br><span class="line">            <span class="type">X509EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(keyBytes);</span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(RSA_ALGORITHM);</span><br><span class="line">            <span class="type">PublicKey</span> <span class="variable">publicK</span> <span class="operator">=</span> keyFactory.generatePublic(keySpec);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取加签对象</span></span><br><span class="line">            <span class="type">Signature</span> <span class="variable">sig</span> <span class="operator">=</span> Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class="line">            sig.initVerify(publicK);</span><br><span class="line">            sig.update(data.getBytes(UTF_8));</span><br><span class="line">            <span class="keyword">return</span> sig.verify(decryptBASE64(sign));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span>  encryptAES</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>  AES 加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [context 明文, key 密钥8位的倍数，建议16位]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptAES</span><span class="params">(String context, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] decode = context.getBytes(UTF_8);</span><br><span class="line">            <span class="type">Key</span> <span class="variable">secretKeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(key.getBytes(UTF_8), AES_ALGORITHM);</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(AES_PADDING_ALGORITHM);</span><br><span class="line"><span class="comment">//            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);</span></span><br><span class="line"></span><br><span class="line">            <span class="type">IvParameterSpec</span> <span class="variable">ivp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(iv.getBytes());</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivp);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Base64.encodeBase64String(cipher.doFinal(decode));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span>  decryptAES</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>  AES 解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [context 密文, key 密钥8位的倍数，建议16位]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decryptAES</span><span class="params">(String context, String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] decode = Base64.decodeBase64(context);</span><br><span class="line">            <span class="type">Key</span> <span class="variable">secretKeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(key.getBytes(UTF_8), AES_ALGORITHM);</span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(AES_PADDING_ALGORITHM);</span><br><span class="line"><span class="comment">//            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);</span></span><br><span class="line"></span><br><span class="line">            <span class="type">IvParameterSpec</span> <span class="variable">ivp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(iv.getBytes());</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivp);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(cipher.doFinal(decode), UTF_8);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> randomKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 创建字符串密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">randomKey</span><span class="params">(<span class="type">int</span> lenght)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">char</span>[] c = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">short</span> <span class="variable">i</span> <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>; i &lt;= <span class="string">&#x27;9&#x27;</span>; i++) &#123;</span><br><span class="line">            str += (<span class="type">char</span>) i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">short</span> <span class="variable">i</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>; i &lt;= <span class="string">&#x27;Z&#x27;</span>; i++) &#123;</span><br><span class="line">            str += (<span class="type">char</span>) i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">short</span> <span class="variable">i</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; i &lt;= <span class="string">&#x27;z&#x27;</span>; i++) &#123;</span><br><span class="line">            str += (<span class="type">char</span>) i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c = <span class="keyword">new</span> <span class="title class_">char</span>[lenght];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * str.length());</span><br><span class="line">            c[i] = str.charAt(index);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;密钥：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(c) + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; keyMap;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keyMap = initKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">publicKey</span> <span class="operator">=</span> getPublicKey(keyMap);</span><br><span class="line">            System.out.println(<span class="string">&quot;公钥：&quot;</span> + publicKey + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">privateKey</span> <span class="operator">=</span> getPrivateKey(keyMap);</span><br><span class="line">            System.out.println(<span class="string">&quot;私钥：&quot;</span> + privateKey + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;===================先加密再加签===================&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;签名内容！&quot;</span>;</span><br><span class="line">            <span class="comment">// 公钥加密</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">encryptData</span> <span class="operator">=</span> encryptRSADate(str, publicKey);</span><br><span class="line">            System.out.println(<span class="string">&quot;公钥加密：&quot;</span> + encryptData + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="comment">// 私钥对密文加签</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> sign(encryptData, privateKey);</span><br><span class="line">            System.out.println(<span class="string">&quot;加签后：&quot;</span> + sign + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="comment">// 公钥对密文验签</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">verify</span> <span class="operator">=</span> verify(encryptData, sign, publicKey);</span><br><span class="line">            System.out.println(<span class="string">&quot;验签情况：&quot;</span> + verify + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 私钥解密</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">decryptData</span> <span class="operator">=</span> decryptRSADate(<span class="string">&quot;WXpNTk5yTU90NHJiQWwyZlBzNnJKdC9ZWk80YUJyWiswS1orUjR1clYxa2JuVVJRNnN0eUh4ekNVQlM0cFUxK3R6dU1PYVlsZkZQM2ZHaHB4VXNPbFRRbXZwWithUjVVZWtLVWRic2hqV0FweUpkNDZaLy9XTnVLMk9uYmhTMGdWMkZIK1NHUlc4L0dnR2ZPdmpOVjJrYmkzS25aQWdkUFRKT3NwTlowQ0owPQ==&quot;</span>, privateKey);</span><br><span class="line">            System.out.println(<span class="string">&quot;私钥解密：&quot;</span> + decryptData);</span><br><span class="line"></span><br><span class="line">            System.out.println(randomKey(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于RSA的特性，使用<code>1024位密钥长度</code>生产的公私钥(<code>75行代码</code>)时，<code>分段最大加密和最大解密长度分别需为：117(理论小于117都可以，但加密慢)、128(MAX_DECRYPT_BLOCK应等于密钥长度/8（1byte=8bit），此为固定值，否则报此类错：Data must not be longer than 128 bytes)两者必须配套使用</code>；如果采用<code>2048</code>，最大加密和最大解密则为:<code>245、256</code>，当加解密长度不匹配时，程序就会抛出如下异常</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; javax.crypto.BadPaddingException: Decryption error</span><br><span class="line">    at sun.security.rsa.RSAPadding.unpadV15(Unknown Source)</span><br><span class="line">    at sun.security.rsa.RSAPadding.unpad(Unknown Source)</span><br><span class="line">    at com.sun.crypto.provider.RSACipher.doFinal(RSACipher.java:363)</span><br><span class="line">    at com.sun.crypto.provider.RSACipher.engineDoFinal(RSACipher.java:389)</span><br><span class="line">    at javax.crypto.Cipher.doFinal(Cipher.java:2223)</span><br><span class="line">    .....</span><br></pre></td></tr></table></figure><h3 id="控制层类"><a href="#控制层类" class="headerlink" title="控制层类"></a>控制层类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.goitman.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.goitman.pojo.Consumer;</span><br><span class="line"><span class="keyword">import</span> cn.goitman.util.CreateRsaSecrteKeyUtil;</span><br><span class="line"><span class="keyword">import</span> cn.shuibo.annotation.Decrypt;</span><br><span class="line"><span class="keyword">import</span> cn.shuibo.annotation.Encrypt;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> RsaCotroller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/2 16:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RsaCotroller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;rsa.encrypt.privateKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;rsa.encrypt.publicKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String publicKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Encrypt</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/encrypt&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encrypt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(<span class="string">&quot;注解加密用户&quot;</span>, <span class="string">&quot;注解加密密码&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> consumer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Decrypt</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/decrypt&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decrypt</span><span class="params">(<span class="meta">@RequestBody</span> Consumer consumer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> consumer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手工加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/encryption&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encryption</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(<span class="string">&quot;手工加密用户&quot;</span>, <span class="string">&quot;手工加密密码&quot;</span>);</span><br><span class="line">        <span class="comment">// 因前端传送的是JSON数据，所以需先将对象转为JSON后，再加密</span></span><br><span class="line">        <span class="keyword">return</span> CreateRsaSecrteKeyUtil.encryptRSADate(JSON.toJSONString(consumer), publicKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/decryption&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decryption</span><span class="params">(<span class="meta">@RequestBody</span> String str)</span> &#123;</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> JSON.parseObject(CreateRsaSecrteKeyUtil.decryptRSADate(str, privateKey), Consumer.class);</span><br><span class="line">        <span class="keyword">return</span> consumer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手工加密加签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/signature&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">signature</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(<span class="string">&quot;手工加密加签&quot;</span>, <span class="string">&quot;手工加密加签&quot;</span>);</span><br><span class="line">        <span class="comment">// 因前端传送的是JSON数据，所以需先将对象转为JSON后，再加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encryptDate</span> <span class="operator">=</span> CreateRsaSecrteKeyUtil.encryptRSADate(JSON.toJSONString(consumer), publicKey);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> CreateRsaSecrteKeyUtil.sign(encryptDate, privateKey);</span><br><span class="line">        System.out.println(<span class="string">&quot;密文：&quot;</span> + encryptDate + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;加签：&quot;</span> + sign);</span><br><span class="line">        <span class="keyword">return</span> sign + <span class="string">&quot;&amp;&quot;</span> + encryptDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动解签解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/verify&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">verify</span><span class="params">(<span class="meta">@RequestBody</span> String str)</span> &#123;</span><br><span class="line">        String[] data = str.split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">verify</span> <span class="operator">=</span> CreateRsaSecrteKeyUtil.verify(data[<span class="number">1</span>], data[<span class="number">0</span>], publicKey);</span><br><span class="line">        <span class="keyword">if</span> (verify) &#123;</span><br><span class="line">            <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> JSON.parseObject(CreateRsaSecrteKeyUtil.decryptRSADate(data[<span class="number">1</span>], privateKey), Consumer.class);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;验签成功：&quot;</span> + consumer.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;验签失败！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES加密，前端解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/encodeAES&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encodeAES</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>(<span class="string">&quot;手工加密用户&quot;</span>, <span class="string">&quot;手工加密密码&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CreateRsaSecrteKeyUtil.randomKey(<span class="number">16</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> CreateRsaSecrteKeyUtil.encryptAES(consumer.toString(), key);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> data + <span class="string">&quot;&amp;&quot;</span> + key;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;加密失败！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES解密，前端加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/decodeAES&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decodeAES</span><span class="params">(<span class="meta">@RequestBody</span> String str, HttpServletRequest req)</span> &#123;</span><br><span class="line">        <span class="comment">// 密钥用rsa加密过</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodeKey</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;encodeKey&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CreateRsaSecrteKeyUtil.decryptRSADate(encodeKey, privateKey).replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> CreateRsaSecrteKeyUtil.decryptAES(str, key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;解密失败！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>注解加解密不能和手工加解密签一起使用，会有冲突，后面测试章节会介绍</code></p><h3 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>非对称加解密加验签与对称加解密<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--非对称、对称加解密--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jsencrypt.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--非对称加验签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jsrsasign-all-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--对称加解密--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/crypto-js/3.1.9-1/crypto-js.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;script src=&quot;js/crypto-js.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;jiami&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;zhujie1()&quot;</span>&gt;</span>前端解密，后端 注解 加密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;jiami1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;zhujie2()&quot;</span>&gt;</span>前端加密，后端 注解 解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;jiami3&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;shoudong1()&quot;</span>&gt;</span>前端解密，后端 手动 加密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;jiami4&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;shoudong2()&quot;</span>&gt;</span>前端加密，后端 手动 解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;jiami5&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;jiaqian1()&quot;</span>&gt;</span>前端验签解密，后端 手动 加密加签<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;jiami6&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;jiaqian2()&quot;</span>&gt;</span>前端加密加签，后端 手动 验签解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;jiami7&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;aesDecode()&quot;</span>&gt;</span>AES后端加密，前端解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;jiami8&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;aesEncode()&quot;</span>&gt;</span>AES前端加密，后端解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="variable constant_">PUBLIC_KEY</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="variable constant_">PRIVATE_KEY</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="variable constant_">ALGORITHM</span> = <span class="string">&#x27;MD5withRSA&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 加密方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">RSA_encryption</span>(<span class="params">jsonData</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> encrypt = <span class="keyword">new</span> <span class="title class_">JSEncrypt</span>();</span></span><br><span class="line"><span class="language-javascript">        encrypt.<span class="title function_">setPublicKey</span>(<span class="variable constant_">PUBLIC_KEY</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 使用jsencrypt只能支持100多位的加密，encryptlong基于 jsencrypt 扩展长文本分段加解密功能，encryptLong() 长文本加密</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> encrypted = encrypt.<span class="title function_">encryptLong</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonData));</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加密前数据:%o&#x27;</span>, jsonData);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加密后数据:%o&#x27;</span>, encrypted);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加密前数据:%o&#x27;</span>, jsonData.<span class="property">length</span> + <span class="string">&quot; &quot;</span>+encrypted.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> encrypted;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 私钥解密方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">RSA_decryption</span>(<span class="params">jsonData</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> decrypt = <span class="keyword">new</span> <span class="title class_">JSEncrypt</span>();</span></span><br><span class="line"><span class="language-javascript">        decrypt.<span class="title function_">setPrivateKey</span>(<span class="variable constant_">PRIVATE_KEY</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// decryptLong() 长文本解密</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> decrypted = decrypt.<span class="title function_">decryptLong</span>(jsonData);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;解密前数据:%o&#x27;</span>, jsonData);<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;解密后数据:%o&#x27;</span>, decrypted);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> decrypted;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 私钥加签</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">RSA_sign</span>(<span class="params">encryptDate</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// prvkeypem：传入pem标准格式的秘钥字符串, 解析生成秘钥实例: RSAKey. 标准的pem格式秘钥含有开始标记和结束标记, 如本文使用的秘钥: -----BEGIN xxx-----, -----END xxx-----. 至于xxx的具体内容不是太重要, 代码里自动通过正则清洗掉头和尾标记</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> signature = <span class="keyword">new</span> <span class="variable constant_">KJUR</span>.<span class="property">crypto</span>.<span class="title class_">Signature</span>(&#123;<span class="attr">alg</span>: <span class="variable constant_">ALGORITHM</span>, <span class="attr">prvkeypem</span>: <span class="string">&#x27;-----BEGIN PRIVATE KEY-----&#x27;</span> + <span class="variable constant_">PRIVATE_KEY</span> + <span class="string">&#x27;-----END PRIVATE KEY-----&#x27;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">        signature.<span class="title function_">updateString</span>(encryptDate); <span class="comment">// 传入待签明文</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> sign = <span class="title function_">hextob64</span>(signature.<span class="title function_">sign</span>()); <span class="comment">// 签名, hextob64得到16进制字符结果</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;私钥加签数据:%o&#x27;</span>, sign);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> sign + <span class="string">&quot;&amp;&quot;</span> + encryptDate;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 公钥验签</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">RSA_verify</span>(<span class="params">encryptDate, sign</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> signature = <span class="keyword">new</span> <span class="variable constant_">KJUR</span>.<span class="property">crypto</span>.<span class="title class_">Signature</span>(&#123;<span class="attr">alg</span>: <span class="variable constant_">ALGORITHM</span>, <span class="attr">prvkeypem</span>: <span class="string">&#x27;-----BEGIN PUBLIC KEY-----&#x27;</span> + <span class="variable constant_">PUBLIC_KEY</span> + <span class="string">&#x27;-----END PUBLIC KEY-----&#x27;</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">        signature.<span class="title function_">updateString</span>(encryptDate); <span class="comment">// 传入签密文</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> result = signature.<span class="title function_">verify</span>(<span class="title function_">b64tohex</span>(sign));<span class="comment">// 解签, b64tohex得到字符结果</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加签:%o&#x27;</span>, sign);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;验签结果:%o&#x27;</span>, result);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ====================================================================================================</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 前端解密，后端 注解 加密</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">zhujie1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/encrypt&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">reslut</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> res = <span class="title function_">RSA_decryption</span>(reslut)</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(res);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 前端加密，后端 注解 解密</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">zhujie2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;前端加密用户&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;passWord&quot;</span>: <span class="string">&quot;前端加密密码&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/decrypt&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: <span class="title function_">RSA_encryption</span>(str),</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ====================================================================================================</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 前端解密，后端 手动 加密</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">shoudong1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/encryption&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">reslut</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> res = <span class="title function_">RSA_decryption</span>(reslut)</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(res);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 前端加密，后端 手动 解密</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">shoudong2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;加密用户1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;passWord&quot;</span>: <span class="string">&quot;加密密码1&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/decryption&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: <span class="title function_">RSA_encryption</span>(str),</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ====================================================================================================</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 前端验签解密，后端 手动 加密加签</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">jiaqian1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/signature&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">reslut</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> res = reslut.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> re = <span class="title function_">RSA_verify</span>(res[<span class="number">1</span>], res[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> encryptDate = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">RSA_decryption</span>(res[<span class="number">1</span>]));</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(re + <span class="string">&quot;: &quot;</span> + encryptDate);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 前端加密加签，后端 手动 验签解密</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">jiaqian2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;手动解签解密1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;passWord&quot;</span>: <span class="string">&quot;手动解签解密1&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> encryptDate = <span class="title function_">RSA_encryption</span>(str);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> sign = <span class="title function_">RSA_sign</span>(encryptDate)</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/verify&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: sign,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ====================================================================================================</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * 生成随机密钥</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">randomString</span>(<span class="params">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = length; i &gt; <span class="number">0</span>; --i)</span></span><br><span class="line"><span class="language-javascript">            result += str[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * str.<span class="property">length</span>)];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> result.<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//aes加密</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">encryptAES</span>(<span class="params">context, key</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> encrypted = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="keyword">typeof</span> (context) == <span class="string">&#x27;string&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> (context) == <span class="string">&#x27;object&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            context = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(context);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> srcs = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(context);</span></span><br><span class="line"><span class="language-javascript">        encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(srcs, <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(key), &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">iv</span>: <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&quot;初始向量&quot;</span>),</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// mode: CryptoJS.mode.ECB,</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> encrypted.<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// aes解密</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">decryptAES</span>(<span class="params">context, key</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> decrypt = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(context, <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(key), &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">iv</span>:<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&quot;初始向量&quot;</span>),</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// mode: CryptoJS.mode.ECB,</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> decryptedStr = decrypt.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> decryptedStr.<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * AES后端加密，前端解密</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">aesDecode</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/encodeAES&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">reslut</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> res = reslut.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> key = res[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> encryptDate = <span class="title function_">decryptAES</span>(res[<span class="number">0</span>], key);</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(encryptDate + <span class="string">&quot; : &quot;</span> + key);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * AES前端加密，后端解密</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">aesEncode</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> k = <span class="title function_">randomString</span>(<span class="number">16</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;AES加解密&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;passWord&quot;</span>: <span class="string">&quot;AES加解密&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> encryptDate = <span class="title function_">encryptAES</span>(str,k)</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/decodeAES&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;encodeKey&quot;</span>: <span class="title function_">RSA_encryption</span>(k)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: encryptDate,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(data);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意事项：</code></p><blockquote><ol><li>第36行加验签算法需跟工具类中的加验签算法一致，否则解签失败</li><li>第68、80行加签验签方法中参数prvkeypem，必须传入pem标准格式的秘钥字符串，否则加验签失败；标准的pem格式含有开始标记和结束标记，如本文使用的秘钥：—–BEGIN xxx—–，—–END xxx—–。至于xxx的具体内容不是太重要，代码里自动通过正则清洗掉头和尾标记</li><li>第220、231行的iv初始向量必须与CreateRsaSecrteKeyUtil工具类中第64行中定义的iv初始向量一致，否则加解密失败</li></ol></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>注解加解密和手工加解密签一起使用产生冲突问题</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/SakerMxWQ8Buq6R.png"></p><blockquote><p>按照1、2、3的步骤来测试验证下效果，首先请求后端注解解密接口</p></blockquote><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/22/DdWpEmnCUIAOxFr.png"></p><p>毫无疑问，参数解密成功，直接返回前端，并弹框显示</p><blockquote><p>第2步，请求后端手动解密接口；咦！接收参数怎么就已经解密啦？来debug</p></blockquote><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/LA2hKU9aHVfpDkB.png"></p><p>原来第1步调起的解密注解，既然还在工作，喝，好家伙把第2步的请求参数也顺带解密啦，导致工具类解密时报出JSON数据异常</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/5MVmeGvoIljptdW.png"></p><blockquote><p>好吧，接着第3步，请求后端手动解签解密接口；我去，数据呢？怎么空字符串啦？</p></blockquote><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/EqgtPHvyhmf6S5G.png"></p><p>前端明明正常发送请求数据了啊，上debug</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/22/6tksobwyJpNDgmT.png"></p><p>还是解密注解造的孽，它无法解密加签的数据(加签算法和加密算法不一样，看工具类详情可知)，所以直接报解密失败，并返回个空字符串</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/21/REoPntqfTr8HCcN.png"></p><blockquote><p><code>结论：只要开启了解密注解，它就会一直保持开启解密状态，从而影响手动解密方法的正常使用</code></p></blockquote><h2 id="小程序非对称加密"><a href="#小程序非对称加密" class="headerlink" title="小程序非对称加密"></a>小程序非对称加密</h2><p>在上请求页面中RSA加解密使用了jsencrypt.js，其中有如下一段代码：<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/04/12/IO8sKr9yzBT5iJZ.png"></p><p>因为微信小程序的js中不能使用window对象，会导致报undefined错误（难道window对象真的在小程序中不存在吗？事实并非如此，有兴趣的可以去研究下，在这不作扩展），所以需换个思路来解决问题，使用wx_rsa.js（源码中已附文件）来实现非对称加密，使用方法如下</p><h3 id="JS引用"><a href="#JS引用" class="headerlink" title="JS引用"></a>JS引用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">RSA</span> = <span class="built_in">require</span>(<span class="string">&#x27;../wx_rsa.js&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wx_RSA_encrypto</span>(<span class="params">jsonData</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> encrypt_rsa = <span class="variable constant_">RSA</span>.<span class="property">KEYUTIL</span>.<span class="title function_">getKey</span>(<span class="string">&quot;-----BEGIN PUBLIC KEY-----公钥-----END PUBLIC KEY-----&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> encStr = encrypt_rsa.<span class="title function_">encrypt</span>(jsonData);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">RSA</span>.<span class="title function_">hex2b64</span>(encStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>客户端一般不推荐保存私钥，此为示例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wx_RSA_decrypto</span>(<span class="params">encStr</span>) &#123;</span><br><span class="line">    decrypt_rsa = <span class="variable constant_">RSA</span>.<span class="property">KEYUTIL</span>.<span class="title function_">getKey</span>(<span class="string">&quot;-----BEGIN PRIVATE KEY-----私钥-----END PRIVATE KEY-----&quot;</span>);</span><br><span class="line">    encStr = <span class="variable constant_">RSA</span>.<span class="title function_">b64tohex</span>(encStr);</span><br><span class="line">    <span class="keyword">var</span> decStr = decrypt_rsa.<span class="title function_">decrypt</span>(encStr);</span><br><span class="line">    <span class="keyword">return</span> decStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于加签验签可用回上节请求页面中的方法，当然也可用wx_rsa.js中的方法，在此不做扩展，自行研究调用</p><h2 id="后述"><a href="#后述" class="headerlink" title="后述"></a>后述</h2><p>一般服务端保存私钥，客户端保存公钥，可如下操作</p><ol><li>服务端私钥先加密再加签，返回加密信息和加签信息给客户端；客户端取加密信息并加签，与服务端返回的加签信息做对比，如果不一致则信息已被串改</li><li>服务端先明文加签再使用私钥加密，返回加密信息和加签信息给客户端；客户端取加密信息先解密再加签，与服务端返回的加签信息做对比，如果不一致则信息已被串改</li></ol><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/rsa-encrypt-demo">https://github.com/wangdaicong/spring-boot-project/tree/master/rsa-encrypt-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 接口加解密 </tag>
            
            <tag> 微信小程序 </tag>
            
            <tag> 防抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thumbnailator 图片处理类库</title>
      <link href="/2021/03/16/Thumbnailator%20%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E7%B1%BB%E5%BA%93/"/>
      <url>/2021/03/16/Thumbnailator%20%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E7%B1%BB%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Thumbnailator 是一个优秀的图片处理的Google开源Java类库。处理效果远比Java API的好。从API提供现有的图像文件和图像对象的类中简化了处理过程，两三行代码就能够从现有图片生成处理后的图片，且允许微调图片的生成方式，同时保持了需要写入的最低限度的代码量。<code>还支持对一个目录的所有图片进行批量处理操作。</code></p><p>支持的处理操作：图片缩放、裁剪、水印添加、旋转、保持比例、格式转换等等。Thumbnailator至今仍在不断更新……</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Thumbnailator图片处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.coobird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thumbnailator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="上传页面"><a href="#上传页面" class="headerlink" title="上传页面"></a>上传页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/html&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/html&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图上上传处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/jpeg,image/jpg,image/png,image/gif&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;but&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传图片&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;width:500px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tbg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tbg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tbgShow&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;width:500px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ntbg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ntbg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ntbgShow&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;width:300px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ppt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ppt&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pptShow&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;width:300px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rt&quot;</span> <span class="attr">id</span>=<span class="string">&quot;rt&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;rtShow&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;width:300px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;cp&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;cpShow&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;width:300px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wm&quot;</span> <span class="attr">id</span>=<span class="string">&quot;wm&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;wmShow&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;width:300px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ti&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ti&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tiShow&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;width:300px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ci&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ci&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ciShow&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;width:300px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;os&quot;</span> <span class="attr">id</span>=<span class="string">&quot;os&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;osShow&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;width:300px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;bi&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bi&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;biShow&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border:none;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">id</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;avatarShow&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#but&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>($(<span class="string">&quot;#upload&quot;</span>)[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> ($(<span class="string">&quot;#file&quot;</span>).<span class="title function_">val</span>() != <span class="string">&quot;&quot;</span> &amp;&amp; $(<span class="string">&quot;#file&quot;</span>)[<span class="number">0</span>].<span class="property">files</span>[<span class="number">0</span>].<span class="property">size</span> / <span class="number">1000</span> &lt; <span class="number">1024</span> * <span class="number">5</span>) &#123; <span class="comment">// 限制图片大小</span></span></span><br><span class="line"><span class="language-javascript">                $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">async</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>: <span class="string">&quot;/process&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">data</span>: data,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">fileElementId</span>: <span class="string">&quot;file&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">cache</span>: <span class="literal">false</span>,   <span class="comment">// 上传文件不需要缓存</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">contentType</span>: <span class="literal">false</span>, <span class="comment">// 不设置contentType值，已经声明属性enctype=&quot;multipart/form-data&quot;，所以这里设置为false。</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">processData</span>: <span class="literal">false</span>, <span class="comment">// data值是FormData对象，不需要对数据做处理</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">d</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (</span></span><br><span class="line"><span class="language-javascript">                            d.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;srcPath&quot;</span>) || d.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;tbgPath&quot;</span>) ||</span></span><br><span class="line"><span class="language-javascript">                            d.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;pptPath&quot;</span>) || d.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;ntbgPath&quot;</span>) ||</span></span><br><span class="line"><span class="language-javascript">                            d.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;rtPath&quot;</span>) || d.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;cpPath&quot;</span>) ||</span></span><br><span class="line"><span class="language-javascript">                            d.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;wmPath&quot;</span>) || d.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;tiPath&quot;</span>) ||</span></span><br><span class="line"><span class="language-javascript">                            d.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;ciPath&quot;</span>) || d.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;osPath&quot;</span>) ||</span></span><br><span class="line"><span class="language-javascript">                            d.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;biPath&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                        ) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">//图片显示</span></span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>, d.<span class="property">srcMsg</span>);</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#avatarShow&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, d.<span class="property">srcPath</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#tbg&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>, d.<span class="property">tbgMsg</span>);</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#tbgShow&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, d.<span class="property">tbgPath</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#ntbg&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>, d.<span class="property">ntbgMsg</span>);</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#ntbgShow&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, d.<span class="property">ntbgPath</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#ppt&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>, d.<span class="property">pptMsg</span>);</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#pptShow&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, d.<span class="property">pptPath</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#rt&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>, d.<span class="property">rtMsg</span>);</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#rtShow&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, d.<span class="property">rtPath</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#cp&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>, d.<span class="property">cpMsg</span>);</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#cpShow&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, d.<span class="property">cpPath</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#wm&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>, d.<span class="property">wmMsg</span>);</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#wmShow&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, d.<span class="property">wmPath</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#ti&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>, d.<span class="property">tiMsg</span>);</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#tiShow&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, d.<span class="property">tiPath</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#ci&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>, d.<span class="property">ciMsg</span>);</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#ciShow&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, d.<span class="property">ciPath</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#os&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>, d.<span class="property">osMsg</span>);</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#osShow&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, d.<span class="property">osPath</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#bi&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>, d.<span class="property">biMsg</span>);</span></span><br><span class="line"><span class="language-javascript">                            $(<span class="string">&quot;#biShow&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, d.<span class="property">biPath</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="title function_">alert</span>(<span class="string">&quot;上传失败&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&quot;上传异常&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文件上传工具类"><a href="#文件上传工具类" class="headerlink" title="文件上传工具类"></a>文件上传工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> FileUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 文件上传工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/10 15:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file     文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path     文件存放路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 保存的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">upload</span><span class="params">(MultipartFile file, String path, String fileName)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//确定上传的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> path + <span class="string">&quot;\\&quot;</span> + fileName;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断文件父目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!dest.getParentFile().exists()) &#123;</span><br><span class="line">            dest.getParentFile().mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//保存文件</span></span><br><span class="line">            file.transferTo(dest);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求接口"><a href="#请求接口" class="headerlink" title="请求接口"></a>请求接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/process&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">imagePro</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080/img/&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">localPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">srcPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">suffixName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> file.getContentType();</span><br><span class="line">    <span class="keyword">if</span> (type.equals(<span class="string">&quot;image/jpeg&quot;</span>) || type.equals(<span class="string">&quot;image/jpg&quot;</span>) || type.equals(<span class="string">&quot;image/png&quot;</span>) || type.equals(<span class="string">&quot;image/gif&quot;</span>)) &#123;</span><br><span class="line">        filename = file.getOriginalFilename();</span><br><span class="line">        suffixName = filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuidName</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + suffixName;</span><br><span class="line">        localPath = <span class="built_in">this</span>.getClass().getResource(<span class="string">&quot;/&quot;</span>).getPath() + <span class="string">&quot;static/img/&quot;</span>;</span><br><span class="line">        srcPath = localPath + uuidName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (FileUtils.upload(file, localPath, uuidName)) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;srcPath&quot;</span>, url + uuidName);</span><br><span class="line">            map.put(<span class="string">&quot;srcMsg&quot;</span>, <span class="string">&quot;原图大小为：&quot;</span> + String.format(<span class="string">&quot;%.0f&quot;</span>, file.getSize() / <span class="number">1024f</span>) + <span class="string">&quot; KB&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    thumbnailImg(map, <span class="number">200</span>, <span class="number">300</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    thumbnailImg2(map, <span class="number">200</span>, <span class="number">300</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    proportionImg(map, <span class="number">0.5</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    rotatingImg(map, <span class="number">200</span>, <span class="number">300</span>, <span class="number">90</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    compressionImg(map, <span class="number">1</span>, <span class="number">0.5</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    watermarkImg(map, <span class="number">500</span>, <span class="number">500</span>,<span class="string">&quot;1.jpg&quot;</span>,<span class="number">0.5f</span>,<span class="number">0.8</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    tailoringImg(map, <span class="number">300</span>, <span class="number">300</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    conversionImg(map, <span class="string">&quot;gif&quot;</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    outputStream(map, <span class="string">&quot;gif&quot;</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    bufferedImg(map, <span class="string">&quot;bmp&quot;</span>, url, localPath, srcPath, suffixName);</span><br><span class="line">    <span class="keyword">return</span> JSON.toJSONString(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原图"><a href="#原图" class="headerlink" title="原图"></a>原图</h3><p><code>文件大小：468 KB 分辨率：2560*1440像素</code><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/G25tluRWXhD98rw.jpg" alt="2022617.jpg"></p><h2 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h2><h3 id="按指定大小缩放图片（遵循原图高宽比例）"><a href="#按指定大小缩放图片（遵循原图高宽比例）" class="headerlink" title="按指定大小缩放图片（遵循原图高宽比例）"></a>按指定大小缩放图片（遵循原图高宽比例）</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/dQoSMpUyRtZDhWC.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> thumbnailImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 按指定大小缩放图片（遵循原图高宽比例）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [map, wdith 宽度, heigth 高度, url 请求地址, localPath 本地项目地址, srcPath 原图片地址, suffixName 文件后缀名]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">thumbnailImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="type">int</span> wdith, <span class="type">int</span> heigth, String url, String localPath, String srcPath, String suffixName)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuidName</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + suffixName;</span><br><span class="line">        <span class="comment">// of()可设置为图片目录地址，toFile()可设为图片转换后的目录地址，图片批量处理</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .size(wdith, heigth)</span><br><span class="line">                .toFile(localPath + uuidName);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(localPath + uuidName);</span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">bin</span> <span class="operator">=</span> ImageIO.read(file);</span><br><span class="line">        map.put(<span class="string">&quot;tbgPath&quot;</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">&quot;tbgMsg&quot;</span>, <span class="string">&quot;遵循原图缩略大小为：&quot;</span> + String.format(<span class="string">&quot;%.0f&quot;</span>, file.length() / <span class="number">1024f</span>) + <span class="string">&quot; KB; &quot;</span> + <span class="string">&quot;比例大小为：&quot;</span> + bin.getWidth() + <span class="string">&quot;*&quot;</span> + bin.getHeight());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按指定大小缩放图片（不遵循原图比例）"><a href="#按指定大小缩放图片（不遵循原图比例）" class="headerlink" title="按指定大小缩放图片（不遵循原图比例）"></a>按指定大小缩放图片（不遵循原图比例）</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/gfFUW2Ne7xSQvRd.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> thumbnailImg2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 按指定大小缩放图片（不遵循原图比例）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [map, wdith, heigth, url, localPath, srcPath , suffixName]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">thumbnailImg2</span><span class="params">(Map&lt;String, Object&gt; map, <span class="type">int</span> wdith, <span class="type">int</span> heigth, String url, String localPath, String srcPath, String suffixName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">uuidName</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + suffixName;</span><br><span class="line">            <span class="comment">// keepAspectRatio值为false，默认为true</span></span><br><span class="line">            Thumbnails.of(srcPath)</span><br><span class="line">                    .size(wdith, heigth)</span><br><span class="line">                    .keepAspectRatio(<span class="literal">false</span>)</span><br><span class="line">                    .toFile(localPath + uuidName);</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(localPath + uuidName);</span><br><span class="line">            <span class="comment">// 图像缓存区类</span></span><br><span class="line">            <span class="type">BufferedImage</span> <span class="variable">bin</span> <span class="operator">=</span> ImageIO.read(file);</span><br><span class="line">            map.put(<span class="string">&quot;ntbgPath&quot;</span>, url + uuidName);</span><br><span class="line">            map.put(<span class="string">&quot;ntbgMsg&quot;</span>, <span class="string">&quot;不遵循原图缩略大小为：&quot;</span> + String.format(<span class="string">&quot;%.0f&quot;</span>, file.length() / <span class="number">1024f</span>) + <span class="string">&quot; KB; &quot;</span> + <span class="string">&quot;比例大小为：&quot;</span> + bin.getWidth() + <span class="string">&quot;*&quot;</span> + bin.getHeight());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="按比例率缩放图片"><a href="#按比例率缩放图片" class="headerlink" title="按比例率缩放图片"></a>按比例率缩放图片</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/DrVOy7Y9cn6ijd8.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span>  proportionImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>  按比例率缩放图片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  [map, percentag 比例值, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">proportionImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="type">double</span> percentag, String url, String localPath, String srcPath, String suffixName)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuidName</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + suffixName;</span><br><span class="line">        <span class="comment">// scale 取值范围：大于1：放大，反之缩小；等于1：比例不变，压缩图片大小；等同于百分比)</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .scale(percentag)</span><br><span class="line">                .toFile(localPath + uuidName);</span><br><span class="line">        map.put(<span class="string">&quot;pptPath&quot;</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">&quot;pptMsg&quot;</span>, <span class="string">&quot;比例图大小为：&quot;</span> + String.format(<span class="string">&quot;%.0f&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(localPath + uuidName).length() / <span class="number">1024f</span>) + <span class="string">&quot; KB; &quot;</span> + <span class="string">&quot;比例值为：&quot;</span> + percentag);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="旋转图片"><a href="#旋转图片" class="headerlink" title="旋转图片"></a>旋转图片</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/MT34DbQgXryJRoN.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> rotatingImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 旋转图片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [map, wdith, heigth, angle 角度, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rotatingImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="type">int</span> wdith, <span class="type">int</span> heigth, <span class="type">int</span> angle, String url, String localPath, String srcPath, String suffixName)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuidName</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + suffixName;</span><br><span class="line">        <span class="comment">// rotate角度：正数顺时针旋转，反之亦然</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .size(wdith, heigth)</span><br><span class="line">                .rotate(angle)</span><br><span class="line">                .toFile(localPath + uuidName);</span><br><span class="line">        map.put(<span class="string">&quot;rtPath&quot;</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">&quot;rtMsg&quot;</span>, <span class="string">&quot;旋转角度为：&quot;</span> + angle);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="压缩图片文件大小"><a href="#压缩图片文件大小" class="headerlink" title="压缩图片文件大小"></a>压缩图片文件大小</h3><p><code>比例图大小为：72 KB; 比例值为：0.5 (压缩图与原图分辨率一致，此代码未做比例缩放处理)</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> compressionImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 压缩图片文件大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> [map, percentag 比例值, compressValue 压缩值, url, localPath, srcPath , suffixName]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">compressionImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="type">double</span> percentag, <span class="type">double</span> compressValue, String url, String localPath, String srcPath, String suffixName)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuidName</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + suffixName;</span><br><span class="line">        <span class="comment">// outputQuality 取值范围：0.0-1.0之间，等于1质量最高，等同于百分比，文件大小变大</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .scale(percentag)</span><br><span class="line">                .outputQuality(compressValue)</span><br><span class="line">                .toFile(localPath + uuidName);</span><br><span class="line">        map.put(<span class="string">&quot;cpPath&quot;</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">&quot;cpMsg&quot;</span>, <span class="string">&quot;压缩图大小为：&quot;</span> + String.format(<span class="string">&quot;%.0f&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(localPath + uuidName).length() / <span class="number">1024f</span>) + <span class="string">&quot; KB; &quot;</span> + <span class="string">&quot;压缩值为：&quot;</span> + compressValue);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加水印"><a href="#添加水印" class="headerlink" title="添加水印"></a>添加水印</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/WRFPymzuo5wZhMg.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span>  watermarkImg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>  添加水印</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  [map, wdith, heigth, fileName 图片名称, transparency 透明度, compressValue 压缩值, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">watermarkImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="type">int</span> wdith, <span class="type">int</span> heigth, String fileName, <span class="type">float</span> transparency, <span class="type">double</span> compressValue, String url, String localPath, String srcPath, String suffixName)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuidName</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + suffixName;</span><br><span class="line">        <span class="comment">// 读取水印图片</span></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">read</span> <span class="operator">=</span> ImageIO.read(<span class="keyword">new</span> <span class="title class_">File</span>(localPath + fileName));</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * watermark(位置，水印图，透明度)：Positions.BOTTOM_RIGHT表示在右下角，有9个位置枚举可选</span></span><br><span class="line"><span class="comment">         * transparency 取值范围：0.0-1.0之间，1为不透明</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .size(wdith, heigth)</span><br><span class="line">                .watermark(Positions.BOTTOM_RIGHT, read, transparency)</span><br><span class="line">                .outputQuality(compressValue).toFile(localPath + uuidName);</span><br><span class="line">        map.put(<span class="string">&quot;wmPath&quot;</span>, url + uuidName);</span><br><span class="line">        map.put(<span class="string">&quot;wmMsg&quot;</span>, <span class="string">&quot;添加水印成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片裁剪"><a href="#图片裁剪" class="headerlink" title="图片裁剪"></a>图片裁剪</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/UYlkmG7IrT3pdyv.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span>  tailoringImg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>  图片裁剪</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [map, wdith, heigth, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">tailoringImg</span><span class="params">(Map&lt;String, Object&gt; map, <span class="type">int</span> wdith, <span class="type">int</span> heigth, String url, String localPath, String srcPath, String suffixName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">uuidName</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + suffixName;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * sourceRegion(位置，裁剪宽度，裁剪高度)</span></span><br><span class="line"><span class="comment">             * 位置：Positions.CENTER 表示在中间，有9个位置枚举可选，也可用两个像素值定位</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Thumbnails.of(srcPath)</span><br><span class="line"><span class="comment">//                    .sourceRegion(Positions.CENTER, wdith, heigth)</span></span><br><span class="line">                    .sourceRegion(<span class="number">0</span>,<span class="number">0</span>, wdith, heigth)</span><br><span class="line">                    .size(wdith, heigth)</span><br><span class="line">                    .toFile(localPath + uuidName);</span><br><span class="line">            map.put(<span class="string">&quot;tiPath&quot;</span>, url + uuidName);</span><br><span class="line">            map.put(<span class="string">&quot;tiMsg&quot;</span>, <span class="string">&quot;图片裁剪成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="图片格式转换"><a href="#图片格式转换" class="headerlink" title="图片格式转换"></a>图片格式转换</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/zy6r4qZKuhna9xs.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  conversionImg</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 图片格式转换</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  [map, format 图片格式, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">conversionImg</span><span class="params">(Map&lt;String, Object&gt; map, String format, String url, String localPath, String srcPath, String suffixName)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">formatPath</span> <span class="operator">=</span> srcPath.substring(<span class="number">0</span>, srcPath.lastIndexOf(<span class="string">&quot;.&quot;</span>)) + <span class="string">&quot;.&quot;</span> + format;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> srcPath.substring(srcPath.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, srcPath.lastIndexOf(<span class="string">&quot;.&quot;</span>)) + <span class="string">&quot;.&quot;</span> + format;</span><br><span class="line">        <span class="comment">// outputFormat： 支持bmp,jpg,png,gif,jpeg格式</span></span><br><span class="line">        Thumbnails.of(srcPath)</span><br><span class="line">                .scale(<span class="number">0.5f</span>)</span><br><span class="line">                .outputFormat(format)</span><br><span class="line">                .toFile(formatPath);</span><br><span class="line">        map.put(<span class="string">&quot;ciPath&quot;</span>, url + fileName);</span><br><span class="line">        map.put(<span class="string">&quot;ciMsg&quot;</span>, <span class="string">&quot;格式为：&quot;</span> + format + <span class="string">&quot;    图片大小为：&quot;</span> + String.format(<span class="string">&quot;%.0f&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(formatPath).length() / <span class="number">1024f</span>) + <span class="string">&quot; KB; &quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="把图片输出至输出流"><a href="#把图片输出至输出流" class="headerlink" title="把图片输出至输出流"></a>把图片输出至输出流</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/JfEA5XCnkVFNazs.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  outputStream</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 把图片输出至输出流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  [map, format, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">outputStream</span><span class="params">(Map&lt;String, Object&gt; map, String format, String url, String localPath, String srcPath, String suffixName)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">formatPath</span> <span class="operator">=</span> srcPath.substring(<span class="number">0</span>, srcPath.lastIndexOf(<span class="string">&quot;.&quot;</span>)) + <span class="string">&quot;.&quot;</span> + format;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> srcPath.substring(srcPath.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, srcPath.lastIndexOf(<span class="string">&quot;.&quot;</span>)) + <span class="string">&quot;.&quot;</span> + format;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(formatPath);</span><br><span class="line"></span><br><span class="line">        Thumbnails.of(srcPath).size(<span class="number">300</span>, <span class="number">400</span>).outputFormat(format).toOutputStream(os);</span><br><span class="line">        map.put(<span class="string">&quot;osPath&quot;</span>, url + fileName);</span><br><span class="line">        map.put(<span class="string">&quot;osMsg&quot;</span>, <span class="string">&quot;输出文件流成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出图片缓冲流"><a href="#输出图片缓冲流" class="headerlink" title="输出图片缓冲流"></a>输出图片缓冲流</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2021/03/16/sNR4IqQJDyZW5UY.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@method</span>  bufferedImg</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span>  输出图片缓冲流</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>  [map, format, url, localPath, srcPath, suffixName]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bufferedImg</span><span class="params">(Map&lt;String, Object&gt; map, String format,String url, String localPath, String srcPath, String suffixName)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">formatPath</span> <span class="operator">=</span> srcPath.substring(<span class="number">0</span>, srcPath.lastIndexOf(<span class="string">&quot;.&quot;</span>)) + <span class="string">&quot;.&quot;</span> + format;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> srcPath.substring(srcPath.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, srcPath.lastIndexOf(<span class="string">&quot;.&quot;</span>)) + <span class="string">&quot;.&quot;</span> + format;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(formatPath);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">bi</span> <span class="operator">=</span> Thumbnails.of(srcPath).size(<span class="number">300</span>, <span class="number">400</span>).asBufferedImage();</span><br><span class="line">        ImageIO.write(bi, format, os);</span><br><span class="line">        map.put(<span class="string">&quot;biPath&quot;</span>, url + fileName);</span><br><span class="line">        map.put(<span class="string">&quot;biMsg&quot;</span>, <span class="string">&quot;输出图片缓冲流成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：若png、gif格式图片中含有透明背景，使用该工具压缩处理后背景会变成黑色，这是Thumbnailator的一个bug</code></p><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/imageProcessing-demo">https://github.com/wangdaicong/spring-boot-project/tree/master/imageProcessing-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thumbnailator </tag>
            
            <tag> 图片处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java生成有规则的编号</title>
      <link href="/2020/11/02/Java%E7%94%9F%E6%88%90%E6%9C%89%E8%A7%84%E5%88%99%E7%9A%84%E7%BC%96%E5%8F%B7/"/>
      <url>/2020/11/02/Java%E7%94%9F%E6%88%90%E6%9C%89%E8%A7%84%E5%88%99%E7%9A%84%E7%BC%96%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>做订单、出入库单等等数据时，往往需要自动生成有一定规则的编号。</p><p>编号格式为：两个字母+日期（8位）+编号（3位）。</p><h2 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a>第一种方法：</h2><p>其中，日期为系统当前的日期。首先获取系统当前日期，然后根据日期格式将date类型转换成String类型即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);<span class="comment">//设置日期格式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> f.format(<span class="keyword">new</span> <span class="title class_">Date</span>);</span><br></pre></td></tr></table></figure><p>后三位编号根据数据库中当天已存在编号进行自增。首先需要查询出数据库中当天的编号并且以降序排序。sql语句如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from 数据库表名 where 字段 like &#x27;字母&quot;</span>+date+<span class="string">&quot;%&#x27; order by 字段 desc&quot;</span>;</span><br></pre></td></tr></table></figure><p>查询的数据放在集合内，判断集合内是否有数据。有数据就获取集合中第一条数据中的编号（最大号），再截取编号的后三位，转换为int类型，自增后再转换为String类型，通过三目运算符循环三次在前面加0直至为三位数的字符串，最后拼接得到编号。若集合内没有数据就直接拼接001。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;实体类&gt; 集合名 = service.方法名(); <span class="comment">// 调用Service中的方法获取SQL中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(集合名.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">n</span> <span class="operator">=</span> 集合名.get(<span class="number">0</span>).get字段名();</span><br><span class="line"><span class="type">int</span> <span class="variable">intNumber</span> <span class="operator">=</span> Integer.parseInt(n.substring(<span class="number">10</span>));</span><br><span class="line">intNumber++;</span><br><span class="line"><span class="type">String</span> <span class="variable">Number</span> <span class="operator">=</span> String.valueOf(intNumber);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">Number</span> <span class="operator">=</span> Number.length() &lt; <span class="number">3</span> ? <span class="string">&quot;0&quot;</span> + Number : Number;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">Number</span> <span class="operator">=</span> <span class="string">&quot;字母&quot;</span> + date + Number;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">Number</span> <span class="operator">=</span> <span class="string">&quot;字母&quot;</span> + date + <span class="string">&quot;001&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="第二种方法：思路"><a href="#第二种方法：思路" class="headerlink" title="第二种方法：思路"></a>第二种方法：思路</h2><p>设计一张临时数据库表存放编号(只需存一行数据和两列字段(如：id,value)即可，value供修改)，每次需要用时查询此表，获取当前value，同时加1，供后续使用，不够三位数时也可采用第一种方法中的补零策略(方法很多)</p><h2 id="第三种方法：redis推荐"><a href="#第三种方法：redis推荐" class="headerlink" title="第三种方法：redis推荐"></a>第三种方法：redis推荐</h2><p>配置redis(单机)，下图为在springBOOT架构中application.yml的配置，传统架构的配置方式都一样</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818125153151.png"></p><p>生成编号代码：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818130515200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmtleXRv,size_16,color_FFFFFF,t_70"></p><p>TimeUnit部分源码：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818130705952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmtleXRv,size_16,color_FFFFFF,t_70"></p><h2 id="三种方法比较："><a href="#三种方法比较：" class="headerlink" title="三种方法比较："></a>三种方法比较：</h2><p>第一、二种方法都会有个致命的BUG，就是在多并发的情况下，拿到同一个编号的几率很大，有人说加同步代码块synchronized啊，确实可行，但在访问量大的情况下，一直让用户等待，页面一直在loading，那就尴尬啦，让人怀疑我们的技术能力啊</p><p><code>注意：synchronized与负载均衡(分布式)没关系，synchronized只跟进程有关联</code></p><p>第三种方法，就避免了这个问题，因为Redis是单进程单线程模式，采用队列模式将并发访问变成串行访问<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818132312935.png"></p><p>如数据源无此Key，那初始值为1，每次获取后，自动加1供后续使用</p><p><code>注意：increment方法中value还可以为double类型</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818134033441.png"></p><p>如数据源无此Key，那初始值为2.3，每次获取后，自动加2.3</p>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编号生成 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于TaskScheduler和CronTask实现动态增删启停定时任务功能</title>
      <link href="/2020/11/01/%E5%9F%BA%E4%BA%8ETaskScheduler%E5%92%8CCronTask%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%A2%9E%E5%88%A0%E5%90%AF%E5%81%9C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/11/01/%E5%9F%BA%E4%BA%8ETaskScheduler%E5%92%8CCronTask%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%A2%9E%E5%88%A0%E5%90%AF%E5%81%9C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>在spring boot项目中定时任务的开发方式：<br>一、可通过@EnableScheduling注解和@Scheduled注解实现<br>二、可通过SchedulingConfigurer接口来实现<br>三、集成Quartz框架实现<br><code>注意：第一和第二方式不能动态添加、删除、启动、停止任务。</code>在满足项目需求的情况下，尽量少的依赖其它框架，避免项目过于臃肿和复杂是最基本的开发原则。<br>查看 spring-context 这个 jar 包中 org.springframework.scheduling.ScheduledTaskRegistrar 这个类的源代码，发现可以通过改造这个类（主要是基于TaskScheduler和CronTask两个类来实现）就能实现动态增删启停定时任务功能。</p><h2 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scheduledTaskRegistrar-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Web 项目开发starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--校验--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok 简化插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--通用mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mysql数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">数据库连接地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">数据库名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">数据库密码</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># xml文件地址</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment"># 打印mybatis的执行sql语句</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment"># 开启驼峰自动转换</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="启动引导类"><a href="#启动引导类" class="headerlink" title="启动引导类"></a>启动引导类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> scheduledTaskApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 启动引导类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/26 17:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.scheduledTask.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledTaskApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ScheduledTaskApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@MapperScan：指定扫描的Mapper类的包的路径，简化直接在每个Mapper类上添加注解@Mapper</p><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><h3 id="配置线程池"><a href="#配置线程池" class="headerlink" title="配置线程池"></a>配置线程池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ScheduledConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 配置线程池</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 14:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulingConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TaskScheduler <span class="title function_">taskScheduler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建任务调度线程池</span></span><br><span class="line">        <span class="type">ThreadPoolTaskScheduler</span> <span class="variable">taskScheduler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskScheduler</span>();</span><br><span class="line">        <span class="comment">// 初始化线程池数量</span></span><br><span class="line">        taskScheduler.setPoolSize(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 是否将取消后的任务，从队列中删除</span></span><br><span class="line">        taskScheduler.setRemoveOnCancelPolicy(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 设置线程名前缀</span></span><br><span class="line">        taskScheduler.setThreadNamePrefix(<span class="string">&quot;ThreadPool-&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> taskScheduler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行类"><a href="#执行类" class="headerlink" title="执行类"></a>执行类</h2><h3 id="同步处理定时任务类"><a href="#同步处理定时任务类" class="headerlink" title="同步处理定时任务类"></a>同步处理定时任务类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledFuture;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ScheduledTask</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 同步处理任务类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 15:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledTask</span> &#123;</span><br><span class="line">    <span class="comment">// 使用volatile同步机制，处理定时任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> ScheduledFuture future;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> cancel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 取消定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ScheduledFuture</span> <span class="variable">future</span> <span class="operator">=</span> <span class="built_in">this</span>.future;</span><br><span class="line">        <span class="keyword">if</span> (future != <span class="literal">null</span>) &#123;</span><br><span class="line">            future.cancel(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时任务注册类"><a href="#定时任务注册类" class="headerlink" title="定时任务注册类"></a>定时任务注册类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.config.CronTask;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> CronTaskRegistrar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 定时任务注册类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 17:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CronTaskRegistrar</span> <span class="keyword">implements</span> <span class="title class_">DisposableBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在多线程下，使用并发集合做为缓存，初始化容量16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Runnable, ScheduledTask&gt; scheduledTasks = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入定时任务接口</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskScheduler taskScheduler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [task 定时任务, cronExpression cron表达式]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> addCronTask</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 添加定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCronTask</span><span class="params">(Runnable task, String cronExpression)</span> &#123;</span><br><span class="line">        addCronTask(<span class="keyword">new</span> <span class="title class_">CronTask</span>(task, cronExpression));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  addCronTask</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  注册定时任务，并将任务加入到缓存中</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  [cronTask] 定时任务对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCronTask</span><span class="params">(CronTask cronTask)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cronTask != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> cronTask.getRunnable();</span><br><span class="line">            <span class="keyword">if</span> (scheduledTasks.containsKey(task)) &#123;</span><br><span class="line">                removeCronTask(task);</span><br><span class="line">            &#125;</span><br><span class="line">            scheduledTasks.put(task, scheduleCronTask(cronTask));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  removeCronTask</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  取消定时任务，并将缓存中的任务记录删除</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  [task] 线程对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeCronTask</span><span class="params">(Runnable task)</span> &#123;</span><br><span class="line">        <span class="type">ScheduledTask</span> <span class="variable">scheduledTask</span> <span class="operator">=</span> scheduledTasks.remove(task);</span><br><span class="line">        <span class="keyword">if</span> (scheduledTask != <span class="literal">null</span>) &#123;</span><br><span class="line">            scheduledTask.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  scheduleCronTask</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  调用线程池</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  [cronTask] 定时任务对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  com.scheduledtask.task.ScheduledTask</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="keyword">public</span> ScheduledTask <span class="title function_">scheduleCronTask</span><span class="params">(CronTask cronTask)</span> &#123;</span><br><span class="line">        <span class="type">ScheduledTask</span> <span class="variable">scheduledTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledTask</span>();</span><br><span class="line">        <span class="comment">// 指定一个触发器执行定时任务，并返回执行结果</span></span><br><span class="line">        scheduledTask.future = taskScheduler.schedule(cronTask.getRunnable(), cronTask.getTrigger());</span><br><span class="line">        <span class="keyword">return</span> scheduledTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  destroy</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  销毁所有定时任务，并将缓存清除</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (ScheduledTask task : scheduledTasks.values()) &#123;</span><br><span class="line">            task.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">        scheduledTasks.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处用Map来模拟缓存，当然可以换教专业的缓存组件，如redis等等</p><h3 id="初始化定时任务类"><a href="#初始化定时任务类" class="headerlink" title="初始化定时任务类"></a>初始化定时任务类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskRunner</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 初始化定时任务类</span></span><br><span class="line"><span class="comment"> *              如有多个组件实现了CommandLineRunner接口来实现启动加载功能，Order注解可实现先后加载顺序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 14:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// @Order(value = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CronTaskRegistrar cronTaskRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        <span class="comment">// 重新开启线程，避免影响主程序的启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 查找任务状态为正常的任务数据</span></span><br><span class="line">                List&lt;Task&gt; taskList = taskService.getTaskListByStatus(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!CollectionUtils.isEmpty(taskList)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">                        <span class="comment">// 执行定时任务</span></span><br><span class="line">                        <span class="type">SchedulingRunnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulingRunnable</span>(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">                        <span class="comment">// 注册任务数据</span></span><br><span class="line">                        cronTaskRegistrar.addCronTask(runnable, task.getCronExpression());</span><br><span class="line">                    &#125;</span><br><span class="line">                    log.info(<span class="string">&quot;定时任务加载完毕......&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Spring Boot中提供了CommandLineRunner(实现启动初始化功能)和ApplicationRunner(引导类)两个接口来实现容器启动<br><code>CommandLineRunner的执行是整个应用启动的一部分，避免CommandLineRunner启动中抛出异常（java.lang.IllegalStateException: Failed to execute CommandLineRunner），直接影响主程序的启动，从而此处重新开启一个线程，让CommandLineRunner和主线程相互独立</code>，此时抛出异常并不会影响到主线程，防止踩坑</p><h3 id="定时任务执行类"><a href="#定时任务执行类" class="headerlink" title="定时任务执行类"></a>定时任务执行类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.util.SpringContextUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ReflectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> SchedulingRunnable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 反射机制执行定时任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 16:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulingRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="keyword">private</span> String params;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时任务开始执行 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;&quot;</span>, beanName, methodName, params);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> SpringContextUtils.getBean(beanName);</span><br><span class="line"></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> StringUtils.isEmpty(params) ?</span><br><span class="line">                    target.getClass().getDeclaredMethod(methodName) :</span><br><span class="line">                    target.getClass().getDeclaredMethod(methodName, String.class);</span><br><span class="line"></span><br><span class="line">            ReflectionUtils.makeAccessible(method);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(params)) &#123;</span><br><span class="line">                method.invoke(target);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                method.invoke(target, params);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;定时任务异常 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;&quot;</span>, beanName, methodName, params);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">        log.info(<span class="string">&quot;定时任务执行结束 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;，耗时：&#123;&#125;&quot;</span>, beanName, methodName, params, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SchedulingRunnable</span> <span class="variable">that</span> <span class="operator">=</span> (SchedulingRunnable) o;</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> beanName.equals(that.beanName) &amp;&amp;</span><br><span class="line">                    methodName.equals(that.methodName) &amp;&amp;</span><br><span class="line">                    that.params == <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanName.equals(that.beanName) &amp;&amp;</span><br><span class="line">                methodName.equals(that.methodName) &amp;&amp;</span><br><span class="line">                params.equals(that.params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(beanName, methodName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(beanName, methodName, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="获取实例对象"><a href="#获取实例对象" class="headerlink" title="获取实例对象"></a>获取实例对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> SpringContextUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 获取当前上下文对象工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 16:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextUtils</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 应用上下文对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        SpringContextUtils.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span>  getBean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>  获取当前上下文对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [name]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  java.lang.Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是获取定时任务业务逻辑类注解@Component上配置的实例名(对应数据库中的beanName)</p><h2 id="实体对象与sql脚本"><a href="#实体对象与sql脚本" class="headerlink" title="实体对象与sql脚本"></a>实体对象与sql脚本</h2><h3 id="任务实体类"><a href="#任务实体类" class="headerlink" title="任务实体类"></a>任务实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.pojo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Task</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 定时任务实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 10:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//全参构造</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">// 无参构造</span></span><br><span class="line"><span class="meta">@Table(name = &quot;task&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;beanName&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;对象名不能为空！&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;methodName&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;方法名不能为空！&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;methodParams&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String methodParams;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;cronExpression&quot;)</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;cron表达式不能为空！&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(message = &quot;cron表达式错误！&quot;, regexp = &quot;^\\s*($|#|\\w+\\s*=|(\\?|\\*|(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?(?:,(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?)*)\\s+(\\?|\\*|(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?(?:,(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?)*)\\s+(\\?|\\*|(?:[01]?\\d|2[0-3])(?:(?:-|\\/|\\,)(?:[01]?\\d|2[0-3]))?(?:,(?:[01]?\\d|2[0-3])(?:(?:-|\\/|\\,)(?:[01]?\\d|2[0-3]))?)*)\\s+(\\?|\\*|(?:0?[1-9]|[12]\\d|3[01])(?:(?:-|\\/|\\,)(?:0?[1-9]|[12]\\d|3[01]))?(?:,(?:0?[1-9]|[12]\\d|3[01])(?:(?:-|\\/|\\,)(?:0?[1-9]|[12]\\d|3[01]))?)*)\\s+(\\?|\\*|(?:[1-9]|1[012])(?:(?:-|\\/|\\,)(?:[1-9]|1[012]))?(?:L|W)?(?:,(?:[1-9]|1[012])(?:(?:-|\\/|\\,)(?:[1-9]|1[012]))?(?:L|W)?)*|\\?|\\*|(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(?:(?:-)(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))?(?:,(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(?:(?:-)(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))?)*)\\s+(\\?|\\*|(?:[0-6])(?:(?:-|\\/|\\,|#)(?:[0-6]))?(?:L)?(?:,(?:[0-6])(?:(?:-|\\/|\\,|#)(?:[0-6]))?(?:L)?)*|\\?|\\*|(?:MON|TUE|WED|THU|FRI|SAT|SUN)(?:(?:-)(?:MON|TUE|WED|THU|FRI|SAT|SUN))?(?:,(?:MON|TUE|WED|THU|FRI|SAT|SUN)(?:(?:-)(?:MON|TUE|WED|THU|FRI|SAT|SUN))?)*)(|\\s)+(\\?|\\*|(?:|\\d&#123;4&#125;)(?:(?:-|\\/|\\,)(?:|\\d&#123;4&#125;))?(?:,(?:|\\d&#123;4&#125;)(?:(?:-|\\/|\\,)(?:|\\d&#123;4&#125;))?)*))$&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String cronExpression;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;jobStatus&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer jobStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;createTime&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;updateTime&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创表语句"><a href="#创表语句" class="headerlink" title="创表语句"></a>创表语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `task` (</span><br><span class="line">      `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">      `beanName` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;任务名称&#x27;</span>,</span><br><span class="line">      `methodName` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;方法名称&#x27;</span>,</span><br><span class="line">      `methodParams` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;方法参数&#x27;</span>,</span><br><span class="line">      `cronExpression` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;cron表达式&#x27;</span>,</span><br><span class="line">      `jobStatus` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;任务状态 0暂停 1正常&#x27;</span>,</span><br><span class="line">      `remark` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">      `createTime` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">      `updateTime` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">      <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">      <span class="keyword">UNIQUE</span> KEY `beanName` (`beanName`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_unicode_ci COMMENT<span class="operator">=</span><span class="string">&#x27;定时任务表&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.mapper.TaskMapper;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 业务逻辑层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 15:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskMapper taskMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertTask</span><span class="params">(Task task)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.insertSelective(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Task&gt; <span class="title function_">getTaskListByStatus</span><span class="params">(Integer jobStatus)</span> &#123;</span><br><span class="line">        <span class="type">Example</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>(Task.class);</span><br><span class="line">        Example.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> example.createCriteria();</span><br><span class="line">        criteria.andEqualTo(<span class="string">&quot;jobStatus&quot;</span>, jobStatus);</span><br><span class="line">        <span class="keyword">return</span> taskMapper.selectByExample(example);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Task <span class="title function_">findTaskByJobId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteTaskByJobId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.deleteByPrimaryKey(id) &gt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateTask</span><span class="params">(Task task)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.updateByPrimaryKeySelective(task) &gt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据连接"><a href="#数据连接" class="headerlink" title="数据连接"></a>数据连接</h2><h3 id="数据层类"><a href="#数据层类" class="headerlink" title="数据层类"></a>数据层类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 数据连接层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 11:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TaskMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Task&gt; &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：因为继承Mapper类，使用通用mapper插件做数据层处理，基本的CRUD单表操作方法都已有</code></p><h3 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.scheduledtask.mapper.TaskMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskStatus</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 任务状态枚举</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 11:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">// 全参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">TaskStatus</span> &#123;</span><br><span class="line">    SUSPEND(<span class="string">&quot;暂停&quot;</span>, <span class="number">0</span>),</span><br><span class="line">    NORMAL(<span class="string">&quot;正常&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">desc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">value</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时任务业务逻辑类"><a href="#定时任务业务逻辑类" class="headerlink" title="定时任务业务逻辑类"></a>定时任务业务逻辑类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskOne</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 定时任务业务逻辑类</span></span><br><span class="line"><span class="comment"> *              Component中的value对应数据库的beanName字段</span></span><br><span class="line"><span class="comment"> *              方法名对应数据库的methodName字段</span></span><br><span class="line"><span class="comment"> *              参数对应数据库的methodParams字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/30 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(&quot;TaskOne&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskOne</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskWithParams</span><span class="params">(String params)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   此处写有参定时任务的业务逻辑</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskNoParams</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *   此处写无参定时任务的业务逻辑</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层类"><a href="#控制层类" class="headerlink" title="控制层类"></a>控制层类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.enums.TaskStatus;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.task.CronTaskRegistrar;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.task.SchedulingRunnable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 控制层类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 16:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CronTaskRegistrar cronTaskRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addTask&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addTask</span><span class="params">(<span class="meta">@Valid</span> Task task)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (taskService.insertTask(task) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;新增失败！&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (task.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                <span class="type">SchedulingRunnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulingRunnable</span>(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.addCronTask(runnable, task.getCronExpression());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;新增成功！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteTask/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteTask</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.findTaskByJobId(id);</span><br><span class="line">        <span class="keyword">if</span> (!taskService.deleteTaskByJobId(id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;删除失败！&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (task.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                <span class="type">SchedulingRunnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulingRunnable</span>(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.removeCronTask(runnable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;删除成功！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/updateTask&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateTask</span><span class="params">(Task taskNew)</span> &#123;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">taskOld</span> <span class="operator">=</span> taskService.findTaskByJobId(taskNew.getId());</span><br><span class="line">        <span class="keyword">if</span> (taskService.updateTask(taskNew)) &#123;</span><br><span class="line">            <span class="comment">// 先取消原有的定时任务，并删除缓存</span></span><br><span class="line">            <span class="keyword">if</span> (taskOld.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                <span class="comment">// 链式编程，使用了lombok的注解@Accessors</span></span><br><span class="line">                <span class="type">SchedulingRunnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulingRunnable</span>()</span><br><span class="line">                        .setBeanName(taskOld.getBeanName())</span><br><span class="line">                        .setMethodName(taskOld.getMethodName())</span><br><span class="line">                        .setParams(taskOld.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.removeCronTask(runnable);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 新增定时任务，并添加到缓存</span></span><br><span class="line">            <span class="keyword">if</span> (taskNew.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                <span class="type">SchedulingRunnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulingRunnable</span>(taskNew.getBeanName(), taskNew.getMethodName(), taskNew.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.addCronTask(runnable, taskNew.getCronExpression());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;更新失败！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;更新成功！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改任务状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateTaskStatus/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateTaskStatus</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskService.findTaskByJobId(id);</span><br><span class="line">        <span class="comment">// 如原先是启动状态，便设置为停止，并从缓存中删除，反之亦然</span></span><br><span class="line">        <span class="keyword">if</span> (task.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">            <span class="type">SchedulingRunnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulingRunnable</span>(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">            cronTaskRegistrar.removeCronTask(runnable);</span><br><span class="line">            task.setJobStatus(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> taskService.updateTask(task) ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">SchedulingRunnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchedulingRunnable</span>(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">            cronTaskRegistrar.addCronTask(runnable, task.getCronExpression());</span><br><span class="line">            task.setJobStatus(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> taskService.updateTask(task) ? <span class="string">&quot;修改成功！&quot;</span> : <span class="string">&quot;修改失败！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：此处用到的校验注解是在org.springframework.validation包下的，如只在方法参数上加@Validated校验注解无效的话，则在类上加@Validated注解，并在方法参数上加@Valid注解</code></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="启动加载"><a href="#启动加载" class="headerlink" title="启动加载"></a>启动加载</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/01/zVoHO4Wfu2y69AJ.png" alt="项目启动"></p><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.controller.TaskController;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ScheduledTaskTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = ScheduledTaskApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduledTaskTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskController taskController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTaskController</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">/*      Task task = new Task();</span></span><br><span class="line"><span class="comment">        task.setBeanName(&quot;TaskOne&quot;);</span></span><br><span class="line"><span class="comment">        task.setMethodName(&quot;taskWithParams&quot;);</span></span><br><span class="line"><span class="comment">        task.setMethodParams(&quot;111&quot;);</span></span><br><span class="line"><span class="comment">        task.setCronExpression(&quot;0/5 * * * * ?&quot;);</span></span><br><span class="line"><span class="comment">        task.setJobStatus(1);</span></span><br><span class="line"><span class="comment">        task.setRemark(&quot;111&quot;);</span></span><br><span class="line"><span class="comment">        task.setCreateTime(new Date());</span></span><br><span class="line"><span class="comment">        task.setUpdateTime(new Date());</span></span><br><span class="line"><span class="comment">        String msg = taskController.addTask(task);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String msg = taskController.deleteTask(2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*      Task task = new Task();</span></span><br><span class="line"><span class="comment">        task.setId(50);</span></span><br><span class="line"><span class="comment">        task.setBeanName(&quot;TaskOne&quot;);</span></span><br><span class="line"><span class="comment">        task.setMethodName(&quot;taskNoParams&quot;);</span></span><br><span class="line"><span class="comment">        task.setMethodParams(&quot;&quot;);</span></span><br><span class="line"><span class="comment">        task.setCronExpression(&quot;0/5 * * * * ?&quot;);</span></span><br><span class="line"><span class="comment">        task.setJobStatus(1);</span></span><br><span class="line"><span class="comment">        task.setRemark(&quot;111&quot;);</span></span><br><span class="line"><span class="comment">        task.setCreateTime(new Date());</span></span><br><span class="line"><span class="comment">        task.setUpdateTime(new Date());</span></span><br><span class="line"><span class="comment">        String msg = taskController.updateTask(task);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> taskController.updateTaskStatus(<span class="number">50</span>);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/scheduledTaskRegistrar-demo">https://github.com/wangdaicong/spring-boot-project/tree/master/scheduledTaskRegistrar-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术专题 </category>
          
          <category> 任务调度 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定时任务 </tag>
            
            <tag> spring </tag>
            
            <tag> 通用mapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>screw (螺丝钉) 数据库表结构文档生成工具</title>
      <link href="/2020/07/15/screw%20(%E8%9E%BA%E4%B8%9D%E9%92%89)%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/07/15/screw%20(%E8%9E%BA%E4%B8%9D%E9%92%89)%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>　　数据库文档也是交付的重要内容，本文的工具可以帮助大家快速生成相应文档，并支持多种数据库<br>      　　在企业级开发中、我们经常会有编写数据库表结构文档的时间付出，关于数据库表结构文档状态：要么没有、要么有、但都是手写、后期运维开发，需要手动进行维护到文档中，很是繁琐、如果忘记一次维护、就会给以后工作造成很多困扰、无形中制造了很多坑留给自己和后人。</p><h2 id="screw-特点"><a href="#screw-特点" class="headerlink" title="screw 特点"></a>screw 特点</h2><ul><li>简洁、轻量、设计良好。不需要 powerdesigner 这种重量的建模工具 多数据库支持 。</li><li>支持市面常见的数据库类型MySQL、Oracle、SqlServer</li><li>多种格式文档。支持 MD、HTML、WORD 格式</li><li>灵活扩展。支持用户自定义模板和展示样式</li></ul><h2 id="数据库支持"><a href="#数据库支持" class="headerlink" title="数据库支持"></a>数据库支持</h2><ul><li>MySQL</li><li>MariaDB</li><li>TIDB</li><li>Oracle</li><li>SqlServer</li><li>PostgreSQL</li><li>Cache DB</li></ul><h2 id="文档生成支持"><a href="#文档生成支持" class="headerlink" title="文档生成支持"></a>文档生成支持</h2><ul><li>html</li><li>word</li><li>markdwon</li></ul><h2 id="文档截图"><a href="#文档截图" class="headerlink" title="文档截图"></a>文档截图</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyMi8xNjE0MTRfNzRjZDBiNjhfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyMi8xNjE3MjNfNmRhNThjNDFfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><h3 id="word"><a href="#word" class="headerlink" title="word"></a>word</h3><p> <img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyNS8yMDA5NDZfMWRjMDcxN2ZfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><h3 id="markdwon"><a href="#markdwon" class="headerlink" title="markdwon"></a>markdwon</h3><p> <img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyNS8yMTQ3NDlfN2IxNWQ4YmRfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"><br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyNS8yMTUwMDZfMzYwMWUxMzVfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><h2 id="SpringBoot整合screw生成数据库文档"><a href="#SpringBoot整合screw生成数据库文档" class="headerlink" title="SpringBoot整合screw生成数据库文档"></a>SpringBoot整合screw生成数据库文档</h2><h3 id="代码生成（推荐）"><a href="#代码生成（推荐）" class="headerlink" title="代码生成（推荐）"></a>代码生成（推荐）</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--freemarker模版--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--screw依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试类代码"><a href="#测试类代码" class="headerlink" title="测试类代码"></a>测试类代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScrewApplicationTests</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//数据源：HikariCP 线程池, SpringBoot 2.0开始内置了HikariCP，2.0之前的版本需要引入依赖</span></span><br><span class="line">        <span class="type">HikariConfig</span> <span class="variable">hikariConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HikariConfig</span>();</span><br><span class="line">        <span class="comment">// com.mysql.jdbc.Driver MySQL5驱动；com.mysql.cj.jdbc.Driver MySQL6之后的驱动</span></span><br><span class="line">        hikariConfig.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        hikariConfig.setJdbcUrl(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/数据库名&quot;</span>);</span><br><span class="line">        hikariConfig.setUsername(<span class="string">&quot;数据库帐号&quot;</span>);</span><br><span class="line">        hikariConfig.setPassword(<span class="string">&quot;数据可密码&quot;</span>);</span><br><span class="line">        <span class="comment">//设置可以获取tables remarks信息</span></span><br><span class="line">        hikariConfig.addDataSourceProperty(<span class="string">&quot;useInformationSchema&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        hikariConfig.setMinimumIdle(<span class="number">2</span>);</span><br><span class="line">        hikariConfig.setMaximumPoolSize(<span class="number">5</span>);</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>(hikariConfig);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 1、生成文件配置</span></span><br><span class="line">        <span class="type">EngineConfig</span> <span class="variable">engineConfig</span> <span class="operator">=</span> EngineConfig.builder()</span><br><span class="line">                <span class="comment">//生成文件路径(改成自己的生成路径)</span></span><br><span class="line">                .fileOutputDir(<span class="string">&quot;/Users/用户/Desktop&quot;</span>)</span><br><span class="line">                <span class="comment">//生成后是否立即打开目录</span></span><br><span class="line">                .openOutputDir(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">//文件类型 有HTML、WORD、MD三种枚举选择</span></span><br><span class="line">                .fileType(EngineFileType.WORD)</span><br><span class="line">                <span class="comment">//生成模板实现</span></span><br><span class="line">                .produceType(EngineTemplateType.freemarker).build();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 忽略表名（可选）</span></span><br><span class="line">        List&lt;String&gt; ignoreTableName = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;test_group&quot;</span>);</span><br><span class="line">        <span class="comment">// 忽略表前缀（可选）</span></span><br><span class="line">        List&lt;String&gt; ignorePrefix = Collections.singletonList(<span class="string">&quot;czb_&quot;</span>);</span><br><span class="line">        <span class="comment">// 忽略表后缀（可选）</span></span><br><span class="line">        List&lt;String&gt; ignoreSuffix = Arrays.asList(<span class="string">&quot;_test&quot;</span>, <span class="string">&quot;_test1&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 2、配置想要忽略的表（可选）</span></span><br><span class="line">        <span class="type">ProcessConfig</span> <span class="variable">processConfig</span> <span class="operator">=</span> ProcessConfig.builder()</span><br><span class="line">                .ignoreTableName(ignoreTableName)</span><br><span class="line">                .ignoreTablePrefix(ignorePrefix)</span><br><span class="line">                .ignoreTableSuffix(ignoreSuffix)</span><br><span class="line">                .build();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 3、生成文档配置（包含以下自定义版本号、标题、描述（数据库名 + 描述 = 文件名）等配置连接）</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> Configuration.builder()</span><br><span class="line">                .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                .title(<span class="string">&quot;数据库文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;数据库设计文档生成&quot;</span>)</span><br><span class="line">                .dataSource(dataSource)</span><br><span class="line">                .engineConfig(engineConfig)</span><br><span class="line">                .produceConfig(processConfig).build();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 4、执行生成</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DocumentationExecute</span>(config).execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动run，运行测试类或contextLoads方法即可</p><img  src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200715131215704.png" align='left'/><h3 id="Maven-插件生成"><a href="#Maven-插件生成" class="headerlink" title="Maven 插件生成"></a>Maven 插件生成</h3><p>在pom.xml文件中加入如下配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- HikariCP --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mysql driver--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.48<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--username--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">username</span>&gt;</span>数据库帐号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--password--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">password</span>&gt;</span>数据库密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver  com.mysql.jdbc.Driver MySQL5驱动；com.mysql.cj.jdbc.Driver MySQL6之后的驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--jdbc url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdbcUrl</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/数据库名<span class="tag">&lt;/<span class="name">jdbcUrl</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成文件类型 HTML、WORD、MD三种选择--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileType</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">fileType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--文件输出目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileOutputDir</span>&gt;</span>E:<span class="tag">&lt;/<span class="name">fileOutputDir</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--打开文件输出目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">openOutputDir</span>&gt;</span>true<span class="tag">&lt;/<span class="name">openOutputDir</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成模板--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">produceType</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">produceType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--描述--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>数据库文档生成<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--版本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据库文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后运行maven插件生成即可</p><img  src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200715130912560.png" align='left'/><blockquote><p>screw 码云地址：<a href="https://gitee.com/leshalv/screw">https://gitee.com/leshalv/screw</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 文档生成 </tag>
            
            <tag> screw </tag>
            
            <tag> mysql </tag>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析 VO、DTO、DO、PO 的概念、区别和用处！</title>
      <link href="/2020/07/13/%E6%B5%85%E6%9E%90%20VO%E3%80%81DTO%E3%80%81DO%E3%80%81PO%20%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E5%A4%84%EF%BC%81/"/>
      <url>/2020/07/13/%E6%B5%85%E6%9E%90%20VO%E3%80%81DTO%E3%80%81DO%E3%80%81PO%20%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E5%A4%84%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>本篇文章主要讨论一下我们经常会用到的一些对象：VO、DTO、DO和PO。<br>由于不同的项目和开发人员有不同的命名习惯，这里我首先对上述的概念进行一个简单描述，名字只是个标识，我们重点关注其概念：</p><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p><strong>VO（View Object）：</strong>视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p><p><strong>DTO（Data Transfer Object）</strong>：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p><p><strong>DO（Domain Object）</strong>：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。</p><p><strong>PO（Persistent Object）</strong>：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</p><h2 id="模型："><a href="#模型：" class="headerlink" title="模型："></a>模型：</h2><p>下面以一个时序图建立简单模型来描述上述对象在三层架构应用中的位置 </p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/13/82WpYBrICDsPc4M.png" alt="avatar"></p><ul><li>用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。</li><li>展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。</li><li>服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。</li><li>服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。</li><li>对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。</li></ul><h2 id="VO与DTO的区别"><a href="#VO与DTO的区别" class="headerlink" title="VO与DTO的区别"></a>VO与DTO的区别</h2><p>　　大家可能会有个疑问（在笔者参与的项目中，很多程序员也有相同的疑惑）：既然DTO是展示层与服务层之间传递数据的对象，为什么还需要一个VO呢？对！对于绝大部分的应用场景来说，DTO和VO的属性值基本是一致的，而且他们通常都是POJO，因此没必要多此一举，但不要忘记这是实现层面的思维，对于设计层面来说，概念上还是应该存在VO和DTO，因为两者有着本质的区别，DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。</p><p>　　用一个例子来说明可能会比较容易理解：例如服务层有一个getUser的方法返回一个系统用户，其中有一个属性是gender(性别)，对于服务层来说，它只从语义上定义：1-男性，2-女性，0-未指定，而对于展示层来说，它可能需要用“帅哥”代表男性，用“美女”代表女性，用“秘密”代表未指定。说到这里，可能你还会反驳，在服务层直接就返回“帅哥美女”不就行了吗？对于大部分应用来说，这不是问题，但设想一下，如果需求允许客户可以定制风格，而不同风格对于“性别”的表现方式不一样，又或者这个服务同时供多个客户端使用（不同门户），而不同的客户端对于表现层的要求有所不同，那么，问题就来了。再者，回到设计层面上分析，从职责单一原则来看，服务层只负责业务，与具体的表现形式无关，因此，它返回的DTO，不应该出现与表现形式的耦合。</p><p>　　理论归理论，这到底还是分析设计层面的思维，是否在实现层面必须这样做呢？一刀切的做法往往会得不偿失，下面我马上会分析应用中如何做出正确的选择。</p><h2 id="VO与DTO的应用"><a href="#VO与DTO的应用" class="headerlink" title="VO与DTO的应用"></a>VO与DTO的应用</h2><p>　　上面只是用了一个简单的例子来说明VO与DTO在概念上的区别，本节将会告诉你如何在应用中做出正确的选择。</p><p>　　在以下才场景中，我们可以考虑把VO与DTO二合为一（注意：是实现层面）：</p><ul><li>当需求非常清晰稳定，而且客户端很明确只有一个的时候，没有必要把VO和DTO区分开来，这时候VO可以退隐，用一个DTO即可，为什么是VO退隐而不是DTO？回到设计层面，服务层的职责依然不应该与展示层耦合，所以，对于前面的例子，你很容易理解，DTO对于“性别”来说，依然不能用“帅哥美女”，这个转换应该依赖于页面的脚本（如JavaScript）或其他机制（JSTL、EL、CSS）</li><li>即使客户端可以进行定制，或者存在多个不同的客户端，如果客户端能够用某种技术（脚本或其他机制）实现转换，同样可以让VO退隐</li></ul><br>　　以下场景需要优先考虑VO、DTO并存：<ul><li>上述场景的反面场景</li><li>因为某种技术原因，比如某个框架（如Flex）提供自动把POJO转换为UI中某些Field时，可以考虑在实现层面定义出VO，这个权衡完全取决于使用框架的自动转换能力带来的开发和维护效率提升与设计多一个VO所多做的事情带来的开发和维护效率的下降之间的比对。</li><li>如果页面出现一个“大视图”，而组成这个大视图的所有数据需要调用多个服务，返回多个DTO来组装（当然，这同样可以通过服务层提供一次性返回一个大视图的DTO来取代，但在服务层提供一个这样的方法是否合适，需要在设计层面进行权衡）。</li></ul><h2 id="DTO与DO的区别"><a href="#DTO与DO的区别" class="headerlink" title="DTO与DO的区别"></a>DTO与DO的区别</h2><p>　　首先是概念上的区别，DTO是展示层和服务层之间的数据传输对象（可以认为是两者之间的协议），而DO是对现实世界各种业务角色的抽象，这就引出了两者在数据上的区别，例如UserInfo和User（对于DTO和DO的命名规则，请参见笔者前面的一篇博文），对于一个getUser方法来说，本质上它永远不应该返回用户的密码，因此UserInfo至少比User少一个password的数据。而在领域驱动设计中，正如第一篇系列文章所说，DO不是简单的POJO，它具有领域业务逻辑。</p><h2 id="DTO与DO的应用"><a href="#DTO与DO的应用" class="headerlink" title="DTO与DO的应用"></a>DTO与DO的应用</h2><p>　　从上一节的例子中，细心的读者可能会发现问题：既然getUser方法返回的UserInfo不应该包含password，那么就不应该存在password这个属性定义，但如果同时有一个createUser的方法，传入的UserInfo需要包含用户的password，怎么办？在设计层面，展示层向服务层传递的DTO与服务层返回给展示层的DTO在概念上是不同的，但在实现层面，我们通常很少会这样做（定义两个UserInfo，甚至更多），因为这样做并不见得很明智，我们完全可以设计一个完全兼容的DTO，在服务层接收数据的时候，不该由展示层设置的属性（如订单的总价应该由其单价、数量、折扣等决定），无论展示层是否设置，服务层都一概忽略，而在服务层返回数据时，不该返回的数据（如用户密码），就不设置对应的属性。</p><p>　　对于DO来说，还有一点需要说明：为什么不在服务层中直接返回DO呢？这样可以省去DTO的编码和转换工作，原因如下：</p><ul><li>两者在本质上的区别可能导致彼此并不一一对应，一个DTO可能对应多个DO，反之亦然，甚至两者存在多对多的关系。</li><li>DO具有一些不应该让展示层知道的数据</li><li>DO具有业务方法，如果直接把DO传递给展示层，展示层的代码就可以绕过服务层直接调用它不应该访问的操作，对于基于AOP拦截服务层来进行访问控制的机制来说，这问题尤为突出，而在展示层调用DO的业务方法也会因为事务的问题，让事务难以控制。</li><li>对于某些ORM框架（如Hibernate）来说，通常会使用“延迟加载”技术，如果直接把DO暴露给展示层，对于大部分情况，展示层不在事务范围之内（Open session in view在大部分情况下不是一种值得推崇的设计），如果其尝试在Session关闭的情况下获取一个未加载的关联对象，会出现运行时异常（对于Hibernate来说，就是LazyInitiliaztionException）。</li><li>从设计层面来说，展示层依赖于服务层，服务层依赖于领域层，如果把DO暴露出去，就会导致展示层直接依赖于领域层，这虽然依然是单向依赖，但这种跨层依赖会导致不必要的耦合。</li></ul><br>　　对于DTO来说，也有一点必须进行说明，就是DTO应该是一个“扁平的二维对象”，举个例子来说明：如果User会关联若干个其他实体（例如Address、Account、Region等），那么getUser()返回的UserInfo，是否就需要把其关联的对象的DTO都一并返回呢？如果这样的话，必然导致数据传输量的大增，对于分布式应用来说，由于涉及数据在网络上的传输、序列化和反序列化，这种设计更不可接受。如果getUser除了要返回User的基本信息外，还需要返回一个AccountId、AccountName、RegionId、RegionName，那么，请把这些属性定义到UserInfo中，把一个“立体”的对象树“压扁”成一个“扁平的二维对象”，笔者目前参与的项目是一个分布式系统，该系统不管三七二十一，把一个对象的所有关联对象都转换为相同结构的DTO对象树并返回，导致性能非常的慢。<h2 id="DO与PO的区别"><a href="#DO与PO的区别" class="headerlink" title="DO与PO的区别"></a>DO与PO的区别</h2><p>　　DO和PO在绝大部分情况下是一一对应的，PO是只含有get&#x2F;set方法的POJO，但某些场景还是能反映出两者在概念上存在本质的区别：</p><ul><li>DO在某些场景下不需要进行显式的持久化，例如利用策略模式设计的商品折扣策略，会衍生出折扣策略的接口和不同折扣策略实现类，这些折扣策略实现类可以算是DO，但它们只驻留在静态内存，不需要持久化到持久层，因此，这类DO是不存在对应的PO的。</li><li>同样的道理，某些场景下，PO也没有对应的DO，例如老师Teacher和学生Student存在多对多的关系，在关系数据库中，这种关系需要表现为一个中间表，也就对应有一个TeacherAndStudentPO的PO，但这个PO在业务领域没有任何现实的意义，它完全不能与任何DO对应上。这里要特别声明，并不是所有多对多关系都没有业务含义，这跟具体业务场景有关，例如：两个PO之间的关系会影响具体业务，并且这种关系存在多种类型，那么这种多对多关系也应该表现为一个DO，又如：“角色”与“资源”之间存在多对多关系，而这种关系很明显会表现为一个DO——“权限”。</li><li>某些情况下，为了某种持久化策略或者性能的考虑，一个PO可能对应多个DO，反之亦然。例如客户Customer有其联系信息Contacts，这里是两个一对一关系的DO，但可能出于性能的考虑（极端情况，权作举例），为了减少数据库的连接查询操作，把Customer和Contacts两个DO数据合并到一张数据表中。反过来，如果一本图书Book，有一个属性是封面cover，但该属性是一副图片的二进制数据，而某些查询操作不希望把cover一并加载，从而减轻磁盘IO开销，同时假设ORM框架不支持属性级别的延迟加载，那么就需要考虑把cover独立到一张数据表中去，这样就形成一个DO对应对个PO的情况。</li><li>PO的某些属性值对于DO没有任何意义，这些属性值可能是为了解决某些持久化策略而存在的数据，例如为了实现“乐观锁”，PO存在一个version的属性，这个version对于DO来说是没有任何业务意义的，它不应该在DO中存在。同理，DO中也可能存在不需要持久化的属性。</li></ul><h2 id="DO与PO的应用"><a href="#DO与PO的应用" class="headerlink" title="DO与PO的应用"></a>DO与PO的应用</h2><p>　　由于ORM框架的功能非常强大而大行其道，而且JavaEE也推出了JPA规范，现在的业务应用开发，基本上不需要区分DO与PO，PO完全可以通过JPA，Hibernate Annotations&#x2F;hbm隐藏在DO之中。虽然如此，但有些问题我们还必须注意：</p><ul><li>对于DO中不需要持久化的属性，需要通过ORM显式的声明，如：在JPA中，可以利用@Transient声明。</li><li>对于PO中为了某种持久化策略而存在的属性，例如version，由于DO、PO合并了，必须在DO中声明，但由于这个属性对DO是没有任何业务意义的，需要让该属性对外隐藏起来，最常见的做法是把该属性的get&#x2F;set方法私有化，甚至不提供get&#x2F;set方法，但对于Hibernate来说，这需要特别注意，由于Hibernate从数据库读取数据转换为DO时，是利用反射机制先调用DO的空参数构造函数构造DO实例，然后再利用JavaBean的规范反射出set方法来为每个属性设值，如果不显式声明set方法，或把set方法设置为private，都会导致Hibernate无法初始化DO，从而出现运行时异常，可行的做法是把属性的set方法设置为protected。</li><li>对于一个DO对应多个PO，或者一个PO对应多个DO的场景，以及属性级别的延迟加载，Hibernate都提供了很好的支持，请参考Hibnate的相关资料。</li></ul><br>　　到目前为止，相信大家都已经比较清晰的了解VO、DTO、DO、PO的概念、区别和实际应用了。通过上面的详细分析，我们还可以总结出一个原则：分析设计层面和实现层面完全是两个独立的层面，即使实现层面通过某种技术手段可以把两个完全独立的概念合二为一，在分析设计层面，我们仍然（至少在头脑中）需要把概念上独立的东西清晰的区分开来，这个原则对于做好分析设计非常重要（工具越先进，往往会让我们越麻木）。<br>　　<blockquote><p>作者：Johnny.Liang<br>来源：blogjava.net&#x2F;johnnylzb&#x2F;archive&#x2F;2010&#x2F;05&#x2F;27&#x2F;321968.html</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VO </tag>
            
            <tag> DTO </tag>
            
            <tag> DO </tag>
            
            <tag> PO </tag>
            
            <tag> 领域驱动 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
