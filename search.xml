<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java生成有规则的编号</title>
      <link href="/2020/11/02/Java%E7%94%9F%E6%88%90%E6%9C%89%E8%A7%84%E5%88%99%E7%9A%84%E7%BC%96%E5%8F%B7/"/>
      <url>/2020/11/02/Java%E7%94%9F%E6%88%90%E6%9C%89%E8%A7%84%E5%88%99%E7%9A%84%E7%BC%96%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>做订单、出入库单等等数据时，往往需要自动生成有一定规则的编号。</p><p>编号格式为：两个字母+日期（8位）+编号（3位）。</p><h2 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a>第一种方法：</h2><p>其中，日期为系统当前的日期。首先获取系统当前日期，然后根据日期格式将date类型转换成String类型即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat f = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);<span class="comment">//设置日期格式</span></span><br><span class="line">String date = f.format(<span class="keyword">new</span> Date);</span><br></pre></td></tr></table></figure><p>后三位编号根据数据库中当天已存在编号进行自增。首先需要查询出数据库中当天的编号并且以降序排序。sql语句如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"select * from 数据库表名 where 字段 like '字母"</span>+date+<span class="string">"%' order by 字段 desc"</span>;</span><br></pre></td></tr></table></figure><p>查询的数据放在集合内，判断集合内是否有数据。有数据就获取集合中第一条数据中的编号（最大号），再截取编号的后三位，转换为int类型，自增后再转换为String类型，通过三目运算符循环三次在前面加0直至为三位数的字符串，最后拼接得到编号。若集合内没有数据就直接拼接001。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;实体类&gt; 集合名 = service.方法名(); <span class="comment">// 调用Service中的方法获取SQL中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(集合名.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">String n = 集合名.get(<span class="number">0</span>).get字段名();</span><br><span class="line"><span class="keyword">int</span> intNumber = Integer.parseInt(n.substring(<span class="number">10</span>));</span><br><span class="line">intNumber++;</span><br><span class="line">String Number = String.valueOf(intNumber);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">String Number = Number.length() &lt; <span class="number">3</span> ? <span class="string">"0"</span> + Number : Number;</span><br><span class="line">&#125;</span><br><span class="line">    String Number = <span class="string">"字母"</span> + date + Number;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    String Number = <span class="string">"字母"</span> + date + <span class="string">"001"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="第二种方法：思路"><a href="#第二种方法：思路" class="headerlink" title="第二种方法：思路"></a>第二种方法：思路</h2><p>设计一张临时数据库表存放编号(只需存一行数据和两列字段(如：id,value)即可，value供修改)，每次需要用时查询此表，获取当前value，同时加1，供后续使用，不够三位数时也可采用第一种方法中的补零策略(方法很多)</p><h2 id="第三种方法：redis推荐"><a href="#第三种方法：redis推荐" class="headerlink" title="第三种方法：redis推荐"></a>第三种方法：redis推荐</h2><p>配置redis(单机)，下图为在springBOOT架构中application.yml的配置，传统架构的配置方式都一样</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818125153151.png" alt=""></p><p>生成编号代码：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818130515200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmtleXRv,size_16,color_FFFFFF,t_70" alt=""></p><p>TimeUnit部分源码：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818130705952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmtleXRv,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="三种方法比较："><a href="#三种方法比较：" class="headerlink" title="三种方法比较："></a>三种方法比较：</h2><p>第一、二种方法都会有个致命的BUG，就是在多并发的情况下，拿到同一个编号的几率很大，有人说加同步代码块synchronized啊，确实可行，但在访问量大的情况下，一直让用户等待，页面一直在loading，那就尴尬啦，让人怀疑我们的技术能力啊</p><p><code>注意：synchronized与负载均衡(分布式)没关系，synchronized只跟进程有关联</code></p><p>第三种方法，就避免了这个问题，因为Redis是单进程单线程模式，采用队列模式将并发访问变成串行访问<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818132312935.png" alt=""></p><p>如数据源无此Key，那初始值为1，每次获取后，自动加1供后续使用</p><p><code>注意：increment方法中value还可以为double类型</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190818134033441.png" alt=""></p><p>如数据源无此Key，那初始值为2.3，每次获取后，自动加2.3</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 编号生成 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于TaskScheduler和CronTask实现动态增删启停定时任务功能</title>
      <link href="/2020/11/01/%E5%9F%BA%E4%BA%8ETaskScheduler%E5%92%8CCronTask%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%A2%9E%E5%88%A0%E5%90%AF%E5%81%9C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD/"/>
      <url>/2020/11/01/%E5%9F%BA%E4%BA%8ETaskScheduler%E5%92%8CCronTask%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%A2%9E%E5%88%A0%E5%90%AF%E5%81%9C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>在spring boot项目中定时任务的开发方式：<br>一、可通过@EnableScheduling注解和@Scheduled注解实现<br>二、可通过SchedulingConfigurer接口来实现<br>三、集成Quartz框架实现<br><code>注意：第一和第二方式不能动态添加、删除、启动、停止任务。</code>在满足项目需求的情况下，尽量少的依赖其它框架，避免项目过于臃肿和复杂是最基本的开发原则。<br>查看 spring-context 这个 jar 包中 org.springframework.scheduling.ScheduledTaskRegistrar 这个类的源代码，发现可以通过改造这个类（主要是基于TaskScheduler和CronTask两个类来实现）就能实现动态增删启停定时任务功能。</p><h2 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scheduledTaskRegistrar-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Web 项目开发starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--校验--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok 简化插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--通用mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mysql数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">数据库连接地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">数据库名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">数据库密码</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># xml文件地址</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment"># 打印mybatis的执行sql语句</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="comment"># 开启驼峰自动转换</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="启动引导类"><a href="#启动引导类" class="headerlink" title="启动引导类"></a>启动引导类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> scheduledTaskApplication</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 启动引导类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/26 17:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.scheduledTask.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTaskApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ScheduledTaskApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@MapperScan：指定扫描的Mapper类的包的路径，简化直接在每个Mapper类上添加注解@Mapper</p><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><h3 id="配置线程池"><a href="#配置线程池" class="headerlink" title="配置线程池"></a>配置线程池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ScheduledConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 配置线程池</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 14:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulingConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskScheduler <span class="title">taskScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建任务调度线程池</span></span><br><span class="line">        ThreadPoolTaskScheduler taskScheduler = <span class="keyword">new</span> ThreadPoolTaskScheduler();</span><br><span class="line">        <span class="comment">// 初始化线程池数量</span></span><br><span class="line">        taskScheduler.setPoolSize(<span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 是否将取消后的任务，从队列中删除</span></span><br><span class="line">        taskScheduler.setRemoveOnCancelPolicy(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置线程名前缀</span></span><br><span class="line">        taskScheduler.setThreadNamePrefix(<span class="string">"ThreadPool-"</span>);</span><br><span class="line">        <span class="keyword">return</span> taskScheduler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行类"><a href="#执行类" class="headerlink" title="执行类"></a>执行类</h2><h3 id="同步处理定时任务类"><a href="#同步处理定时任务类" class="headerlink" title="同步处理定时任务类"></a>同步处理定时任务类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledFuture;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ScheduledTask</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 同步处理任务类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 15:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTask</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用volatile同步机制，处理定时任务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> ScheduledFuture future;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> cancel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 取消定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ScheduledFuture future = <span class="keyword">this</span>.future;</span><br><span class="line">        <span class="keyword">if</span> (future != <span class="keyword">null</span>) &#123;</span><br><span class="line">            future.cancel(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时任务注册类"><a href="#定时任务注册类" class="headerlink" title="定时任务注册类"></a>定时任务注册类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.TaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.config.CronTask;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> CronTaskRegistrar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 定时任务注册类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 17:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CronTaskRegistrar</span> <span class="keyword">implements</span> <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在多线程下，使用并发集合做为缓存，初始化容量16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Runnable, ScheduledTask&gt; scheduledTasks = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入定时任务接口</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskScheduler taskScheduler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> [task 定时任务, cronExpression cron表达式]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> addCronTask</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 添加定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCronTask</span><span class="params">(Runnable task, String cronExpression)</span> </span>&#123;</span><br><span class="line">        addCronTask(<span class="keyword">new</span> CronTask(task, cronExpression));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  addCronTask</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  注册定时任务，并将任务加入到缓存中</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  [cronTask] 定时任务对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCronTask</span><span class="params">(CronTask cronTask)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cronTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Runnable task = cronTask.getRunnable();</span><br><span class="line">            <span class="keyword">if</span> (scheduledTasks.containsKey(task)) &#123;</span><br><span class="line">                removeCronTask(task);</span><br><span class="line">            &#125;</span><br><span class="line">            scheduledTasks.put(task, scheduleCronTask(cronTask));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  removeCronTask</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  取消定时任务，并将缓存中的任务记录删除</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  [task] 线程对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCronTask</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        ScheduledTask scheduledTask = scheduledTasks.remove(task);</span><br><span class="line">        <span class="keyword">if</span> (scheduledTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">            scheduledTask.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  scheduleCronTask</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  调用线程池</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  [cronTask] 定时任务对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  com.scheduledtask.task.ScheduledTask</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScheduledTask <span class="title">scheduleCronTask</span><span class="params">(CronTask cronTask)</span> </span>&#123;</span><br><span class="line">        ScheduledTask scheduledTask = <span class="keyword">new</span> ScheduledTask();</span><br><span class="line">        <span class="comment">// 指定一个触发器执行定时任务，并返回执行结果</span></span><br><span class="line">        scheduledTask.future = taskScheduler.schedule(cronTask.getRunnable(), cronTask.getTrigger());</span><br><span class="line">        <span class="keyword">return</span> scheduledTask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@method</span>  destroy</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span>  销毁所有定时任务，并将缓存清除</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  void</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ScheduledTask task : scheduledTasks.values()) &#123;</span><br><span class="line">            task.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">        scheduledTasks.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处用Map来模拟缓存，当然可以换教专业的缓存组件，如redis等等</p><h3 id="初始化定时任务类"><a href="#初始化定时任务类" class="headerlink" title="初始化定时任务类"></a>初始化定时任务类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskRunner</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 初始化定时任务类</span></span><br><span class="line"><span class="comment"> *              如有多个组件实现了CommandLineRunner接口来实现启动加载功能，Order注解可实现先后加载顺序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 14:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// @Order(value = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CronTaskRegistrar cronTaskRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 重新开启线程，避免影响主程序的启动</span></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 查找任务状态为正常的任务数据</span></span><br><span class="line">                List&lt;Task&gt; taskList = taskService.getTaskListByStatus(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!CollectionUtils.isEmpty(taskList)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">                        <span class="comment">// 执行定时任务</span></span><br><span class="line">                        SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">                        <span class="comment">// 注册任务数据</span></span><br><span class="line">                        cronTaskRegistrar.addCronTask(runnable, task.getCronExpression());</span><br><span class="line">                    &#125;</span><br><span class="line">                    log.info(<span class="string">"定时任务加载完毕......"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：Spring Boot中提供了CommandLineRunner(实现启动初始化功能)和ApplicationRunner(引导类)两个接口来实现容器启动<br><code>CommandLineRunner的执行是整个应用启动的一部分，避免CommandLineRunner启动中抛出异常（java.lang.IllegalStateException: Failed to execute CommandLineRunner），直接影响主程序的启动，从而此处重新开启一个线程，让CommandLineRunner和主线程相互独立</code>，此时抛出异常并不会影响到主线程，防止踩坑</p><h3 id="定时任务执行类"><a href="#定时任务执行类" class="headerlink" title="定时任务执行类"></a>定时任务执行类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.util.SpringContextUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ReflectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> SchedulingRunnable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 反射机制执行定时任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 16:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulingRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="keyword">private</span> String params;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"定时任务开始执行 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;"</span>, beanName, methodName, params);</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object target = SpringContextUtils.getBean(beanName);</span><br><span class="line"></span><br><span class="line">            Method method = StringUtils.isEmpty(params) ?</span><br><span class="line">                    target.getClass().getDeclaredMethod(methodName) :</span><br><span class="line">                    target.getClass().getDeclaredMethod(methodName, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            ReflectionUtils.makeAccessible(method);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(params)) &#123;</span><br><span class="line">                method.invoke(target);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                method.invoke(target, params);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">"定时任务异常 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;"</span>, beanName, methodName, params);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis() - startTime;</span><br><span class="line">        log.info(<span class="string">"定时任务执行结束 - bean：&#123;&#125;，方法：&#123;&#125;，参数：&#123;&#125;，耗时：&#123;&#125;"</span>, beanName, methodName, params, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        SchedulingRunnable that = (SchedulingRunnable) o;</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> beanName.equals(that.beanName) &amp;&amp;</span><br><span class="line">                    methodName.equals(that.methodName) &amp;&amp;</span><br><span class="line">                    that.params == <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanName.equals(that.beanName) &amp;&amp;</span><br><span class="line">                methodName.equals(that.methodName) &amp;&amp;</span><br><span class="line">                params.equals(that.params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (params == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(beanName, methodName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(beanName, methodName, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="获取实例对象"><a href="#获取实例对象" class="headerlink" title="获取实例对象"></a>获取实例对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> SpringContextUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 获取当前上下文对象工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/27 16:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtils</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 应用上下文对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        SpringContextUtils.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span>  getBean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>  获取当前上下文对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [name]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  java.lang.Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是获取定时任务业务逻辑类注解@Component上配置的实例名(对应数据库中的beanName)</p><h2 id="实体对象与sql脚本"><a href="#实体对象与sql脚本" class="headerlink" title="实体对象与sql脚本"></a>实体对象与sql脚本</h2><h3 id="任务实体类"><a href="#任务实体类" class="headerlink" title="任务实体类"></a>任务实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.pojo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> Task</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 定时任务实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 10:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//全参构造</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">// 无参构造</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"task"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"beanName"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"对象名不能为空！"</span>)</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"methodName"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"方法名不能为空！"</span>)</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"methodParams"</span>)</span><br><span class="line">    <span class="keyword">private</span> String methodParams;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"cronExpression"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"cron表达式不能为空！"</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(message = <span class="string">"cron表达式错误！"</span>, regexp = <span class="string">"^\\s*($|#|\\w+\\s*=|(\\?|\\*|(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?(?:,(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?)*)\\s+(\\?|\\*|(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?(?:,(?:[0-5]?\\d)(?:(?:-|\\/|\\,)(?:[0-5]?\\d))?)*)\\s+(\\?|\\*|(?:[01]?\\d|2[0-3])(?:(?:-|\\/|\\,)(?:[01]?\\d|2[0-3]))?(?:,(?:[01]?\\d|2[0-3])(?:(?:-|\\/|\\,)(?:[01]?\\d|2[0-3]))?)*)\\s+(\\?|\\*|(?:0?[1-9]|[12]\\d|3[01])(?:(?:-|\\/|\\,)(?:0?[1-9]|[12]\\d|3[01]))?(?:,(?:0?[1-9]|[12]\\d|3[01])(?:(?:-|\\/|\\,)(?:0?[1-9]|[12]\\d|3[01]))?)*)\\s+(\\?|\\*|(?:[1-9]|1[012])(?:(?:-|\\/|\\,)(?:[1-9]|1[012]))?(?:L|W)?(?:,(?:[1-9]|1[012])(?:(?:-|\\/|\\,)(?:[1-9]|1[012]))?(?:L|W)?)*|\\?|\\*|(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(?:(?:-)(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))?(?:,(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(?:(?:-)(?:JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))?)*)\\s+(\\?|\\*|(?:[0-6])(?:(?:-|\\/|\\,|#)(?:[0-6]))?(?:L)?(?:,(?:[0-6])(?:(?:-|\\/|\\,|#)(?:[0-6]))?(?:L)?)*|\\?|\\*|(?:MON|TUE|WED|THU|FRI|SAT|SUN)(?:(?:-)(?:MON|TUE|WED|THU|FRI|SAT|SUN))?(?:,(?:MON|TUE|WED|THU|FRI|SAT|SUN)(?:(?:-)(?:MON|TUE|WED|THU|FRI|SAT|SUN))?)*)(|\\s)+(\\?|\\*|(?:|\\d&#123;4&#125;)(?:(?:-|\\/|\\,)(?:|\\d&#123;4&#125;))?(?:,(?:|\\d&#123;4&#125;)(?:(?:-|\\/|\\,)(?:|\\d&#123;4&#125;))?)*))$"</span>)</span><br><span class="line">    <span class="keyword">private</span> String cronExpression;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"jobStatus"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer jobStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"createTime"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updateTime"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创表语句"><a href="#创表语句" class="headerlink" title="创表语句"></a>创表语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`task`</span> (</span><br><span class="line">      <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">      <span class="string">`beanName`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'任务名称'</span>,</span><br><span class="line">      <span class="string">`methodName`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'方法名称'</span>,</span><br><span class="line">      <span class="string">`methodParams`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'方法参数'</span>,</span><br><span class="line">      <span class="string">`cronExpression`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'cron表达式'</span>,</span><br><span class="line">      <span class="string">`jobStatus`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'任务状态 0暂停 1正常'</span>,</span><br><span class="line">      <span class="string">`remark`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">      <span class="string">`createTime`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">      <span class="string">`updateTime`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">      PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">      <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`beanName`</span> (<span class="string">`beanName`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci <span class="keyword">COMMENT</span>=<span class="string">'定时任务表'</span>;</span><br></pre></td></tr></table></figure><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.mapper.TaskMapper;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 业务逻辑层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 15:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TaskService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskMapper taskMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertTask</span><span class="params">(Task task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.insertSelective(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Task&gt; <span class="title">getTaskListByStatus</span><span class="params">(Integer jobStatus)</span> </span>&#123;</span><br><span class="line">        Example example = <span class="keyword">new</span> Example(Task<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Example.Criteria criteria = example.createCriteria();</span><br><span class="line">        criteria.andEqualTo(<span class="string">"jobStatus"</span>, jobStatus);</span><br><span class="line">        <span class="keyword">return</span> taskMapper.selectByExample(example);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task <span class="title">findTaskByJobId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteTaskByJobId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.deleteByPrimaryKey(id) &gt; <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateTask</span><span class="params">(Task task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> taskMapper.updateByPrimaryKeySelective(task) &gt; <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据连接"><a href="#数据连接" class="headerlink" title="数据连接"></a>数据连接</h2><h3 id="数据层类"><a href="#数据层类" class="headerlink" title="数据层类"></a>数据层类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 数据连接层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 11:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TaskMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Task</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：因为继承Mapper类，使用通用mapper插件做数据层处理，基本的CRUD单表操作方法都已有</code></p><h3 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.scheduledtask.mapper.TaskMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskStatus</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 任务状态枚举</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 11:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">// 全参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TaskStatus &#123;</span><br><span class="line">    SUSPEND(<span class="string">"暂停"</span>, <span class="number">0</span>),</span><br><span class="line">    NORMAL(<span class="string">"正常"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">desc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定时任务业务逻辑类"><a href="#定时任务业务逻辑类" class="headerlink" title="定时任务业务逻辑类"></a>定时任务业务逻辑类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskOne</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 定时任务业务逻辑类</span></span><br><span class="line"><span class="comment"> *              Component中的value对应数据库的beanName字段</span></span><br><span class="line"><span class="comment"> *              方法名对应数据库的methodName字段</span></span><br><span class="line"><span class="comment"> *              参数对应数据库的methodParams字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/30 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"TaskOne"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskOne</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">taskWithParams</span><span class="params">(String params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   此处写有参定时任务的业务逻辑</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">taskNoParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *   此处写无参定时任务的业务逻辑</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层类"><a href="#控制层类" class="headerlink" title="控制层类"></a>控制层类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.enums.TaskStatus;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.pojo.Task;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.task.CronTaskRegistrar;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.task.SchedulingRunnable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> TaskController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 控制层类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/28 16:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CronTaskRegistrar cronTaskRegistrar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/addTask"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addTask</span><span class="params">(@Valid Task task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (taskService.insertTask(task) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"新增失败！"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (task.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.addCronTask(runnable, task.getCronExpression());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"新增成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/deleteTask/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteTask</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">        Task task = taskService.findTaskByJobId(id);</span><br><span class="line">        <span class="keyword">if</span> (!taskService.deleteTaskByJobId(id)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"删除失败！"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (task.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.removeCronTask(runnable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"删除成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/updateTask"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateTask</span><span class="params">(Task taskNew)</span> </span>&#123;</span><br><span class="line">        Task taskOld = taskService.findTaskByJobId(taskNew.getId());</span><br><span class="line">        <span class="keyword">if</span> (taskService.updateTask(taskNew)) &#123;</span><br><span class="line">            <span class="comment">// 先取消原有的定时任务，并删除缓存</span></span><br><span class="line">            <span class="keyword">if</span> (taskOld.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                <span class="comment">// 链式编程，使用了lombok的注解@Accessors</span></span><br><span class="line">                SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable()</span><br><span class="line">                        .setBeanName(taskOld.getBeanName())</span><br><span class="line">                        .setMethodName(taskOld.getMethodName())</span><br><span class="line">                        .setParams(taskOld.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.removeCronTask(runnable);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 新增定时任务，并添加到缓存</span></span><br><span class="line">            <span class="keyword">if</span> (taskNew.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">                SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(taskNew.getBeanName(), taskNew.getMethodName(), taskNew.getMethodParams());</span><br><span class="line">                cronTaskRegistrar.addCronTask(runnable, taskNew.getCronExpression());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"更新失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"更新成功！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改任务状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/updateTaskStatus/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateTaskStatus</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">        Task task = taskService.findTaskByJobId(id);</span><br><span class="line">        <span class="comment">// 如原先是启动状态，便设置为停止，并从缓存中删除，反之亦然</span></span><br><span class="line">        <span class="keyword">if</span> (task.getJobStatus().equals(TaskStatus.NORMAL.value())) &#123;</span><br><span class="line">            SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">            cronTaskRegistrar.removeCronTask(runnable);</span><br><span class="line">            task.setJobStatus(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> taskService.updateTask(task) ? <span class="string">"修改成功！"</span> : <span class="string">"修改失败！"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            SchedulingRunnable runnable = <span class="keyword">new</span> SchedulingRunnable(task.getBeanName(), task.getMethodName(), task.getMethodParams());</span><br><span class="line">            cronTaskRegistrar.addCronTask(runnable, task.getCronExpression());</span><br><span class="line">            task.setJobStatus(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> taskService.updateTask(task) ? <span class="string">"修改成功！"</span> : <span class="string">"修改失败！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：此处用到的校验注解是在org.springframework.validation包下的，如只在方法参数上加@Validated校验注解无效的话，则在类上加@Validated注解，并在方法参数上加@Valid注解</code></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="启动加载"><a href="#启动加载" class="headerlink" title="启动加载"></a>启动加载</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/11/01/zVoHO4Wfu2y69AJ.png" alt="项目启动"></p><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scheduledtask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.controller.TaskController;</span><br><span class="line"><span class="keyword">import</span> com.scheduledtask.service.TaskService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nicky</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@className</span> ScheduledTaskTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> goitman.cn | blog.csdn.net/minkeyto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= ScheduledTaskApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ScheduledTaskTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskController taskController;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTaskController</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/*      Task task = new Task();</span></span><br><span class="line"><span class="comment">        task.setBeanName("TaskOne");</span></span><br><span class="line"><span class="comment">        task.setMethodName("taskWithParams");</span></span><br><span class="line"><span class="comment">        task.setMethodParams("111");</span></span><br><span class="line"><span class="comment">        task.setCronExpression("0/5 * * * * ?");</span></span><br><span class="line"><span class="comment">        task.setJobStatus(1);</span></span><br><span class="line"><span class="comment">        task.setRemark("111");</span></span><br><span class="line"><span class="comment">        task.setCreateTime(new Date());</span></span><br><span class="line"><span class="comment">        task.setUpdateTime(new Date());</span></span><br><span class="line"><span class="comment">        String msg = taskController.addTask(task);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String msg = taskController.deleteTask(2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*      Task task = new Task();</span></span><br><span class="line"><span class="comment">        task.setId(50);</span></span><br><span class="line"><span class="comment">        task.setBeanName("TaskOne");</span></span><br><span class="line"><span class="comment">        task.setMethodName("taskNoParams");</span></span><br><span class="line"><span class="comment">        task.setMethodParams("");</span></span><br><span class="line"><span class="comment">        task.setCronExpression("0/5 * * * * ?");</span></span><br><span class="line"><span class="comment">        task.setJobStatus(1);</span></span><br><span class="line"><span class="comment">        task.setRemark("111");</span></span><br><span class="line"><span class="comment">        task.setCreateTime(new Date());</span></span><br><span class="line"><span class="comment">        task.setUpdateTime(new Date());</span></span><br><span class="line"><span class="comment">        String msg = taskController.updateTask(task);*/</span></span><br><span class="line"></span><br><span class="line">        String msg = taskController.updateTaskStatus(<span class="number">50</span>);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>源码地址：<a href="https://github.com/wangdaicong/spring-boot-project/tree/master/scheduledTaskRegistrar-demo" target="_blank" rel="noopener">https://github.com/wangdaicong/spring-boot-project/tree/master/scheduledTaskRegistrar-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 定时任务 </tag>
            
            <tag> 通用mapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>screw (螺丝钉) 数据库表结构文档生成工具</title>
      <link href="/2020/07/15/screw%20(%E8%9E%BA%E4%B8%9D%E9%92%89)%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/07/15/screw%20(%E8%9E%BA%E4%B8%9D%E9%92%89)%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E6%96%87%E6%A1%A3%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>　　数据库文档也是交付的重要内容，本文的工具可以帮助大家快速生成相应文档，并支持多种数据库<br>      　　在企业级开发中、我们经常会有编写数据库表结构文档的时间付出，关于数据库表结构文档状态：要么没有、要么有、但都是手写、后期运维开发，需要手动进行维护到文档中，很是繁琐、如果忘记一次维护、就会给以后工作造成很多困扰、无形中制造了很多坑留给自己和后人。</p><h2 id="screw-特点"><a href="#screw-特点" class="headerlink" title="screw 特点"></a>screw 特点</h2><ul><li>简洁、轻量、设计良好。不需要 powerdesigner 这种重量的建模工具 多数据库支持 。</li><li>支持市面常见的数据库类型MySQL、Oracle、SqlServer</li><li>多种格式文档。支持 MD、HTML、WORD 格式</li><li>灵活扩展。支持用户自定义模板和展示样式</li></ul><h2 id="数据库支持"><a href="#数据库支持" class="headerlink" title="数据库支持"></a>数据库支持</h2><ul><li>MySQL</li><li>MariaDB</li><li>TIDB</li><li>Oracle</li><li>SqlServer</li><li>PostgreSQL</li><li>Cache DB</li></ul><h2 id="文档生成支持"><a href="#文档生成支持" class="headerlink" title="文档生成支持"></a>文档生成支持</h2><ul><li>html</li><li>word</li><li>markdwon</li></ul><h2 id="文档截图"><a href="#文档截图" class="headerlink" title="文档截图"></a>文档截图</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyMi8xNjE0MTRfNzRjZDBiNjhfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyMi8xNjE3MjNfNmRhNThjNDFfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><h3 id="word"><a href="#word" class="headerlink" title="word"></a>word</h3><p> <img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyNS8yMDA5NDZfMWRjMDcxN2ZfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><h3 id="markdwon"><a href="#markdwon" class="headerlink" title="markdwon"></a>markdwon</h3><p> <img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyNS8yMTQ3NDlfN2IxNWQ4YmRfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"><br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMuZ2l0ZWUuY29tL3VwbG9hZHMvaW1hZ2VzLzIwMjAvMDYyNS8yMTUwMDZfMzYwMWUxMzVfMTQwNzYwNS5wbmc?x-oss-process=image/format,png" alt="此处输入图片的描述"></p><h2 id="SpringBoot整合screw生成数据库文档"><a href="#SpringBoot整合screw生成数据库文档" class="headerlink" title="SpringBoot整合screw生成数据库文档"></a>SpringBoot整合screw生成数据库文档</h2><h3 id="代码生成（推荐）"><a href="#代码生成（推荐）" class="headerlink" title="代码生成（推荐）"></a>代码生成（推荐）</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--freemarker模版--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--screw依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试类代码"><a href="#测试类代码" class="headerlink" title="测试类代码"></a>测试类代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrewApplicationTests</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数据源：HikariCP 线程池, SpringBoot 2.0开始内置了HikariCP，2.0之前的版本需要引入依赖</span></span><br><span class="line">        HikariConfig hikariConfig = <span class="keyword">new</span> HikariConfig();</span><br><span class="line">        <span class="comment">// com.mysql.jdbc.Driver MySQL5驱动；com.mysql.cj.jdbc.Driver MySQL6之后的驱动</span></span><br><span class="line">        hikariConfig.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        hikariConfig.setJdbcUrl(<span class="string">"jdbc:mysql://127.0.0.1:3306/数据库名"</span>);</span><br><span class="line">        hikariConfig.setUsername(<span class="string">"数据库帐号"</span>);</span><br><span class="line">        hikariConfig.setPassword(<span class="string">"数据可密码"</span>);</span><br><span class="line">        <span class="comment">//设置可以获取tables remarks信息</span></span><br><span class="line">        hikariConfig.addDataSourceProperty(<span class="string">"useInformationSchema"</span>, <span class="string">"true"</span>);</span><br><span class="line">        hikariConfig.setMinimumIdle(<span class="number">2</span>);</span><br><span class="line">        hikariConfig.setMaximumPoolSize(<span class="number">5</span>);</span><br><span class="line">        DataSource dataSource = <span class="keyword">new</span> HikariDataSource(hikariConfig);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 1、生成文件配置</span></span><br><span class="line">        EngineConfig engineConfig = EngineConfig.builder()</span><br><span class="line">                <span class="comment">//生成文件路径(改成自己的生成路径)</span></span><br><span class="line">                .fileOutputDir(<span class="string">"/Users/用户/Desktop"</span>)</span><br><span class="line">                <span class="comment">//生成后是否立即打开目录</span></span><br><span class="line">                .openOutputDir(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">//文件类型 有HTML、WORD、MD三种枚举选择</span></span><br><span class="line">                .fileType(EngineFileType.WORD)</span><br><span class="line">                <span class="comment">//生成模板实现</span></span><br><span class="line">                .produceType(EngineTemplateType.freemarker).build();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 忽略表名（可选）</span></span><br><span class="line">        List&lt;String&gt; ignoreTableName = Arrays.asList(<span class="string">"aa"</span>, <span class="string">"test_group"</span>);</span><br><span class="line">        <span class="comment">// 忽略表前缀（可选）</span></span><br><span class="line">        List&lt;String&gt; ignorePrefix = Collections.singletonList(<span class="string">"czb_"</span>);</span><br><span class="line">        <span class="comment">// 忽略表后缀（可选）</span></span><br><span class="line">        List&lt;String&gt; ignoreSuffix = Arrays.asList(<span class="string">"_test"</span>, <span class="string">"_test1"</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 2、配置想要忽略的表（可选）</span></span><br><span class="line">        ProcessConfig processConfig = ProcessConfig.builder()</span><br><span class="line">                .ignoreTableName(ignoreTableName)</span><br><span class="line">                .ignoreTablePrefix(ignorePrefix)</span><br><span class="line">                .ignoreTableSuffix(ignoreSuffix)</span><br><span class="line">                .build();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 3、生成文档配置（包含以下自定义版本号、标题、描述（数据库名 + 描述 = 文件名）等配置连接）</span></span><br><span class="line">        Configuration config = Configuration.builder()</span><br><span class="line">                .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">                .title(<span class="string">"数据库文档"</span>)</span><br><span class="line">                .description(<span class="string">"数据库设计文档生成"</span>)</span><br><span class="line">                .dataSource(dataSource)</span><br><span class="line">                .engineConfig(engineConfig)</span><br><span class="line">                .produceConfig(processConfig).build();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 4、执行生成</span></span><br><span class="line">        <span class="keyword">new</span> DocumentationExecute(config).execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动run，运行测试类或contextLoads方法即可</p><img  src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200715131215704.png" align='left'/><h3 id="Maven-插件生成"><a href="#Maven-插件生成" class="headerlink" title="Maven 插件生成"></a>Maven 插件生成</h3><p>在pom.xml文件中加入如下配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- HikariCP --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mysql driver--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.48<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--username--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">username</span>&gt;</span>数据库帐号<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--password--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">password</span>&gt;</span>数据库密码<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver  com.mysql.jdbc.Driver MySQL5驱动；com.mysql.cj.jdbc.Driver MySQL6之后的驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--jdbc url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdbcUrl</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/数据库名<span class="tag">&lt;/<span class="name">jdbcUrl</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成文件类型 HTML、WORD、MD三种选择--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileType</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">fileType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--文件输出目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileOutputDir</span>&gt;</span>E:<span class="tag">&lt;/<span class="name">fileOutputDir</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--打开文件输出目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">openOutputDir</span>&gt;</span>true<span class="tag">&lt;/<span class="name">openOutputDir</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成模板--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">produceType</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">produceType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--描述--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>数据库文档生成<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--版本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据库文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后运行maven插件生成即可</p><img  src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200715130912560.png" align='left'/><blockquote><p>screw 码云地址：<a href="https://gitee.com/leshalv/screw" target="_blank" rel="noopener">https://gitee.com/leshalv/screw</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 辅助工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 文档生成 </tag>
            
            <tag> screw </tag>
            
            <tag> mysql </tag>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析 VO、DTO、DO、PO 的概念、区别和用处！</title>
      <link href="/2020/07/13/%E6%B5%85%E6%9E%90%20VO%E3%80%81DTO%E3%80%81DO%E3%80%81PO%20%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E5%A4%84%EF%BC%81/"/>
      <url>/2020/07/13/%E6%B5%85%E6%9E%90%20VO%E3%80%81DTO%E3%80%81DO%E3%80%81PO%20%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E5%A4%84%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>本篇文章主要讨论一下我们经常会用到的一些对象：VO、DTO、DO和PO。<br>由于不同的项目和开发人员有不同的命名习惯，这里我首先对上述的概念进行一个简单描述，名字只是个标识，我们重点关注其概念：</p><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p><strong>VO（View Object）：</strong>视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p><p><strong>DTO（Data Transfer Object）</strong>：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p><p><strong>DO（Domain Object）</strong>：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。</p><p><strong>PO（Persistent Object）</strong>：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</p><h2 id="模型："><a href="#模型：" class="headerlink" title="模型："></a>模型：</h2><p>下面以一个时序图建立简单模型来描述上述对象在三层架构应用中的位置 </p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/13/82WpYBrICDsPc4M.png" alt="avatar"></p><ul><li>用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。</li><li>展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。</li><li>服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。</li><li>服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久化方法，把PO传递给它，完成持久化操作。</li><li>对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。</li></ul><h2 id="VO与DTO的区别"><a href="#VO与DTO的区别" class="headerlink" title="VO与DTO的区别"></a>VO与DTO的区别</h2><p>　　大家可能会有个疑问（在笔者参与的项目中，很多程序员也有相同的疑惑）：既然DTO是展示层与服务层之间传递数据的对象，为什么还需要一个VO呢？对！对于绝大部分的应用场景来说，DTO和VO的属性值基本是一致的，而且他们通常都是POJO，因此没必要多此一举，但不要忘记这是实现层面的思维，对于设计层面来说，概念上还是应该存在VO和DTO，因为两者有着本质的区别，DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。</p><p>　　用一个例子来说明可能会比较容易理解：例如服务层有一个getUser的方法返回一个系统用户，其中有一个属性是gender(性别)，对于服务层来说，它只从语义上定义：1-男性，2-女性，0-未指定，而对于展示层来说，它可能需要用“帅哥”代表男性，用“美女”代表女性，用“秘密”代表未指定。说到这里，可能你还会反驳，在服务层直接就返回“帅哥美女”不就行了吗？对于大部分应用来说，这不是问题，但设想一下，如果需求允许客户可以定制风格，而不同风格对于“性别”的表现方式不一样，又或者这个服务同时供多个客户端使用（不同门户），而不同的客户端对于表现层的要求有所不同，那么，问题就来了。再者，回到设计层面上分析，从职责单一原则来看，服务层只负责业务，与具体的表现形式无关，因此，它返回的DTO，不应该出现与表现形式的耦合。</p><p>　　理论归理论，这到底还是分析设计层面的思维，是否在实现层面必须这样做呢？一刀切的做法往往会得不偿失，下面我马上会分析应用中如何做出正确的选择。</p><h2 id="VO与DTO的应用"><a href="#VO与DTO的应用" class="headerlink" title="VO与DTO的应用"></a>VO与DTO的应用</h2><p>　　上面只是用了一个简单的例子来说明VO与DTO在概念上的区别，本节将会告诉你如何在应用中做出正确的选择。</p><p>　　在以下才场景中，我们可以考虑把VO与DTO二合为一（注意：是实现层面）：</p><ul><li>当需求非常清晰稳定，而且客户端很明确只有一个的时候，没有必要把VO和DTO区分开来，这时候VO可以退隐，用一个DTO即可，为什么是VO退隐而不是DTO？回到设计层面，服务层的职责依然不应该与展示层耦合，所以，对于前面的例子，你很容易理解，DTO对于“性别”来说，依然不能用“帅哥美女”，这个转换应该依赖于页面的脚本（如JavaScript）或其他机制（JSTL、EL、CSS）</li><li>即使客户端可以进行定制，或者存在多个不同的客户端，如果客户端能够用某种技术（脚本或其他机制）实现转换，同样可以让VO退隐</li></ul><br>　　以下场景需要优先考虑VO、DTO并存：<ul><li>上述场景的反面场景</li><li>因为某种技术原因，比如某个框架（如Flex）提供自动把POJO转换为UI中某些Field时，可以考虑在实现层面定义出VO，这个权衡完全取决于使用框架的自动转换能力带来的开发和维护效率提升与设计多一个VO所多做的事情带来的开发和维护效率的下降之间的比对。</li><li>如果页面出现一个“大视图”，而组成这个大视图的所有数据需要调用多个服务，返回多个DTO来组装（当然，这同样可以通过服务层提供一次性返回一个大视图的DTO来取代，但在服务层提供一个这样的方法是否合适，需要在设计层面进行权衡）。</li></ul><h2 id="DTO与DO的区别"><a href="#DTO与DO的区别" class="headerlink" title="DTO与DO的区别"></a>DTO与DO的区别</h2><p>　　首先是概念上的区别，DTO是展示层和服务层之间的数据传输对象（可以认为是两者之间的协议），而DO是对现实世界各种业务角色的抽象，这就引出了两者在数据上的区别，例如UserInfo和User（对于DTO和DO的命名规则，请参见笔者前面的一篇博文），对于一个getUser方法来说，本质上它永远不应该返回用户的密码，因此UserInfo至少比User少一个password的数据。而在领域驱动设计中，正如第一篇系列文章所说，DO不是简单的POJO，它具有领域业务逻辑。</p><h2 id="DTO与DO的应用"><a href="#DTO与DO的应用" class="headerlink" title="DTO与DO的应用"></a>DTO与DO的应用</h2><p>　　从上一节的例子中，细心的读者可能会发现问题：既然getUser方法返回的UserInfo不应该包含password，那么就不应该存在password这个属性定义，但如果同时有一个createUser的方法，传入的UserInfo需要包含用户的password，怎么办？在设计层面，展示层向服务层传递的DTO与服务层返回给展示层的DTO在概念上是不同的，但在实现层面，我们通常很少会这样做（定义两个UserInfo，甚至更多），因为这样做并不见得很明智，我们完全可以设计一个完全兼容的DTO，在服务层接收数据的时候，不该由展示层设置的属性（如订单的总价应该由其单价、数量、折扣等决定），无论展示层是否设置，服务层都一概忽略，而在服务层返回数据时，不该返回的数据（如用户密码），就不设置对应的属性。</p><p>　　对于DO来说，还有一点需要说明：为什么不在服务层中直接返回DO呢？这样可以省去DTO的编码和转换工作，原因如下：</p><ul><li>两者在本质上的区别可能导致彼此并不一一对应，一个DTO可能对应多个DO，反之亦然，甚至两者存在多对多的关系。</li><li>DO具有一些不应该让展示层知道的数据</li><li>DO具有业务方法，如果直接把DO传递给展示层，展示层的代码就可以绕过服务层直接调用它不应该访问的操作，对于基于AOP拦截服务层来进行访问控制的机制来说，这问题尤为突出，而在展示层调用DO的业务方法也会因为事务的问题，让事务难以控制。</li><li>对于某些ORM框架（如Hibernate）来说，通常会使用“延迟加载”技术，如果直接把DO暴露给展示层，对于大部分情况，展示层不在事务范围之内（Open session in view在大部分情况下不是一种值得推崇的设计），如果其尝试在Session关闭的情况下获取一个未加载的关联对象，会出现运行时异常（对于Hibernate来说，就是LazyInitiliaztionException）。</li><li>从设计层面来说，展示层依赖于服务层，服务层依赖于领域层，如果把DO暴露出去，就会导致展示层直接依赖于领域层，这虽然依然是单向依赖，但这种跨层依赖会导致不必要的耦合。</li></ul><br>　　对于DTO来说，也有一点必须进行说明，就是DTO应该是一个“扁平的二维对象”，举个例子来说明：如果User会关联若干个其他实体（例如Address、Account、Region等），那么getUser()返回的UserInfo，是否就需要把其关联的对象的DTO都一并返回呢？如果这样的话，必然导致数据传输量的大增，对于分布式应用来说，由于涉及数据在网络上的传输、序列化和反序列化，这种设计更不可接受。如果getUser除了要返回User的基本信息外，还需要返回一个AccountId、AccountName、RegionId、RegionName，那么，请把这些属性定义到UserInfo中，把一个“立体”的对象树“压扁”成一个“扁平的二维对象”，笔者目前参与的项目是一个分布式系统，该系统不管三七二十一，把一个对象的所有关联对象都转换为相同结构的DTO对象树并返回，导致性能非常的慢。<h2 id="DO与PO的区别"><a href="#DO与PO的区别" class="headerlink" title="DO与PO的区别"></a>DO与PO的区别</h2><p>　　DO和PO在绝大部分情况下是一一对应的，PO是只含有get/set方法的POJO，但某些场景还是能反映出两者在概念上存在本质的区别：</p><ul><li>DO在某些场景下不需要进行显式的持久化，例如利用策略模式设计的商品折扣策略，会衍生出折扣策略的接口和不同折扣策略实现类，这些折扣策略实现类可以算是DO，但它们只驻留在静态内存，不需要持久化到持久层，因此，这类DO是不存在对应的PO的。</li><li>同样的道理，某些场景下，PO也没有对应的DO，例如老师Teacher和学生Student存在多对多的关系，在关系数据库中，这种关系需要表现为一个中间表，也就对应有一个TeacherAndStudentPO的PO，但这个PO在业务领域没有任何现实的意义，它完全不能与任何DO对应上。这里要特别声明，并不是所有多对多关系都没有业务含义，这跟具体业务场景有关，例如：两个PO之间的关系会影响具体业务，并且这种关系存在多种类型，那么这种多对多关系也应该表现为一个DO，又如：“角色”与“资源”之间存在多对多关系，而这种关系很明显会表现为一个DO——“权限”。</li><li>某些情况下，为了某种持久化策略或者性能的考虑，一个PO可能对应多个DO，反之亦然。例如客户Customer有其联系信息Contacts，这里是两个一对一关系的DO，但可能出于性能的考虑（极端情况，权作举例），为了减少数据库的连接查询操作，把Customer和Contacts两个DO数据合并到一张数据表中。反过来，如果一本图书Book，有一个属性是封面cover，但该属性是一副图片的二进制数据，而某些查询操作不希望把cover一并加载，从而减轻磁盘IO开销，同时假设ORM框架不支持属性级别的延迟加载，那么就需要考虑把cover独立到一张数据表中去，这样就形成一个DO对应对个PO的情况。</li><li>PO的某些属性值对于DO没有任何意义，这些属性值可能是为了解决某些持久化策略而存在的数据，例如为了实现“乐观锁”，PO存在一个version的属性，这个version对于DO来说是没有任何业务意义的，它不应该在DO中存在。同理，DO中也可能存在不需要持久化的属性。</li></ul><h2 id="DO与PO的应用"><a href="#DO与PO的应用" class="headerlink" title="DO与PO的应用"></a>DO与PO的应用</h2><p>　　由于ORM框架的功能非常强大而大行其道，而且JavaEE也推出了JPA规范，现在的业务应用开发，基本上不需要区分DO与PO，PO完全可以通过JPA，Hibernate Annotations/hbm隐藏在DO之中。虽然如此，但有些问题我们还必须注意：</p><ul><li>对于DO中不需要持久化的属性，需要通过ORM显式的声明，如：在JPA中，可以利用@Transient声明。</li><li>对于PO中为了某种持久化策略而存在的属性，例如version，由于DO、PO合并了，必须在DO中声明，但由于这个属性对DO是没有任何业务意义的，需要让该属性对外隐藏起来，最常见的做法是把该属性的get/set方法私有化，甚至不提供get/set方法，但对于Hibernate来说，这需要特别注意，由于Hibernate从数据库读取数据转换为DO时，是利用反射机制先调用DO的空参数构造函数构造DO实例，然后再利用JavaBean的规范反射出set方法来为每个属性设值，如果不显式声明set方法，或把set方法设置为private，都会导致Hibernate无法初始化DO，从而出现运行时异常，可行的做法是把属性的set方法设置为protected。</li><li>对于一个DO对应多个PO，或者一个PO对应多个DO的场景，以及属性级别的延迟加载，Hibernate都提供了很好的支持，请参考Hibnate的相关资料。</li></ul><br>　　到目前为止，相信大家都已经比较清晰的了解VO、DTO、DO、PO的概念、区别和实际应用了。通过上面的详细分析，我们还可以总结出一个原则：分析设计层面和实现层面完全是两个独立的层面，即使实现层面通过某种技术手段可以把两个完全独立的概念合二为一，在分析设计层面，我们仍然（至少在头脑中）需要把概念上独立的东西清晰的区分开来，这个原则对于做好分析设计非常重要（工具越先进，往往会让我们越麻木）。<br>　　<blockquote><p>作者：Johnny.Liang<br>来源：blogjava.net/johnnylzb/archive/2010/05/27/321968.html</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VO </tag>
            
            <tag> DTO </tag>
            
            <tag> DO </tag>
            
            <tag> PO </tag>
            
            <tag> 领域驱动 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
